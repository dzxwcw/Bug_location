<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="ARIES">
  <bug id="105" opendate="2010-1-5 00:00:00" fixdate="2010-1-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The JMX bundle does not export correctly the jmx api</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="106" opendate="2010-1-5 00:00:00" fixdate="2010-1-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The JMX bundle should work even if all compendium specs are not available</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.useradmin.UserAdminMBeanHandler.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.permissionadmin.PermissionAdminMBeanHandler.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.agent.JMXAgentImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="1089" opendate="2013-7-11 00:00:00" fixdate="2013-7-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Handlers map in NamespaceHandlerSetImpl is unsafe.</summary>
      <description>The NamespaceHandlerSetImpl class uses an unprotected map to store handlers. The map is accessible to multiple threads. For example, the thread delivering the NamespaceHandler service registration event will store the handler in the map and eventually call BlueprintContainerImpl.schedule, which spawns off another thread that will look for a handler in the map.We appear to be encountering a visibility issue where the org.apache.aries.application.resolver.obr bundle will never activate because blueprint thinks the required namespace handler is not available. However, the logs clearly show the namespace handler being registered anywhere from a millisecond to one or two seconds previously.Would there be any objections to using a ConcurrentHashMap?</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="109" opendate="2010-1-8 00:00:00" fixdate="2010-1-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blog sample does not persist blogtext.</summary>
      <description>The blog sample persists all of the fields (date, title etc) of a blog entry except the blog text. For example, here is a view of the blogentry table after creating a blogentry with title 'whatever'ij&gt; select * from blogentry;ID |BLOGTEXT |PUBLISHDATE |TITLE |UPDATEDDATE |AUTHOR_EMAIL -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 | |2010-01-08 00:00:00.0 |whatever |NULL |zoe@uk.ibm.com</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog-sample.blog-servlet.src.main.java.org.apache.aries.samples.blog.web.util.HTMLOutput.java</file>
    </fixedFiles>
  </bug>
  <bug id="1093" opendate="2013-8-2 00:00:00" fixdate="2013-1-2 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Aries proxy doesn&amp;#39;t work properly on uninstall/reinstall</summary>
      <description>There are a couple of problems with the Aries Proxy code if you do install/uninstall cycles:Firstly the Aries subclass generator uses Class.forName(String) in the static initializers of the classes that it generates. This works, but we need to pass the correct ClassLoader to avoid odd caching bugs (See http://blog.bjhargrave.com/2007/09/classforname-caches-defined-class-in.html)Secondly, if the API is installed separately, then reinstalling the Proxy Impl breaks proxying. The existing woven classes stay woven but new woven subclasses use a different unique name for the WovenProxy fields. This causes NoSuchFieldError to be thrown.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.ProxyManagerActivator.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.gen.ProxySubclassAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="1094" opendate="2013-8-5 00:00:00" fixdate="2013-1-5 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Fix &lt;archiveContent&gt;all&lt;/archiveContent&gt; in eba-maven-plugin</summary>
      <description>&lt;archiveContent&gt;all&lt;/archiveContent&gt; is not working as it should. It does not include the transitive dependency bundles in the archive.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">eba-maven-plugin.src.test.remote-repo.org.apache.maven.test.maven-artifact02.1.0-SNAPSHOT.maven-artifact02-1.0-SNAPSHOT.pom</file>
      <file type="M">eba-maven-plugin.src.test.java.org.apache.aries.plugin.eba.stubs.EbaMavenProjectStub.java</file>
      <file type="M">eba-maven-plugin.src.test.java.org.apache.aries.plugin.eba.EbaMojoTest.java</file>
      <file type="M">eba-maven-plugin.src.site.site.xml</file>
      <file type="M">eba-maven-plugin.src.site.fml.faq.fml</file>
      <file type="M">eba-maven-plugin.src.site.apt.usage.apt.vm</file>
      <file type="M">eba-maven-plugin.src.site.apt.index.apt</file>
      <file type="M">eba-maven-plugin.src.site.apt.examples.ra-custom-location.apt.vm</file>
      <file type="M">eba-maven-plugin.src.site.apt.examples.manifest.apt.vm</file>
      <file type="M">eba-maven-plugin.src.site.apt.examples.include-extra-files.apt.vm</file>
      <file type="M">eba-maven-plugin.src.site.apt.examples.exclude-project-jar.apt.vm</file>
      <file type="M">eba-maven-plugin.src.main.java.org.apache.aries.plugin.eba.EbaMojo.java</file>
      <file type="M">eba-maven-plugin.src.it.settings.xml</file>
      <file type="M">eba-maven-plugin.src.it.default.verify.bsh</file>
      <file type="M">eba-maven-plugin.src.it.default.src.main.eba.SomeResource.txt</file>
      <file type="M">eba-maven-plugin.src.it.default.src.main.custom.APPLICATION.MF</file>
      <file type="M">eba-maven-plugin.src.it.default.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1098" opendate="2013-8-16 00:00:00" fixdate="2013-1-16 01:00:00" resolution="Not A Problem">
    <buginformation>
      <summary>BeanRecipe.findMatchingMethods does not support "varargs"</summary>
      <description>For example: &lt;bean id="webServer" class="org.h2.tools.Server" factory-method="runTool" init-method="start" depends-on="jdbcDataSource"&gt; &lt;argument value="-web" /&gt; &lt;/bean&gt;with Server.runTool signature:public void runTool(String... args)givesorg.osgi.service.blueprint.container.ComponentDefinitionException: Unable to find a matching factory method runTool on class org.h2.tools.Server for arguments &amp;#91;-web&amp;#93; when instanciating bean webServer at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:318)&amp;#91;7:org.apache.aries.blueprint.core:1.1.0&amp;#93; at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)&amp;#91;7:org.apache.aries.blueprint.core:1.1.0&amp;#93; at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)&amp;#91;7:org.apache.aries.blueprint.core:1.1.0&amp;#93; at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)&amp;#91;7:org.apache.aries.blueprint.core:1.1.0&amp;#93; at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)&amp;#91;:1.7.0_25&amp;#93; at java.util.concurrent.FutureTask.run(FutureTask.java:166)&amp;#91;:1.7.0_25&amp;#93; at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)&amp;#91;7:org.apache.aries.blueprint.core:1.1.0&amp;#93;...</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.WiringTest.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.container.BeanRecipeTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="1103" opendate="2013-8-26 00:00:00" fixdate="2013-4-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>esa-maven-plugin breaks maven 3 snapshot dependencies in subsystem manifest</summary>
      <description>With maven3 SNAPSHOT dependencies are stored as a-0.0.1-20101204.150527-6.jar, not as a-0.0.1-SNAPSHOT.jar if they are not built within the same reactor.Maven dependencies will be resolved fine, however the esa-maven-plugin will generate wrong subsystem manifests from this.The bundle-symbolic-name is parsed from the manifest (maven2OsgiConverter.getBundleSymbolicName(artifact) does that), but the version put into the artifact is generated with Analyzer.cleanupVersion(), which will generate a completely wrong qualifier (6) from the maven version number.I think the only way to get the correct version number is to parse it from the bundle's manifest (as it is done for the bundle symbolic name).</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">esa-maven-plugin.src.test.java.org.apache.aries.plugin.esa.stubs.EsaMavenProjectStub.java</file>
      <file type="M">esa-maven-plugin.src.test.java.org.apache.aries.plugin.esa.EsaMojoTest.java</file>
      <file type="M">esa-maven-plugin.src.main.java.org.apache.aries.plugin.esa.EsaMojo.java</file>
    </fixedFiles>
  </bug>
  <bug id="1116" opendate="2013-9-9 00:00:00" fixdate="2013-1-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint loses bounds for &lt;? super Type&gt; constructors</summary>
      <description>Aries fails to handle use cases when generic bounds are different than extends. Test for reproducing this issue pushed to github: https://github.com/splatch/aries/commit/8ead34453cedfdbba43d84959e9bbf71bb1d249e</description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.container.BeanRecipeTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="1117" opendate="2013-9-17 00:00:00" fixdate="2013-9-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JNDI Environment Augmentation can cause problems with JNDI providers</summary>
      <description>The JNDI Environment augmentation may be used to add the BundleContext to the Map used by JNDI to store the provider url etc. If the BundleContext is left in the Map, it can cause problems with the JNDI provider if, for example, the Map is serialized and deserialized elsewhere, as BundleContext may not exist. A suggestion is to add an unaugmentation ability so that after Aries is done with the BundleContext, it can be removed from the Map, allowing providers to operate as though Aries wasn't involved.</description>
      <version>None</version>
      <fixedVersion>jndi-core-1.0.2,jndi-url-1.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.BlueprintURLContextFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.AbstractServiceRegistryContext.java</file>
      <file type="M">jndi.jndi-url.pom.xml</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.Utils.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.startup.Activator.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiObjectFactoryBuilder.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextManagerService.java</file>
      <file type="M">jndi.jndi-core.pom.xml</file>
      <file type="M">jndi.jndi-api.src.main.java.org.apache.aries.jndi.spi.packageinfo</file>
      <file type="M">jndi.jndi-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1118" opendate="2013-10-2 00:00:00" fixdate="2013-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide common schema for XML namespace</summary>
      <description>And schema that uses the "xml" namespace things (xml:lang, xml:base, etc...) needs to import http://www.w3.org/XML/1998/namespace. Blueprint could provide a Namespace handler for that namespace to avoid having a bunch of different bundles all having to add this to their namespace handlers.</description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.2.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.resources.OSGI-INF.blueprint.blueprint-ext.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="1213" opendate="2014-6-14 00:00:00" fixdate="2014-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Switch ejb modeller itest to pax exam 3</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ejb.ejb-modeller-itest.src.test.java.org.apache.aries.ejb.container.itest.EJBModellingTest.java</file>
      <file type="M">ejb.ejb-modeller-itest.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1226" opendate="2014-7-15 00:00:00" fixdate="2014-7-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JAAS and JEE annotation based authorization</summary>
      <description>Provide a new blueprint extension for authorization based on JAAS Authentication and JEE security annotations.The extension will install a interceptor for blueprint beans that are annotated with @RolesAllowed or @DenyAll. At runtime calls will be checked for a JAAS login context. Access to methods will only be granted if the principals match the required roles.</description>
      <version>None</version>
      <fixedVersion>blueprint-authz-1.0.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-authz.pom.xml</file>
      <file type="M">blueprint.blueprint-authz.README.md</file>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.AbstractBlueprintIntegrationTest.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">blueprint.blueprint-authz.src.main.java.org.apache.aries.blueprint.authorization.impl.AuthorizationNsHandler.java</file>
      <file type="M">blueprint.blueprint-authz.src.main.java.org.apache.aries.blueprint.authorization.impl.AnnotationParser.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.authz.helper.UserPrincipal.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.authz.helper.SimpleLoginModule.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.authz.helper.NamedPrincipal.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.authz.helper.GroupPrincipal.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.authz.AuthorizationTest.java</file>
      <file type="M">blueprint.blueprint-authz.src.test.java.org.apache.aries.blueprint.authorization.impl.test.SecuredClass.java</file>
      <file type="M">blueprint.blueprint-authz.src.test.java.org.apache.aries.blueprint.authorization.impl.SecurityAnnoationParserTest.java</file>
      <file type="M">blueprint.blueprint-authz.src.main.java.org.apache.aries.blueprint.authorization.impl.SecurityAnotationParser.java</file>
      <file type="M">blueprint.blueprint-authz.src.main.java.org.apache.aries.blueprint.authorization.impl.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="1258" opendate="2014-10-7 00:00:00" fixdate="2014-1-7 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Refactorings in subsystem tests</summary>
      <description>The subsystem tests currently use a mix of maven, ArchiveFixture and custom code to create test subsystem esa files.I would like to replace this with TinyBundles.Advantages are: We use the standard bundling tool of pax exam The complete bundles and esa files can be created using TinyBundles so the code is more cohesive as it happens in one place When running the tests from eclipse the project dir is not littered with build artifacts anymore</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>None</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.resources.OSGI-INF.blueprint.blueprint.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.META-INF.platform-equinox.definition-3.8.0.V20120529-1548.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.META-INF.platform-equinox.definition-3.8.0.V20110621.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.META-INF.platform-equinox.definition-3.8.0-SNAPSHOT.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20110221.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20110110.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.DynamicImportTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.BlueprintTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.BasicTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.bundles.core.fragment.META-INF.MANIFEST.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.bundles.blueprint.org.apache.aries.subsystem.itests.blueprint.BPHelloImpl.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.bundles.blueprint.META-INF.MANIFEST.MF</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1259" opendate="2014-10-8 00:00:00" fixdate="2014-10-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Namespacehandler still identifies as 2.0 rather than 2.1</summary>
      <description>XBeanNamespaceHandler is still configured on the http://aries.apache.org/xmlns/transaction-jdbc/2.0 namespace. Versionnumber should be pushed to 2.1.</description>
      <version>None</version>
      <fixedVersion>transaction-jdbc-2.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-jdbc.pom.xml</file>
      <file type="M">transaction.transaction-jdbc.src.main.java.org.apache.aries.transaction.jdbc.internal.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="1383" opendate="2015-8-19 00:00:00" fixdate="2015-2-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide option to disable the provisioning of dependencies at install time.</summary>
      <description>PROBLEM-------------The Subsystems specification states that all dependencies of a subsystem must have been installed in order to attain the INSTALLED state. If required dependencies are not found, the installation must fail.This functionality was described in order to achieve fail-fast functionality. If an environment cannot support the dependencies of a subsystem, it is rejected right away.However, there are deployment situations where it is valuable to delay the installation of dependencies. For example, you may wish to independently and simultaneously install a suite of subsystems whose contents have interleaving dependencies. This is currently not possible because the local repository of one subsystem is not available to others. The resources will not be available to others until they become part of the System Repository (assuming a compatible sharing policy) once the INSTALLED state is acquired. In the meantime, the other subsystems fail installation.There are three potential workarounds to this issue, none of which may be acceptable to a particular Subsystems consumer.(1) Provide all content as part of a remote repository. Note that this would require the Subsystem-Content header to be computed by the subsystem provider and not by the implementation.(2) Package all subsystems into a single ESA and make use of parent-child relationships.(3) Manage the install order manually. Note that this would not handle the case of circular dependencies.A solution that will allow for the independent and simultaneous installation of multiple subsystems with interleaving content dependencies, thus giving a deployer more flexibility, is desirable.PROPOSED SOLUTION-----------------------------A custom directive is introduced: apache-aries-provision-dependencies. The possible values are "install" and "resolve", which indicate the time at which dependency provisioning should occur. The default value is "install" which results in the current behavior. This directive may be specified as part of the Subsystem-Type header. A value of "resolve" indicates that dependencies should not be provisioned at installation time. Rather, this step will occur when the subsystem is resolved which typically happens as part of the start process.A subsystem with apache-aries-provision-dependencies:=resolve will remain in the INSTALLING state until it is started. This is an indication to administration programs monitoring subsystems via the service registry that the subsystem has not yet had its dependencies provisioned. When the subsystem is started, the transition from INSTALLING to INSTALLED will then occur as it does today. Assuming the provisioning of dependencies succeeds, the subsystem will then immediately transition into the RESOLVING state and proceed as normal.State transitions when apache-aries-provision-dependencies:=start: install() : &lt;void&gt; -&gt; INSTALLING &lt;void&gt; -&gt; INSTALLING -&gt; INSTALL_FAILED -&gt; UNINSTALLING -&gt; UNINSTALLED (if installation fails for some reason other than dependency provisioning) start() : INSTALLING -&gt; INSTALLED -&gt; RESOLVING -&gt; RESOLVED -&gt; STARTING -&gt; ACTIVE INSTALLING -&gt; INSTALLING (if provisioning of dependencies fails) INSTALLING -&gt; INSTALLED -&gt; RESOLVING -&gt; INSTALLED (if runtime resolution fails) INSTALLING -&gt; INSTALLED -&gt; RESOLVING -&gt; RESOLVED -&gt; STARTING -&gt; RESOLVED (if starting fails)Child scoped subsystems inherit the apache-aries-provision-dependencies value of the first scoped ancestor unless explicitly overridden. Unscoped subsystems always inherit the apache-aries-provision-dependencies value of the first scoped ancestor and may not override the value. The root subsystem always has a value of apache-aries-provision-dependencies:=install.ALTERNATIVE SOLUTIONS---------------------------------(1) Make the local repositories of installing subsystems available to other installing subsystems. The specification does not allow local repositories to be registered as a Repository service, although it does not explicitly address the possibility of a particular implementation sharing them internally. Nevertheless, the intent of the spec seems clear in that it should not be assumed that a subsystem provider desires their content to be shared with others.POTENTIAL ISSUES-------------------------(1) The proposed solution will break the contract of the install methods specified on the Subsystem and AriesSubsystem interfaces, which require that either the returned subsystem is in the INSTALLED state or that the installation fails with an exception. However, it is assumed that the explicit declaration of the apache-aries-provision-dependencies directive with a value of "resolve" grants the implementation permission to do so. An alternative would be to return the Subsystem in the INSTALLED state even though none of the dependencies have been installed. However, this would also violate the specification and may confuse third party applications monitoring subsystem services via the registry.(2) A subsystem may have more than one parent but at most one scoped parent. This means that additional parents will always be features (or other unscoped subsystems). The question is how should apache-aries-provision-dependencies inheritance work when there are multiple parents with conflicting values. A simplifying assumption would be that features may not override the value of the scoped parent. This implies that features should fail installation if they contain a value of apache-aries-provision-dependencies that conflicts with the scoped subsystem within the same region.TEST CASES------------------(1) A set of subsystems with interleaving content dependencies are able to be independently, simultaneously, and successfully installed and started.(2) Subsystem with apache-aries-provision-dependencies:=resolve is in the INSTALLING state after a successful installation.(3) Subsystem with apache-aries-provision-dependencies:=resolve is available as a service after a successful installation.(4) Subsystem with apache-aries-provision-dependencies:=resolve does not have its dependencies installed after a successful installation.(5) Subsystem with apache-aries-provision-dependencies:=resolve undergoes the following state transitions when starting: INSTALLING -&gt; INSTALLED -&gt; RESOLVING -&gt; RESOLVED -&gt; STARTING -&gt; ACTIVE.(6) Subsystem with apach-earies-provision-dependencies:=resolve has its dependencies installed after a successful start.(7) Subsystem with apache-aries-provision-dependencies:=resolve is in the INSTALL_FAILED state after an unsuccessful installation.(8) Subsystem with apache-aries-provision-dependencies:=resolve is not available as a service after an unsuccessful installation.(9) Subsystem with apache-aries-provision-dependencies:=resolve is in the INSTALLING state when dependencies cannot be provisioned after invoking the start method.(10) Subsystem fails installation if the apache-aries-provision-dependencies directive has a value other than "install" or "resolve".(11) Subsystem with apache-aries-provision-dependencies:=resolve undergoes the following state transitions when starting fails due to a runtime resolution failure: INSTALLING -&gt; INSTALLED -&gt; RESOLVING -&gt; INSTALLED.(12) Subsystem with apache-aries-provision-dependencies:=resolve undergoes the following state transitions when starting fails due to a start failure: INSTALLING -&gt; INSTALLED -&gt; RESOLVING -&gt; RESOLVED -&gt; STARTING -&gt; RESOLVED.(13) The root subsystem has apache-aries-provision-dependencies:=install.(14) Subsystem with explicit apache-aries-provision-dependencies:=install works as before.(15) Unscoped subsystem with a value of apache-aries-provision-dependencies that is different than the scoped parent fails installation.(16) Unscoped subsystem with a value of apache-aries-provision-dependencies that is the same as the scoped parent installs successfully.(17) Scoped subsystem with a value of apache-aries-provision-dependencies that is the same as the scoped parent behaves accordingly.(18) Scoped subsystem with a value of apache-aries-provision-dependencies that overrides the scoped parent behaves accordingly.(19) Scoped subsystem with only features as parents is able to override the value of apache-aries-provision-dependencies.(20) Install a scoped subsystem, S1, with apache-aries-provision-dependencies:=resolve. Install two features, F1 and F2, independently as children of S1. F1 has bundle B1 as content. F2 has bundle B2 as content. B2 has B1 as a dependency. B1 should be a constituent of F1 but not of the root subsystem.(21) Install a scoped subsystem, S1, with apache-aries-provision-dependencies:=resolve. Install two features, F1 and F2, independently as children of S1. F1 has bundle B1 and B2 as content. F2 has bundle B2 and B3 as content. B2 is shared content. B1 has a dependency on bundle B4, B2 has a dependency on bundle B5. B3 has a dependency on bundle B6. Start F1. Dependency bundles B4 and B5 should be provisioned but not B6.</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartResourceComparator.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemEventHandler.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.InstallTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.HelloWorldTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.defect.Aries1426Test.java</file>
      <file type="M">subsystem.subsystem-core.src.test.resources.files.SUBSYSTEM.MF.2</file>
      <file type="M">subsystem.subsystem-core.src.test.resources.files.SUBSYSTEM.MF.1</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Utils.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.TargetRegion.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemManifestValidator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StopAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResolveContext.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RegionUpdater.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RawSubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.LocalRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.InstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Constants.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemTypeHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemSymbolicNameHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemContentHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DirectiveFactory.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.util.BundleArchiveBuilder.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.UninstallAction.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.defect.Aries1435Test.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.WovenClassListener.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.defect.Aries1383Test.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicSubsystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="1417" opendate="2015-9-23 00:00:00" fixdate="2015-2-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries Subsystems implementation bundle must provide official capabilities</summary>
      <description>Compendium v6.0.0 states in 134.19 - Capabilities: A capability in the osgi.implementation namespace declaring the implemented specification to be osgi.subsystem. This capability must also declare a uses constraint for the org.osgi.service.subsystem package. For example: Provide-Capability: osgi.implementation; osgi.implementation="osgi.subsystem"; version:Version="1.1"; uses:="org.osgi.service.subsystem"*This capability must follow the rules defined for the osgi.implementation Namespace on page 997. A capability in the osgi.service namespace representing the Subsystem service. This capabilitymust also declare a uses constraint for the org.osgi.service.subsystem package. For example: Provide-Capability: osgi.service; objectClass:List&lt;String&gt;="org.osgi.service.subsystem.Subsystem"; uses:="org.osgi.service.subsystem"</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1441" opendate="2015-10-30 00:00:00" fixdate="2015-2-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Subsystem core tries to shutdown the framework when it has a framework dependency like org.osgi.util.tracker</summary>
      <description>When performing a shutdown of the subsystem core bundle it tries to stop the framework because there is a org.osgi.util.tracker import package.Also in the same situation described above when trying to shutdown the framework by calling stop on bundle 0 it can fail with:&amp;#91;org.apache.aries.subsystem.core.internal.StopAction&amp;#93; : An error occurred while stopping resource osgi.identity; osgi.identity="org.eclipse.osgi"; type="osgi.bundle"; version:Version="3.10.0.v20140606-1445"; singleton:="true" of subsystem org.apache.aries.subsystem.core.internal.BasicSubsystem@25760667org.osgi.framework.BundleException: Unable to acquire the state change lock for the module: osgi.identity; osgi.identity="org.eclipse.osgi"; type="osgi.bundle"; version:Version="3.10.0.v20140606-1445"; singleton:="true" &amp;#91;id=0&amp;#93; STOPPED &amp;#91;STOPPED&amp;#93; invalid at org.eclipse.osgi.container.Module.lockStateChange(Module.java:329) at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule.asyncStop(EquinoxBundle.java:151) at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.stop(EquinoxBundle.java:272) at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.stop(EquinoxBundle.java:277) at org.apache.aries.subsystem.core.internal.StopAction.stopBundleResource(StopAction.java:97) at org.apache.aries.subsystem.core.internal.StopAction.stopResource(StopAction.java:109) at org.apache.aries.subsystem.core.internal.StopAction.run(StopAction.java:67) at org.apache.aries.subsystem.core.internal.StopAction.stopSubsystemResource(StopAction.java:135) at org.apache.aries.subsystem.core.internal.StopAction.stopResource(StopAction.java:107) at org.apache.aries.subsystem.core.internal.StopAction.run(StopAction.java:67) at org.apache.aries.subsystem.core.internal.Activator.deactivate(Activator.java:162) at org.apache.aries.subsystem.core.internal.Activator.removedService(Activator.java:291) at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:967) at org.osgi.util.tracker.ServiceTracker$Tracked.customizerRemoved(ServiceTracker.java:870) at org.osgi.util.tracker.AbstractTracked.untrack(AbstractTracked.java:341) at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:909) at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:109) at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:914) at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148) at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:862) at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:801) at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:222) at org.eclipse.equinox.internal.region.RegionManager.stop(RegionManager.java:67) at org.eclipse.osgi.internal.framework.BundleContextImpl$4.run(BundleContextImpl.java:827) at org.eclipse.osgi.internal.framework.BundleContextImpl$4.run(BundleContextImpl.java:1) at java.security.AccessController.doPrivileged(Native Method) at org.eclipse.osgi.internal.framework.BundleContextImpl.stop(BundleContextImpl.java:820) at org.eclipse.osgi.internal.framework.EquinoxBundle.stopWorker0(EquinoxBundle.java:950) at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.stopWorker(EquinoxBundle.java:324) at org.eclipse.osgi.container.Module.doStop(Module.java:626) at org.eclipse.osgi.container.Module.stop(Module.java:488) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.decStartLevel(ModuleContainer.java:1623) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1542) at org.eclipse.osgi.container.SystemModule.stopWorker(SystemModule.java:248) at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule.stopWorker(EquinoxBundle.java:145) at org.eclipse.osgi.container.Module.doStop(Module.java:626) at org.eclipse.osgi.container.Module.stop(Module.java:488) at org.eclipse.osgi.container.SystemModule.stop(SystemModule.java:186) at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule$1.run(EquinoxBundle.java:160) at java.lang.Thread.run(Thread.java:662)</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Utils.java</file>
    </fixedFiles>
  </bug>
  <bug id="1442" opendate="2015-10-30 00:00:00" fixdate="2015-2-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Subsystem impersonates bundles that are a constituent through sharing the osgi.identity capability</summary>
      <description>Feature subsystems should export all capabilities of its constituents. The osgi.identity capability is also exported but I doubt it is supposed to.It might cause problems when using osgi.identity in the preferred-provider header.</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.defect.Aries1442Test.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicSubsystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="1443" opendate="2015-10-30 00:00:00" fixdate="2015-1-30 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>After a restart the capabilities of a subsystem have changed (seem correct) before the restart they seem wrong</summary>
      <description>A feature subsystem should export all capabilities of its constituents and it does not do that after a fresh install. After a restart of the subsystem core bundle it will export all the capabilities. These seems to be a difference in parsing the capabilities of a persisted subsystem and a new subsystem.</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.12</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicSubsystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="1445" opendate="2015-11-2 00:00:00" fixdate="2015-2-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bundles that are not direct dependencies of a subsystem can be removed while still in use</summary>
      <description>Bundle A is a constituent of application subsystem S1Bundle A is a constituent of application subsystem S2Bundle A has a package import of b.packageBundle B exports b.packageBundle B imports c.packageBundle C exports c.packageThere is an obr repository with bundle b and cBundle B and C are not constituentsWhen installing S1 bundle B and C are added to the root subsystem to fullfill the requirements of bundle AWhen installing S2 everything is still working.Start S1.Now we uninstall S1 and bundle C is removed. refreshBundlesSubsystem S2 won't start anymore because of that.The testcase uses different bundle ids.</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Utils.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.UninstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResolveContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="1523" opendate="2016-4-7 00:00:00" fixdate="2016-4-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application with fragment in archive and host in OBR will fail to resolve.</summary>
      <description>An application containing a fragment and host bundle as content but with the fragment packaged in the archive and host in an OBR repository will fail to resolve.</description>
      <version>subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-obr.src.test.java.org.apache.aries.subsystem.obr.internal.FelixResourceAdapterTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.util.felix.packageinfo</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.util.felix.FelixResourceAdapter.java</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.obr.internal.NamespaceTranslator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResolveContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="1538" opendate="2016-4-22 00:00:00" fixdate="2016-5-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Never fail a subsystem resolution because an already resolved resource has a missing dependency.</summary>
      <description>The implementation should be forgiving and never fail the resolution of a subsystem when one of its dependencies is an already resolved resource with a missing dependency. This scenario can occur now due to the change made as part of ARIES-1445 whereby an empty wiring map is always returned by the resolve context to the resolver in order to detect indirect dependencies and maintain an accurate use count. Also, note that the scenario can only occur with resources installed outside of the subsystem framework. We suspect that, by far, the most common occurrence will be related to non-subsystem resources having effective:=active requirements.</description>
      <version>subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResolveContext.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.defect.Aries1538Test.java</file>
    </fixedFiles>
  </bug>
  <bug id="1539" opendate="2016-4-26 00:00:00" fixdate="2016-5-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow for setting name of generated file</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>blueprint-maven-plugin-1.4.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.GenerateMojo.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.FilteredClassFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="1558" opendate="2016-6-1 00:00:00" fixdate="2016-1-1 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>CDI support</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jpa.jpa-parent.pom.xml</file>
      <file type="M">jpa.examples.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1559" opendate="2016-6-2 00:00:00" fixdate="2016-4-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support injection of static values to bean properties or constructor&amp;#39;s args</summary>
      <description>Quite often there is a need to initialize my functional classes constants values. The Spring framework can be used for this expression language. It would be nice to have similar functionality in Blueprint.For example I want to use this expression:&lt;bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"&gt;&lt;property name="hashAlgorithmName" value="#{T(org.apache.shiro.crypto.hash.Md5Hash).ALGORITHM_NAME}" /&gt;&lt;/bean&gt;instead of this one:&lt;bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"&gt;&lt;property name="hashAlgorithmName" value="MD5" /&gt;&lt;/bean&gt;</description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.8.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.TestBlueprintContainer.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.PropertyPlaceholder.java</file>
    </fixedFiles>
  </bug>
  <bug id="1566" opendate="2016-6-6 00:00:00" fixdate="2016-6-6 01:00:00" resolution="Done">
    <buginformation>
      <summary>Support @Lazy annotation</summary>
      <description>There is some things to do: interpret @org.springframework.context.annotation.Lazy on bean as activation='lazy' @Lazy(true) generates attribute activation='lazy' on bean element @Lazy(false) generates attribute activation='eager' on bean element add plugin paramater: defaultActivation default from defaultActivation is null which indicates blueprint default if defaultActivation is set to EAGER then generate attribute default-activation='eager' on blueprint element if defaultActivation is set to LAZY then generate attribute default-activation='lazy' on blueprint element for produces beans activation of class is overridden by method activation</description>
      <version>None</version>
      <fixedVersion>blueprint-maven-plugin-1.5.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.test.MyProduced.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.test.MyFactoryNamedBean.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.test.MyBean1.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.test.BeanWithSetters.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.GeneratorTest.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.model.ProducedBean.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.model.Bean.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.Generator.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.GenerateMojo.java</file>
    </fixedFiles>
  </bug>
  <bug id="1608" opendate="2016-9-7 00:00:00" fixdate="2016-9-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application with bundle in archive and required bundle in OBR will fail to resolve.</summary>
      <description>Similar to issue ARIES-1523 except a bundle using Require-Bundle in side an application archive will fail to resolve against a required bundle in OBR. The reason is the capability representing the required bundle in OBR does not have the bundle-version attribute set correctly. Instead it uses the 'version' attribute from OBR.</description>
      <version>subsystem-2.0.8</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.util.felix.FelixCapabilityAdapter.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1610" opendate="2016-9-10 00:00:00" fixdate="2016-9-10 01:00:00" resolution="Done">
    <buginformation>
      <summary>Blueprint plugin: check namespace patterns instead conrete namespace</summary>
      <description>Currently blueprint plugin checks exact version of configured transaction and JPA namespaces in order to generate appropriate blueprint descriptor.For example supported transaction namespaces are: http://aries.apache.org/xmlns/transactions/v1.2.0 http://aries.apache.org/xmlns/transactions/v2.0.0I would suggest to relax this check and validate only major version on the base of regular pattern. As a result, not only 1.2.0 version will be supported, but versions 1.1.0, 1.0.0 as well.Solution should be safe for minor versions, because:a) normally schema syntax haven't to be changed in incompatible way for different minor version;b) unsupported generated extensions will be ignored at the runtimePatch is attached</description>
      <version>None</version>
      <fixedVersion>blueprint-maven-plugin-1.5.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.model.ContextTest.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.model.BeanTest.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.GeneratorTest.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.spring.SpringTransactionalFactory.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.javax.PersistenceUnitHandler.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.javax.PersistenceContextHandler.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.javax.JavaxTransactionFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="1611" opendate="2016-9-10 00:00:00" fixdate="2016-9-10 01:00:00" resolution="Done">
    <buginformation>
      <summary>Blueprint plugin: support javax.cdi.Transactional annotation</summary>
      <description>Transaction demarcation code mostly uses the: javax.transaction.Transactional org.springframework.transaction.annotation.Transactionalanyway some users still have javax.transaction.cdi.TransactionalIt would be nice if blueprint plugin support cdi Transactional as well.Patch is attached</description>
      <version>None</version>
      <fixedVersion>blueprint-maven-plugin-1.5.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-maven-plugin.src.test.java.org.apache.aries.blueprint.plugin.GeneratorTest.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.resources.META-INF.services.org.apache.aries.blueprint.plugin.spi.MethodAnnotationHandler</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.resources.META-INF.services.org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler</file>
      <file type="M">blueprint.blueprint-maven-plugin.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="865" opendate="2012-6-29 00:00:00" fixdate="2012-7-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>More subsystem itests</summary>
      <description>We could use more subsystem itests. As with the application-runtime itests, some tests need a separate API bundle so that we don't end up with two copies in the runtime. Create a new module to hold new itest APIs, and a simple itest to exercise them. Extend to include a set of itests from the Subsystem CTT</description>
      <version>None</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.InstallTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.HelloWorldTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.FeatureTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.BasicTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.ApplicationTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependency.4ATest.java</file>
      <file type="M">subsystem.pom.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependencyTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.org.apache.aries.subsystem.itest.interfaces.src.main.java.org.apache.aries.subsystem.itests.hello.api.Hello.java</file>
      <file type="M">subsystem.org.apache.aries.subsystem.itest.interfaces.pom.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependency.4ETest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.hello.helloImpl.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependency.4DTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.IntegrationTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependency.4CTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependency.4BTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependencyTestBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="866" opendate="2012-7-5 00:00:00" fixdate="2012-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add class copyrights where necessary.</summary>
      <description>A number of classes in the subsystems implementation need copyrights. A new snapshot of the RI should be delivered to OSGi as well.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RawSubsystemResource.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.util.TestResource.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.util.TestRepositoryContent.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.util.TestRepository.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.util.TestCapability.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.RootSubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.ProvisionPolicyTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.OptionalDependenciesTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.NoRequirementFilterTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.DependencyLifeCycleTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.CompositeTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Utils.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.UninstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ThreadLocalSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.TargetRegion.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SystemRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemServiceRegistrar.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Subsystems.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemManifestValidator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemIdentifier.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemGraph.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StopAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartResourceComparator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SharingPolicyValidator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SecurityManager.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceReferences.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RepositoryServiceRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RegionContextBundleHelper.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.BundleManifestVersionHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.BundleSymbolicNameHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.BundleVersionHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.CapabilityHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ClauseTokenizer.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeployedContentRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeploymentManifest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.EffectiveDirective.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ExportPackageCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.FilterDirective.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ImportPackageRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.PreferredProviderHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.PreferredProviderRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ProvideBundleCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ProvideCapabilityCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ProvisionPolicyDirective.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ProvisionResourceRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.RequireBundleHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.RequireBundleRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.RequireCapabilityHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.RequireCapabilityRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.RequirementHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemContentRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemExportServiceCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemImportServiceHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemImportServiceRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemManifest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SymbolicNameHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.TypedAttribute.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.VisibilityDirective.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AbstractAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AbstractCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AbstractRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AriesSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleEventHook.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.CompositeRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Constants.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ContentRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.DependencyCalculator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.GetBundleContextAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.GetSubsystemHeadersAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.InstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.InstallResourceComparator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.LocalRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Location.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.PreferredProviderRepository.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
