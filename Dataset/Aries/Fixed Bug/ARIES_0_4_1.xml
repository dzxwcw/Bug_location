<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="ARIES">
  <bug id="1017" opendate="2013-2-14 00:00:00" fixdate="2013-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Properly isolate the subsystem-obr bundle.</summary>
      <description>The generated export package header is currently:Export-Package: org.apache.aries.subsystem.obr.internal;uses:="org.osg i.resource,org.apache.felix.bundlerepository,org.osgi.util.tracker,or g.osgi.service.repository,org.osgi.framework,org.slf4j"There should be no exported packages.</description>
      <version>None</version>
      <fixedVersion>subsystem-core-1.0.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-obr.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1018" opendate="2013-2-25 00:00:00" fixdate="2013-7-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JPA container throws Exception when stopped without a JPA-Provider present</summary>
      <description>To reproduce unpack the latest karaf-snapshot and install the JPA-feature:feature:install jpaand install a bundle containing a persistence-unit.stop the JPA Container bundle.This happens since aries-util was upgraded to 1.1.0. The issue did not occur with util-1.0.0.I investigated a bit and found the problem:In util-1.1.0 the BundleHookBundleTracker was changed to untrack all bundles when it's closed. In util-1.0 closing did essentially nothing but setting a closed-flag.So when using JPA Container with util-1.1.0 the persistence-units are destroyed without ever being created.This also happens when having a JPA Provider (like OpenJPA) installed, but when it's stopped before the the JPA-Container Bundle is stopped (the usual case).</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoFactoryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="1019" opendate="2013-2-27 00:00:00" fixdate="2013-3-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JPA weaving hook must be called before proxy weaving hook.</summary>
      <description>Caused by: &lt;openjpa-2.2.2-SNAPSHOT-r422266:1446295 nonfatal general error&gt; org.apache.openjpa.util.GeneralException: An error occurred while enhancing itemjpa.ItemJPA. Exception message: java.lang.ClassNotFoundException: org.apache.aries.proxy.weaving.WovenProxy at org.apache.openjpa.enhance.PCEnhancer.run(PCEnhancer.java:578) at org.apache.openjpa.enhance.PCClassFileTransformer.transform0(PCClassFileTransformer.java:153) at org.apache.openjpa.enhance.PCClassFileTransformer.transform(PCClassFileTransformer.java:126) at org.apache.openjpa.persistence.PersistenceProviderImpl$ClassTransformerImpl.transform(PersistenceProviderImpl.java:290) at org.apache.aries.jpa.container.weaving.impl.WrappingTransformer.transform(WrappingTransformer.java:80) at org.apache.aries.jpa.container.weaving.impl.JPAWeavingHook.weave(JPAWeavingHook.java:71) ... 48 moreCaused by: java.lang.IllegalArgumentException: java.lang.ClassNotFoundException: org.apache.aries.proxy.weaving.WovenProxy at serp.util.Strings.toClass(Strings.java:164) at serp.util.Strings.toClass(Strings.java:108) at serp.bytecode.BCClass.getDeclaredInterfaceTypes(BCClass.java:740) at org.apache.openjpa.enhance.PCEnhancer.run(PCEnhancer.java:537) ... 53 more This issue occurs when the Apache Aries Proxy weaving hook gets called before the Apache Aries JPA weaving hook. Proxy weaves the class with the WovenProxy interface and adds the necessary dynamic package imports. JPA then gets called and uses PCEnhancer which, in turn, calls BCClass.getDeclaredInterfaceTypes, which ultimately calls Class.forName using the woven interface's name. The class loader is from the bundle whose class is being woven. Per the OSGi spec, dynamic imports do not take effect until after the entire weaving process is complete. Consequently, the bundle's class loader does not yet have visibility to the class.One solution would be to ensure that the jpa weaving hook is always called before the proxy weaving hook using the service ranking property.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.weaving.impl.TransformerRegistryFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="102" opendate="2009-12-31 00:00:00" fixdate="2009-12-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ad a &amp;#39;back to home&amp;#39; link to teh blog sample</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog-sample.blog-servlet.src.main.java.org.apache.aries.samples.blog.web.util.HTMLOutput.java</file>
    </fixedFiles>
  </bug>
  <bug id="1217" opendate="2014-6-23 00:00:00" fixdate="2014-6-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ProxySubclassGenerator doesn&amp;#39;t compile</summary>
      <description>svn commit: r1603727 introduced a call to a nonexistent method. Add something simple to get the class compiling and the test passing.</description>
      <version>0.4</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="1218" opendate="2014-6-24 00:00:00" fixdate="2014-6-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint iTests fail</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-sample.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestRegistrationListener.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.DeadLockTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerBTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainer2Test.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BaseBlueprintContainerBTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.AbstractBlueprintIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="1219" opendate="2014-6-26 00:00:00" fixdate="2014-1-26 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Weaving of Aries SPI Fly bundle produces RuntimeException: JSR/RET are not supported with computeFrames option</summary>
      <description>Trying to integrate jBPM6 in Apache Karaf 3.0.1, we came across with ServiceLoader.load() issues and for that reason we have used dynamic weaving of Aries SPI Fly.While some classloading of jBPM classes, we get the following exception:java.lang.ClassFormatError: Weaving hook failed. at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2074) at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1501) at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75) at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955) at java.lang.ClassLoader.loadClass(ClassLoader.java:358)&amp;#91;:1.7.0_45&amp;#93;...Caused by: java.lang.RuntimeException: JSR/RET are not supported with computeFrames option at org.objectweb.asm.Frame.a(Unknown Source) at org.objectweb.asm.MethodWriter.visitJumpInsn(Unknown Source) at org.objectweb.asm.MethodVisitor.visitJumpInsn(Unknown Source) at org.objectweb.asm.ClassReader.a(Unknown Source) at org.objectweb.asm.ClassReader.b(Unknown Source) at org.objectweb.asm.ClassReader.accept(Unknown Source) at org.objectweb.asm.ClassReader.accept(Unknown Source) at org.apache.aries.spifly.dynamic.ClientWeavingHook.weave(ClientWeavingHook.java:61) at org.apache.felix.framework.util.SecureAction.invokeWeavingHook(SecureAction.java:1127) at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2057)It seems that there is a problem with StackMap tables used in jBPM6. jBPM6 has been built using JDK 1.6.0_45 and the JVM runs 1.7.0_45.Any suggestions would be appreciated as this is a blocking issue for us.Thank you in advance,Eleni.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Question</type>
    </buginformation>
    <fixedFiles>
      <file type="M">spi-fly.spi-fly-weaver.src.main.java.org.apache.aries.spifly.weaver.TCCLSetterVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="122" opendate="2010-1-19 00:00:00" fixdate="2010-1-19 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Implement org.osgi.service.jdbc.DataSourceFactory interface for Derby</summary>
      <description>The implementation of the interface will be packed together with Derby classes in one bundle.Since this is just an example implementation of JDBC Service Specification for Derby it will be stored into samples.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.transaction-sample.transaction-assembly.pom.xml</file>
      <file type="M">samples.transaction-sample.pom.xml</file>
      <file type="M">samples.transaction-sample.osgi-jdbc-derby.pom.xml</file>
      <file type="M">samples.transaction-sample.osgi-jdbc-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1220" opendate="2014-6-30 00:00:00" fixdate="2014-6-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix required and provided services for ProxyManager</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>proxy-impl-1.0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">jndi.jndi-url.pom.xml</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1222" opendate="2014-7-1 00:00:00" fixdate="2014-7-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Should make osgi.ee and osgi.native capabilities available to all subsystems</summary>
      <description>This is a clarification coming in the Subsystems R6 specification, but I think we should fix this in the R5 subsystems (currently in trunk) now. Otherwise, isolated subsystems with bundles that have Bundle-NativeCode headers may fail to resolve on an R6 OSGi framework implementation. This is because R6 frameworks will convert Bundle-NativeCode headers into the osgi.native namespace requirement. If the subsystems does not make available the osgi.native capability from the system bundle then the bundle with native code will fail to resolve at runtime.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.ResolutionTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.DependencyCalculator.java</file>
    </fixedFiles>
  </bug>
  <bug id="124" opendate="2010-1-20 00:00:00" fixdate="2010-3-20 01:00:00" resolution="Not A Problem">
    <buginformation>
      <summary>Aries JPA modules and bundles do not follow the correct naming scheme</summary>
      <description>The JPA maven arti.facts do not follow the org.apache.aries.xxx naming scheme, nor do the bundles generated as part of the build.This should be made consistent before creating a first release.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ariestrader-sample.assemblies.ariestrader-all-equinox.src.main.resources.configuration.config.ini</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.JPAContainerTest.java</file>
      <file type="M">ariestrader-sample.assemblies.ariestrader-all-equinox.pom.xml</file>
      <file type="M">jpa.jpa-container.pom.xml</file>
      <file type="M">jpa.jpa-container-testbundle.pom.xml</file>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
      <file type="M">jpa.jpa-container-context.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1260" opendate="2014-10-9 00:00:00" fixdate="2014-8-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>subsystem.itests dependency on subsystem.core should be moved up</summary>
      <description>org.apache.aries.subsystem.core has moved up to version 1.1.1-SNAPSHOT. subsystem-itests dependency should be increased to reflect this. It's causing problems in the build-with-dependencies, and it's best to test against the latest level of the runtime code.</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">subsystem.subsystem-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1261" opendate="2014-10-10 00:00:00" fixdate="2014-10-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove blueprint dependency from aries transaction jms</summary>
      <description>Make xbean dependency optional and not depend on blueprint by providing Activator like aries transaction jdbc.</description>
      <version>None</version>
      <fixedVersion>transaction-jms-2.0.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-jms.src.main.resources.OSGI-INF.blueprint.transaction-jms.xml</file>
      <file type="M">transaction.transaction-jms.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="566" opendate="2011-2-4 00:00:00" fixdate="2011-1-4 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>NPE when generating bundle repository for invalid bundle location</summary>
      <description>When trying to generate a repository xml for a list of bundles, if any bundle has a wrong location, we will get NPE. Ideally, we should throw a better exception to explain.</description>
      <version>0.3,0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-modeller.src.main.resources.org.apache.aries.application.modelling.messages.APPModellingMessages.properties</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="569" opendate="2011-2-7 00:00:00" fixdate="2011-3-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update the versions of PAX exam that we use</summary>
      <description>We currently default to PAX Exam 1.2.0 in the default parent. I'd like to move this up to version 1.2.3 following this discussion on the aries user list. http://mail-archives.apache.org/mod_mbox/aries-user/201102.mbox/browserthe short summary is that the blog itests hang under some circumstances and that the issue is fixed by using a later version of pax-exam</description>
      <version>0.4</version>
      <fixedVersion>parent-0.4.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">parent.default-parent.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="57" opendate="2009-11-30 00:00:00" fixdate="2009-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Stop Blueprint shipping OSGi api classes</summary>
      <description>The blueprint bundle contains the OSGi apis. This packages should be pulled in from outside which also reduces the size of the bundle.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestReferences.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestConfigAdmin.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerTest.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="581" opendate="2011-2-21 00:00:00" fixdate="2011-2-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide a java6 parent</summary>
      <description></description>
      <version>0.4</version>
      <fixedVersion>0.4,parent-0.4.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">parent.default-parent.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="583" opendate="2011-2-22 00:00:00" fixdate="2011-2-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update the application components to use the ext:default capability for default service implementations</summary>
      <description>blueprint now supports a default bean for an optional service, so rather than provide bundles with default no op implementations registered as services I'll merge these classes into the client bundles as a default service.</description>
      <version>None</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-obr-resolver.src.main.resources.OSGI-INF.blueprint.obr-resolver.xml</file>
      <file type="M">application.application-obr-resolver.pom.xml</file>
      <file type="M">application.application-noop-postresolve-process.src.main.resources.OSGI-INF.blueprint.noop-postresolve-process.xml</file>
      <file type="M">application.application-noop-postresolve-process.src.main.java.org.apache.aries.application.noop.postresolve.process.impl.DefaultPostResolveTransformer.java</file>
      <file type="M">application.application-noop-postresolve-process.pom.xml</file>
      <file type="M">application.application-noop-platform-repository.src.main.resources.OSGI-INF.blueprint.noop-platform-repo.xml</file>
      <file type="M">application.application-noop-platform-repository.src.main.java.org.apache.aries.application.noop.platform.repo.impl.DefaultPlatformRepository.java</file>
      <file type="M">application.application-noop-platform-repository.pom.xml</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.UpdateAppTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.MinimumImportsTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicNoOpResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
      <file type="M">application.application-deployment-management.src.main.resources.OSGI-INF.blueprint.deployment-manager.xml</file>
      <file type="M">application.application-deployment-management.src.main.java.org.apache.aries.application.deployment.management.internal.MessageUtil.java</file>
      <file type="M">application.application-deployment-management.src.main.java.org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.java</file>
      <file type="M">application.application-deployment-management.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="585" opendate="2011-2-23 00:00:00" fixdate="2011-2-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>build with clean .m2 fails</summary>
      <description>application-itests requires the org.apache.aries.application.noop.platform.repo artifact which doesn't seem to be built anywhere</description>
      <version>0.4</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.goat.goat-assembly.pom.xml</file>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.pom.xml</file>
      <file type="M">samples-sandbox.dgoat.dgoat-assembly.pom.xml</file>
      <file type="M">samples-sandbox.bank.bank-assembly.pom.xml</file>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="586" opendate="2011-2-24 00:00:00" fixdate="2011-3-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Isolation based runtime doesn&amp;#39;t work when resolving maven generated blueprint bundles</summary>
      <description>The Isolation based runtime for the application module does not work correctly if a bundle has a dependency on org.osgi.service.blueprint. It has two failure modes. If the OBR provisioner uses the local repository it provisions against these and then attempts to install blueprint, and dependencies, into the shared bundle framework. These are already outside the shared bundle framework and available via the shared bundle framework configuration. In this situation installation of an application fails when it tries, and fails, to locate blueprint for installation. If it worked we would hit a different problem whereby we have two blueprint runtimes running trying to process application bundles blueprint.If the OBR provisioner uses the local repository it fails to provision the application as it cannot find a provider for org.osgi.service.blueprint.Solution----------------I will update the application code so the isolation runtime can provide additional "fake" bundles to the resolution that represents the exports provided by the shared bundle framework. This will allow the application to resolve. These fake bundles will be removed from the result so they do not appear in the deployment manifest for the application. This is similar to what we do today for the application import and export services. I will also force the resolver to not use the local repository.</description>
      <version>None</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-isolated.src.main.java.org.apache.aries.application.runtime.isolated.impl.ApplicationContextManagerImpl.java</file>
      <file type="M">application.application-runtime-isolated.src.main.java.org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl.java</file>
      <file type="M">application.application-runtime-framework.src.main.java.org.apache.aries.application.runtime.framework.BundleFrameworkImpl.java</file>
      <file type="M">application.application-runtime-framework-management.src.main.resources.OSGI-INF.blueprint.bundle-framework-management.xml</file>
      <file type="M">application.application-runtime-framework-management.src.main.java.org.apache.aries.application.runtime.framework.management.SharedBundleFramework.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-deployment-management.src.test.java.org.apache.aries.application.deployment.management.DeploymentGeneratorTest.java</file>
      <file type="M">application.application-deployment-management.src.main.resources.OSGI-INF.blueprint.deployment-manager.xml</file>
      <file type="M">application.application-deployment-management.src.main.java.org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="589" opendate="2011-2-25 00:00:00" fixdate="2011-2-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create an eba for the hello world blueprint application</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-testbundle.pom.xml</file>
      <file type="M">transaction.transaction-blueprint.pom.xml</file>
      <file type="M">samples.blueprint.helloworld.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="59" opendate="2009-12-1 00:00:00" fixdate="2009-12-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Optional service reference cause blueprint to wait</summary>
      <description>Section 121.7.9 suggests with its definition of "optional" ..."optional - Optional indicates that the satisfaction of this reference is not relevant for any registered services, or for the grace period."that optional service references should not cause a wait when the application tries to use the service. However, in the current implementation the blueprint container will block on optional service references as well as mandatory ones. This is quite a major problem since it means the blueprint extender itself can get blocked up if enough (3) bean init methods try to use optional and not-satisfied service references.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="591" opendate="2011-3-1 00:00:00" fixdate="2011-3-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application isolation code doesn&amp;#39;t cope properly with a warm start</summary>
      <description>It appears like there is some kind of weird interaction issue between equinox and aries during a warm start which results in NPEs in blueprint.The NPEs come when blueprint tries to go into the shared bundle framework and application frameworks. This is a bug, somewhere, but given we do not persist any knowledge between restarts I'll make us remove the frameworks on shutdown. As a result warmstart will look like coldstart.This isn't ideal and it would be good to cope, but this is good enough for now.</description>
      <version>None</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-isolated.src.main.resources.OSGI-INF.blueprint.app-context-management.xml</file>
      <file type="M">application.application-runtime-framework-management.src.main.resources.OSGI-INF.blueprint.bundle-framework-management.xml</file>
      <file type="M">application.application-runtime-framework-management.src.main.java.org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="592" opendate="2011-3-2 00:00:00" fixdate="2011-3-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move the twitter itest stuff to be a sample</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.pom.xml</file>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-twitter4j.pom.xml</file>
      <file type="M">application.application-itests.src.test.resources.obr.twitter.TwitterRepository.xml</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.pom.xml</file>
      <file type="M">application.application-itest-twitter.twitter-eba.pom.xml</file>
      <file type="M">application.application-itest-twitter.twitter-bundle.src.main.java.org.apache.aries.application.itest.twitter.TwitterQuery.java</file>
      <file type="M">application.application-itest-twitter.twitter-bundle.pom.xml</file>
      <file type="M">application.application-itest-twitter.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="594" opendate="2011-3-3 00:00:00" fixdate="2011-3-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Subsystems needs to be updated for the OSGi Core 4.3 release.</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-scope-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.itests.ScopeSecurityTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.itests.ScopeAdminTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.itests.JarCreator.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.itests.AbstractIntegrationTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeUpdateImpl.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeImpl.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeAdminServiceFactory.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeAdminImpl.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.DictionaryBuilder.java</file>
      <file type="M">subsystem.subsystem-scope-impl.pom.xml</file>
      <file type="M">subsystem.subsystem-scope-api.src.main.java.org.apache.aries.subsystem.scope.SharePolicy.java</file>
      <file type="M">subsystem.subsystem-scope-api.src.main.java.org.apache.aries.subsystem.scope.ScopeUpdate.java</file>
      <file type="M">subsystem.subsystem-scope-api.src.main.java.org.apache.aries.subsystem.scope.ScopeAdmin.java</file>
      <file type="M">subsystem.subsystem-scope-api.src.main.java.org.apache.aries.subsystem.scope.Scope.java</file>
      <file type="M">subsystem.subsystem-scope-api.src.main.java.org.apache.aries.subsystem.scope.InstallInfo.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdminTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdmin2Test.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.AbstractIntegrationTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemAdminImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="605" opendate="2011-3-10 00:00:00" fixdate="2011-3-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Hello world Blueprint sample is broken</summary>
      <description>Need to add dependencies on proxy and asm</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blueprint.helloworld.helloworld-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blueprint.helloworld.helloworld-assembly.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="606" opendate="2011-3-10 00:00:00" fixdate="2011-3-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Can&amp;#39;t build subsystem from fresh checkout and local repo</summary>
      <description>1) subsystem relies on a 1.6.1-SNAPSHOT of Felix bundrepository which can't be found .... moving to 1.6.42) subsystem-core uses Equinox 3.7.0.v20110110 but other sibling modules use 3.7.0.v20110221 ... moving subsystem-core to the newer level gives a compile problem as it seems org.osgi.framework.wiring.Capability no longer exists.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
      <file type="M">subsystem.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="61" opendate="2009-12-1 00:00:00" fixdate="2009-12-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>provide a common bundle tracker customizer and bundle tracker factory that can be used by extenders</summary>
      <description>Draft RFC 138 API introduced the concept of composite bundle. Proposed is a common bundle tracker customizer that would open bundletracker whenever a starting event of a composite bundle is detected so that we can track bundles installed onto the framework associated with the composite bundle. The bundle tracker associated with the composite bundle is tracked in the bundle tracker factory so that we can close out the bundletracker associated with the composite bundle when a stopping event of the composite bundle is detected.The implementation is based on equinox 3.5 impl of RFC 138 and will be updated when this RFC is finalized.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">util.src.main.java.org.apache.aries.util.tracker.AriesBundleTrackerCustomizer.java</file>
      <file type="M">util.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="611" opendate="2011-3-15 00:00:00" fixdate="2011-3-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add a test to ensure we process fragments correctly</summary>
      <description>A recent email on the user list claimed that blueprint doesn't work properly with fragments. We do not appear to have any tests, so I will create some.</description>
      <version>None</version>
      <fixedVersion>testsupport.unit-0.4,blueprint.itests-0.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">testsupport.testsupport-unit.src.main.java.org.apache.aries.unittest.fixture.ArchiveFixture.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="615" opendate="2011-3-17 00:00:00" fixdate="2011-3-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Failing Blueprint iTests</summary>
      <description>Two of the the Blueprint tests fail. The failure is similar on both cases, tests are:BlueprintContainerBTCustomizerTestBlueprintContainer2BTCustomizerTestBoth tests pass on the 0.3 release. The only changes that have been made in Blueprint are the changes to parent/packageinfo under ARIES-598 and the changes made under ARIES-611 so it's likely one of these.-------------------------------------------------------------------------------Test set: org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest-------------------------------------------------------------------------------Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 66.401 sec &lt;&lt;&lt; FAILURE!test &amp;#91;equinox/3.5.0&amp;#93;(org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest) Time elapsed: 66.351 sec &lt;&lt;&lt; ERROR!java.lang.RuntimeException: Gave up waiting for service (&amp;(objectClass=org.osgi.service.blueprint.container.BlueprintContainer)(osgi.blueprint.container.symbolicname=org.apache.aries.blueprint.sample)) at org.apache.aries.blueprint.itests.AbstractIntegrationTest.getOsgiService(AbstractIntegrationTest.java:122) at org.apache.aries.blueprint.itests.AbstractIntegrationTest.getBlueprintContainerForBundle(AbstractIntegrationTest.java:90) at org.apache.aries.blueprint.itests.AbstractIntegrationTest.testBlueprintContainer(AbstractIntegrationTest.java:230) at org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest.test(BlueprintContainer2BTCustomizerTest.java:105) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:143) at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:105) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305) at sun.rmi.transport.Transport$1.run(Transport.java:159) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:155) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)</description>
      <version>0.4</version>
      <fixedVersion>util-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">util.src.main.java.org.apache.aries.util.internal.EquinoxWorker.java</file>
    </fixedFiles>
  </bug>
  <bug id="617" opendate="2011-3-26 00:00:00" fixdate="2011-3-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Change the blog samples and aries trader to use the Aries semantic versioning scheme</summary>
      <description>Since all of the rest of trunk has switched to follow a best practice scheme for versioning, the samples should do the same.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.blog-persistence-jdbc.pom.xml</file>
      <file type="M">samples.blog.blog-datasource.pom.xml</file>
      <file type="M">samples.blog.blog-biz.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
      <file type="M">samples.blog.blog-api.pom.xml</file>
      <file type="M">samples.ariestrader.modules.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-util.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-persist-jpa-cm.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-persist-jpa-am.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-persist-jdbc.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-derby-ds.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-core.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-beans.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-api.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.ariestrader-jdbc-eba.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.ariestrader-all-eba.pom.xml</file>
      <file type="M">samples.blog.blog-web.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="624" opendate="2011-3-29 00:00:00" fixdate="2011-3-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Missing version for asm import in proxy impl</summary>
      <description></description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="626" opendate="2011-3-29 00:00:00" fixdate="2011-5-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries blueprint namaspace handler schema with includes</summary>
      <description>If you have a NamespaceHandler implementation where the schema contains xsd:includes, the schema will fail to resolve if you do not have connectivity.There is also no way to attach a CatalogResolver or xml-resolver.</description>
      <version>0.4</version>
      <fixedVersion>blueprint-core-0.3.2,1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-testbundlea.src.main.resources.org.apache.aries.blueprint.testbundlea.nshandlersiximport.xsd</file>
      <file type="M">transaction.transaction-blueprint.src.main.java.org.apache.aries.transaction.parsing.TxElementHandler.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.NSHandlerFour.java</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.NSHandlerFive.java</file>
      <file type="M">blueprint.blueprint-testbundleb.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.NSHandlerSix.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="629" opendate="2011-4-5 00:00:00" fixdate="2011-5-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application Itests take 25+ minutes</summary>
      <description>The application itests take a quite spectacular 26 minutes, both in the build and on my local box.Prime suspect seems to be the following stack trace (taken from a thread dump): at java.lang.Object.wait(Native Method) waiting on &lt;7f48c4b48&gt; (a java.lang.Object) at org.apache.aries.blueprint.container.ReferenceRecipe.getService(ReferenceRecipe.java:171) locked &lt;7f48c4b48&gt; (a java.lang.Object) at org.apache.aries.blueprint.container.ReferenceRecipe.access$000(ReferenceRecipe.java:50) at org.apache.aries.blueprint.container.ReferenceRecipe$ServiceDispatcher.call(ReferenceRecipe.java:226) at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:50) at org.apache.aries.proxy.impl.DefaultWrapper.invoke(DefaultWrapper.java:31) at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:78) at $Proxy14.uninstallBundle(Unknown Source) at org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl.uninstall(ApplicationContextImpl.java:147) locked &lt;7f492d5a8&gt; (a org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl) at org.apache.aries.application.runtime.isolated.impl.ApplicationContextManagerImpl.close(ApplicationContextManagerImpl.java:163) locked &lt;7f48c4800&gt; (a org.apache.aries.application.runtime.isolated.impl.ApplicationContextManagerImpl) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:225) at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824) at org.apache.aries.blueprint.container.BeanRecipe.destroy(BeanRecipe.java:741) at org.apache.aries.blueprint.container.BlueprintRepository.destroy(BlueprintRepository.java:295) at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroyComponents(BlueprintContainerImpl.java:682) at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:833) at org.apache.aries.blueprint.container.BlueprintExtender.destroyContext(BlueprintExtender.java:247) at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:239) at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:435) at org.apache.aries.util.tracker.InternalRecursiveBundleTracker.modifiedBundle(InternalRecursiveBundleTracker.java:89) at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:453) at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237) at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413) at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:916) at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:220) at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149) at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1350) at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1301) at org.eclipse.osgi.framework.internal.core.BundleHost.stopWorker(BundleHost.java:470) at org.eclipse.osgi.framework.internal.core.AbstractBundle.suspend(AbstractBundle.java:546) at org.eclipse.osgi.framework.internal.core.Framework.suspendBundle(Framework.java:1098) at org.eclipse.osgi.framework.internal.core.StartLevelManager.decFWSL(StartLevelManager.java:593) at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:261) locked &lt;7f46617e0&gt; (a java.lang.Object) at org.eclipse.osgi.framework.internal.core.StartLevelManager.shutdown(StartLevelManager.java:216) at org.eclipse.osgi.framework.internal.core.InternalSystemBundle.suspend(InternalSystemBundle.java:266) at org.eclipse.osgi.framework.internal.core.Framework.shutdown(Framework.java:685) locked &lt;7f44c0680&gt; (a org.eclipse.osgi.framework.internal.core.Framework) at org.eclipse.osgi.framework.internal.core.Framework.close(Framework.java:583) locked &lt;7f44c0680&gt; (a org.eclipse.osgi.framework.internal.core.Framework) at org.eclipse.osgi.framework.internal.core.InternalSystemBundle$1.run(InternalSystemBundle.java:243) at java.lang.Thread.run(Thread.java:680)</description>
      <version>0.4</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="644" opendate="2011-5-6 00:00:00" fixdate="2011-9-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Replace Scope Admin with Region Digraph.</summary>
      <description>Scope Admin is being relaced with org.eclipse.equinox.region (Region Digraph) as the grouping and isolation mechanism for bundles in subsystems.</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemAdminImpl.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemListener.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemEvent.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemAdmin.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.spi.ResourceResolver.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.spi.ResourceConverter.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.Utils.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.UninstallBundleTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.SharePolicyTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.ServiceVisibilityTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.ScopeAdminTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.MoveBundleTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.GetScopeServiceTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.BundleVisibilityTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.BasicTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.scope.itests.AbstractTest.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeUpdateImpl.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeManager.java</file>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeImpl.java</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.obr.internal.ResourceImpl.java</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.obr.internal.ObrResourceResolver.java</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.obr.internal.ObrResourceImpl.java</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.obr.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-obr.pom.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdminTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdmin2Test.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-install.src.main.java.org.apache.aries.subsystem.install.internal.SubsystemInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemEventDispatcher.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceResolverImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.NoOpResolver.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemException.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemConstants.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.Subsystem.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.spi.ResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.spi.Resource.java</file>
      <file type="M">subsystem.subsystem-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="669" opendate="2011-6-5 00:00:00" fixdate="2011-6-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy or weaving code should mark all its changes synthetic</summary>
      <description>In order to make it easier for OWB to ignore the additional goo added by the proxy/weaving stuff, it should all be marked synthetic. So far I've identified the added SerialVersionUID field and static_init_* methods as causing problems with the jcdi tck.</description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.ProxyWeavingHook.java</file>
      <file type="M">proxy.proxy-impl.src.build.resources.org.apache.aries.proxy.synthesizer.Synthesizer.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.WovenProxyAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.WovenProxyGeneratorTest.java</file>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.WovenProxyGenerator.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.AbstractWovenProxyAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.WovenProxyMethodAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.common.OSGiFriendlyClassWriter.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.advanced.features.itest.JPAWeavingAndAnnotationScanningTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="67" opendate="2009-12-3 00:00:00" fixdate="2009-1-3 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Problems in JMX API sources</summary>
      <description>Just adding this in to track issues in the API sources from OSGi Alliance so that they can be submitted under 1 bugzilla..ServiceStateMBean#SERVICE_TYPE is missing PROPERTIES_ITEM</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-api.src.main.java.org.osgi.jmx.service.useradmin.UserAdminMBean.java</file>
    </fixedFiles>
  </bug>
  <bug id="670" opendate="2011-6-6 00:00:00" fixdate="2011-5-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>blueprint.api bundle exports org.osgi.service.blueprint package at version 0.0.0</summary>
      <description>As per discussion in the dev mailing list:"The core bundle has this import package: org.osgi.service.blueprint;version="[1.0.0,2.0.0)". The api bundle exports the package but at version 0.0.0 (which is the bug). It works for the 'uber' bundle because everything is in the one bundle, and there is no import or export for this package. Please would you open a JIRA bug for this. Thank you."</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="673" opendate="2011-6-10 00:00:00" fixdate="2011-6-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy code changes handlable NoClassDefFoundError into ClassFormatError</summary>
      <description>When the proxy code is unable to locate a parent class it fails (correctly) but that failure causes the runtime to issue a ClassFormatError, rather than a NoClassDefFoundError. There is no good reason for this.</description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="674" opendate="2011-6-13 00:00:00" fixdate="2011-6-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do not proxy javax.*</summary>
      <description>The proxy component should avoid trying to proxy anything in a javax package, treating them like the SDK.</description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.ProxyWeavingHook.java</file>
    </fixedFiles>
  </bug>
  <bug id="678" opendate="2011-6-14 00:00:00" fixdate="2011-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Java2 security not working for proxied interface</summary>
      <description>Using Java2 security with a proxied interface doesn't seem to be working. In particular, the ProtectionDomain passed to the Policy instance doesn't seem to contain the JAAS principals that should be associated with the permission check.</description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.ProxyClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="68" opendate="2009-12-3 00:00:00" fixdate="2009-1-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Custom Component Metadata support</summary>
      <description>This started from a thought related to ARIES-63 of how to improve Passthroughmetadata to allow the object to access blueprint objects via an interface passed to 'getObject'. As more consideration is given to requirements that would be added to Passthroughmetadata, it's restrictions start to feel like a more capable alternative may be required.Although pass through metadata is interesting, it is also fairly limited, essentially acting like a custom 'singleton' component recipe.Custom components can get a little more complex, and may wish to act as prototype, or be informed when destruction occurs, or even participate in availability/satisfaction type behaviour (like Reference instances do today). This feature aims to implement support for custom components through a new custom component metadata &amp; recipe, offering all of the above.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ParserContext.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.RecipeBuilder.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ParserContextImpl.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.Parser.java</file>
    </fixedFiles>
  </bug>
  <bug id="684" opendate="2011-6-21 00:00:00" fixdate="2011-6-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Temporary org.eclipse.osgi 3.7 download location has moved</summary>
      <description>Binaries have been archived tohttp://archive.eclipse.org/equinox/drops/S-3.7M6-201103101119/org.eclipse.osgi_3.7.0.v20110304.jar</description>
      <version>0.4</version>
      <fixedVersion>proxy.itests-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-tmp.pom.xml</file>
      <file type="M">jpa.jpa-tmp.pom.xml</file>
      <file type="M">transaction.transaction-itests.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20110304.xml</file>
      <file type="M">proxy.proxy-itests.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20110304.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20110304.xml</file>
    </fixedFiles>
  </bug>
  <bug id="686" opendate="2011-6-22 00:00:00" fixdate="2011-7-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement the JMX spec MBeans using the whiteboard pattern.</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.provisioning.ProvisioningServiceMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.permissionadmin.PermissionAdminMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.framework.ServiceStateMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.framework.PackageStateMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.framework.FrameworkMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.framework.BundleStateMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.cm.ConfigurationAdminMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.pom.xml</file>
      <file type="M">jmx.jmx-whiteboard.src.main.java.org.apache.aries.jmx.whiteboard.MBeanHolder.java</file>
      <file type="M">jmx.jmx-whiteboard.pom.xml</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.ServiceStateMBeanHandler.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.RegistrableStandardEmitterMBean.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.BundleStateMBeanHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="688" opendate="2011-6-24 00:00:00" fixdate="2011-6-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ASM package imports are unversioned in proxy-bundle</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">proxy.proxy-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="692" opendate="2011-6-29 00:00:00" fixdate="2011-7-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove download of Equinox 3.7 from build</summary>
      <description>The OSGi 4.3 core API is available in Maven now. We should use it rather than downloading our own copy of Equinox 3.7 to get the API.</description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jpa.jpa-tmp.pom.xml</file>
      <file type="M">jpa.jpa-container.pom.xml</file>
      <file type="M">proxy.proxy-tmp.pom.xml</file>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">proxy.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="693" opendate="2011-6-30 00:00:00" fixdate="2011-7-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Interface proxy does not delegate Object methods like equals, hashCode or toString</summary>
      <description></description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.util.AriesFrameworkUtil.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.InterfaceProxyingTest.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceCombiningClassAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="694" opendate="2011-6-30 00:00:00" fixdate="2011-7-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy manager can return a stale proxy built against a previous classloader for bundles having undergone refresh</summary>
      <description>This scenario occurred when using a Blueprint bundle A having a service reference on a service in another bundle B, the service api is also provided by B.B got updated to B'. In this process A gets refreshed to use the new classes from B'. However, when Blueprint creates the service reference proxy it gets returned a proxy implementing the old interfaces from B rather than the interfaces passed in (which come from B'). This is because proxy classes are cached by bundle and the bundle has not changed ....</description>
      <version>None</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.util.AriesFrameworkUtil.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.ProxyClassLoader.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.InterfaceProxyingTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="699" opendate="2011-7-4 00:00:00" fixdate="2011-7-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Apache Aries repo generation tool - default file name typo</summary>
      <description>The default repository file name if no name is specified should be repository.xml instead of reporsitory.xml:o</description>
      <version>0.4</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-tooling-repository-generator.src.main.java.org.apache.aries.application.repository.generator.AriesRepositoryGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="7" opendate="2009-9-29 00:00:00" fixdate="2009-12-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use BundleTracker from OSGi 4.2</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-cm.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintExtender.java</file>
    </fixedFiles>
  </bug>
  <bug id="705" opendate="2011-7-7 00:00:00" fixdate="2011-7-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>proxy code is weaving JPA metamodel classes and can cause JPA errors</summary>
      <description>Aries proxy code is weaving JPA metamodel classes. This results in the following error for current OpenJPA (2.1.x):java.lang.IllegalStateException: localized message key: meta-field-not-param; substitutions: &amp;#91;class com.foo.Baz_, serialVersionUID, long&amp;#93; at org.apache.openjpa.persistence.meta.MetamodelImpl.getParameterziedType(MetamodelImpl.java:341) at org.apache.openjpa.persistence.meta.MetamodelImpl.populate(MetamodelImpl.java:310) at org.apache.openjpa.persistence.meta.MetamodelImpl.instantiate(MetamodelImpl.java:257) at org.apache.openjpa.persistence.meta.MetamodelImpl.find(MetamodelImpl.java:226) at org.apache.openjpa.persistence.meta.MetamodelImpl.&lt;init&gt;(MetamodelImpl.java:91) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.getMetamodel(EntityManagerFactoryImpl.java:346) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.getCriteriaBuilder(EntityManagerFactoryImpl.java:333) at org.apache.openjpa.persistence.EntityManagerImpl.getCriteriaBuilder(EntityManagerImpl.java:1638) at org.apache.openjpa.persistence.EntityManagerImpl.getCriteriaBuilder(EntityManagerImpl.java:101) at com.foo.Test.query(Test.java:xxx) See https://issues.apache.org/jira/browse/OPENJPA-2024IMO, MetaModel classes (annotated with javax.persistence.metamodel.StaticMetamodel) should be ignored by aries weaving...</description>
      <version>0.4</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestInterface.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.WovenProxyGeneratorTest.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.WovenProxyAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="715" opendate="2011-7-29 00:00:00" fixdate="2011-7-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for InputStream based IDirectory</summary>
      <description>The Filesystem in the util project is very useful, but it only works for Files. It would be great if we could use an InputStream as well</description>
      <version>0.4</version>
      <fixedVersion>util-0.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">util.src.test.java.org.apache.aries.util.filesystem.FileSystemTest.java</file>
      <file type="M">util.src.main.java.org.apache.aries.util.filesystem.impl.FileSystemImpl.java</file>
      <file type="M">util.src.main.java.org.apache.aries.util.filesystem.FileSystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="716" opendate="2011-7-29 00:00:00" fixdate="2011-8-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow plugins to extend the Aries Application Modeller</summary>
      <description>The Aries modelling code needs a plug point to allow additional service imports and exports to be defined in an extensible way</description>
      <version>0.4</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.modelling.ServiceModeller.java</file>
      <file type="M">application.application-modeller-standalone.src.main.java.org.apache.aries.application.modelling.standalone.OfflineModellingFactory.java</file>
      <file type="M">application.application-modeller.src.main.resources.OSGI-INF.blueprint.app-modeller.xml</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl.java</file>
      <file type="M">application.application-modeller-common-test.src.test.java.org.apache.aries.application.modelling.ModellerTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="717" opendate="2011-7-29 00:00:00" fixdate="2011-7-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use Equinox 3.7 from maven rather than downloading from eclipse.org</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container-itest.src.test.resources.META-INF.platform-equinox.definition-3.7.0.v20110613.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.resources.ss-runner.properties</file>
      <file type="M">jpa.jpa-container-itest.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20110304.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.advanced.features.itest.JPAWeavingAndAnnotationScanningTest.java</file>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="718" opendate="2011-8-1 00:00:00" fixdate="2011-9-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>EJB support in Apache Aries</summary>
      <description>Start to add EJB support in Aries. We can begin by modelling the services that are exposed by an EJB bundle</description>
      <version>None</version>
      <fixedVersion>parent-0.5.0,util-0.4</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">util.src.main.java.org.apache.aries.util.AriesFrameworkUtil.java</file>
      <file type="M">ejb.ejb-modeller.src.test.java.test.ejbs.StatelessSessionBean.java</file>
      <file type="M">ejb.ejb-modeller.src.test.java.test.ejbs.StatefulSessionBean.java</file>
      <file type="M">jpa.jpa-container.src.test.java.org.apache.aries.jpa.container.PersistenceBundleLifecycleTest.java</file>
      <file type="M">jpa.jpa-container.src.main.resources.org.apache.aries.jpa.container.nls.jpaContainerMessages.properties</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.PersistenceBundleHelper.java</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.transaction.impl.TranSyncRegistryMock.java</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistryTest.java</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.impl.GlobalPersistenceManagerTest.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.impl.GlobalPersistenceManager.java</file>
      <file type="M">ejb.openejb-extender.src.main.java.org.apache.aries.ejb.openejb.extender.RunningApplication.java</file>
      <file type="M">ejb.openejb-extender.src.main.java.org.apache.aries.ejb.openejb.extender.OSGiTransactionManager.java</file>
      <file type="M">ejb.openejb-extender.src.main.java.org.apache.aries.ejb.openejb.extender.EJBExtender.java</file>
      <file type="M">ejb.openejb-extender.src.main.java.org.apache.aries.ejb.openejb.extender.AriesProxyService.java</file>
      <file type="M">ejb.openejb-extender.pom.xml</file>
      <file type="M">ejb.openejb-extender-itest.src.test.java.org.apache.aries.ejb.openejb.extender.itest.EJBBundleTest.java</file>
      <file type="M">ejb.openejb-extender-itest.pom.xml</file>
      <file type="M">ejb.openejb-extender.src.main.java.org.apache.aries.ejb.openejb.extender.AriesPersistenceContextIntegration.java</file>
      <file type="M">ejb.openejb-extender-itest.src.test.java.org.apache.aries.ejb.openejb.extender.itest.AbstractOpenEJBTest.java</file>
      <file type="M">ejb.openejb-extender-itest.src.test.java.beans.jpa.Laptop.java</file>
      <file type="M">ejb.openejb-extender-itest.src.test.java.beans.integration.Tx.java</file>
      <file type="M">ejb.openejb-extender-itest.src.test.java.beans.integration.impl.TxSingleton.java</file>
      <file type="M">ejb.openejb-extender-itest.src.test.java.beans.integration.impl.JPASingleton.java</file>
      <file type="M">ejb.openejb-extender-itest.src.test.java.org.apache.aries.ejb.openejb.extender.itest.AdvancedEJBBundleTest.java</file>
      <file type="M">parent.default-parent.pom.xml</file>
      <file type="M">ejb.pom.xml</file>
      <file type="M">ejb.ejb-modeller-itest.src.test.java.org.apache.aries.ejb.container.itest.EJBModellingTest.java</file>
      <file type="M">ejb.ejb-modeller-itest.pom.xml</file>
      <file type="M">pom.xml</file>
      <file type="M">util.src.main.java.org.apache.aries.util.filesystem.impl.ZipFileImpl.java</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ExportedServiceImpl.java</file>
      <file type="M">ejb.ejb-modeller.src.test.java.org.apache.aries.ejb.modelling.impl.ParsedEJBServicesTest.java</file>
      <file type="M">ejb.ejb-modeller.src.test.java.org.apache.aries.ejb.modelling.impl.EJBLocatorTest.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.impl.StandaloneEJBModeller.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.impl.ParsedEJBServices.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.impl.OpenEJBLocator.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.impl.EJBServiceExport.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.impl.EJBModeller.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.impl.EJBLocatorFactory.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.impl.EJBLocationUnavailable.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.EJBRegistry.java</file>
      <file type="M">ejb.ejb-modeller.src.main.java.org.apache.aries.ejb.modelling.EJBLocator.java</file>
      <file type="M">ejb.ejb-modeller.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="731" opendate="2011-8-17 00:00:00" fixdate="2011-8-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Apache Aries repo generation tool - transaction namespace handler missing</summary>
      <description>The Apache Aries repo generation tool cannot cope with the transaction and jpa namespace as the namespace handlers are missing from the environment.</description>
      <version>0.4</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-tooling-repository-generator.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="732" opendate="2011-8-22 00:00:00" fixdate="2011-8-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The ability to exclude bundles from the archive while still having them listed in Application-Content header</summary>
      <description>Today, all bundles in the dependencies tag are automatically archived in the EBA + a reference to them is added to the Application-Content header.We need the ability to exclude bundles from being archived in the eba while still having a reference for them in the Application-Content header.Graham suggested:"to have a single configuration of something like &lt;archiveContent / &gt; with values of 'none', 'applicationContent', 'all' ". Even though we don't understand the "all" value.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">eba-maven-plugin.src.test.java.org.apache.aries.plugin.eba.EbaMojoTest.java</file>
      <file type="M">eba-maven-plugin.src.main.java.org.apache.aries.plugin.eba.EbaMojo.java</file>
      <file type="M">eba-maven-plugin.pom.xml</file>
      <file type="M">samples.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="733" opendate="2011-8-22 00:00:00" fixdate="2011-8-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add Use-Bundle header to the APPLICATION.MF using maven-eba-plugin</summary>
      <description>want to add Use-Bundle header to the APPLICATION.MF using the pom.xml and it seems that it's not supported. According the Graham Charters:"It should be relatively easy to add a simple Use-Bundle capability to the eba-maven-plugin. It could be configured in the same way as the Application-Ex/ImportService headers. E.g&lt;configuration&gt; &lt;instructions&gt; &lt;Use-Bundle&gt;org.acme.my.Bundle;version="[1.0.0, 1.1.0)"&lt;/Use-Bundle&gt; &lt;/instructions&gt;&lt;/configuration&gt;"</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">eba-maven-plugin.src.test.resources.unit.basic-eba-with-descriptor.plugin-config.xml</file>
      <file type="M">eba-maven-plugin.src.test.remote-repo.org.apache.maven.test.maven-artifact02.1.0-SNAPSHOT.maven-artifact02-1.0-SNAPSHOT.jar</file>
      <file type="M">eba-maven-plugin.src.test.remote-repo.org.apache.maven.test.maven-artifact01.1.0-SNAPSHOT.maven-artifact01-1.0-SNAPSHOT.jar</file>
      <file type="M">eba-maven-plugin.src.test.java.org.apache.aries.plugin.eba.EbaMojoTest.java</file>
      <file type="M">eba-maven-plugin.src.main.java.org.apache.aries.plugin.eba.EbaMojo.java</file>
    </fixedFiles>
  </bug>
  <bug id="742" opendate="2011-9-9 00:00:00" fixdate="2011-9-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use released version of xbeans and openwebbeans since the SNAPSHOTs we use have disappeared</summary>
      <description>Currently for the EJB itests we use 1.1.1-SNAPSHOT of openwebbeans and 3.8-SNAPSHOT of xbeans. Both these versions have been released and the old snapshots we build against have disappeared. This makes it impossible to build the projects from a fresh maven repo.Instead we should simply use the released versions</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ejb.pom.xml</file>
      <file type="M">ejb.openejb-extender-itest.pom.xml</file>
      <file type="M">ejb.ejb-modeller-itest.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="747" opendate="2011-9-16 00:00:00" fixdate="2011-1-16 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>EJB based commenting service for the Aries Blog</summary>
      <description>Now that we have some EJB support in Aries it would be nice to have something in a sample to show it off!</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="757" opendate="2011-10-6 00:00:00" fixdate="2011-1-6 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Contribute semantic versioning check tool</summary>
      <description>Based on the discussion on the dev mailing list, it seems that all of us like to have a semantic versioning check tool.</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">versioning.versioning-checker.src.test.java.org.apache.aries.versioning.impl.org.apache.aries.versioning.utils.SemanticVersionUtilsTest.java</file>
      <file type="M">versioning.versioning-checker.src.test.java.org.apache.aries.versioning.impl.org.apache.aries.versioning.utils.BinaryCompatibilityTest.java</file>
      <file type="M">versioning.org.apache.aries.versioning.plugin.src.main.java.org.apache.aries.versioning.mojo.VersionCheckerMojo.java</file>
      <file type="M">versioning.org.apache.aries.versioning.plugin.pom.xml</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.check.VersionChange.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.check.BundleInfo.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.check.BundleCompatibility.java</file>
      <file type="M">versioning.versioning-checker.src.test.java.versioning.java.files.TestC.java</file>
      <file type="M">versioning.versioning-checker.src.test.java.versioning.java.files.TestBChild.java</file>
      <file type="M">versioning.versioning-checker.src.test.java.versioning.java.files.TestB.java</file>
      <file type="M">versioning.versioning-checker.src.test.java.versioning.java.files.TestA.java</file>
      <file type="M">versioning.versioning-checker.src.test.java.org.apache.aries.versioning.tests.SemanticVersionUtilsTest.java</file>
      <file type="M">versioning.versioning-checker.src.test.java.org.apache.aries.versioning.tests.BinaryCompatibilityTest.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.SerialVersionClassVisitor.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.SemanticVersioningUtils.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.SemanticVersioningClassVisitor.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.MethodDeclaration.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.GenericDeclaration.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.FieldDeclaration.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.EmptyClassVisitor.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.ClassDeclaration.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.BinaryCompatibilityStatus.java</file>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.check.SemanticVersioningChecker.java</file>
      <file type="M">versioning.versioning-checker.pom.xml</file>
      <file type="M">versioning.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="759" opendate="2011-10-10 00:00:00" fixdate="2011-10-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Produce a repository generator zip for the Apache Aries download page</summary>
      <description>Make the repository generator tool to be available on the Apache Aries download page as a zip.</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-tooling-repository-generator.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="763" opendate="2011-10-21 00:00:00" fixdate="2011-10-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove OSGi VersionRange dependency.</summary>
      <description>Currently, Subsystems has a dependency on the new OSGi VersionRange class introduced by RFC 175. Although an implementation of this class exists at OSGi, there are no publicly available distributions of framework implementations that contain it.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.OsgiIdentityRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.VersionRangeAttribute.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemContentHeader.java</file>
    </fixedFiles>
  </bug>
  <bug id="773" opendate="2011-11-3 00:00:00" fixdate="2011-11-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Usage of a Configuration Admin service within an isolated application framework</summary>
      <description>Problem Summary:Currently there is no consistent way for consuming a Configuration Admin service from an isolated application framework. The following content summarises the problems a developer would face with Aries if the Configuration Admin service is essential to their application: BlueprintThe isolation boundaries are slightly marred by the current Aries Blueprint CM implementation. The underlying CM namespace handler that is registered by Blueprint is wired with a Configuration Admin service that resides in the root framework. The Configuration Admin service is then subsequently used for any Blueprint bundles requiring configuration (including bundles from an isolated framework).The compendium specification stipulates that when a Blueprint bundle is being installed/updated the Blueprint container should delegate service registrations through the Blueprint bundle context. From a configuration perspective, if the bundle that is being managed resides in an isolated framework then this creates a service visibility problem (the bundle context will reference the isolated service registry).Consider as an example the runtime usage of a Property-Placeholder for an isolated Blueprint bundle. Within the Blueprint CM container mechanics, the Configuration Admin service (provided by the CM namespace handler) will be used to fetch an existing configuration for the supplied PID, a Managed Service will then be exposed (bound to the PID) as a hook for further configuration updates. If any configuration updates should occur for the PID the associated Managed Service exposed in the isolated application framework will never be "seen" by the Configuration Admin service in the root framework for it to notify. ManualMuch like the Blueprint issue mentioned above, if a bundle within an isolated application framework requires the use of the existing Configuration Admin service and needs to expose a Managed Service for future updates there is currently no way to do this.</description>
      <version>0.3,0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerBTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.resources.OSGI-INF.blueprint.blueprint-cm.xml</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler.java</file>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-runtime-framework-management.src.main.java.org.apache.aries.application.runtime.framework.management.SharedBundleFramework.java</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.AbstractParserProxy.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.util.IsolationTestUtils.java</file>
      <file type="M">application.application-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="784" opendate="2011-11-17 00:00:00" fixdate="2011-5-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blog sample assembly (and others) broken - aries bundles don&amp;#39;t resolve</summary>
      <description>Most of the Aries bundles in the blog assembly no longer start. The reason is that pax logging is missing from the framework; the reason for that is that the config.ini lists the wrong version. (Sadly, the blog tests don't validate the blog assembly. I'll raise another issue for that, since it's a harder fix.)</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="801" opendate="2011-12-8 00:00:00" fixdate="2011-12-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries Proxy cannot proxy abstract classes</summary>
      <description>The proxy component is unable to proxy abstract classes. This is just plain silly for the subclassing code, which should already be able to do this trivially and is definitely a bug.It should be possible to augment the dynamic interface proxy code so that it can extend "woven" abstract classes too, treating any abstract methods as "interface" and simply setting the superclass properly. Because the interface generation code extends the existing weaving code this is effectively the same as loading and weaving a real concrete subclass that has zero length implementations of the abstract methods.Interestingly it should also be possible to add interfaces to these dynamically generated woven subclasses. I'm not sure whether this will be useful or not, but we should get it for free.</description>
      <version>0.4</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.WovenProxyGeneratorTest.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.InterfaceProxyingTest.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.AbstractProxyTest.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.ProxyClassLoader.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceUsingWovenProxyMethodAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceUsingWovenProxyAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceCombiningClassAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.gen.ProxySubclassAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.AsmProxyManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="886" opendate="2012-7-26 00:00:00" fixdate="2012-7-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blog assembly should use OSGi 4.3</summary>
      <description>ARIES-832 pointed out that the blog assembly, and tests, should use OSGi 4.3 so they can take advantage of load-time weaving.</description>
      <version>0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.pom.xml</file>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="975" opendate="2012-11-29 00:00:00" fixdate="2012-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Semantic versioning seralization comparision incorrect</summary>
      <description>The comparision for seralization id is incorrect</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">versioning.versioning-checker.src.main.java.org.apache.aries.versioning.utils.ClassDeclaration.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
