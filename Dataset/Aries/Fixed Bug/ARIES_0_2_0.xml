<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="ARIES">
  <bug id="301" opendate="2010-4-30 00:00:00" fixdate="2010-5-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Missing &amp;#39;peristence.xml&amp;#39; does not trigger warning</summary>
      <description>If a bundle has a meta-persistence header, but is missing its persistence.xml, persistence doesn't work (obviously) but no diagnostic warning is given explaining why. Such a bundle is in an inconsistent state, so we probably should put out a warning.</description>
      <version>None</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.PersistenceBundleHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="303" opendate="2010-5-9 00:00:00" fixdate="2010-5-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improvements to prototype graphical console</summary>
      <description>https://issues.apache.org/jira/browse/ARIES-302?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanelUltimately there are two use cases for the console; the first is as a dynamic replacement for the power point pictures we use in demos to illustrate the architecture of the blog sample, and the second is as a management console. We'll want different things in the two scenarios - in general, we'll want a lot of abstraction when we're using the console to illustrate what's happening in a demo, but using the console to debug or manage a proper system would need much more detail. For example, we may not want to show the bundle IDs for a demo, and we may want to programatically filter out bundles which aren't part of the blog sample. I think a good way to achieve these two modes is to provide a customisable set of preferences, and we can ship with two default modes, 'abstract' and 'diagnosis' (say). We could use a different URL pattern to swap between the modes, and also allow users to customise the preferences files to create hybrid modes.I've taken a step towards this by allowing some of what's shown to be turned off and moving the control for that switch into a separate javascript file. The next steps will be to externalise it to a user-editable file, possibly in combination with a set of controls in the GUI and cookie persistence. I've also added a visual representation of the bundle state, so that bundles which aren't active are greyed out. At the moment they go a slightly bilious yellow when they're not active, but we can fine tune the colours as we go. (Depending on the preferences setting, we can show the state as a text string, use the visualization, or do both.)</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.TwistieSection.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.index.html</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.Bundle.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.ServerSideClass.java</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.info.impl.BundleContextInfoProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="304" opendate="2010-5-10 00:00:00" fixdate="2010-5-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refactor the demop prototype</summary>
      <description>Refactor the sample to put the API into a separate bundle and move the javascript to a sub directory of web.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.TwistieSection.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.Preferences.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.index.html</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.Dependency.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.BundleAppearance.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.Bundle.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.ServerSideClass.java</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.info.impl.BundleInfoImpl.java</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.info.impl.BundleContextInfoProvider.java</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.info.BundleInfoProvider.java</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.info.BundleInfo.java</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.java.org.apache.aries.samples.demo.prototype.BundleDependencies.java</file>
      <file type="M">samples-sandbox.demo-sample.pom.xml</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.pom.xml</file>
      <file type="M">samples-sandbox.demo-sample.demo-assembly.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="308" opendate="2010-5-11 00:00:00" fixdate="2010-5-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix licences in JS files in demo sample</summary>
      <description>Missing Apache licenses and missed some changes associated with ARIES-303 which need to be re-instated.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.TwistieSection.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.SimpleInitialLayout.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.ProviderSelector.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.Preferences.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.DwrLoadingDialog.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.Dependency.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.BundleStatusGrid.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.BundleAppearance.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.index.html</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.LayoutManager.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.Bundle.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-assembly.src.main.filtered-resources.configuration.config.ini</file>
    </fixedFiles>
  </bug>
  <bug id="31" opendate="2009-10-21 00:00:00" fixdate="2009-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement Bundle State MBean</summary>
      <description>Implement Bundle State MBean wich provides detailed access to the state of one bundle and aggregatedstate of a group of bundles.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.AbstractIntegrationTest.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.BundleStateMBeanHandler.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.BundleState.java</file>
      <file type="M">jmx.pom.xml</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.agent.JMXAgentImpl.java</file>
      <file type="M">jmx.jmx-core.pom.xml</file>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="310" opendate="2010-5-11 00:00:00" fixdate="2010-5-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>MBean exceptions</summary>
      <description>The exceptions raised by aries mbeans are not quite consistent with that the JMX OSGi specification defines. However, the specification itself is very inconsistent and unclear when to throw an IOException or IllegalArgumentException.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.util.FrameworkUtilsTest.java</file>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.useradmin.UserAdminTest.java</file>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.cm.ConfigurationAdminTest.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.provisioning.ProvisioningService.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.permissionadmin.PermissionAdmin.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.PackageState.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.util.FrameworkUtils.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.useradmin.UserAdmin.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.ServiceState.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.Framework.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.cm.ConfigurationAdmin.java</file>
    </fixedFiles>
  </bug>
  <bug id="311" opendate="2010-5-12 00:00:00" fixdate="2010-5-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JNDI implementation does not follow the specification</summary>
      <description>The Aries JNDI implementation does not quite follow the specification.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">testsupport.testsupport-unit.src.main.java.org.apache.aries.mocks.BundleContextMock.java</file>
      <file type="M">jndi.jndi-url.src.test.java.org.apache.aries.jndi.url.ServiceRegistryContextTest.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.ServiceRegistryListContext.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.ServiceRegistryContext.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.OsgiURLContextFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.AbstractServiceRegistryContext.java</file>
      <file type="M">jndi.jndi-core.src.test.java.org.apache.aries.jndi.ObjectFactoryTest.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.startup.Activator.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ProviderAdminService.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiObjectFactoryBuilder.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ObjectFactoryHelper.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.DirObjectFactoryHelper.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.DelegateContext.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextManagerServiceFactory.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextManagerService.java</file>
      <file type="M">jndi.jndi-bundle.pom.xml</file>
      <file type="M">jndi.pom.xml</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.Activator.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.ServiceHelper.java</file>
      <file type="M">jndi.jndi-url.pom.xml</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.DelegateContextFactory.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextHelper.java</file>
      <file type="M">jndi.jndi-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="313" opendate="2010-5-14 00:00:00" fixdate="2010-8-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The samples should all have tests!</summary>
      <description>Someone on the user mailing list reported that the blog sample wasn't working. It wasn't because we had made changes to the bundles and because there are no tests for the blog sample the only way to see that it was broken was by checking running it. We really need tests for the 'show case' samples to make sure that when ever a user tries to run them they just work.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.blog-datasource.src.main.resources.OSGI-INF.blueprint.dataSource.xml</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JdbcBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JdbcBlogSampleTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.BlogSampleTest.java</file>
      <file type="M">samples.blog.blog-persistence-jdbc.src.main.resources.OSGI-INF.blueprint.blueprint.xml</file>
      <file type="M">samples.blog.blog-persistence-jdbc.src.main.java.org.apache.aries.samples.blog.persistence.jdbc.BlogPersistenceServiceImpl.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.AbstractIntegrationTest.java</file>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
      <file type="M">samples.blog.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="314" opendate="2010-5-16 00:00:00" fixdate="2010-5-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix various minor issues with the demo sample</summary>
      <description>1) Problem with VisibilitySwitch added in ARIES-3082) Crash when application bundle is stopped</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples-sandbox.wordassociation-sample.demoscript.html</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.demo.LayoutManager.js</file>
      <file type="M">samples-sandbox.demo-sample.demo-prototype.src.main.resources.web.index.html</file>
    </fixedFiles>
  </bug>
  <bug id="32" opendate="2009-10-21 00:00:00" fixdate="2009-3-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement Permission Admin MBean</summary>
      <description>Implement Permission Admin MBean based on Permission Admin service.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.permissionadmin.PermissionAdminTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="320" opendate="2010-5-25 00:00:00" fixdate="2010-6-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support ClassTransformers for PUs</summary>
      <description>One way of supporting runtime enhancement of JPA entity classes is via java agent approach. Aries JPA should allow for java agent based enhancement.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.PersistenceBundleManager.java</file>
      <file type="M">jpa.jpa-api.src.main.java.org.apache.aries.jpa.container.ManagedPersistenceUnitInfoFactory.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.TransformerWrapper.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.PersistenceUnitInfoImpl.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoImpl.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoFactoryImpl.java</file>
      <file type="M">jpa.jpa-api.src.main.java.org.apache.aries.jpa.transformer.TransformerAgent.java</file>
      <file type="M">jpa.jpa-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="329" opendate="2010-6-2 00:00:00" fixdate="2010-6-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for listeners to ManagedPersistenceUnitInfoFactory</summary>
      <description>Add support for service-based listeners for ManagedPersistenceUnitInfoFactory. The listeners can be used to perform additional actions as the persistence bundles are detected or untracked by the Aries JPA code.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoFactoryImpl.java</file>
      <file type="M">jpa.jpa-api.src.main.java.org.apache.aries.jpa.container.ManagedPersistenceUnitInfoFactoryListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="33" opendate="2009-10-21 00:00:00" fixdate="2009-3-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement User Admin MBean</summary>
      <description>Implement User Admin MBean which manages User Admin service.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.useradmin.UserAdminTest.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.useradmin.UserAdmin.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.codec.UserData.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.codec.RoleData.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.codec.GroupData.java</file>
      <file type="M">jmx.jmx-api.src.main.java.org.osgi.jmx.service.useradmin.UserAdminMBean.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.PackageState.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.codec.Package.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.agent.JMXAgentImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="331" opendate="2010-6-4 00:00:00" fixdate="2010-6-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Override Application-Version in eba-maven-plugin</summary>
      <description>When auto-generating the application manifest, one can override the Application-SymbolicName but not the Application-Version.Would be good to support overriding of the Application-Version header as well.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">eba-maven-plugin.src.main.java.org.apache.aries.plugin.eba.EbaMojo.java</file>
    </fixedFiles>
  </bug>
  <bug id="335" opendate="2010-6-11 00:00:00" fixdate="2010-6-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update OBR Application Resolver to use OBR 1.6</summary>
      <description>In the initial OBRApplicationResolver we had to do some pretty nasty things to get it to work because of the way OBR works. The two biggest are:1. We had to generate a repository.xml for the application by value content to resolve against, this had to be written to disk and then removed to add it to OBR.2. We had to add a private repository (the application by value content) as a global repository. This meant that if someone else used OBR they could have ended up with invalid results. Also it meant we could only resolve one application at a time.3. The application was resolved against the current framework, and the bundles in the current framework would be excluded from the results. Since the resolution info can be stored in the application in the DEPLOYMENT.MF which could be used in a different JVM with different bundles in the framework you could end up with an app not working in the target framework.The latest level of OBR has fixes for these 3 issues, so we should try to update it so it works against OBR 1.6.Oh and OBR 1.6 appears to be faster at parsing the repo.xml files, so every performance improvement helps.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-obr-resolver.src.main.resources.OSGI-INF.blueprint.obr-resolver.xml</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.OBRAriesResolver.java</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.impl.ResourceImpl.java</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.impl.RequirementImpl.java</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.impl.CapabilityImpl.java</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.impl.ApplicationResourceImpl.java</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.generator.RepositoryDescriptorGenerator.java</file>
      <file type="M">application.application-obr-resolver.pom.xml</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRAppManagerTest.java</file>
      <file type="M">application.application-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="34" opendate="2009-10-21 00:00:00" fixdate="2009-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement Provisioning Service MBean</summary>
      <description>Implement Provisioning Service MBean which manages a Provisioning Service.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.agent.JMXAgentImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="340" opendate="2010-6-15 00:00:00" fixdate="2010-6-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>All projects that use org.apache.felix.configadmin should define exclusions for this artifact</summary>
      <description>org.osgi.foundation is a transitive dependency of the org.apache.felix.configadmin artifact. Unfortunately, org.osgi.foundation contains classes that are normally shipped with JDK and this leads to problems with compiling projects under Eclipse (as 'mvn eclipse:eclipse' places the classpath entry for org.osgi.foundation above the one for the JDK). &lt;dependency&gt; &lt;groupId&gt;org.apache.felix&lt;/groupId&gt; &lt;artifactId&gt;org.apache.felix.configadmin&lt;/artifactId&gt; &lt;version&gt;1.2.4&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.felix&lt;/groupId&gt; &lt;artifactId&gt;org.osgi.compendium&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.felix&lt;/groupId&gt; &lt;artifactId&gt;org.osgi.core&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt;Should be used instead of: &lt;dependency&gt; &lt;groupId&gt;org.apache.felix&lt;/groupId&gt; &lt;artifactId&gt;org.apache.felix.configadmin&lt;/artifactId&gt; &lt;version&gt;1.2.4&lt;/version&gt; &lt;/dependency&gt;This change has already been applied to several Aries subprojects, but it hasn't for jpa, jmx, subsystem, and web.</description>
      <version>None</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">web.pom.xml</file>
      <file type="M">subsystem.pom.xml</file>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jmx.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="341" opendate="2010-6-23 00:00:00" fixdate="2010-6-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Augment Aries OBR Application Resolver to have equivalent function to the geronimo OBR resolver.</summary>
      <description>While we were spinning the 0.1 release Geronimo needed a resolver that worked with OBR 1.6 so they forked the Aries resolver. The geronimo resolver now has function that is not in the aries resolver. Since the aries resolver now works with OBR 1.6 if we can get the geronimo enhancements into the Aries one we can have a single OBR resolver.I believe the only enhancement that the Geronimo resolver now has is that it can handle optional dependencies in addition to required ones.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.OBRAriesResolver.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="345" opendate="2010-6-29 00:00:00" fixdate="2010-7-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make the blueprint tutorial wotk with the the post-release build</summary>
      <description>The tutorial needs updating to build with '0.2-incubating-SNAPSHOT' etc</description>
      <version>0.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">tutorials.blueprint.tutorial-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">tutorials.blueprint.tutorial-modules.pom.xml</file>
      <file type="M">tutorials.blueprint.tutorial-modules.greeter-server-osgi.pom.xml</file>
      <file type="M">tutorials.blueprint.tutorial-modules.greeter-server-blueprint.pom.xml</file>
      <file type="M">tutorials.blueprint.tutorial-modules.greeter-client-osgi.pom.xml</file>
      <file type="M">tutorials.blueprint.tutorial-modules.greeter-client-blueprint.pom.xml</file>
      <file type="M">tutorials.blueprint.tutorial-modules.greeter-api.pom.xml</file>
      <file type="M">tutorials.blueprint.tutorial-assembly.src.main.docs.instructions.html</file>
      <file type="M">tutorials.blueprint.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="347" opendate="2010-7-4 00:00:00" fixdate="2010-7-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GOAT: Move the implementations of RelationshipInfoProvider and ComponentInfoProvider out of the web bundle and into the api bundle</summary>
      <description>Not sure that they fit in the API bundle either - but it's better than having them as part of the web bundle.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.goat.goat-web.src.main.java.org.apache.aries.samples.goat.info.RelationshipInfoImpl.java</file>
      <file type="M">samples.goat.goat-web.src.main.java.org.apache.aries.samples.goat.info.ComponentInfoImpl.java</file>
      <file type="M">samples.goat.goat-dummy-provider.pom.xml</file>
      <file type="M">samples.goat.goat-api.src.main.java.org.apache.aries.samples.goat.api.RelationshipInfoImpl.java</file>
      <file type="M">samples.goat.goat-api.src.main.java.org.apache.aries.samples.goat.api.ComponentInfoImpl.java</file>
      <file type="M">samples.goat.goat-api.pom.xml</file>
      <file type="M">samples.goat.goat-web.src.main.resources.WEB-INF.dwr.xml</file>
      <file type="M">samples.goat.goat-web.src.main.java.org.apache.aries.samples.goat.web.ServerSideClass.java</file>
      <file type="M">samples.goat.goat-web.pom.xml</file>
      <file type="M">samples.goat.goat-info-enhancer.src.main.java.org.apache.aries.samples.goat.enhancer.ModelInfoEnhancerService.java</file>
      <file type="M">samples.goat.goat-dummy2-provider.src.main.java.org.apache.aries.samples.goat.dummy.DummyRelationshipProvider.java</file>
      <file type="M">samples.goat.goat-dummy2-provider.src.main.java.org.apache.aries.samples.goat.dummy.DummyInfoProvider.java</file>
      <file type="M">samples.goat.goat-dummy-provider.src.main.java.org.apache.aries.samples.goat.dummy.DummyRelationshipProvider.java</file>
      <file type="M">samples.goat.goat-dummy-provider.src.main.java.org.apache.aries.samples.goat.dummy.DummyInfoProvider.java</file>
      <file type="M">samples.goat.goat-bundlecontext-modelprovider.src.main.java.org.apache.aries.samples.goat.bundlecontextmodel.BundleContextInfoProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="348" opendate="2010-7-5 00:00:00" fixdate="2010-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GOAT:Fix the info-enhancer failing to start reliably</summary>
      <description>The info-enhancer sometimes starts and sometimes doesn't</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.goat.goat-info-enhancer.src.main.java.org.apache.aries.samples.goat.enhancer.ServiceInterceptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="35" opendate="2009-10-22 00:00:00" fixdate="2009-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement Service State MBean</summary>
      <description>Implement the Service State MBean which provides access to the service state of the framework (properties of a specific service, bundles using the service etc.)</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.ServiceStateMBeanHandler.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.framework.ServiceState.java</file>
      <file type="M">jmx.jmx-api.src.main.java.org.osgi.jmx.framework.ServiceStateMBean.java</file>
    </fixedFiles>
  </bug>
  <bug id="356" opendate="2010-7-12 00:00:00" fixdate="2010-7-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make jndi proxy creation more flexible and, in the aries context, optional</summary>
      <description>There are a lot of cases when the current proxy creation fails, such as when a class is in the set of interfaces we're trying to proxy. We should:1.allow using cglib to proxy classes.2. if the class can't be proxied, and a proxy is required (in the osgi: namespace) leave it out3. (behavior up for debate) in the aries:services namespace, if there is a problem proxying, just return the raw service.An example of when a service can't be proxied is it is a final class such as javax.mail.Session.There's discussion on the dev list about what is appropriate for (3). I'm committing my proposal to give us something concrete to discuss.</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.pom.xml</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.ServiceRegistryListContext.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.ServiceRegistryContext.java</file>
      <file type="M">jndi.jndi-url.pom.xml</file>
      <file type="M">jndi.jndi-url.src.test.java.org.apache.aries.jndi.url.ServiceRegistryContextTest.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.ServiceHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="367" opendate="2010-7-22 00:00:00" fixdate="2010-9-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>AriesTrader - incompatible column warnings when reinitializing the db tables using jpa</summary>
      <description>We get warnings of incompatible columns when attempting to initialize the database using JPA annotations due to differences in the size of varchar columns (255 vs. 250).</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.QuoteDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.OrderDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.HoldingDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.AccountProfileDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.AccountDataBeanImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="374" opendate="2010-8-5 00:00:00" fixdate="2010-8-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JPA Quiesce Participant support</summary>
      <description>The JPA container should be able to intgrate with the new Quiesce API</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jpa.jpa-container-testbundle.src.main.resources.OSGI-INF.persistence.persistence.xml</file>
      <file type="M">jpa.jpa-container-testbundle.pom.xml</file>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistryTest.java</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.impl.PersistenceContextManagerTest.java</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.impl.GlobalPersistenceManagerTest.java</file>
      <file type="M">jpa.jpa-container-context.src.main.resources.OSGI-INF.blueprint.jpa.xml</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.impl.GlobalPersistenceManager.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.QuiesceParticipantImpl.java</file>
      <file type="M">jpa.jpa-container.src.test.java.org.apache.aries.jpa.container.PersistenceBundleLifecycleTest.java</file>
      <file type="M">jpa.jpa-container.src.main.resources.OSGI-INF.blueprint.jpa.xml</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.PersistenceBundleManager.java</file>
      <file type="M">jpa.jpa-container.pom.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.quiesce.itest.QuiesceJPAContextTest.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.context.itest.JPAContextTest.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.JPAContainerTest.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.impl.QuiesceParticipantImpl.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.impl.ManagedPersistenceContextFactory.java</file>
      <file type="M">jpa.jpa-container-context.pom.xml</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.quiesce.itest.QuiesceJPATest.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.impl.PersistenceContextManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="378" opendate="2010-8-11 00:00:00" fixdate="2010-8-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Samples error after restart of Blog or AriesTrader sample using JPA</summary>
      <description>While running the Blog sample in the provided Blog-Assembly and the JPA EBA I noticed the following error. Starting the sample works as expected and everything works fine the first time. However, after stopping and then restarting the assembly the following error is encountered when trying to do anything that will access JPA persistence. I also noticed the same error using the AriesTrader sample when using JPA persistence (either application manager or container managed). If I used JDBC persistence for AriesTrader I did not encounter the error. A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName propertyHere is the complete output with full stack trace from the Blog sample:Problem accessing /org.apache.aries.samples.blog.web/ViewBlog. Reason: There were errors initializing your configuration: &lt;openjpa-2.0.0-beta3-r422266:926797 fatal user error&gt; org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property. at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294) at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602) at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634) at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193) at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57) at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70) at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163) at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66) at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151) at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632) at $Proxy9.getNoOfBlogEntries(Unknown Source) at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89) at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98) at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:322) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)Caused by:&lt;openjpa-2.0.0-beta3-r422266:926797 nonfatal general error&gt; org.apache.openjpa.persistence.PersistenceException: There were errors initializing your configuration: &lt;openjpa-2.0.0-beta3-r422266:926797 fatal user error&gt; org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property. at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294) at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602) at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634) at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193) at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57) at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70) at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163) at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66) at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151) at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632) at $Proxy9.getNoOfBlogEntries(Unknown Source) at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89) at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98) at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:322) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520) at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:208) at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57) at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70) at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163) at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66) at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151) at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632) at $Proxy9.getNoOfBlogEntries(Unknown Source) at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89) at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98) at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:322) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)Caused by: java.lang.RuntimeException: There were errors initializing your configuration: &lt;openjpa-2.0.0-beta3-r422266:926797 fatal user error&gt; org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property. at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294) at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602) at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634) at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193) at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57) at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70) at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163) at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66) at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151) at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632) at $Proxy9.getNoOfBlogEntries(Unknown Source) at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89) at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98) at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:322) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520) at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:308) at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602) at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634) at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193) ... 45 moreCaused by:java.lang.RuntimeException: There were errors initializing your configuration: &lt;openjpa-2.0.0-beta3-r422266:926797 fatal user error&gt; org.apache.openjpa.util.UserException: A JDBC Driver or DataSource class name must be specified in the ConnectionDriverName property. at org.apache.openjpa.jdbc.schema.DataSourceFactory.newDataSource(DataSourceFactory.java:76) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.createConnectionFactory(JDBCConfigurationImpl.java:836) at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getConnectionFactory(JDBCConfigurationImpl.java:724) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:294) at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602) at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634) at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193) at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57) at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70) at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163) at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66) at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151) at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632) at $Proxy9.getNoOfBlogEntries(Unknown Source) at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89) at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98) at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:322) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520) at org.apache.openjpa.lib.conf.ConfigurationImpl.instantiateAll(ConfigurationImpl.java:308) at org.apache.openjpa.conf.OpenJPAConfigurationImpl.instantiateAll(OpenJPAConfigurationImpl.java:1602) at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:634) at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:193) at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213) at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57) at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:70) at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:131) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:86) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.createQuery(JTAEntityManager.java:163) at org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.getNoOfBlogEntries(BlogPersistenceServiceImpl.java:119) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.proxy.Collaborator$1.invoke(Collaborator.java:66) at org.apache.aries.blueprint.proxy.Collaborator.invoke(Collaborator.java:151) at org.apache.aries.samples.blog.persistence.jpa.$BlogPersistenceServiceImpl2018048960.getNoOfBlogEntries(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe$JdkProxyFactory$1.invoke(AbstractServiceReferenceRecipe.java:632) at $Proxy9.getNoOfBlogEntries(Unknown Source) at org.apache.aries.samples.blog.biz.BlogEntryManagerImpl.getNoOfPosts(BlogEntryManagerImpl.java:89) at org.apache.aries.samples.blog.biz.BloggingServiceImpl.getNoOfEntries(BloggingServiceImpl.java:98) at org.apache.aries.samples.blog.web.ViewBlog.doGet(ViewBlog.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.ops4j.pax.web.service.internal.WelcomeFilesFilter.doFilter(WelcomeFilesFilter.java:169) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:322) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)</description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.PersistenceUnitInfoImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="379" opendate="2010-8-12 00:00:00" fixdate="2010-8-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update Samples to use Openjpa 2.0.0 rather than 2.0.0-beta3</summary>
      <description></description>
      <version>0.2</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="38" opendate="2009-10-22 00:00:00" fixdate="2009-11-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Setup modules for JMX component</summary>
      <description>Project &amp; build setup for the JMX component + aries-jmx aries-jmx-api aries-jmx-core</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="381" opendate="2010-8-17 00:00:00" fixdate="2010-10-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove workaround for Equinox Bug 298894.</summary>
      <description>Remove workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=298894. Call refreshPackages() on each bundle as it's uninstalled.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-framework.src.main.java.org.apache.aries.application.runtime.framework.BundleFrameworkImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="382" opendate="2010-8-18 00:00:00" fixdate="2010-8-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries itests projects need to use version 1.2.1 of maven-paxexam-plugin</summary>
      <description>Similary to servicemix-depends-plugin maven-paxexam-plugin generates an incorrect dependencies.properties file if a SNAPSHOT version needs to be downloaded from a remote repo. The Aries Jira issue related to servicemix-depends-plugin is ARIES-364.The change that was made in maven-paxexam-plugin between version 1.2.0 and 1.2.1 is described here: http://issues.ops4j.org/browse/PAXEXAM-160</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">parent.default-parent.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="383" opendate="2010-8-19 00:00:00" fixdate="2010-1-19 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Implementation of option Blueprint Quiesce Participant</summary>
      <description>Implement Blueprint Quiesce Participant</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintExtender.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-annotation-itest.src.test.java.org.apache.aries.blueprint.itests.BlueprintAnnotationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="387" opendate="2010-8-24 00:00:00" fixdate="2010-7-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ensure there is one setter that matches the type of the getter</summary>
      <description>Per discussion on devlist - http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201008.mbox/%3cAANLkTin8jmMkT2mSeX+PKqruG6=Et5z92ZFCbNM+J2c=@mail.gmail.com%3eIf there isn't one setter that matches the type of the getter, we need to throw ComponentDefinitionException and fail the creation of the bean.</description>
      <version>None</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.utils.ReflectionUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="390" opendate="2010-8-26 00:00:00" fixdate="2010-2-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Deadlock in Blueprint service lookup</summary>
      <description>As described in https://issues.apache.org/jira/browse/GERONIMO-5554 there is potential deadlock in the Blueprint service code.In particular, ServiceRecipe has a lock hierarchy of getting an instance lock on the ServiceRecipe instance and then getting the Blueprint container-wide lock for the blueprint repository. However, while the blueprint container is creating its instances a thread may also come into the ServiceRecipe lookup code already having the blueprint repository lock.In such a case deadlock is possible because two threads can attempt to obtain the lock in either order.</description>
      <version>0.2</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.test.blueprint.BlueprintMBeanTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="393" opendate="2010-8-31 00:00:00" fixdate="2010-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blog Assembly is broken again :(</summary>
      <description>Since integrating the changes for isolation the blog sample assembly has been broken because it now needs two additional bundles.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="394" opendate="2010-8-31 00:00:00" fixdate="2010-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tidy up some minor issues in the blog sample</summary>
      <description>I've noticed that the JPA BlogPersistence service contains some code relating to a DataSource that is never hit. I think this is a hold over from the JDBC implementation, so I'll remove the code here.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.blog-persistence-jpa.src.main.java.org.apache.aries.samples.blog.persistence.jpa.BlogPersistenceServiceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="402" opendate="2010-9-7 00:00:00" fixdate="2010-9-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update AriesTrader so that it loads the sql files to create DBs using getResource</summary>
      <description>Currently there is some pretty crazy code in the AriesTrader sample that recreates the databases on demand as requested by the user. This needs to be cleaned up so that it loads the sql from the bundle rather than expecting it to be available directly in the Equinox assembly or an expanded WAR file as was the case in the former DayTrader code. Also need to clean up some of the sql and entity column lengths so that they are consistent.</description>
      <version>0.1,0.2</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.resources.dbscripts.other.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.resources.dbscripts.oracle.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.resources.dbscripts.derby.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.resources.dbscripts.db2.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.java.org.apache.aries.samples.ariestrader.web.TradeConfigServlet.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.java.org.apache.aries.samples.ariestrader.web.TradeBuildDB.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.QuoteDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.OrderDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.HoldingDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.AccountProfileDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-entities.src.main.java.org.apache.aries.samples.ariestrader.entities.AccountDataBeanImpl.java</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.resources.tradeDB.sql</file>
    </fixedFiles>
  </bug>
  <bug id="406" opendate="2010-9-14 00:00:00" fixdate="2010-9-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Regression in blueprint transactions support</summary>
      <description>The Blueprint transactions namespace used to default the transaction strategy to "Required" if it was not specified. This no longer happens.&lt;tx:transaction/&gt; should mean the same thing as &lt;tx:transaction method="*" value="Required"/&gt;</description>
      <version>0.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-blueprint.src.test.resources.org.apache.aries.transaction.aries2.xml</file>
      <file type="M">transaction.transaction-blueprint.src.test.java.org.apache.aries.transaction.NameSpaceHandlerTest.java</file>
      <file type="M">transaction.transaction-blueprint.src.main.resources.org.apache.aries.transaction.parsing.transactionv11.xsd</file>
      <file type="M">transaction.transaction-blueprint.src.main.java.org.apache.aries.transaction.TxComponentMetaDataHelperImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="429" opendate="2010-9-28 00:00:00" fixdate="2010-9-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add an option on the &lt;cm:property-placeholder/&gt; element to reload the whole blueprint container if the configuration changes</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ExtendedBlueprintContainer.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.resources.OSGI-INF.blueprint.blueprint-cm.xml</file>
      <file type="M">blueprint.blueprint-cm.src.main.resources.org.apache.aries.blueprint.compendium.cm.blueprint-cm.xsd</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="430" opendate="2010-9-29 00:00:00" fixdate="2010-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Whiteboard registration support for JMX DynamicMBeans</summary>
      <description>As proposed on dev &amp;#91;1&amp;#93; I have hacked together a small piece of code which implements support for the whiteboard pattern for registering MBeans with MBean servers.The code is in my Sling whiteboard at http://svn.apache.org/repos/asf/sling/whiteboard/fmeschbe/jmx-whiteboard but is intended to be added to the Aries JMX functionality.The single-class implementation picks up DynamicMBean servies registered as "javax.management.DynamicMBean". Each such service is registered with each registered MBeanServer service (similar to how the framework MBeans are registered by jmx.core). The JMX ObjectName can either be provided with a "jmx.objectname" service registration property (String type) or the DynamicMBean may implement the MBeanRegistration interface in which case the ObjectName is provided by the preRegister method during registration.This is just a first hack which has not really been tested but mainly serves to show the idea. It is currently implemented as a Declarative Services component but may as well be implemented as a regular class using ServerTracker instances and instantiated by the BundleActivator (which may be a good idea to make this as widely usable as possible - for example in Sling we don't currently use Blueprint, so a Blueprint based implementation would be a no-go for us )If there would be interest in this, I would try to test and validate this piece with the hopes to get a release soon (may be released independently, hint hint )&amp;#91;1&amp;#93; http://markmail.org/message/p464v4gst2uifm5h</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.pom.xml</file>
      <file type="M">jmx.jmx-whiteboard.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="431" opendate="2010-9-30 00:00:00" fixdate="2010-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for "bad" OSGi Web container implementations</summary>
      <description>I was playing around with the Jetty implementation of the OSGi web container chapter. It has some interesting behaviours, the most significant is it sets the java.naming.initial.context system property, but doesn't register it in the service registry. It relies on the default JDK JNDI behaviour which uses the thread context classloader to load the initial context factory. Gemini Web has a similar bug. I can't fix those web container implementations, but since I want to be able to use these I need a solution. Rather than a bespoke solution that works for me with Jetty I'll check in a new project which will provide a bundle to fix these buggy OSGi Web container implementations.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="432" opendate="2010-10-1 00:00:00" fixdate="2010-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove the system.out.println in our production code</summary>
      <description>There are a couple of places we print out some messages by using system.out in our non-test code. This is not good.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-annotation-impl.src.main.java.org.apache.aries.blueprint.annotation.impl.BlueprintAnnotationScannerImpl.java</file>
      <file type="M">blueprint.blueprint-annotation-impl.src.main.java.org.apache.aries.blueprint.annotation.impl.Activator.java</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="433" opendate="2010-10-1 00:00:00" fixdate="2010-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Equals method do not work when using JDK proxies</summary>
      <description></description>
      <version>0.2</version>
      <fixedVersion>0.3,blueprint-0.2.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.Collaborator.java</file>
    </fixedFiles>
  </bug>
  <bug id="434" opendate="2010-10-1 00:00:00" fixdate="2010-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Sort the imported package to make it easier to read</summary>
      <description></description>
      <version>0.2</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">web.web-urlhandler.src.main.java.org.apache.aries.web.converter.impl.WarToWabConverterImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="435" opendate="2010-10-1 00:00:00" fixdate="2010-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix a problem when the bundle is being stopped while the blueprint container is being created</summary>
      <description>It can lead to an exception being thrown because the blueprint container tries to register itself in the osgi registry while the bundle is stopping already.</description>
      <version>0.2</version>
      <fixedVersion>0.3,blueprint-0.2.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="452" opendate="2010-10-12 00:00:00" fixdate="2010-10-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide ability for the JNDI environment to be augmented by an integrator</summary>
      <description>In my environment I need to be able to augment the JNDI environment with additional properties before a context is created. I will add a service based plug point for this.</description>
      <version>0.2</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.Utils.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.startup.Activator.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextManagerService.java</file>
      <file type="M">jndi.jndi-bundle.pom.xml</file>
      <file type="M">jndi.jndi-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="466" opendate="2010-10-24 00:00:00" fixdate="2010-5-24 01:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>org.apache.aries.jndi-0.2-incubating includes org.osgi.enterprise implementation</summary>
      <description>org.apache.aries.jndi-0.2-incubating includes org.osgi.enterprise bundle implementations which causes problems when using &lt;dependency&gt; &lt;groupId&gt;org.osgi&lt;/groupId&gt; &lt;artifactId&gt;org.osgi.enterprise&lt;/artifactId&gt; &lt;version&gt;4.2.0&lt;/version&gt;&lt;/dependency&gt;as well. If used with org.osgi.enterprise one gets an error that the Initial JNDI Context Factory is already registered and aries JNDI can not work. I could get around this problem by using org.eclipse.gemini.naming.framework with org.osgi.enterprise + rest of aries. So my suggestion is simply remove org.osgi api implementation from org.apache.aries.jndi-0.2-incubating and use the one from reference org.osgi.enterprise bundle.</description>
      <version>0.2,0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.AriesApplicationManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="468" opendate="2010-10-26 00:00:00" fixdate="2010-12-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create common Proxy creation service to share proxying between blueprint, JNDI and other people.</summary>
      <description>JNDI and blueprint both do proxying stuff. Rather than have multiple implementations to share lets common it up.As a part of this we should common up our Bundle to ClassLoader adapter implementations as documented on this thread:http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201010.mbox/%3cAANLkTik-Bj4p66cz6jKoJ3-ZDkYd9eomj=6mwBeG4CZD@mail.gmail.com%3e</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">proxy.pom.xml</file>
      <file type="M">proxy.proxy-api.src.main.java.org.apache.aries.proxy.InvocationHandlerWrapper.java</file>
      <file type="M">proxy.proxy-api.src.main.java.org.apache.aries.proxy.ProxyFactory.java</file>
      <file type="M">proxy.proxy-api.src.main.java.org.apache.aries.proxy.ProxyManager.java</file>
      <file type="M">jndi.jndi-url.pom.xml</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.CgLibProxyFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.JdkProxyFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.ProxyFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.ServiceHelper.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.Activator.java</file>
      <file type="M">jndi.jndi-url.src.test.java.org.apache.aries.jndi.url.ServiceRegistryContextTest.java</file>
      <file type="M">blueprint.blueprint-api.src.main.java.org.osgi.service.blueprint.container.BlueprintEvent.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.startup.Activator.java</file>
      <file type="M">jndi.pom.xml</file>
      <file type="M">util.pom.xml</file>
      <file type="M">util.src.main.java.org.apache.aries.util.BundleToClassLoaderAdapter.java</file>
      <file type="M">proxy.proxy-bundle.pom.xml</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextProvider.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ComponentNameAlreadyInUseException.java</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintExtender.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintQuiesceParticipant.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceListRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.AsmInterceptorWrapper.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.Collaborator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.FinalModifierException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxyClassBytecodeGenerationException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxyClassDefinitionException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxyClassInstantiationException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassAdapter.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassGenerator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassHierarchyAdapter.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassMethodHashSet.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.UnableToLoadProxyException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.UnableToProxyException.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassCovariant.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassCovariantOverride.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassFinal.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassFinalMethod.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassGeneral.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassGeneric.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassGenericSuper.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassPrivateConstructor.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassSuper.java</file>
      <file type="M">blueprint.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="469" opendate="2010-10-26 00:00:00" fixdate="2010-2-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update jpa:context entity manager factory service filter to be more accurate</summary>
      <description>Update the filter from (&amp;(org.apache.aries.jpa.proxy.factory=*).. to (&amp;(org.apache.aries.jpa.proxy.factory=true)... to be more accurate, since that is the service property value being registered with.</description>
      <version>0.2</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-blueprint-aries.src.test.java.org.apache.aries.jpa.blueprint.aries.test.NSHandlerTest.java</file>
      <file type="M">jpa.jpa-blueprint-aries.src.main.java.org.apache.aries.jpa.blueprint.aries.impl.NSHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="470" opendate="2010-10-26 00:00:00" fixdate="2010-10-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>fix hudson build break</summary>
      <description>Fix the build break reported by Hudson: See &lt;https://hudson.apache.org/hudson/job/Aries/org.apache.aries.application$org.apache.aries.application.runtime.isolated.itests/715/&gt;</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="472" opendate="2010-10-28 00:00:00" fixdate="2010-10-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>BundleFramework not stopping bundles correctly</summary>
      <description>The BundleFramework.stop(Bundle b) method is not checking for fragments before stopping the given bundle. The behaviour should mirror the checking in the start method.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-framework.src.main.java.org.apache.aries.application.runtime.framework.BundleFrameworkImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="496" opendate="2010-11-17 00:00:00" fixdate="2010-1-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provision against local repository should be made configurable</summary>
      <description>Currently, Apache Aries provisioner always provisions an EBA against local runtime. Most Application Servers do not wish to expose their local runtime to customers' EBAs. Therefore, they may wish to change the provision behaviour. We should make this behaviour configurable and let application servers decide the provision behaviour according to their own enviornment.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.AppConstants.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.UpdateAppTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.OBRAriesResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="500" opendate="2010-11-25 00:00:00" fixdate="2010-11-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Field injection does not consider fields defined on parent classes</summary>
      <description></description>
      <version>0.2</version>
      <fixedVersion>0.3,blueprint-0.2.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.utils.ReflectionUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="503" opendate="2010-11-30 00:00:00" fixdate="2010-11-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support for JNDI RMI URL handler</summary>
      <description>We should provide out-of-the-box support for RMI urls.</description>
      <version>0.2</version>
      <fixedVersion>0.3</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-rmi.src.main.java.org.apache.aries.jndi.rmi.Activator.java</file>
      <file type="M">jndi.pom.xml</file>
      <file type="M">jndi.jndi-bundle.src.main.java.org.apache.aries.jndi.priv.Activator.java</file>
      <file type="M">jndi.jndi-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="505" opendate="2010-12-2 00:00:00" fixdate="2010-12-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do not use System.err nor Throwable#printStackTraces() but rather use a jul Logger</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-rmi.src.main.java.org.apache.aries.jndi.rmi.Activator.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.startup.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="506" opendate="2010-12-3 00:00:00" fixdate="2010-1-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Filter out deployments where an isolated bundle is provisioned twice to provide conflicting copies of a package</summary>
      <description>The provisioning system currently will quite happily allow a number of corner cases where bundles intend to share a service based on a common view of a package but end up wiring to different package versions because of incompatible version ranges.The most basic setup where this happens is an application with three isolated bundles: api, consumer, provider. Consumer uses a service from producer based on an interface in package P. Consumer consumes package P at [1.1.0,2.0.0) while producer uses P at [1.0.0,1.1.0). There is two versions of api one exporting P at 1.0.0 and another exporting version 1.1.0 of P. Note that this cannot work.In this setup with the current resolver api will be provisioned twice: once as isolated content and once as provisioned content providing a package to the isolated content. So despite the fact that the scenario is invalid we produce a deployment.Now, there are corner cases where the deployment would be valid when no service is shared and the package should not be part of the isolated content in the first place. This scenario should still be supported with an explicit use-bundle clause.</description>
      <version>0.1,0.2,0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-deployment-management.src.test.java.org.apache.aries.application.deployment.management.DeploymentGeneratorTest.java</file>
      <file type="M">application.application-deployment-management.src.main.resources.org.apache.aries.application.deployment.management.messages.DeploymentManagementMessages.properties</file>
      <file type="M">application.application-deployment-management.src.main.java.org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="508" opendate="2010-12-3 00:00:00" fixdate="2010-12-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JNDI URL handler should be able to (if configured) wait for new matching services</summary>
      <description>The JNDI service spec says that osgi:service should not wait for replacement services. It would be nice if the caller could request that the proxied damped service does wait for replacements.I'll introduce an org.apache.aries.jndi.rebind.timeout property, expressed in milliseconds. This should support a String, or Integer value.</description>
      <version>0.2</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-url.src.test.java.org.apache.aries.jndi.url.ServiceRegistryContextTest.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.ServiceHelper.java</file>
      <file type="M">jndi.jndi-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="554" opendate="2011-1-22 00:00:00" fixdate="2011-2-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>aries JNDI bundle breaks remote JMX clients via RMI</summary>
      <description>If the aries JNDI bundles are present in the environment, connections to remote JMX agents fail. I could recreate the issue with a bundle containing only the lineJMXConnectorFactory.connect(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1717/jmxrmi"));in the start() method of the bundle activator (and nothing else).The bundle will start both on equinox and felix as long as the aries jndi bundles (I tried version 0.2 and 0.3-SNAPSHOT) are not running and any java application that allows remote JMX at that port is running (check with jconsole if you are unsure). It will not start as soon as the jndi bundle is started. As far as I got in debugging this, the JMXConnectionFactory is trying to do a JNDI lookup for the RMI connection and is delegated to the Aries JNDI coding, that is trying to determine a bundle context for the call.</description>
      <version>0.2,0.3</version>
      <fixedVersion>jndi.core-0.3.1,jndiuberbundle0.3.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.Utils.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiObjectFactoryBuilder.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="584" opendate="2011-2-23 00:00:00" fixdate="2011-7-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint Managed Service Factory Instantiates Duplicate Service</summary>
      <description>Creating a simple managed service factory, two services are instantiated for a single factory configuration.</description>
      <version>0.2,0.3</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestConfigAdmin.java</file>
      <file type="M">blueprint.blueprint-cm.src.test.java.org.apache.aries.blueprint.compendium.cm.ManagedServiceFactoryTest.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmManagedServiceFactory.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
