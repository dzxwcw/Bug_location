<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="ARIES">
  <bug id="113" opendate="2010-1-11 00:00:00" fixdate="2010-1-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use headers when resolving dependencies for BundleStateMBean</summary>
      <description>The BundleStateMBean #getImportedPackages(long bundleId) &amp; #getRequiredBundles(long) methods resolve dependencies using iteration over all bundles in the framework.The performance of these methods can be improved by first checking the manifest headers and using these values for PackageAdmin queries.(Note: Bundles using DynamicImport still require full iteration)</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.util.FrameworkUtilsTest.java</file>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.codec.BundleDataTest.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.util.FrameworkUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="1131" opendate="2013-11-4 00:00:00" fixdate="2013-1-4 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Extend blueprint.service import version range in blueprint.webosgi bundle</summary>
      <description>blueprint.webosgi 1.0.0 bundle imports org.apache.aries.blueprint.service package with version 1.3.0.Unfortunately, blueprint-core 1.3.0 exports this package with version 1.2.0 (which is not correct, I will create another Jira for that).In order to be able to use blueprint.webosgi with blueprint-core 1.3.0, the import version range should be extended to [1.2, 2).</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-web-osgi.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="292" opendate="2010-4-17 00:00:00" fixdate="2010-5-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unable to delete the *.eba file from the samples/blog/blog-assembly/target/load folder while it was running.</summary>
      <description>Moving to version 0.4</description>
      <version>0.3</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.AriesApplicationManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="396" opendate="2010-9-2 00:00:00" fixdate="2010-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move Subsystems to use org.apache.felix.bundlerepository instead of org.osgi.service.obr</summary>
      <description>Need to move up to the latest bundle repository support from Felix.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdminTest.java</file>
      <file type="M">subsystem.subsystem-core.src.test.java.org.apache.aries.subsystem.core.ResourceResolverTest.java</file>
      <file type="M">subsystem.subsystem-core.src.test.java.org.apache.aries.subsystem.core.MockRepositoryAdminImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.RepositoryDescriptorGenerator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.BundleInfoImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceResolverImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="398" opendate="2010-9-3 00:00:00" fixdate="2010-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cleanup in application runtime</summary>
      <description>There is various minor problems I have encountered in the new application runtime whlie playing around with update scenarios. I hope to check these in as I go along getting my scenario to work.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.repository.ApplicationRepository.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.BundleRepository.java</file>
      <file type="M">application.application-runtime-framework.src.main.java.org.apache.aries.application.runtime.framework.BundleFrameworkImpl.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-runtime-repository.src.main.java.org.apache.aries.application.runtime.repository.BundleRepositoryManagerImpl.java</file>
      <file type="M">application.application-itests.src.test.resources.isolated.sample-blueprint.xml</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.isolated.sample.HelloWorldImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="399" opendate="2010-9-4 00:00:00" fixdate="2010-12-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add update function and plug point to application api</summary>
      <description>In the application API updating an application can be achieved by uninstalling and then reinstalling it. An update method will allow to move from one deployment of an application to another deployment of the same application in one step.The implementation should also provide a pluggable way to affect the update because there are several ways of affecting updates that depend on the deployment manifest changes. The default implementation to fall back to can simply uninstall and then reinstall under the covers.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime.src.main.java.org.apache.aries.application.runtime.impl.ApplicationContextManagerImpl.java</file>
      <file type="M">application.application-runtime-isolated.src.main.java.org.apache.aries.application.runtime.isolated.impl.ApplicationContextManagerImpl.java</file>
      <file type="M">application.application-runtime-isolated.src.main.java.org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl.java</file>
      <file type="M">application.application-runtime-framework-management.src.main.resources.OSGI-INF.blueprint.bundle-framework-management.xml</file>
      <file type="M">application.application-runtime-framework-management.src.main.java.org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl.java</file>
      <file type="M">application.application-management.src.test.java.org.apache.aries.application.management.impl.AriesApplicationManagerImplTest.java</file>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.AriesApplicationManagerImpl.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.BundleFrameworkManager.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.BundleConverter.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.AriesApplicationManager.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.AriesApplicationContextManager.java</file>
      <file type="M">application.application-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="4" opendate="2009-9-29 00:00:00" fixdate="2009-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support for pass-through metadata</summary>
      <description>When implementing a blueprint custom namespace handler with an underlying technology such as jaxb, the parser may already have an object created, so the namespace handler needs to be able to return this very instance and not force to recreate the object fully through BeanMetadata.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.PassThroughMetadata.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.TestBlueprintContainer.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.AbstractBlueprintTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.reflect.MetadataUtil.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.reflect.EnvironmentMetadataImpl.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.di.EnvironmentRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.RecipeBuilder.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="40" opendate="2009-10-23 00:00:00" fixdate="2009-10-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move Application Metadata Processing from contrib to trunk</summary>
      <description>Move Application Metadata Processing from contrib to trunk.The code processes an application description provided in a manifest format. I will document this on the wiki and post to the list to start a discussion.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="400" opendate="2010-9-6 00:00:00" fixdate="2010-3-6 01:00:00" resolution="Not A Problem">
    <buginformation>
      <summary>Use Java Futures for Subsystem Admin</summary>
      <description>Subsystem Installation is asynchronous. The current API allows cancellations of an installation but this only cancels the current install. This can cause problems as what is "current" will change and can result in incorrect cancellations.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.resources.subsystem2.META-INF.MANIFEST.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdminTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdmin2Test.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemAdminImpl.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemEvent.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemAdmin.java</file>
      <file type="M">subsystem.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="401" opendate="2010-9-7 00:00:00" fixdate="2010-9-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>maven bundle plugin update from v 2.0.1 to 2.1.0</summary>
      <description>I still hits a NPE occasionally with 2.0.1 so I think we should try to upgrade to the latest 2.1.0 to see if it improves.WARNING] Exception while updating local OBR: null.lang.NullPointerException at org.apache.felix.obrplugin.ObrUpdate.walkOnTree(ObrUpdate.java:541) at org.apache.felix.obrplugin.ObrUpdate.updateRepository(ObrUpdate.java:239) at org.apache.felix.obrplugin.ObrInstall.updateLocalBundleMetadata(ObrInstall.java:183) at org.apache.felix.obrplugin.ObrInstall.execute(ObrInstall.java:142) at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutora:694) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecExecutor.java:556) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">parent.default-parent.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="403" opendate="2010-9-9 00:00:00" fixdate="2010-2-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add in new Blog itest to use quiesce</summary>
      <description></description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="409" opendate="2010-9-15 00:00:00" fixdate="2010-2-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix samples to use version 1.1 of geronimo-jpa_2.0 spec.</summary>
      <description>The blog sample currently uses geronimo-jpa_2.0_spec-1.0.jar. There was an error in the packaging of this version which is corrected in geronimo-jpa_2.0_spec-1.1.jar. Fixing it will likely imply other minor changes in the blog sample JPA persistence project.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.pom.xml</file>
      <file type="M">samples.blog.blog-persistence-jpa.pom.xml</file>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.filtered-resources.configuration.config.ini</file>
    </fixedFiles>
  </bug>
  <bug id="410" opendate="2010-9-16 00:00:00" fixdate="2010-9-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application itests fail intermittently</summary>
      <description>The application itests fail intermittently.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.maven-eclipse.xml</file>
      <file type="M">application.application-utils.src.main.resources.OSGI-INF.blueprint.app-utils.xml</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.runtime.NoOpResolver.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="411" opendate="2010-9-17 00:00:00" fixdate="2010-9-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Apache Aries blog example currently uses the no-op resolver instead of the obr resolver to resolve the app</summary>
      <description>Currently our blog samples does not use the obr resolver to resolve the application. We need to make the blog sample exercises the resolving logic.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.blog-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.pom.xml</file>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-itests.pom.xml</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.runtime.NoOpResolver.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JpaBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JdbcBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
      <file type="M">samples.blog.blog-biz.src.main.resources.OSGI-INF.blueprint.blueprint.xml</file>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.impl.ModelledBundleResource.java</file>
      <file type="M">samples.blog.blog-biz.src.main.java.org.apache.aries.samples.blog.biz.BloggingServiceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="418" opendate="2010-9-22 00:00:00" fixdate="2010-9-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blog assembly does not work</summary>
      <description>The blog assembly is unable to run the blog sample, and explodes with a blueprint timeout:&amp;#91;Blueprint Extender: 1&amp;#93; ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle org.apache.aries.application.install due to unresolved dependencies &amp;#91;(objectClass=org.apache.aries.application.management.AriesApplicationManager)&amp;#93;java.util.concurrent.TimeoutException at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:273) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637)&amp;#91;Blueprint Extender: 2&amp;#93; ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle org.apache.aries.application.management due to unresolved dependencies [(objectClass=org.apache.aries.application.ApplicationMetadataFactory), (objectClass=org.apache.aries.application.management.spi.resolve.DeploymentManifestManager), (objectClass=org.apache.aries.application.management.spi.convert.BundleConverter), (objectClass=org.apache.aries.application.DeploymentMetadataFactory), (objectClass=org.apache.aries.application.management.spi.runtime.LocalPlatform), (objectClass=org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager)]java.util.concurrent.TimeoutException at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:273) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637)&amp;#91;Blueprint Extender: 2&amp;#93; ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle org.apache.aries.application.deployment.management due to unresolved dependencies [(objectClass=org.apache.aries.application.modelling.ModellingManager), (objectClass=org.apache.aries.application.modelling.ModelledResourceManager), (objectClass=org.apache.aries.application.management.spi.resolve.AriesApplicationResolver), (objectClass=org.apache.aries.application.PostResolveTransformer), (objectClass=org.apache.aries.application.management.spi.runtime.LocalPlatform), (objectClass=org.apache.aries.application.modelling.utils.ModellingHelper)]java.util.concurrent.TimeoutException at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:273) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637)</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-converters.src.main.java.org.apache.aries.application.converters.WabConverterService.java</file>
      <file type="M">application.application-converters.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="419" opendate="2010-9-22 00:00:00" fixdate="2010-10-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide service interceptors in addition to blueprint quiesce</summary>
      <description>The new blueprint quiesce work has added a service interceptor. I think it would be a good imrpovement to allow other interceptors to be pulled from the component registry to be used on services in the same way as is allowed for beans.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="42" opendate="2009-10-27 00:00:00" fixdate="2009-10-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Compilation problem when using JDK 1.5</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.ContentImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.ApplicationMetadataImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="423" opendate="2010-9-22 00:00:00" fixdate="2010-1-22 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Repair the GOAT sample and add enough to the platform to make running the JDBC blog sample possible</summary>
      <description>The GOAT sample assembly in missing application bundles after recent refactoring of application. It woulsd slso be convenient for demo purposes to add enough to the assembly platform to be able to run the blog sample and then use GOAT to look at the bundles.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.goat.goat-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.goat.goat-assembly.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="426" opendate="2010-9-24 00:00:00" fixdate="2010-9-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The Blueprint JMX layer should send notifications for each blueprint event</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.pom.xml</file>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-core.src.main.java.org.apache.aries.jmx.blueprint.impl.RegistrationStandardMBean.java</file>
      <file type="M">jmx.jmx-blueprint-core.src.main.java.org.apache.aries.jmx.blueprint.impl.BlueprintState.java</file>
      <file type="M">jmx.jmx-blueprint-core.src.main.java.org.apache.aries.jmx.blueprint.impl.Activator.java</file>
      <file type="M">jmx.jmx-blueprint-api.src.main.java.org.apache.aries.jmx.blueprint.BlueprintStateMBean.java</file>
    </fixedFiles>
  </bug>
  <bug id="427" opendate="2010-9-26 00:00:00" fixdate="2010-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Get rid of cglib which doesn&amp;#39;t provide anything compared to asm</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-sample.src.main.java.org.apache.aries.blueprint.sample.Foo.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.QuiesceBlueprintTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.MultiBundleWithCgLibTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.MultiBundleWithAsmTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.AbstractIntegrationTest.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.container.AbstractServiceReferenceTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.WrapperedObject.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.Collaborator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.CgLibInterceptorWrapper.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.AsmInterceptorWrapper.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-annotation-itest.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="429" opendate="2010-9-28 00:00:00" fixdate="2010-9-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add an option on the &lt;cm:property-placeholder/&gt; element to reload the whole blueprint container if the configuration changes</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ExtendedBlueprintContainer.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.resources.OSGI-INF.blueprint.blueprint-cm.xml</file>
      <file type="M">blueprint.blueprint-cm.src.main.resources.org.apache.aries.blueprint.compendium.cm.blueprint-cm.xsd</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="430" opendate="2010-9-29 00:00:00" fixdate="2010-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Whiteboard registration support for JMX DynamicMBeans</summary>
      <description>As proposed on dev &amp;#91;1&amp;#93; I have hacked together a small piece of code which implements support for the whiteboard pattern for registering MBeans with MBean servers.The code is in my Sling whiteboard at http://svn.apache.org/repos/asf/sling/whiteboard/fmeschbe/jmx-whiteboard but is intended to be added to the Aries JMX functionality.The single-class implementation picks up DynamicMBean servies registered as "javax.management.DynamicMBean". Each such service is registered with each registered MBeanServer service (similar to how the framework MBeans are registered by jmx.core). The JMX ObjectName can either be provided with a "jmx.objectname" service registration property (String type) or the DynamicMBean may implement the MBeanRegistration interface in which case the ObjectName is provided by the preRegister method during registration.This is just a first hack which has not really been tested but mainly serves to show the idea. It is currently implemented as a Declarative Services component but may as well be implemented as a regular class using ServerTracker instances and instantiated by the BundleActivator (which may be a good idea to make this as widely usable as possible - for example in Sling we don't currently use Blueprint, so a Blueprint based implementation would be a no-go for us )If there would be interest in this, I would try to test and validate this piece with the hopes to get a release soon (may be released independently, hint hint )&amp;#91;1&amp;#93; http://markmail.org/message/p464v4gst2uifm5h</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.pom.xml</file>
      <file type="M">jmx.jmx-whiteboard.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="431" opendate="2010-9-30 00:00:00" fixdate="2010-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for "bad" OSGi Web container implementations</summary>
      <description>I was playing around with the Jetty implementation of the OSGi web container chapter. It has some interesting behaviours, the most significant is it sets the java.naming.initial.context system property, but doesn't register it in the service registry. It relies on the default JDK JNDI behaviour which uses the thread context classloader to load the initial context factory. Gemini Web has a similar bug. I can't fix those web container implementations, but since I want to be able to use these I need a solution. Rather than a bespoke solution that works for me with Jetty I'll check in a new project which will provide a bundle to fix these buggy OSGi Web container implementations.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="432" opendate="2010-10-1 00:00:00" fixdate="2010-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove the system.out.println in our production code</summary>
      <description>There are a couple of places we print out some messages by using system.out in our non-test code. This is not good.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-annotation-impl.src.main.java.org.apache.aries.blueprint.annotation.impl.BlueprintAnnotationScannerImpl.java</file>
      <file type="M">blueprint.blueprint-annotation-impl.src.main.java.org.apache.aries.blueprint.annotation.impl.Activator.java</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="444" opendate="2010-10-7 00:00:00" fixdate="2010-10-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Register the default local platform service in a separate bundle rather than in the appliation utils</summary>
      <description>There are two issues this jira is trying to address:1. The default local platform service cannot be excluded when an application server consumes the application bundles.At the moment, the default local platform service is registered by the bundle of application utils. An application server normally wishes to supply their own platform service. If we don't separate this service from the application utils bundle, the default service will make its way to an application server's service registry. It will be wired to Aries Application manager bundle before the good dedicated local platform service becomes available. This will cause unpredictable behaviour.2. In application itests, we need to get rid of the hack, blocking one bundle from starting until another bundle has started, because a real fix has been delivered for the the problem of the hack tring to solve.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-utils.src.main.resources.OSGI-INF.blueprint.app-utils.xml</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.runtime.DefaultLocalPlatform.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.UpdateAppTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.MinimumImportsTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicNoOpResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.AbstractIntegrationTest.java</file>
      <file type="M">application.application-itests.pom.xml</file>
      <file type="M">samples.goat.goat-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.goat.goat-assembly.pom.xml</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.QuiesceBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JpaBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JdbcBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="447" opendate="2010-10-11 00:00:00" fixdate="2010-10-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bundle wide transactions fail when no transaction strategy is specified</summary>
      <description>If no transaction strategy is specified for a bundle wide transaction element then the blueprint transactions runtime blows up at runtime.This is a supported case with a default of Required, that should be honoured.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-blueprint.src.test.resources.org.apache.aries.transaction.mixed-aries.xml</file>
      <file type="M">transaction.transaction-blueprint.src.main.java.org.apache.aries.transaction.BundleWideTxData.java</file>
    </fixedFiles>
  </bug>
  <bug id="45" opendate="2009-10-30 00:00:00" fixdate="2009-11-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refactor Blueprint HelloWorld sample</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.src.main.java.org.apache.aries.blueprint.helloworldclient.HelloWorldClientImpl.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.src.main.java.org.apache.aries.blueprint.helloworldclient.HelloWorldClient.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.src.main.java.org.apache.aries.blueprint.helloworldserver.HelloWorldServerImpl.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.src.main.java.org.apache.aries.blueprint.helloworldserver.HelloWorldServer.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="455" opendate="2010-10-13 00:00:00" fixdate="2010-12-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow the Aries JPA runtime to process WAB files</summary>
      <description>The Aries JPA runtime currently deliberately ignores WAB files because it isn't clear whether they should be processed according to Java EE rules or not.I propose the following: A WAB with a Meta-Persistence header should be treated like any other persistence bundle A WAB with no Meta-Persistence header should follow the rules of the OSGi Web Applications specification. Namely the JPA runtime should look for META-INF/persistence.xml in any locations listed on the bundle classpath (or in the root if no classpath is defined).This is not the normal Java EE behaviour. We will not find META-INF/persistence.xml in any jar in WEB-INF/lib, or in WEB-INF/classes unless it is explicitly on the bundle classpath. This is, however, consistent with normal WAB behaviour and I believe is therefore the correct approach.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.test.java.org.apache.aries.jpa.container.PersistenceBundleLifecycleTest.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.PersistenceBundleHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="457" opendate="2010-10-14 00:00:00" fixdate="2010-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Efficiency problem in the method listBundles() of class org.apache.aries.jmx.framework.BundleState</summary>
      <description>In our environment, there are always 200 to 300 bundles in the OSGi framwork. When invoking listBundles() of the class BundleState, it spends more than twenty seconds which is too long to endure.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.test.java.org.apache.aries.jmx.codec.BundleDataTest.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.util.FrameworkUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="458" opendate="2010-10-14 00:00:00" fixdate="2010-5-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>${version} is deprecated in maven 3 - use ${project.version}</summary>
      <description>There are a lot of deprecation warnings when running with maven 3</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">tutorials.blueprint.tutorial-assembly.pom.xml</file>
      <file type="M">subsystem.subsystem-example.subsystem-helloIsolationRef.pom.xml</file>
      <file type="M">sandbox.samples.words-sample.words-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">sandbox.samples.words-sample.pom.xml</file>
      <file type="M">sandbox.samples.transaction-sample.pom.xml</file>
      <file type="M">sandbox.samples.dgoat.pom.xml</file>
      <file type="M">sandbox.samples.dgoat.dgoat-eba.pom.xml</file>
      <file type="M">sandbox.samples.dgoat.dgoat-assembly.src.main.filtered-resources.serverConfigTuscany.config.ini</file>
      <file type="M">sandbox.samples.dgoat.dgoat-assembly.src.main.filtered-resources.clientConfigTuscany.config.ini</file>
      <file type="M">sandbox.samples.bank.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.filtered-resources.configuration.config.ini</file>
    </fixedFiles>
  </bug>
  <bug id="459" opendate="2010-10-14 00:00:00" fixdate="2010-10-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve the error message for resolver exception</summary>
      <description>Improve the error message for Resolver Exception.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.OBRAriesResolver.java</file>
      <file type="M">application.application-deployment-management.src.test.java.org.apache.aries.application.deployment.management.DeploymentGeneratorTest.java</file>
      <file type="M">application.application-deployment-management.src.main.resources.org.apache.aries.application.deployment.management.messages.DeploymentManagementMessages.properties</file>
    </fixedFiles>
  </bug>
  <bug id="46" opendate="2009-11-10 00:00:00" fixdate="2009-12-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Invoke namespace handler for custom scope elements.</summary>
      <description>Update the parser to further process the scope attribute for bean definitions, and to invoke a namespace handler for the scopes value.If the scope is a custom scope, the appropriate namespace handler will be invoked, passing the Attr Node representing the scope attribute from the blueprint definition. Intent is to use the presence of ':' within the scope value to determine if the value is a custom scope or not. If the ':' is present, to split on the : resolve the namespace prefix part as per the current element, and use the resulting namespace to check for and invoke the NamespaceHandler. If no handler is registered, the parse is aborted just as if any other non-handled element is encountered. Once invoked an Namespace Handler can then inject a bean processor to handle it's implementation, or whatever else it wants to do in reaction to seeing the custom scope. I like the idea of extending BeanProcessor to create ScopedBeanProcessors that will only be invoked if the bean being processed is associated to the scope of the processor, but think this could be done in a seperate issue.The logic up in AbstractRecipe will likely need a cleanup, as it heavily makes the assumption that only singleton/prototype are possible, and is phrased today to check for singleton by testing for "not prototype". Will need to resolve if custom scopes should act as singleton/prototype wrt addFull / addPartial object, or if this should be configurable. This can also be resolved in a seperate issue.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.Parser.java</file>
    </fixedFiles>
  </bug>
  <bug id="465" opendate="2010-10-22 00:00:00" fixdate="2010-11-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application itests - testTwitter test improvement</summary>
      <description>At the moment, the test reads a 7.5M repository.xml from an internet location. It slows test run and also the test will fail if you run test offline.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="466" opendate="2010-10-24 00:00:00" fixdate="2010-5-24 01:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>org.apache.aries.jndi-0.2-incubating includes org.osgi.enterprise implementation</summary>
      <description>org.apache.aries.jndi-0.2-incubating includes org.osgi.enterprise bundle implementations which causes problems when using &lt;dependency&gt; &lt;groupId&gt;org.osgi&lt;/groupId&gt; &lt;artifactId&gt;org.osgi.enterprise&lt;/artifactId&gt; &lt;version&gt;4.2.0&lt;/version&gt;&lt;/dependency&gt;as well. If used with org.osgi.enterprise one gets an error that the Initial JNDI Context Factory is already registered and aries JNDI can not work. I could get around this problem by using org.eclipse.gemini.naming.framework with org.osgi.enterprise + rest of aries. So my suggestion is simply remove org.osgi api implementation from org.apache.aries.jndi-0.2-incubating and use the one from reference org.osgi.enterprise bundle.</description>
      <version>0.2,0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.AriesApplicationManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="468" opendate="2010-10-26 00:00:00" fixdate="2010-12-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create common Proxy creation service to share proxying between blueprint, JNDI and other people.</summary>
      <description>JNDI and blueprint both do proxying stuff. Rather than have multiple implementations to share lets common it up.As a part of this we should common up our Bundle to ClassLoader adapter implementations as documented on this thread:http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201010.mbox/%3cAANLkTik-Bj4p66cz6jKoJ3-ZDkYd9eomj=6mwBeG4CZD@mail.gmail.com%3e</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">proxy.pom.xml</file>
      <file type="M">proxy.proxy-api.src.main.java.org.apache.aries.proxy.InvocationHandlerWrapper.java</file>
      <file type="M">proxy.proxy-api.src.main.java.org.apache.aries.proxy.ProxyFactory.java</file>
      <file type="M">proxy.proxy-api.src.main.java.org.apache.aries.proxy.ProxyManager.java</file>
      <file type="M">jndi.jndi-url.pom.xml</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.CgLibProxyFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.JdkProxyFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.ProxyFactory.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.services.ServiceHelper.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.Activator.java</file>
      <file type="M">jndi.jndi-url.src.test.java.org.apache.aries.jndi.url.ServiceRegistryContextTest.java</file>
      <file type="M">blueprint.blueprint-api.src.main.java.org.osgi.service.blueprint.container.BlueprintEvent.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.startup.Activator.java</file>
      <file type="M">jndi.pom.xml</file>
      <file type="M">util.pom.xml</file>
      <file type="M">util.src.main.java.org.apache.aries.util.BundleToClassLoaderAdapter.java</file>
      <file type="M">proxy.proxy-bundle.pom.xml</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextProvider.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ComponentNameAlreadyInUseException.java</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintExtender.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintQuiesceParticipant.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceListRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.AsmInterceptorWrapper.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.Collaborator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.FinalModifierException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxyClassBytecodeGenerationException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxyClassDefinitionException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxyClassInstantiationException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassAdapter.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassGenerator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassHierarchyAdapter.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.ProxySubclassMethodHashSet.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.UnableToLoadProxyException.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.UnableToProxyException.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassCovariant.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassCovariantOverride.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassFinal.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassFinalMethod.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassGeneral.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassGeneric.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassGenericSuper.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassPrivateConstructor.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.proxy.ProxyTestClassSuper.java</file>
      <file type="M">blueprint.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="474" opendate="2010-10-29 00:00:00" fixdate="2010-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Test failure in build 722</summary>
      <description>org.osgi.framework.BundleException: Exception in org.apache.aries.application.itest.twitter.TwitterQuery.start() of bundle org.apache.aries.application.itest.twitter.bundle. at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:805) at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:754) at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:352) at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:280) at org.apache.aries.application.runtime.impl.ApplicationContextImpl.start(ApplicationContextImpl.java:177) at org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.testTwitter(OBRResolverAdvancedTest.java:450) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.injectContextAndInvoke(CallableTestMethodImpl.java:134) at org.ops4j.pax.exam.junit.extender.impl.internal.CallableTestMethodImpl.call(CallableTestMethodImpl.java:101) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:80) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305) at sun.rmi.transport.Transport$1.run(Transport.java:159) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:155) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.IncompatibleClassChangeError: Found interface twitter4j.QueryResult, but class was expected at org.apache.aries.application.itest.twitter.TwitterQuery.start(TwitterQuery.java:43) at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:782) at java.security.AccessController.doPrivileged(Native Method) at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:773) ... 30 more</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-itest-twitter.twitter-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="476" opendate="2010-10-30 00:00:00" fixdate="2010-2-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Checkin code for a distributed goat sample</summary>
      <description>I've been working on getting the GOAT sample to work using distributed OSGi (Apache CXF). I'll check the sample in under samples-sandbox while I'm trying to make it work.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples-sandbox.dgoat.pom.xml</file>
      <file type="M">samples-sandbox.dgoat.dgoat-info-enhancer.src.main.resources.OSGI-INF.remote-services.xml</file>
      <file type="M">samples-sandbox.dgoat.dgoat-info-enhancer.pom.xml</file>
      <file type="M">samples-sandbox.dgoat.dgoat-assembly.pom.xml</file>
      <file type="M">samples-sandbox.dgoat.dgoat-bundlecontext-modelprovider.src.main.resources.OSGI-INF.blueprint.blueprint.xml</file>
      <file type="M">samples-sandbox.dgoat.dgoat-web.src.main.java.org.apache.aries.samples.goat.web.ServerSideClass.java</file>
      <file type="M">samples-sandbox.dgoat.dgoat-assembly.src.main.filtered-resources.clientConfigCXF.config.ini</file>
    </fixedFiles>
  </bug>
  <bug id="479" opendate="2010-11-2 00:00:00" fixdate="2010-11-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade to geronimo transaction manager 2.2</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="482" opendate="2010-11-5 00:00:00" fixdate="2010-11-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move jmx-whiteboard pattern itests to shared pax-exam level (1.2.0)</summary>
      <description></description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-whiteboard.src.test.java.org.apache.aries.jmx.whiteboard.integration.helper.MyTinyBundle.java</file>
      <file type="M">jmx.jmx-whiteboard.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="485" opendate="2010-11-8 00:00:00" fixdate="2010-11-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>On IBM J9 JVM Blog itests hang</summary>
      <description>With Geronimo transaction manager 2.2, on the J9 JVM we see consistent hangs in the JpaBlogSampleWithEbaTest, which is just the first itest to use the real transaction manager. Moving back to 2.1.3 fixes the problem, so almost certainly it is in some form related to the new level.Concretely this has been seen when building the trunk with:mvn -fae -e -B clean install</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="486" opendate="2010-11-8 00:00:00" fixdate="2010-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JMX Whiteboard itests fail on IBM JVM</summary>
      <description>JMX Itests need to add the pax-exam-junit to work on the IBM JVM.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-whiteboard.src.test.java.org.apache.aries.jmx.whiteboard.integration.helper.IntegrationTestBase.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.AbstractIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="487" opendate="2010-11-8 00:00:00" fixdate="2010-11-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>No ordering on starting bundles</summary>
      <description>We do not start bundles in the isolated framework in the order we installed them.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-isolated.src.main.java.org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49" opendate="2009-11-17 00:00:00" fixdate="2009-11-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ComponentDefinitionException: wrong attribute "class" in message</summary>
      <description>org.osgi.service.blueprint.container.ComponentDefinitionException: A class &amp;#91;...&amp;#93; was found in the interfaces list, but class proxying is not allowed by default. The ext:proxy-method='class' attribute needs to be added to this service reference.Should be classes instead of class.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="498" opendate="2010-11-18 00:00:00" fixdate="2010-11-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Sybsystem: merge scope work into subsystem-core</summary>
      <description>The current subsystem-core uses composite bundle and composite bundle factory. This code is deprecated in equinox 3.7.The OSGi Alliance is currently pursuing the framework hooks as the replacement of this and the subsystem-scope project is designed to prototype framework hooks.We need to merge the subsystem-scope into subsystem-core so that we use the new framework hooks instead of the deprecated composite bundle and composite bundle factory APIs.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemAdminImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceProcessor.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdminTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdmin2Test.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.SubsystemAdmin.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.Subsystem.java</file>
      <file type="M">subsystem.subsystem-api.src.main.java.org.apache.aries.subsystem.spi.ResourceProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="499" opendate="2010-11-22 00:00:00" fixdate="2010-2-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Check in remote services sample using SCA</summary>
      <description>Banking samples which uses Tuscany/SCA for remote services</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples-sandbox.bank.bank-assembly.src.main.filtered-resources.serverConfig.config.ini</file>
      <file type="M">samples-sandbox.bank.bank-assembly.src.main.filtered-resources.clientConfig.config.ini</file>
      <file type="M">samples-sandbox.bank.bank-assembly.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="5" opendate="2009-9-29 00:00:00" fixdate="2009-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support for multiple namespace handlers for the same schema and use a compatible one wrt class loaders</summary>
      <description>Not sure if / how this is doable, but it might be worth investigating.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.ParserTest.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.AbstractBlueprintTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.NamespaceHandler.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.ExtNamespaceHandler.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.Parser.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.NamespaceHandlerRegistry.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="50" opendate="2009-11-19 00:00:00" fixdate="2009-1-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement Package State MBean</summary>
      <description>This MBean provides information about the package state of the framework.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.agent.JMXAgentImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="506" opendate="2010-12-3 00:00:00" fixdate="2010-1-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Filter out deployments where an isolated bundle is provisioned twice to provide conflicting copies of a package</summary>
      <description>The provisioning system currently will quite happily allow a number of corner cases where bundles intend to share a service based on a common view of a package but end up wiring to different package versions because of incompatible version ranges.The most basic setup where this happens is an application with three isolated bundles: api, consumer, provider. Consumer uses a service from producer based on an interface in package P. Consumer consumes package P at [1.1.0,2.0.0) while producer uses P at [1.0.0,1.1.0). There is two versions of api one exporting P at 1.0.0 and another exporting version 1.1.0 of P. Note that this cannot work.In this setup with the current resolver api will be provisioned twice: once as isolated content and once as provisioned content providing a package to the isolated content. So despite the fact that the scenario is invalid we produce a deployment.Now, there are corner cases where the deployment would be valid when no service is shared and the package should not be part of the isolated content in the first place. This scenario should still be supported with an explicit use-bundle clause.</description>
      <version>0.1,0.2,0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-deployment-management.src.test.java.org.apache.aries.application.deployment.management.DeploymentGeneratorTest.java</file>
      <file type="M">application.application-deployment-management.src.main.resources.org.apache.aries.application.deployment.management.messages.DeploymentManagementMessages.properties</file>
      <file type="M">application.application-deployment-management.src.main.java.org.apache.aries.application.deployment.management.impl.DeploymentManifestManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="507" opendate="2010-12-3 00:00:00" fixdate="2010-12-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy impl and proxy bundle build against proxy.api with old group id</summary>
      <description>Currently the proxy-impl and proxy-bundle projects build against org.apache.aries/org.apache.aries.proxy.api rather than org.apache.aries.proxy/org.apache.aries.proxy.api, which is where the code now lives.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">proxy.proxy-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="509" opendate="2010-12-3 00:00:00" fixdate="2010-12-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JPA quiesce tests are broken since they need the osgi: namespace but don&amp;#39;t deploy the proxy support</summary>
      <description></description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.quiesce.itest.QuiesceJPATest.java</file>
    </fixedFiles>
  </bug>
  <bug id="51" opendate="2009-11-24 00:00:00" fixdate="2009-12-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow to use different blueprint bundle tracker customizer based on different osgi framework</summary>
      <description>In Aries-7, we provided a default blueprint bundle tracker customizer. However, this default tracker customizer only handles bundles installed in the same framework as the Aries blueprint bundle. I'd like to propose an alternative blueprint bundle tracker customizer that handles bundles installed in the child frameworks as well, and we would only use this blue print tracker customizer if we can find CompositeBundleFactory service (as defined in RFC 138 draft) in the OSGi service registry. My understanding is that the CompositeBundleFactory service exists for equinox 3.5 but not felix.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestReferences.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestConfigAdmin.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.AbstractIntegrationTest.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintExtender.java</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="513" opendate="2010-12-9 00:00:00" fixdate="2010-12-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JNDI implementation does not interact well with InitialLdapContext</summary>
      <description>There appears to be no particular provision in the spec to make sure that proxied contexts returned from the OSGi InitialContextFactoryBuilder should be instances of LdapContext. This may likely be an omission.Typical exception:javax.naming.NotContextException: Expected an LdapContext object.at javax.naming.ldap.InitialLdapContext.getDefaultInitLdapContext(InitialLdapContext.java:109)at javax.naming.ldap.InitialLdapContext.setRequestControls(InitialLdapContext.java:132)...</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-core.src.test.java.org.apache.aries.jndi.InitialContextTest.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.DelegateContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="515" opendate="2010-12-13 00:00:00" fixdate="2010-12-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Exceptions being hidden when thrown by InitialContextFactory from a Builder</summary>
      <description>A common use of JNDI is to perform authentication against an LDAP registry of users. This typically works by going new InitialDirContext(props) where the props contains a userid/password. This requires the AuthenticationException to be thrown from the InitialDirContext constructor. When used with the default JNDI implementation what actually happens is you get a NoInitialContextException because the creation of the Context fails and if the ICF was created from an ICFB then the exception is swallowed rather than rethrown.Alasdair</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="517" opendate="2010-12-19 00:00:00" fixdate="2010-12-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use a common approach for building uber bundles</summary>
      <description>In the email thread: http://mail-archives.apache.org/mod_mbox/incubator-aries-dev/201012.mbox/%3cAANLkTi=qU1YZ8HY+bvEZbEfwjDqNRRGRCyprjmWbOxjB@mail.gmail.com%3e we discussed how we build uber bundles.This JIRA is to make the uber bundles built in a common way and to avoid pulling in unnecessary dependencies. As a result some uber bundles, such as for blueprint and proxy, will have less in them. It will also cause the proxy bundle to do a mandatory package dependency on asm, rather than the current optional one.Alasdair</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.pom.xml</file>
      <file type="M">web.web-itests.src.test.java.org.apache.aries.web.converter.itest.WabConverterITest.java</file>
      <file type="M">web.web-itests.pom.xml</file>
      <file type="M">web.pom.xml</file>
      <file type="M">transaction.transaction-itests.src.test.java.org.apache.aries.transaction.itests.AbstractIntegrationTest.java</file>
      <file type="M">transaction.transaction-itests.pom.xml</file>
      <file type="M">application.application-itests.pom.xml</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicNoOpResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.MinimumImportsTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.UpdateAppTest.java</file>
      <file type="M">application.pom.xml</file>
      <file type="M">blueprint.blueprint-annotation-itest.pom.xml</file>
      <file type="M">blueprint.blueprint-annotation-itest.src.test.java.org.apache.aries.blueprint.itests.BlueprintAnnotationTest.java</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.src.main.java.org.apache.aries.blueprint.uberbundle.UberActivator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainer2Test.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerBTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.MultiBundleWithAsmTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.QuiesceBlueprintTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestConfigAdmin.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestReferences.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestRegistrationListener.java</file>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
      <file type="M">jmx.jmx-itests.pom.xml</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.test.blueprint.BlueprintMBeanTest.java</file>
      <file type="M">jmx.pom.xml</file>
      <file type="M">jndi.jndi-bundle.pom.xml</file>
      <file type="M">jndi.jndi-bundle.src.main.java.org.apache.aries.jndi.priv.Activator.java</file>
      <file type="M">jndi.jndi-url-itest.pom.xml</file>
      <file type="M">jndi.jndi-url-itest.src.test.java.org.apache.aries.jndi.itests.JndiUrlIntegrationTest.java</file>
      <file type="M">jndi.pom.xml</file>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.blueprint.aries.itest.JPAInjectionTest.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.JPAContainerTest.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.context.itest.JPAContextTest.java</file>
      <file type="M">jpa.pom.xml</file>
      <file type="M">proxy.proxy-bundle.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
      <file type="M">samples.blog.blog-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blog.blog-itests.pom.xml</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JdbcBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JpaBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.QuiesceBlogSampleWithEbaTest.java</file>
      <file type="M">samples.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="520" opendate="2010-12-21 00:00:00" fixdate="2010-12-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The blueprint url naming context does not depend on ProxyManager so should not be registered after it has become available.</summary>
      <description>The blueprint url naming context is only registered when the ProxyManager exists, but since the ProxyManager is not needed by it we can register it earlier.Since blueprint also depends on ProxyManager before registering the blueprint context the url scheme still wont work, but you'll get a nicer error message than you get when no url object factory is registered.Also update the error message when the blueprint container service cannot be found.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.BlueprintURLContext.java</file>
      <file type="M">jndi.jndi-url.src.main.java.org.apache.aries.jndi.url.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="522" opendate="2010-12-22 00:00:00" fixdate="2010-12-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy equality always return true</summary>
      <description></description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.ProxyHandler.java</file>
      <file type="M">proxy.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="525" opendate="2010-12-22 00:00:00" fixdate="2010-12-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use maven-bundle-plugin 2.2-SNAPSHOT</summary>
      <description>Switch to build using 2.2-SNAPSHOT of the maven bundle plugin.It supports WABs, and appears to be much faster.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.blog-web.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.pom.xml</file>
      <file type="M">parent.default-parent.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="528" opendate="2010-12-31 00:00:00" fixdate="2010-1-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Rollback behaviour for application update does not work</summary>
      <description>The desired behaviour of AriesApplicationManager.update is to attempt a new deployment but rollback to the consistent state in case of problems.Currently this does not work for two reasons:a) When rolling back to the previous version the wrong deployment metadata gets used, so that the rollback erroneously tries to install the new version again rather than the old one.b) In isolated cases some failures during installation can leave behind a broken framework that prevents any further installs from succeeding.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-isolated.src.main.java.org.apache.aries.application.runtime.isolated.impl.ApplicationContextImpl.java</file>
      <file type="M">application.application-runtime-framework-management.src.main.java.org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="531" opendate="2011-1-5 00:00:00" fixdate="2011-1-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow field injection in some cases with the Blueprint extender&amp;#39;s permissions</summary>
      <description>Currently, Blueprint uses the joint permissions of the Blueprint bundle and the Blueprint extender bundle to perform any kind of privileged actions like property injection, service retrieval and field injection.However, this permission scheme does not work that well with field injection because usually a Blueprint bundle would not need to (and probably should not) have ReflectPermission. Especially, if all that the field injection is used for is something relatively common like injecting a PersistenceContext ...So with this issue a slightly more relaxed scheme will be introduced where: field injection for fields in classes that reside in the Blueprint bundle itself is done with the permissions of the Blueprint extender all other field injections uses joint permissions as before</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.utils.ReflectionUtilsTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.utils.ReflectionUtils.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="532" opendate="2011-1-6 00:00:00" fixdate="2011-2-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The exception message when a service dependency cannot be resolved has the inserts in the wrong order</summary>
      <description>The following message puts the bundle symbolic name/version in the message where the service dependency should go, and vice versa. The message:The system cannot provision the EBA com.ibm.samples.websphere.osgi.blog.app because the following problems in the dependency chain were detected: The service dependency with attributes com.ibm.samples.websphere.osgi.blog_1.0.0 required by bundle {objectclass=com.ibm.samples.websphere.osgi.logging.Logger} cannot be resolved.should read:The system cannot provision the EBA com.ibm.samples.websphere.osgi.blog.app because the following problems in the dependency chain were detected: The service dependency with attributes {objectclass=com.ibm.samples.websphere.osgi.logging.Logger} required by bundle com.ibm.samples.websphere.osgi.blog_1.0.0 cannot be resolved.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-obr-resolver.src.main.java.org.apache.aries.application.resolver.obr.OBRAriesResolver.java</file>
      <file type="M">application.application-obr-resolver.src.main.resources.org.apache.aries.application.resolver.messages.ResolverMessages.properties</file>
    </fixedFiles>
  </bug>
  <bug id="537" opendate="2011-1-11 00:00:00" fixdate="2011-2-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update ScopeAdmin impl to latest ResolverHook API</summary>
      <description>The ResolverHook API has been split into a ResolverHookFactory which creates instances of ResovlerHooks for the framework. The current scope admin impl incorrectly registers a ResolverHook instance directly when it should register a ResolverHookFactory instead.</description>
      <version>None</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-scope-impl.src.main.java.org.apache.aries.subsystem.scope.impl.ScopeAdminServiceFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="539" opendate="2011-1-13 00:00:00" fixdate="2011-1-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update to file install and pax web dependencies</summary>
      <description>Move our file install dependency to 3.1.4 and pax web to 0.8.1 and ensure everything works again. This involves making our sample WABs proper best practice WABs.</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.pom.xml</file>
      <file type="M">samples.blog.blog-web.pom.xml</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.QuiesceBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JpaBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-itests.src.test.java.org.apache.aries.samples.blog.itests.JdbcBlogSampleWithEbaTest.java</file>
      <file type="M">samples.blog.blog-assembly.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.blog.blog-assembly.pom.xml</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.src.main.filtered-resources.configuration.config.ini</file>
      <file type="M">samples.ariestrader.assemblies.equinox-test-harness.pom.xml</file>
      <file type="M">application.pom.xml</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.webapp.web.prmtv.html</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.webapp.dbscripts.other.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.webapp.dbscripts.oracle.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.webapp.dbscripts.derby.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.webapp.dbscripts.db2.Table.ddl</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.src.main.java.org.apache.aries.samples.ariestrader.web.TradeBuildDB.java</file>
      <file type="M">samples.ariestrader.modules.ariestrader-web.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="540" opendate="2011-1-14 00:00:00" fixdate="2011-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>DelegateContext is too eager in caching URL contexts</summary>
      <description>In some enterprise integration scenarios, it is not appropriate to cache URL contexts. For example java:comp env lookups can depend on thread contexts and return different results for the same InitialContext when used from inside different EJBs.To maintain a level of performance we can still cache the ObjectFactory that creates the URL context and so avoid service registry lookups.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-core.src.test.java.org.apache.aries.jndi.InitialContextTest.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextProvider.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.ContextHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="544" opendate="2011-1-17 00:00:00" fixdate="2011-1-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update to use maven bundle plugin v 2.2.0 rather than a snapshot</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">parent.default-parent.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="545" opendate="2011-1-18 00:00:00" fixdate="2011-1-18 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Modelling classes are missing equals() methods</summary>
      <description>Many of the application modelling classes, like ExportedPackage, ImportedPackage, and ModelledResource, are missing equals() and hashcode() methods. This makes them less useful than they would otherwise be.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ImportedPackageImpl.java</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ExportedPackageImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="546" opendate="2011-1-19 00:00:00" fixdate="2011-2-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SCM references in parent POM still point to incubator</summary>
      <description>Need to fix SCM versions</description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">parent.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="548" opendate="2011-1-20 00:00:00" fixdate="2011-2-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove references to incubator from code base in trunk and in 0.3-RCx branch</summary>
      <description></description>
      <version>0.3</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">web.pom.xml</file>
      <file type="M">util.pom.xml</file>
      <file type="M">tutorials.pom.xml</file>
      <file type="M">tutorials.blueprint.tutorial-assembly.src.main.docs.instructions.html</file>
      <file type="M">transaction.pom.xml</file>
      <file type="M">testsupport.pom.xml</file>
      <file type="M">subsystem.pom.xml</file>
      <file type="M">spi-fly.pom.xml</file>
      <file type="M">samples.pom.xml</file>
      <file type="M">samples.blog.blog-web.src.main.webapp.images.apache-incubator-logo.png</file>
      <file type="M">samples.blog.blog-web.src.main.java.org.apache.aries.samples.blog.web.util.HTMLOutput.java</file>
      <file type="M">samples-sandbox.pom.xml</file>
      <file type="M">quiesce.pom.xml</file>
      <file type="M">proxy.pom.xml</file>
      <file type="M">parent.pom.xml</file>
      <file type="M">parent.default-parent.pom.xml</file>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jndi.pom.xml</file>
      <file type="M">jmx.pom.xml</file>
      <file type="M">eba-maven-plugin.pom.xml</file>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.AriesApplicationManagerImpl.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.ServiceDeclaration.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.spi.resolve.AriesApplicationResolver.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.AriesApplication.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.ApplicationMetadata.java</file>
    </fixedFiles>
  </bug>
  <bug id="554" opendate="2011-1-22 00:00:00" fixdate="2011-2-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>aries JNDI bundle breaks remote JMX clients via RMI</summary>
      <description>If the aries JNDI bundles are present in the environment, connections to remote JMX agents fail. I could recreate the issue with a bundle containing only the lineJMXConnectorFactory.connect(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1717/jmxrmi"));in the start() method of the bundle activator (and nothing else).The bundle will start both on equinox and felix as long as the aries jndi bundles (I tried version 0.2 and 0.3-SNAPSHOT) are not running and any java application that allows remote JMX at that port is running (check with jconsole if you are unsure). It will not start as soon as the jndi bundle is started. As far as I got in debugging this, the JMXConnectionFactory is trying to do a JNDI lookup for the RMI connection and is delegated to the Aries JNDI coding, that is trying to determine a bundle context for the call.</description>
      <version>0.2,0.3</version>
      <fixedVersion>jndi.core-0.3.1,jndiuberbundle0.3.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.Utils.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiObjectFactoryBuilder.java</file>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="558" opendate="2011-1-28 00:00:00" fixdate="2011-5-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Risk of deadlock in BundleQuiescer.run()</summary>
      <description>Tidy up run() to remove deadlock risk</description>
      <version>None</version>
      <fixedVersion>quiesce.manager-0.3.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">quiesce.quiesce-manager.src.main.java.org.apache.aries.quiesce.manager.impl.QuiesceManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="56" opendate="2009-11-30 00:00:00" fixdate="2009-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bean factory-ref and service reference bean are not working together</summary>
      <description>Using a blueprint xml like:&lt;blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"&gt; &lt;bean id="product" factory-ref="factory" factory-method="create" init-method="run" /&gt; &lt;reference id="factory" interface="test.pack.Factory" /&gt;&lt;/blueprint&gt;I get a ComponentDefinitionException complaining that ReferenceRecipe.ServiceProxyWrapper does not have the create method. The problem seems to be that ServiceProxyWrappers are not unwrapped when creating beans.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="561" opendate="2011-2-2 00:00:00" fixdate="2011-2-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update Subsystems to later Equinox and tidy up references to old prototype.</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-scope-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.resources.META-INF.platform-equinox.definition-V43PROTOTYPE-3.6.0.201003231329.xml</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20100910.xml</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.itests.ScopeSecurityTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.src.test.java.org.apache.aries.subsystem.itests.ScopeAdminTest.java</file>
      <file type="M">subsystem.subsystem-scope-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-scope-impl.pom.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.META-INF.platform-equinox.definition-V43PROTOTYPE-3.6.0.201003231329.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.META-INF.platform-equinox.definition-3.7.0.V20100910.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdminTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemAdmin2Test.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SimpleExecutorTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
      <file type="M">subsystem.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="566" opendate="2011-2-4 00:00:00" fixdate="2011-1-4 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>NPE when generating bundle repository for invalid bundle location</summary>
      <description>When trying to generate a repository xml for a list of bundles, if any bundle has a wrong location, we will get NPE. Ideally, we should throw a better exception to explain.</description>
      <version>0.3,0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-modeller.src.main.resources.org.apache.aries.application.modelling.messages.APPModellingMessages.properties</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.ModelledResourceManagerImpl.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="584" opendate="2011-2-23 00:00:00" fixdate="2011-7-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint Managed Service Factory Instantiates Duplicate Service</summary>
      <description>Creating a simple managed service factory, two services are instantiated for a single factory configuration.</description>
      <version>0.2,0.3</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.TestConfigAdmin.java</file>
      <file type="M">blueprint.blueprint-cm.src.test.java.org.apache.aries.blueprint.compendium.cm.ManagedServiceFactoryTest.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmManagedServiceFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="602" opendate="2011-3-8 00:00:00" fixdate="2011-3-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>osgi.console port is not handled well.</summary>
      <description>When creating child frameworks the properties are inherited from the parent framework. If the parent framework has the osgi.console port set then this is inherited by the child framework. The problem is this results in clashes. So if it were set to a port number (other than 0) you would end up with equinox trying to listen twice for two different frameworks on the same port.I think the simplest fix to this is to just set osgi.console to none for the child frameworks.</description>
      <version>None</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-framework.src.main.java.org.apache.aries.application.runtime.framework.config.BundleFrameworkConfigurationImpl.java</file>
      <file type="M">application.application-runtime-framework.src.main.java.org.apache.aries.application.runtime.framework.config.BundleFrameworkConfigurationFactoryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="664" opendate="2011-5-25 00:00:00" fixdate="2011-5-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The HelloWorld blueprint sample itest consistently fails on my machine</summary>
      <description>The Hello world blueprint sample test consistently fails on my machine because the bundle become active after the test runs. This appears to be a timing issue.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blueprint.helloworld.helloworld-itests.src.test.java.org.apache.aries.samples.blueprint.helloworld.itests.HelloworldSampleTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="665" opendate="2011-5-28 00:00:00" fixdate="2011-5-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy weaving code must preserve SerialVersionUID</summary>
      <description>The proxy weaving code changes the SerialVersionUID when it modifies the bytecode, so serialized classes that don't hardcode the SerialVersionUID are not compatible between plain and woven versions. I assume that having the weaver add the field if missing would fix this: manually adding it to classes seems to avoid the problem.</description>
      <version>None</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.WovenProxyGeneratorTest.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.WovenProxyGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="666" opendate="2011-5-28 00:00:00" fixdate="2011-6-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy weaving code needs to deal better with missing classes and superclasses in other bundles</summary>
      <description>As discussed on the mailing list, and as noted in the code, the weaving doesn't work if a superclass is in another bundle or just missing. I have code that works for me but should be reviewed.</description>
      <version>None</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.OSGiFriendlyClassWriter.java</file>
    </fixedFiles>
  </bug>
  <bug id="668" opendate="2011-6-3 00:00:00" fixdate="2011-6-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy or weaving code should not mark added synthetic methods final</summary>
      <description>OpenWebBeans checks classes for proxyiability by among other things checking for final methods. The java.lang.reflect.Modifier class does not expose anything about synthetic methods and reports synthetic final methods as final. Although it's possible to get owb to work by modifying the check to exclude synthetic methods, this puts the responsibility in a peculiar place. The OWB folks also claim that since java 5 marking methods final has no effect on the ability of the jit to optimize method calls so there isn't really any reason to mark these final.</description>
      <version>0.3</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.AbstractWovenProxyAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="682" opendate="2011-6-21 00:00:00" fixdate="2011-10-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>application-modeller-common-test failure</summary>
      <description>I see two failing tests in application-modeller-common-test - two tests run against a bundle jar which pass, but the same two tests that run against an extracted bundle jar fail. The Blueprint services aren't being found. This is the failure:-------------------------------------------------------------------------------Test set: org.apache.aries.application.modelling.ModellerTest-------------------------------------------------------------------------------Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.187 sec &lt;&lt;&lt; FAILURE!testParsingOfBundle&amp;#91;0&amp;#93;(org.apache.aries.application.modelling.ModellerTest) Time elapsed: 0.012 sec &lt;&lt;&lt; FAILURE!java.lang.AssertionError: expected:&lt;3&gt; but was:&lt;0&gt; at org.junit.Assert.fail(Assert.java:91) at org.junit.Assert.failNotEquals(Assert.java:645) at org.junit.Assert.assertEquals(Assert.java:126) at org.junit.Assert.assertEquals(Assert.java:470) at org.junit.Assert.assertEquals(Assert.java:454) at org.apache.aries.application.modelling.ModellerTest.checkTestBundleResource(ModellerTest.java:127) at org.apache.aries.application.modelling.ModellerTest.testParsingOfBundle(ModellerTest.java:94) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.junit.runners.Suite.runChild(Suite.java:128) at org.junit.runners.Suite.runChild(Suite.java:24) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)</description>
      <version>None</version>
      <fixedVersion>util-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">util.src.main.java.org.apache.aries.util.filesystem.impl.FileImpl.java</file>
      <file type="M">util.src.main.java.org.apache.aries.util.filesystem.IFile.java</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.internal.BundleBlueprintParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="683" opendate="2011-6-21 00:00:00" fixdate="2011-6-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries does not build from empty repo because jstl 1.2 dependency no longer exists in Maven repo</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.ariestrader.modules.ariestrader-web.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="702" opendate="2011-7-5 00:00:00" fixdate="2011-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>[Whiteboard] Use introspection to find the MBean interface</summary>
      <description>The JMX Spec states that standard MBeans must implement an interface whose name is derived from the implementation class by appending the "MBean" suffix and the interface must be located in the same package as the implementation class.This is problematic in multiple ways.I suggest we change this as follows: If the service object implements the DynamicMBean interface (or an extension thereof), use the object as is as the MBean Find the MBean interface by walking up the class and interface hierarchy</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-whiteboard.src.test.java.org.apache.aries.jmx.whiteboard.integration.MBeanTest.java</file>
      <file type="M">jmx.jmx-whiteboard.src.main.java.org.apache.aries.jmx.whiteboard.MBeanHolder.java</file>
      <file type="M">jmx.jmx-whiteboard.src.main.java.org.apache.aries.jmx.whiteboard.JmxWhiteboardSupport.java</file>
      <file type="M">jmx.jmx-whiteboard.src.main.java.org.apache.aries.jmx.whiteboard.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="725" opendate="2011-8-11 00:00:00" fixdate="2011-8-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries Application modeller does not find and model anonymous inner Blueprint reference or service components</summary>
      <description>For a snippet like:&lt;bean class="java.util.ArrayList"&gt; &lt;argument&gt; &lt;reference interface="java.util.Collection" /&gt; &lt;/argument&gt;&lt;/bean&gt;We do not generate an ImportedService in the ModelledResource view.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.AbstractParserProxy.java</file>
      <file type="M">application.application-modeller.pom.xml</file>
      <file type="M">application.application-modeller-common-test.src.test.resources.test.bundle.OSGI-INF.blueprint.bp.xml</file>
      <file type="M">application.application-modeller-common-test.src.test.java.org.apache.aries.application.modelling.ModellerTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="729" opendate="2011-8-15 00:00:00" fixdate="2011-8-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move generation of Maven repository from subsystem-core to subsystem-itests.</summary>
      <description>The generation of the remote repository currently occurs as part of the core subsystems functionality. Moving forward, it will not be the responsibility of the susbsystems implementation to generate such repositories. Rather, such repositories will be generated externally and registered as Repository services in the OSGi registry. Subsystems will then search these registered repositories in service ranking order during the provisioning process. Consequently, I will move this functionality to subsystem-itests since this repository is still necessary for testing purposes.For the time being, I will keep the contents of org.apache.aries.subsystem.core.obr.felix in place, and subsystem-itests will import the contents. However, I wonder if even this should ultimately still reside in subsystem-core. This package contains a set of classes that essentially create a composite Repository around RepositoryAdmin. As part of setup, the test harness will need to generate the OBR XML based on the local Maven repository, register the XML with RepositoryAdmin, then register the RepositoryAdminRepository from the previously mentioned package as a Repository service with the framework.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.resources.subsystem1.META-INF.MANIFEST.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature2.tb2.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature1.tb1.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature1.OSGI-INF.SUBSYSTEM.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.composite1.OSGI-INF.SUBSYSTEM.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.application1.tb1.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.Utils.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.InstallTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.FeatureTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.ApplicationTest.java</file>
      <file type="M">subsystem.subsystem-core.src.test.java.org.apache.aries.subsystem.core.ResourceResolverTest.java</file>
      <file type="M">subsystem.subsystem-core.src.test.java.org.apache.aries.subsystem.core.MockRepositoryAdminImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.RuntimeResourceFactoryImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.BundleRuntimeResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.ResourceResolver.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.ResourceConverter.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.RepositoryDescriptorGenerator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.SubsystemEnvironment.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.felix.OsgiResourceAdapter.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.felix.FelixResourceAdapter.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.felix.FelixRepositoryAdapter.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.NoOpResolver.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.Manve2Repository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceResolverImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceHelper.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.OsgiIdentityRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.FileUtils.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.ContentImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.BundleInfoImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeploymentManifest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.AbstractHeader.java</file>
    </fixedFiles>
  </bug>
  <bug id="730" opendate="2011-8-16 00:00:00" fixdate="2011-8-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Generation of the osgi.identity requirement must support version ranges.</summary>
      <description>An osgi.identity requirement is generated in order to retrieve resources from a Repository or Environment when, for example, provisioning content resources described in the Subsystem-Content or Deployed-Content manifest headers or transitive dependencies described in the Provision-Resource header. Because the Subsystem-Content header can include version ranges, the generation of the osgi.identity requirement must include support for converting a version range into a filter string.Ideally, I would like to use the new org.osgi.framework.VersionRange class described in RFC 175 targeted for core 4.4. This also includes support for distinguishing between development and release versions. An implementation is currently available within the OSGi Git repository at https://www.osgi.org/members/git/build.git under remote topic branch hargrave/version.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature2.tb2.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature1.tb1.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature1.OSGI-INF.SUBSYSTEM.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.application1.tb1.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.FeatureTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.BundleRuntimeResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.SubsystemEnvironment.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.OsgiIdentityRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AriesSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.VersionRangeAttribute.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.TypeAttribute.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemContentHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ProvisionResourceHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.Grammar.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeploymentManifest.java</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
      <file type="M">subsystem.subsystem-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="736" opendate="2011-8-26 00:00:00" fixdate="2011-7-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries does not take into account the concept of complete/incomplete Persistence Units</summary>
      <description>The OSGi spec states (r4.2 127.3.1):"Entity Manager Factory service - Provides an EntityManagerFactory object that depends on a completePersistence Unit. That is, it is associated with a registered Data Source Factory service."The current behaiviour is, that aries registers a Entity Manager Factory service regardles of the precence of a matching Data Source Factory service (Also see 127.5.3 Data Source Factory Service Matching).If no such matching is performed, it alternateively must register a Entity Manager Factory Builder service (not currently supported by Aries see ARIES-735 for reference).What infact is unclear to me is:127.5.3 states that: "Once the Data Source Factory is obtained, the JPA Provider must obtain a DataSource object. ThisData Source object must then be used for all relational database access."It does not state how this DataSource could be handed over to the PersistenceProvider for later usage.It might be suitable to insert a level of indirection here: Aries just reads the persitence units and registers an Entity Manager Factory Builder service PersistencProvider specific bundles match these with the required data source and register the Entity Manager Factory service</description>
      <version>0.3</version>
      <fixedVersion>jpa-2.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container.src.test.java.org.apache.aries.jpa.container.PersistenceBundleLifecycleTest.java</file>
      <file type="M">jpa.jpa-container.src.main.resources.org.apache.aries.jpa.container.nls.jpaContainerMessages.properties</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.PersistenceUnitInfoImpl.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoImpl.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.DelayedLookupDataSource.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.java</file>
      <file type="M">jpa.jpa-container.pom.xml</file>
      <file type="M">jpa.jpa-container-testbundle.src.main.resources.META-INF.persistence.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.JPAContainerTest.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.advanced.features.itest.JPAWeavingAndAnnotationScanningTest.java</file>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
      <file type="M">jpa.jpa-api.src.main.java.org.apache.aries.jpa.container.PersistenceUnitConstants.java</file>
      <file type="M">jpa.jpa-api.src.main.java.org.apache.aries.jpa.container.ManagedPersistenceUnitInfo.java</file>
      <file type="M">jpa.jpa-api.pom.xml</file>
      <file type="M">jpa.itests.jpa-container-testbundle-eclipselink.src.main.resources.META-INF.persistence.xml</file>
      <file type="M">jpa.itests.jpa-container-testbundle-eclipselink.src.main.java.org.apache.aries.jpa.container.itest.entities.packageinfo</file>
      <file type="M">jpa.itests.jpa-container-testbundle-eclipselink.src.main.java.org.apache.aries.jpa.container.itest.entities.Car.java</file>
      <file type="M">jpa.itests.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.persistence.xml</file>
      <file type="M">jpa.itests.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.JPAContainerTest.java</file>
      <file type="M">jpa.itests.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.EclipseAdditionalTest.java</file>
      <file type="M">jpa.itests.jpa-container-itest.src.test.java.org.apache.aries.jpa.blueprint.aries.itest.BlueprintTest.java</file>
      <file type="M">jpa.itests.jpa-container-itest.pom.xml</file>
      <file type="M">jpa.itests.jpa-container-itest.src.test.java.org.apache.aries.jpa.itest.AbstractJPAItest.java</file>
      <file type="M">jpa.itests.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.TCKJPATestCase.java</file>
      <file type="M">jpa.itests.jpa-container-itest.src.test.java.org.apache.aries.jpa.container.itest.EclipseLinkStartupTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="737" opendate="2011-8-28 00:00:00" fixdate="2011-8-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide initial support for embedded subsystems.</summary>
      <description>Subsystems can include other subsystems as content. Operations on these embedded subsystems must be supported as part of operations performed on the parent subsystem.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature2.tb2.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature1.tb1.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.application1.tb1.jar</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature1.OSGI-INF.SUBSYSTEM.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.util.Utils.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.InstallTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.FeatureTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.SubsystemRuntimeResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.RuntimeResourceFactoryImpl.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.RuntimeResourceFactory.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.RuntimeResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.ResourceListener.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.ResourceFactory.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.BundleRuntimeResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.BundleResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.resource.AbstractRuntimeResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.SubsystemEnvironment.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.obr.ArchiveRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemSynchronousBundleListener.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResolverHook.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemManager.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemFactory.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemBundleListener.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.OsgiIdentityCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleEventHandler.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AriesSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemContentHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ResolutionDirective.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ManifestVersionHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.Manifest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ImportPackageHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.HeaderFactory.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ExportPackageHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DirectiveFactory.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.BundleManifest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.Archive.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.AbstractAttribute.java</file>
    </fixedFiles>
  </bug>
  <bug id="750" opendate="2011-9-23 00:00:00" fixdate="2011-1-23 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Minor memory leak for composite frameworks inside applications</summary>
      <description>Currently, when there is a composite framework inside an application it will not be cleared out fully when the application is uninstalled (this is in the isolated code path). EquinoxFWClassLoaders are held onto afterwards.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime-framework-management.src.main.java.org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="752" opendate="2011-9-23 00:00:00" fixdate="2011-9-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add test for shared feature resources and reference counting.</summary>
      <description>Features share resources whenever possible. These shared resources must be reference counted in order to know when they can be uninstalled.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature2.OSGI-INF.SUBSYSTEM.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.resources.feature1.OSGI-INF.SUBSYSTEM.MF</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.InstallTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.FeatureTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.bundles.tb1.META-INF.MANIFEST.MF</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemServiceFactory.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AriesSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeploymentManifest.java</file>
    </fixedFiles>
  </bug>
  <bug id="763" opendate="2011-10-21 00:00:00" fixdate="2011-10-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove OSGi VersionRange dependency.</summary>
      <description>Currently, Subsystems has a dependency on the new OSGi VersionRange class introduced by RFC 175. Although an implementation of this class exists at OSGi, there are no publicly available distributions of framework implementations that contain it.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.OsgiIdentityRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.VersionRangeAttribute.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemContentHeader.java</file>
    </fixedFiles>
  </bug>
  <bug id="764" opendate="2011-10-22 00:00:00" fixdate="2011-10-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JNDI can go into an infinite loop</summary>
      <description>When navigating the class loader hierarchy if a bundle class loader is found for a bundle that is not yet active then the jndi code loops forever until the bundle is started. Instead we should attempt to start it and if it fails we stop looking and if it works we keep going.</description>
      <version>0.3</version>
      <fixedVersion>jndi.core-0.3.1,jndiuberbundle0.3.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jndi.jndi-core.src.main.java.org.apache.aries.jndi.Utils.java</file>
    </fixedFiles>
  </bug>
  <bug id="765" opendate="2011-10-25 00:00:00" fixdate="2011-12-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Attempting to execute an operation on a closed EntityManagerFactory when the persistence unit is re-deployed</summary>
      <description>We use the JPA entities in the following way: entities1.jar entities2.jar pu.jarThe first two contains entity classes but no persistence unit, the third contains the Meta-Persistence header and a persistence.xml file (named to something else not to be realized by Glassfish)We use the persistence unit with blueprint.When we re-deploy the pu.jar we have to re-deploy everything else (even the jars that do contain only services that are related to unchanged entity classes) manually as the following exception occurs:java.lang.IllegalStateException: Attempting to execute an operation on a closed EntityManagerFactory. at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.verifyOpen(EntityManagerFactoryDelegate.java:305) at org.eclipse.persistence.internal.jpa.EntityManagerFactoryDelegate.createEntityManagerImpl(EntityManagerFactoryDelegate.java:276) at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.createEntityManagerImpl(EntityManagerFactoryImpl.java:290) at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:275) at org.apache.aries.jpa.container.impl.CountingEntityManagerFactory.createEntityManager(CountingEntityManagerFactory.java:71) at org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.getCurrentPersistenceContext(JTAPersistenceContextRegistry.java:132) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getPersistenceContext(JTAEntityManager.java:87) at org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager.getCriteriaBuilder(JTAEntityManager.java:391)It would be nice if JTAEntityManager would realize when the persistence unit gets redeployed and would use the new instance.</description>
      <version>0.3</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.pom.xml</file>
      <file type="M">blueprint.blueprint-parser.src.main.java.org.apache.aries.blueprint.reflect.ReferenceMetadataImpl.java</file>
      <file type="M">blueprint.blueprint-parser.src.main.java.org.apache.aries.blueprint.mutable.MutableReferenceMetadata.java</file>
      <file type="M">blueprint.blueprint-parser.src.main.java.org.apache.aries.blueprint.ExtendedReferenceMetadata.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceRecipe.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.blueprint.aries.itest.JPAInjectionTest.java</file>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
      <file type="M">jpa.jpa-blueprint-testbundle.src.main.resources.OSGI-INF.blueprint.injection.xml</file>
      <file type="M">jpa.jpa-blueprint-aries.src.main.java.org.apache.aries.jpa.blueprint.aries.impl.NSHandler.java</file>
      <file type="M">jpa.jpa-blueprint-aries.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="773" opendate="2011-11-3 00:00:00" fixdate="2011-11-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Usage of a Configuration Admin service within an isolated application framework</summary>
      <description>Problem Summary:Currently there is no consistent way for consuming a Configuration Admin service from an isolated application framework. The following content summarises the problems a developer would face with Aries if the Configuration Admin service is essential to their application: BlueprintThe isolation boundaries are slightly marred by the current Aries Blueprint CM implementation. The underlying CM namespace handler that is registered by Blueprint is wired with a Configuration Admin service that resides in the root framework. The Configuration Admin service is then subsequently used for any Blueprint bundles requiring configuration (including bundles from an isolated framework).The compendium specification stipulates that when a Blueprint bundle is being installed/updated the Blueprint container should delegate service registrations through the Blueprint bundle context. From a configuration perspective, if the bundle that is being managed resides in an isolated framework then this creates a service visibility problem (the bundle context will reference the isolated service registry).Consider as an example the runtime usage of a Property-Placeholder for an isolated Blueprint bundle. Within the Blueprint CM container mechanics, the Configuration Admin service (provided by the CM namespace handler) will be used to fetch an existing configuration for the supplied PID, a Managed Service will then be exposed (bound to the PID) as a hook for further configuration updates. If any configuration updates should occur for the PID the associated Managed Service exposed in the isolated application framework will never be "seen" by the Configuration Admin service in the root framework for it to notify. ManualMuch like the Blueprint issue mentioned above, if a bundle within an isolated application framework requires the use of the existing Configuration Admin service and needs to expose a Managed Service for future updates there is currently no way to do this.</description>
      <version>0.3,0.4</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainerBTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.BlueprintContainer2BTCustomizerTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
      <file type="M">blueprint.blueprint-cm.src.main.resources.OSGI-INF.blueprint.blueprint-cm.xml</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler.java</file>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-runtime-framework-management.src.main.java.org.apache.aries.application.runtime.framework.management.SharedBundleFramework.java</file>
      <file type="M">application.application-modeller.src.main.java.org.apache.aries.application.modelling.impl.AbstractParserProxy.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.util.IsolationTestUtils.java</file>
      <file type="M">application.application-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="806" opendate="2012-1-5 00:00:00" fixdate="2012-1-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Align Bundle-Name of the JMX Whiteboard bundle with other JMX bundles</summary>
      <description>The JMX Whiteboard bundle's Bundle-Name currently is "Apache Aries Whiteboard support for JMX DynamicMBean services" which does not align with other JMX bundle's Bundle-Name values such as "Apache Aries JMX Core" or "Apache Aries JMX API"The Bundle-Name should be changed to "Apache Aries JMX Whiteboard".</description>
      <version>0.3</version>
      <fixedVersion>0.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-whiteboard.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="809" opendate="2012-1-16 00:00:00" fixdate="2012-5-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Not possible to configure transaction timeout</summary>
      <description>There seems to be a flaw regarding configuration of the transaction manager. It should be possible to configure the transaction manager using the PID "org.apache.aries.transaction" but but this doesn't work. Even if this PID is bound to the transaction manager it doesn't pick up the new configuration but uses the default values anyway.I have tested configuration of the transaction timeout (which doesn't work) but I suspect that the transaction manager doesn't pick up any configuration. I know that ServiceMix sets the "logFileDir" property to "${karaf.data}/txlog/" which I suspect doesn't work either.This has been discussed on the Aries user list at:http://mail-archives.apache.org/mod_mbox/aries-user/201112.mbox/%3CCAJ0TPGLo=u=bf+Ep0hG2DJjZATFOKV8KbMN5hfLkSwfw8-JNLg@mail.gmail.com%3E</description>
      <version>0.3</version>
      <fixedVersion>transaction-manager-0.3.1,1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-manager.src.main.java.org.apache.aries.transaction.TransactionManagerService.java</file>
      <file type="M">transaction.transaction-manager.src.main.java.org.apache.aries.transaction.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="811" opendate="2012-1-20 00:00:00" fixdate="2012-1-20 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>EclipseLink breaks local build</summary>
      <description>Local builds from trunk are failing with the error shown below. There's an EclipseLink/maven problem, either in Aries or EclipseLink itself. These problems are preventing diagnosis of numerous other build breaks. Errors are seen of the form, &amp;#91;INFO&amp;#93; Unable to find resource 'org.eclipse.persistence:org.eclipse.persistence.jpa:jar:2.1.0' in repository EclipseLink Repo (http://www.mirrorservice.org/sites/download.eclipse.org/eclipseMirror/rt/eclipselink/maven.repo/)Downloading: http://repo1.maven.org/maven2/org/eclipse/persistence/org.eclipse.persistence.jpa/2.1.0/org.eclipse.persistence.jpa-2.1.0.jar&amp;#91;INFO&amp;#93; Unable to find resource 'org.eclipse.persistence:org.eclipse.persistence.jpa:jar:2.1.0' in repository central (http://repo1.maven.org/maven2)&amp;#91;INFO&amp;#93; ------------------------------------------------------------------------&amp;#91;ERROR&amp;#93; BUILD ERROR&amp;#91;INFO&amp;#93; ------------------------------------------------------------------------&amp;#91;INFO&amp;#93; Failed to resolve artifact.Missing:----------1) org.eclipse.persistence:org.eclipse.persistence.jpa:jar:2.1.0</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.context.itest.EclipseLinkStartupTest.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.context.itest.EclipseLinkContextTest.java</file>
      <file type="M">jpa.jpa-container-itest.src.test.java.org.apache.aries.jpa.advanced.features.itest.EclipseLinkWeavingAndAnnotationScanningTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="812" opendate="2012-1-20 00:00:00" fixdate="2012-1-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Build break: failures in org.apache.aries.jpa.container.itest.JPAContainerDataSourceFactoryTest.testDataSourceFactoryXALifecycle and elsewhere</summary>
      <description>Investigations suggest that this test is failing because org.apache.aries.jndi.core_0.3.2.SNAPSHOT and org.apache.aries.jndi.url_0.3.2.SNAPSHOT are failing to resolve:org.osgi.framework.BundleException: The bundle "org.apache.aries.jndi.url_0.3.2.SNAPSHOT &amp;#91;17&amp;#93;" could not be resolved. Reason: Missing Constraint: Import-Package: org.apache.aries.util.log; version="[0.1.0,0.2.0)"This package is not exported by the version of org.apache.aries.util in the test runtime:org.apache.aries.util_0.4.0 &amp;#91;9&amp;#93; Id=9, Status=ACTIVE Data Root=C:\Users\mnuttall\AppData\Local\Temp\paxexam_runner_mnuttall\equinox\org.eclipse.osgi\bundles\9\data No registered services. No services in use. Exported packages org.apache.aries.util; version="0.4.0"&amp;#91;exported&amp;#93; org.apache.aries.util.tracker; version="0.4.0"&amp;#91;exported&amp;#93; org.apache.aries.util.nls; version="0.3.0"&amp;#91;exported&amp;#93; org.apache.aries.util.io; version="0.1.0"&amp;#91;exported&amp;#93; org.apache.aries.util.service.registry; version="0.1.0"&amp;#91;exported&amp;#93; org.apache.aries.util.manifest; version="0.1.0"&amp;#91;exported&amp;#93; org.apache.aries.util.filesystem; version="0.1.0"&amp;#91;exported&amp;#93; Imported packages org.osgi.framework; version="1.6.0"&lt;org.eclipse.osgi_3.7.0.v20110613 &amp;#91;0&amp;#93;&gt; org.osgi.util.tracker; version="1.5.0"&lt;org.eclipse.osgi_3.7.0.v20110613 &amp;#91;0&amp;#93;&gt; org.slf4j; version="1.5.6"&lt;org.ops4j.pax.logging.pax-logging-api_1.5.0 &amp;#91;4&amp;#93;&gt; org.osgi.service.framework; version="1.0.0"&lt;org.eclipse.osgi_3.7.0.v20110613 &amp;#91;0&amp;#93;&gt; org.osgi.framework.launch; version="1.0.0"&lt;org.eclipse.osgi_3.7.0.v20110613&amp;#91;0&amp;#93;&gt; org.eclipse.osgi.internal.loader; version="0.0.0"&lt;org.eclipse.osgi_3.7.0.v20110613 &amp;#91;0&amp;#93;&gt; org.eclipse.osgi.framework.internal.core; version="0.0.0"&lt;org.eclipse.osgi_3.7.0.v20110613 &amp;#91;0&amp;#93;&gt; org.eclipse.osgi.framework.adaptor; version="0.0.0"&lt;org.eclipse.osgi_3.7.0.v20110613 &amp;#91;0&amp;#93;&gt; No fragment bundles Named class space org.apache.aries.util; bundle-version="0.4.0"&amp;#91;provided&amp;#93; No required bundlesIt looks like something bad has happened to org.apache.aries.util. Investigations continue.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.jpa-container-itest.pom.xml</file>
      <file type="M">samples.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="813" opendate="2012-1-23 00:00:00" fixdate="2012-1-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blog sample link from Aries icon is broken</summary>
      <description>It takes user to aries.apache.org/aries instead of aries.apache.org</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog.blog-web.src.main.java.org.apache.aries.samples.blog.web.util.HTMLOutput.java</file>
    </fixedFiles>
  </bug>
  <bug id="826" opendate="2012-2-12 00:00:00" fixdate="2012-1-12 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Provide a hook into the proxy weaver to enable smart decision making</summary>
      <description>I need to be able to disable proxy weaving where it doesn't make sense.</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-itests.src.test.java.org.apache.aries.proxy.itests.WeavingProxyTest.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.weaving.ProxyWeavingHook.java</file>
      <file type="M">proxy.proxy-impl.pom.xml</file>
      <file type="M">proxy.proxy-bundle.pom.xml</file>
      <file type="M">proxy.proxy-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="827" opendate="2012-2-12 00:00:00" fixdate="2012-6-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ARIES-778 broke the ability to use a composite bundles isolation implementation on equinox 3.7</summary>
      <description>The ARIES-778 to use a ResolverHook based solution to the recursive bundle tracker means on equinox 3.7 you can't use the composite bundle based isolation mode.This hardly seems like a good idea.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">util.util.src.test.java.org.apache.aries.util.RecursiveBundleTrackerTest.java</file>
      <file type="M">util.util.src.main.java.org.apache.aries.util.tracker.RecursiveBundleTracker.java</file>
      <file type="M">util.util-r42.src.main.java.org.apache.aries.util.tracker.InternalRecursiveBundleTracker.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.UpdateAppTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.MinimumImportsTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedCfgAdminRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicNoOpResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="843" opendate="2012-4-6 00:00:00" fixdate="2012-7-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bean can not be created if constructor argument use generics</summary>
      <description>If a bean has a constructor argument which use generics, the injection fails with "org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to find a matching constructor".Example:package example;public interface Example&lt;A&gt; {}public class ExampleImpl implements Example&lt;String&gt; {}public class Service { private Example&lt;String&gt; example; public Service(Example&lt;String&gt; example) { this.example = example; }}&lt;bean id="exampleBean" class="example.ExampleImpl"/&gt;&lt;bean id="serviceBean" class="example.Service"&gt; &lt;argument ref="exampleBean"/&gt;&lt;/bean&gt;Changing the constructor of Service to "public Service(Example example)" make it work, but it would be better to have it inject correctly with the generics intact.</description>
      <version>0.3</version>
      <fixedVersion>blueprint-core-1.0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.container.BeanRecipeTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="846" opendate="2012-5-3 00:00:00" fixdate="2012-5-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The Aries transaction manager does not recover transactions correctly</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>transaction-manager-0.3.1,1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-manager.src.main.java.org.apache.aries.transaction.TransactionManagerService.java</file>
    </fixedFiles>
  </bug>
  <bug id="848" opendate="2012-5-7 00:00:00" fixdate="2012-5-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>blueprint-annotation-impl should actually make use of it&amp;#39;s properties</summary>
      <description>The problem is that there are properties defined in the annotation-impl project...&lt;blueprint.annotation.api.version&gt;0.3&lt;/blueprint.annotation.api.version&gt;&lt;util.version&gt;0.4&lt;/util.version&gt;... and there's a profile available for using the latest versions of those libs instead...&lt;profiles&gt; &lt;profile&gt; &lt;id&gt;dev&lt;/id&gt; &lt;properties&gt; &lt;blueprint.annotation.api.version&gt;0.3.3-SNAPSHOT&lt;/blueprint.annotation.api.version&gt; &lt;util.version&gt;0.5-SNAPSHOT&lt;/util.version&gt; &lt;/properties&gt; &lt;/profile&gt;&lt;/profiles&gt;... nevertheless, the dependencies don't make use of those properties (see the attached patch).</description>
      <version>0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-annotation-impl.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="85" opendate="2009-12-15 00:00:00" fixdate="2009-12-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refactor to make proxying code common, and add asm proxying implementation from ARIES-47</summary>
      <description>We currently have JDK proxying, CGLib Proxying, used for Service References. And seperate CGLib proxying for Bean (And Service Reference) Interceptors, with ASM code offered via a patch in ARIES-47 to provide ASM proxying for interceptors. It would be beneficial to have a single proxying approach within the code for both Service References, Interceptors, able to select its implementation based on if asm / cglib is available at runtime, with jdk always being available.</description>
      <version>None</version>
      <fixedVersion>0.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.MultiBundleWithCgLibTest.java</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.NSHandlerTwo.java</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.proxy.Collaborator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BeanRecipe.java</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.MultiBundleTest.java</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="873" opendate="2012-7-10 00:00:00" fixdate="2012-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow transactionManager Identity to be specified via configuration aries.transaction.tmid=MyUniqueId</summary>
      <description>Currently the tmid for the xidfactory used by the transaction manager is hardcoded to be the PID. This identity needs to be unique for each TM that accesses a resource so it should be configurable via a property, eg aries.transaction.tmid=xxx with a default value of PID.</description>
      <version>0.3</version>
      <fixedVersion>transaction-manager-1.0.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-manager.src.main.java.org.apache.aries.transaction.TransactionManagerService.java</file>
    </fixedFiles>
  </bug>
  <bug id="918" opendate="2012-9-4 00:00:00" fixdate="2012-9-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Start operations on the root subsystem should not affect its constituent bundles.</summary>
      <description>Currently, all operations but start do not affect bundle constituents of the root subsystem. The same should apply to the start operation. Root operations should not affect bundles in the root region because those bundles are either (1) intended to be outside the scope of the subsystems API altogether, or (2) provisioned dependencies of child subsystems, in which case they will be affected by operations performed on the dependent children.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.RootSubsystemTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartAction.java</file>
    </fixedFiles>
  </bug>
  <bug id="919" opendate="2012-9-5 00:00:00" fixdate="2012-9-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint HelloWorld sample broken</summary>
      <description>It looks like changes were accidentally committed as part of SPI-fly refactoring in April last year which broke the Blueprint HelloWorld sample. The tests also didn't notice the sample was broken, so we could use slightly more robust tests than the current ones.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blueprint.helloworld.helloworld-itests.src.test.java.org.apache.aries.samples.blueprint.helloworld.itests.HelloworldSampleTest.java</file>
      <file type="M">samples.blueprint.helloworld.helloworld-client.src.main.resources.OSGI-INF.blueprint.config.xml</file>
    </fixedFiles>
  </bug>
  <bug id="92" opendate="2009-12-23 00:00:00" fixdate="2009-12-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Contribute Blueprint MBeans to Aries</summary>
      <description>The codes are in my sandbox of Geronimo community:https://svn.apache.org/repos/asf/geronimo/sandbox/rexPlease help svn mv/cp, thanks very much!</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.test.blueprint.BlueprintMBeanTest.java</file>
      <file type="M">jmx.jmx-core.pom.xml</file>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-core.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-api.pom.xml</file>
      <file type="M">jmx.jmx-api.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-api.src.main.java.org.apache.aries.jmx.blueprint.JmxConstants.java</file>
      <file type="M">jmx.jmx-blueprint-api.src.main.java.org.apache.aries.jmx.blueprint.BlueprintMetadataMBean.java</file>
      <file type="M">jmx.pom.xml</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.framework.FrameworkMBeanTest.java</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.AbstractIntegrationTest.java</file>
      <file type="M">jmx.jmx-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="921" opendate="2012-9-6 00:00:00" fixdate="2012-9-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>java.lang.IllegalStateException: Orphaned bundle revision detected: org.eclipse.osgi_3.8.0.v20120529-1548</summary>
      <description>Stack Dump = org.osgi.framework.ServiceException: Exception in org.apache.aries.subsystem.core.internal.BundleEventHook.event() at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1247) at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHooksPrivileged(ServiceRegistry.java:1222) at org.eclipse.osgi.framework.internal.core.Framework.notifyEventHooksPrivileged(Framework.java:1603) at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1558) at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1505) at org.eclipse.osgi.framework.internal.core.Framework.installWorker(Framework.java:906) at org.eclipse.osgi.framework.internal.core.Framework.installBundle(Framework.java:841) at org.eclipse.osgi.framework.internal.core.BundleContextImpl.installBundle(BundleContextImpl.java:137) at org.eclipse.osgi.internal.composite.CompositeConfigurator.installCompositeBundle(CompositeConfigurator.java:121) at org.apache.aries.application.runtime.framework.BundleFrameworkFactoryImpl.createBundleFramework(BundleFrameworkFactoryImpl.java:41) at Proxy4c4dbc3f_cb7e_44a3_8e8c_10f39cb3c0d6.createBundleFramework(Unknown Source) at Proxy4547fba1_bc2e_4c7f_a9b4_fc4e150750b2.createBundleFramework(Unknown Source) at org.apache.aries.application.runtime.framework.management.SharedBundleFramework.createSharedBundleFramework(SharedBundleFramework.java:77) at org.apache.aries.application.runtime.framework.management.SharedBundleFramework.getSharedBundleFramework(SharedBundleFramework.java:108) at org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl.init(BundleFrameworkManagerImpl.java:97) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:238) at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:954) at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:708) at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:820) at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:783) at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88) at org.apache.aries.blueprint.di.RefRecipe.internalCreate(RefRecipe.java:62) at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:106) at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:929) at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:903) at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:884) at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:816) at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:783) at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88) at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245) at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183) at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:648) at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:340) at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:242) at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)Caused by: java.lang.IllegalStateException: Orphaned bundle revision detected: org.eclipse.osgi_3.8.0.v20120529-1548 at org.apache.aries.subsystem.core.internal.BundleEventHook.handleExplicitlyInstalledBundleBundleContext(BundleEventHook.java:56) at org.apache.aries.subsystem.core.internal.BundleEventHook.handleInstalledEvent(BundleEventHook.java:92) at org.apache.aries.subsystem.core.internal.BundleEventHook.event(BundleEventHook.java:40) at org.eclipse.osgi.framework.internal.core.Framework$10.call(Framework.java:1606) at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1239) ... 52 more</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="923" opendate="2012-9-10 00:00:00" fixdate="2012-9-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>A service proxy obtained from a reference list can return a null service, leading to NPE</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ReferenceListRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="937" opendate="2012-10-9 00:00:00" fixdate="2012-7-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Subsystem itests taking too long</summary>
      <description>Subsystem itests are taking an inordinate length of time to build. My check-in under revision #1395921 may have caused or exacerbated this.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.ServiceDependencyTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.RootSubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.ProvisionPolicyTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.OptionalDependenciesTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.NoRequirementFilterTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.InstallTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.HelloWorldTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.FeatureTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.DynamicImportTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.DependencyLifeCycleTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.CompositeTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.BlueprintTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.BasicTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.AutostartTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.ApplicationTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.ctt.itests.SubsystemDependencyTestBase.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
