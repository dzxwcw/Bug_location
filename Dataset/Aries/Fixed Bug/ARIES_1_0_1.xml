<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="ARIES">
  <bug id="1020" opendate="2013-2-28 00:00:00" fixdate="2013-3-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint disable service too soon at shutdown</summary>
      <description>The enhancement, preemtive shutdown, from last blueprint release introduce this regression, and the configuration to disable this enhancement does not work either.Please see https://issues.apache.org/jira/browse/KARAF-2189 for detailaccording to karaf, it is using blueprint-core 1.1.0, but there is no entry for htis at Arier JIRA site</description>
      <version>blueprint-core-1.0.1</version>
      <fixedVersion>blueprint-core-1.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="1021" opendate="2013-3-1 00:00:00" fixdate="2013-3-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implementation of AriesSubsystem.addRequirements must not assume the region only has edges to the parent subsystem&amp;#39;s region.</summary>
      <description>The addRequirements method on the AriesSubsystem interface allows clients to add additional requirements (i.e. those beyond what was in the deployment manifest) to a subsystem. Effectively, this means any capability matching a specified requirement will be allowed into the subsystem's region from the parent region.However, the implementation assumes that all edges of the current region point to the parent, which is not the case. For example, currently there is always at least one edge that does not fit that pattern, namely the edge that allows subsystem services to be seen from the root region. Other edges might also exist if region digraph was manipulated outside of the subsystems API.</description>
      <version>None</version>
      <fixedVersion>subsystem-core-1.0.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.AriesSubsystemTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicSubsystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="1022" opendate="2013-3-1 00:00:00" fixdate="2013-3-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support for mandatory directive for osgi.wiring.[package | bundle | host] namespaces</summary>
      <description>When finding capabilities from the Repositories implemented by the Subsystems Implementation (Local Repo, System Repo, etc.) the mandatory directive should be honored for the osgi.wiring.bundle, osgi.wiring.host and osgi.wiring.package namespaces.We can assume service implementing the Repository services used by the subsystems implementation already honor the mandatory directive. If not then it is a bug in the Repository service implementation, not the Subsystems implementation. But we should ensure the internal repository implementations for the subsystems core accurately honor the mandatory directive.</description>
      <version>None</version>
      <fixedVersion>subsystem-core-1.0.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceHelper.java</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1025" opendate="2013-3-7 00:00:00" fixdate="2013-3-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Orderly shutdown is ineffective for containers using the ext/cm namespace</summary>
      <description></description>
      <version>blueprint-core-1.0.1</version>
      <fixedVersion>blueprint-core-1.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintExtender.java</file>
    </fixedFiles>
  </bug>
  <bug id="1287" opendate="2015-1-20 00:00:00" fixdate="2015-1-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Forcing auto-commit on Oracle JDBC connection that is still part of a transaction breaks transactional behavior</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>transaction-jdbc-2.1.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-jdbc.src.main.java.org.apache.aries.transaction.jdbc.internal.XADataSourceMCFFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="907" opendate="2012-8-20 00:00:00" fixdate="2012-8-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Persisted, unscoped subsystems are not being correctly started on restarts.</summary>
      <description>Basically, a subsystem should always be started when requested except on a restart (e.g., subsystems implementation bundle or framework) if the subsystem is not ready. The term "ready" is defined as at least one parent is in the STARTING or ACTIVE state and autostart is set to started. Autostart is set to started whenever an explicit start operation is requested (i.e. the start method of that subsystem is directly invoked by a client). It is also automatically set to started if the subsystem is content of another subsystem. Autostart is set to stopped whenever an explicit stop operation is requested (i.e. the stop method of that subsystem is directly invoked by a client).</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.RootSubsystemTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Utils.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.UninstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Subsystems.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StopAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AriesSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AbstractAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ReferenceCountDirective.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DirectiveFactory.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeploymentManifest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeployedContentHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.AriesSubsystemParentsHeader.java</file>
    </fixedFiles>
  </bug>
  <bug id="930" opendate="2012-9-28 00:00:00" fixdate="2012-9-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The abstract reference recipe may end up tracking the same reference multiple times</summary>
      <description></description>
      <version>blueprint-0.3.1,blueprint-core-1.0.1</version>
      <fixedVersion>blueprint-core-1.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="931" opendate="2012-10-2 00:00:00" fixdate="2012-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE in Application iTests</summary>
      <description>The following NPE from application-itests will occasionally occur during the Aries build.java.lang.NullPointerException at org.apache.aries.application.runtime.framework.management.SharedFrameworkPreResolveHook.collectFakeResources(SharedFrameworkPreResolveHook.java:161)The NPE occurs because fwMgr.getSharedBundleFramework() returns null since the shared bundle framework was not created earlier.org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl - Caught exceptionorg.apache.aries.application.management.spi.repository.ContextException: Unable to create or start the shared framework composite bundle null at org.apache.aries.application.runtime.framework.management.SharedBundleFramework.createSharedBundleFramework(SharedBundleFramework.java:83)The shared bundle framework was not created due to a ConcurrentModificationException in the Equinox framework.Caused by: java.util.ConcurrentModificationException at java.util.Hashtable$Enumerator.next(Hashtable.java:1031) at java.util.Hashtable.putAll(Hashtable.java:465) at org.eclipse.osgi.framework.internal.core.FrameworkProperties.internalGetProperties(FrameworkProperties.java:82) at org.eclipse.osgi.framework.internal.core.FrameworkProperties.setProperties(FrameworkProperties.java:95) at org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalInit(EquinoxLauncher.java:64) at org.eclipse.osgi.framework.internal.core.EquinoxLauncher.init(EquinoxLauncher.java:38) at org.eclipse.osgi.launch.Equinox.init(Equinox.java:89) at org.eclipse.osgi.internal.composite.CompositeImpl.findCompanionFramework(CompositeImpl.java:64) at org.eclipse.osgi.internal.composite.CompositeBase.&lt;init&gt;(CompositeBase.java:37) at org.eclipse.osgi.internal.composite.CompositeImpl.&lt;init&gt;(CompositeImpl.java:37) at org.eclipse.osgi.framework.internal.core.AbstractBundle.createBundle(AbstractBundle.java:69) at org.eclipse.osgi.framework.internal.core.Framework.createAndVerifyBundle(Framework.java:712) at org.eclipse.osgi.framework.internal.core.Framework.installWorkerPrivileged(Framework.java:923) ... 49 moreThe CME is a known issue and was fixed as of Equinox 3.7.2. Currently, the application-itests run against both Equinox 3.5.0 and 3.7.0, which are subject to the CME. Unless running against these frameworks is absolutely necessary, I'd like to propose that the itests be executed against 3.8, available in Maven Central, instead in order to avoid these potential "false positives" in the Aries build test results. The other configurations can remain in order to run locally when necessary but would be commented out.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">application.application-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.UpdateAppTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.MinimumImportsTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedCfgAdminRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicNoOpResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="947" opendate="2012-10-23 00:00:00" fixdate="2012-1-23 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Remove build WARNING</summary>
      <description>The complete build (with a simple mvn clean install) provides WARNING messages.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-testquiescebundle.pom.xml</file>
      <file type="M">blueprint.blueprint-sample.pom.xml</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
      <file type="M">blueprint.blueprint-api.pom.xml</file>
      <file type="M">blueprint.blueprint-annotation-impl.src.main.java.org.apache.aries.blueprint.annotation.impl.BlueprintAnnotationScannerImpl.java</file>
      <file type="M">blueprint.blueprint-annotation-api.pom.xml</file>
      <file type="M">util.util.pom.xml</file>
      <file type="M">util.util-r42.src.test.java.org.apache.aries.util.filesystem.IOUtilsTest.java</file>
      <file type="M">util.util-r42.src.test.java.org.apache.aries.util.filesystem.FileUtilsTest.java</file>
      <file type="M">util.util-r42.src.main.java.org.apache.aries.util.VersionRange.java</file>
      <file type="M">util.util-r42.src.main.java.org.apache.aries.util.manifest.ManifestHeaderProcessor.java</file>
      <file type="M">util.util-r42.src.main.java.org.apache.aries.util.manifest.BundleManifest.java</file>
      <file type="M">util.util-r42.src.main.java.org.apache.aries.util.filesystem.FileUtils.java</file>
      <file type="M">spi-fly.spi-fly-static-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.spi-fly-example-spi-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.spi-fly-example-resource-provider-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.spi-fly-example-resource-client-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.spi-fly-example-provider2-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.spi-fly-example-provider1-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.spi-fly-example-client2-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.spi-fly-example-client1-bundle.pom.xml</file>
      <file type="M">spi-fly.spi-fly-examples.pom.xml</file>
      <file type="M">spi-fly.spi-fly-dynamic-bundle.pom.xml</file>
      <file type="M">jmx.jmx-whiteboard.pom.xml</file>
      <file type="M">jmx.jmx-itests.src.test.java.org.apache.aries.jmx.provisioning.ProvisioningServiceMBeanTest.java</file>
      <file type="M">jmx.jmx-core.pom.xml</file>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-bundle.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-api.pom.xml</file>
      <file type="M">jmx.jmx-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="95" opendate="2009-12-28 00:00:00" fixdate="2009-12-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make jmx-blueprint-bundle generate sources and javadoc</summary>
      <description>it does not work when type "mvn clean install -Pdeploy" in jmx-blueprint-bundle.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.pom.xml</file>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-core.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-bundle.pom.xml</file>
      <file type="M">jmx.jmx-blueprint-api.pom.xml</file>
      <file type="M">jmx.jmx-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="956" opendate="2012-11-2 00:00:00" fixdate="2012-11-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add ability to update the sharing policy of composite subsystems.</summary>
      <description>I`m looking to implement a "Shared Bundle Subsystem" which is basically a subsystem container for other subsystems. It looks like there was consideration for this scenario in the spec as there is talk of an application container in the section which discusses appDependencies. I have created a subsystem of type composite to which I am attempting to install an application subsystem. The problem is that the dependencies for the application subsystem cannot be satisfied because the manifest of the composite does not import them. At the point that I install the composite I can't supply the imports because I don't yet know which applications (and therefore which dependencies) will be installed. Ideally what I was hoping for was an ability to import all available packages into the composite from the parent (in this case the root subsystem). I have attempted various methods of achieving this , (e.g. Including an empty bundle in the composite which has a DynamicImport-Package: *) but nothing seems to work. Can you think of a way of implementing this scenario in the existing Subsystem framework? It's a fundamental part of what we (used to) do with the old composite bundle framework code so I`m hoping we can find a solution!</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.AriesSubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Utils.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.UninstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ThreadLocalSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.TargetRegion.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SystemRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemServiceRegistrar.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Subsystems.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResolverHook.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemManifestValidator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemGraph.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StopAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceReferences.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResourceHelper.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RegionContextBundleHelper.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RawSubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.PreferredProviderRepository.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.InstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.GetSubsystemHeadersAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.GetBundleContextAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleEventHook.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AriesSubsystem.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.AbstractAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.DeploymentManifest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.AriesSubsystemParentsHeader.java</file>
      <file type="M">subsystem.subsystem-bundle.pom.xml</file>
      <file type="M">subsystem.subsystem-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="965" opendate="2012-11-20 00:00:00" fixdate="2012-11-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Consider having the subsystems api bundle include the org.osgi.service.repository package and both import and export it.</summary>
      <description>Without installing an implementation of the OSGi Repository specification, there is currently no other way of getting the org.osgi.service.repository package than the osgi.enterprise jar. Subsystems does not require an implementation of the repository specification in order to function, but it does require the package since it uses repositories internally (e.g., local, system, and preferred provider). It therefore seems reasonable to include that package in the subsystems api bundle. This would also be helpful to subsystems users who will make use of the repository api but don't need a standard spec implementation.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-bundle.pom.xml</file>
      <file type="M">subsystem.subsystem-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="966" opendate="2012-11-20 00:00:00" fixdate="2012-11-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The region context bundle should have the start level set explicitly to 1.</summary>
      <description>All other bundles, both content and dependencies, installed (i.e. managed) by subsystems have the start level explicitly set to 1. This is because the life cycle of bundles managed by subsystems should only be affected by the life cycle of the susbsytem. The same thing applies to region context bundles.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.InstallTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RegionContextBundleHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="968" opendate="2012-11-20 00:00:00" fixdate="2012-11-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Consider using a "multiple attempts" strategy versus the current locking strategy when updating sharing policies.</summary>
      <description>The AriesSubsystem.addRequirements(Collection&lt;Requirement&gt;) method adds the specified requirements to a subsystem's sharing policy, which is controlled by a Region in the RegionDigraph API. Updating a region digraph is atomic. This means a copy of the current digraph is made, updated, and then set in the digraph service. If something else sets a a different copy between the time the first copy is made and set, an exception occurs. Currently, this is mitigated by locking on the SubsystemImpl class. A better mitigating approach would be to make multiple attempts until it either succeeded or some threshold number of attempts was surpassed. This would avoid the bottleneck as well as address the possibility of something outside subsystems interfering.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.AriesSubsystemTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicSubsystem.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
