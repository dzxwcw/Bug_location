<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="ARIES">
  <bug id="745" opendate="2011-9-16 00:00:00" fixdate="2011-9-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>miss parsing default properties defined by new blueprint-ext 1.1.0 schema</summary>
      <description>we forget to parse default properties defined by blueprint-ext 1.1.0 schema.</description>
      <version>blueprint-0.3.1</version>
      <fixedVersion>blueprintuberbundle0.4,blueprint.core-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.ExtNamespaceHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="746" opendate="2011-9-16 00:00:00" fixdate="2011-9-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries Proxy fails to properly proxy Object methods for interfaces</summary>
      <description>If we generate a dynamic interface proxy using ASM then we don't properly proxy methods on Object (unless they are declared on one of the interfaces). We pass a null Method to the listener and we try to cast the returned object to a random one of its interfaces.</description>
      <version>None</version>
      <fixedVersion>proxyuberbundle0.4,proxy.impl-0.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceUsingWovenProxyMethodAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceCombiningClassAdapter.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.InterfaceProxyingTest.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.ProxyClassLoader.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="767" opendate="2011-10-26 00:00:00" fixdate="2011-2-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Service property assigned with a service reference gets a ServiceProxyWrapper</summary>
      <description>When defining a service property with a reference as a value, the property is assigned with a ServiceProxyWrapper (inner class of ReferenceRecipe).Here is the way it is defined:&lt;service ref="..." interface="..."&gt; &lt;service-properties&gt; &lt;entry key="Property1"&gt; &lt;ref component-id="serviceRef"/&gt; &lt;/entry&gt; &lt;/service-properties&gt;&lt;/service&gt;&lt;reference id="serviceRef" interface="A" /&gt;I would have expected the service property "Property1" to be assigned with an instance of "A" instead of a ServiceProxyWrapper. However I could get the instance of "A" by calling the method 'convert' and passing a ReifiedType.</description>
      <version>blueprint-0.3.1</version>
      <fixedVersion>blueprint-0.3.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.AbstractProxyManager.java</file>
      <file type="M">blueprint.blueprint-core.src.test.resources.test-wiring.xml</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.WiringTest.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.TestBlueprintContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="83" opendate="2009-12-15 00:00:00" fixdate="2009-12-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint bundle does not run on Equinox</summary>
      <description>The blueprint bundle does not run on Equinox because it depends on org.osgi.service.cm; version="[1.3.0,2.0.0)" which is not implemented in org.eclipse.equinox.cm_1.0.100.v20090520-1800.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="855" opendate="2012-5-22 00:00:00" fixdate="2012-7-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint should attempt to load static nested classes when the initial attempt to load a class has failed</summary>
      <description>At the moment the Blueprint schema blocks the static nested class names, example, trying to get SimpleBean#Nested:public class SimpleBean { public static Nested { }}referenced as "SimpleBean#Nested" in a blueprint context fails with the validation error. As proposed at the Osgi-dev by BJ H., the implementation should attempt to load a nested class if the original load attempt fails.</description>
      <version>None</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.di.AbstractRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="856" opendate="2012-5-24 00:00:00" fixdate="2012-5-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Possible deadlock when starting the transaction manager</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>transaction-manager-0.3.1,1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-manager.src.main.java.org.apache.aries.transaction.Activator.java</file>
    </fixedFiles>
  </bug>
  <bug id="859" opendate="2012-6-7 00:00:00" fixdate="2012-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Build break: org.apache.aries.blueprint.itests.ASMMultiBundleTest.multiBundleTest [equinox/3.5.0] failing</summary>
      <description>The following build has a new test failure, which I can reproduce locally:https://builds.apache.org/job/Aries/1473/. It seems to be related to the following commit, under ARIES-825: http://svn.apache.org/viewvc?view=revision&amp;revision=1347690</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="86" opendate="2009-12-15 00:00:00" fixdate="2009-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add multibundle itest</summary>
      <description>Current itests use blueprint-sample to drive core blueprint features, but are unable to test custom NamespaceHandlers, Interceptors, BeanProcessors etc, as each of these require two bundles (eg, one to declare the nshandler, one to make use of it).This issue will introduce 2 new test bundles, to enable testing of these scenarios (rather than adding just one, and increasing the complexity of the existing sample).</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.nshandlertwo.xsd</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.nshandlerthree.xsd</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.nshandlerone.xsd</file>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="860" opendate="2012-6-11 00:00:00" fixdate="2012-6-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Proxy API should not require 1.6 OSGi APIs</summary>
      <description>See http://aries.15396.n3.nabble.com/proxy-api-needs-at-least-org-osgi-framework-1-6-0-td4015203.html</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-itests.src.test.java.org.apache.aries.proxy.itests.WeavingProxyTest.java</file>
      <file type="M">proxy.proxy-itests.src.test.java.org.apache.aries.proxy.itests.BasicProxyTest.java</file>
      <file type="M">proxy.proxy-itests.src.test.java.org.apache.aries.proxy.itests.AbstractProxyTest.java</file>
      <file type="M">proxy.proxy-itests.pom.xml</file>
      <file type="M">proxy.proxy-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="861" opendate="2012-6-14 00:00:00" fixdate="2012-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Error on retrieving constructor for proxy of karaf BlueprintCommand class on jdk 6 update 33</summary>
      <description>When I switch my karaf trunk snapshot from jdk 6 update 31 to update 33 all karaf commands stop working.I was able to track this down to blueprint and the proxy facility or aries.The exception I get is:org.osgi.framework.ServiceException: Service factory exception: (class: org/apache/karaf/shell/console/commands/$BlueprintCommand16496117, method: &lt;init&gt; signature: (Ljava/lang/reflect/InvocationHandler;)V) Call to wrong initialization methodIn the log this does not show. There I only get a Nullpointer exception as the service object for the command is returned as null.I have documented more details in the linked karaf issue.</description>
      <version>None</version>
      <fixedVersion>proxy.impl-0.4.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-itests.src.test.java.org.apache.aries.proxy.itests.AbstractProxyTest.java</file>
      <file type="M">proxy.proxy-impl.src.test.java.org.apache.aries.blueprint.proxy.ProxySubclassGeneratorTest.java</file>
      <file type="M">proxy.proxy-impl.src.main.resources.org.apache.aries.proxy.nls.ProxyImplMessages.properties</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.gen.ProxyClassInstantiationException.java</file>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.gen.ProxySubclassAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="867" opendate="2012-7-5 00:00:00" fixdate="2012-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Deadlock if stopping a blueprint bundle while the blueprint container is in the create state.</summary>
      <description>Assume a updating mechanism which installs a bundle using fileinstall. It places a bundle in a folder watched by fileinstall. If the bundle is removed in a short manner a deadlock may occur. This issue can occur if a bundles blueprintcontainer is registering services during the create state and the bundle is stopped concurrently. See attached Threaddump. We also attached a sample environment to reproduce the deadlock.For reproduction: start the container in debug mode. put the com.test.deadlock.1.blueprint-0.0.1-SNAPSHOT.jar into the ./load folder and wait for GRACE_PERIOD state of the blueprint container. set breakpoint on line 3205 in class org.apache.felix.framework.Felix. put the com.test.deadlock.2.stopper-0.0.1-SNAPSHOT.jar into the ./load folder. skip the breakpoint the FIRST time! remove the com.test.deadlock.1.blueprint-0.0.1-SNAPSHOT.jar from ./load folder, fileinstall will now remove the bundle, wait a until fileinstall loggs the that. resuming now the debugger. This leads to the deadlock and to the attached thread dump.Richard S.Hall does describe the problem in the comment here: https://issues.apache.org/jira/browse/FELIX-3393?focusedCommentId=13244548&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13244548You might consider to register services in a &lt;code&gt;open call&lt;/code&gt;, if easily possible.</description>
      <version>blueprint-0.3.1</version>
      <fixedVersion>blueprint-core-1.0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="868" opendate="2012-7-5 00:00:00" fixdate="2012-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Subsystem support for woven package dependencies</summary>
      <description>We need a mechanism to support woven package dependencies within subsystems. For example, when running on Equinox 3.7+ the proxy code weaves a dependency on org.apache.aries.proxy.weaving.WovenProxy into application code. This prevents blueprint-managed subsystems from starting unless a bundle explicitly imports the org.apache.aries.proxy.weaving package, which should not be necessary. JPA is worse, in that multiple, and "harder to know" package dependencies are woven in. Investigate mechanisms for informing the SubsystemResolverHook about woven packages so that they can be permitted to resolve against the parent subsystem. Develop one or more itests: for example, one that shows blueprint working in a subsystem on Equinox 3.8 without explicitly stating woven package dependencies.</description>
      <version>None</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.bundles.dynamicImport.META-INF.MANIFEST.MF</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.DynamicImportTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="869" opendate="2012-7-5 00:00:00" fixdate="2012-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for computing blueprint service dependencies.</summary>
      <description>Subsystems needs to support the ability to compute service dependencies. Applications, for example, require this. This defect will focus on integrating support for service dependencies defined as part of the blueprint specification. We may also wish to support OSGi Declarative Services in another defect.</description>
      <version>None</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SharingPolicyValidator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RawSubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.InstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleEventHook.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemImportServiceRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemImportServiceHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemExportServiceHeader.java</file>
    </fixedFiles>
  </bug>
  <bug id="870" opendate="2012-7-5 00:00:00" fixdate="2012-5-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>How to handle osgi.ee requirements.</summary>
      <description>When working with the Resolver in order to compute dependencies and resolve subsystems, the ResolveContext will need to handle requests for osgi.ee capabilities. Currently, these capabilities need to be provided by resources packaged with the subsystems.</description>
      <version>None</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
    </fixedFiles>
  </bug>
  <bug id="871" opendate="2012-7-9 00:00:00" fixdate="2012-7-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update dependency on util to version 1.0.0.</summary>
      <description>Update the dependency on aries.util to version 1.0.0. This is the version that OSGi desires to maintain in the enterprise branch of the git repo.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="888" opendate="2012-7-30 00:00:00" fixdate="2012-8-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add a bundle to support JMS with the transaction manager</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>transaction-jms-1.0.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-jms.pom.xml</file>
      <file type="M">transaction.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="89" opendate="2009-12-21 00:00:00" fixdate="2009-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement application support</summary>
      <description>Implement Aries application support. Additional documentation will be added to http://incubator.apache.org/aries/applications.html as we go along. Under this JIRA, we will: Refactor application-utils into implementation and api bundles Add support for understanding a .eba file Add support for provisioning missing bundles Generate default application.mf if none provided Add hook point to call out to convert wars in a .eba into WABs Deliver pluggable runtime support for installing/uninstalling/starting/stopping the application.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-runtime.src.main.java.org.apache.aries.application.runtime.impl.ApplicationContextImpl.java</file>
      <file type="M">application.application-runtime.src.main.resources.OSGI-INF.blueprint.app-context-management.xml</file>
      <file type="M">application.application-utils.src.main.resources.OSGI-INF.blueprint.app-manager.xml</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.ServiceDeclarationImpl.java</file>
      <file type="M">application.application-utils.src.test.java.org.apache.aries.application.utils.VersionRangeTest.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.manifest.ManifestProcessor.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.DeploymentContentImpl.java</file>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.BundleInfoImpl.java</file>
      <file type="M">application.application-utils.src.test.java.org.apache.aries.application.utils.ApplicationMetadataImplTest.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.ApplicationMetadataManagerServiceImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.ApplicationMetadataManagerImpl.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.ApplicationMetadataManager.java</file>
      <file type="M">testsupport.testsupport-unit.src.main.java.org.apache.aries.unittest.fixture.ArchiveFixture.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.AppConstants.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.ApplicationContext.java</file>
      <file type="M">application.application-utils.pom.xml</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.filesystem.utils.FileSystem.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.filesystem.utils.impl.DirectoryImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.filesystem.utils.impl.FileImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.filesystem.utils.impl.ZipDirectory.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.filesystem.utils.impl.ZipFileImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.filesystem.utils.IOUtils.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.manifest.BundleManifest.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.manifest.ManifestDefaultsInjector.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.ApplicationMetadata.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.DeploymentMetadata.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.AriesApplication.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.BundleInfo.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.VersionRangeImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.messages.APPUTILSmessages.properties</file>
      <file type="M">application.application-utils.src.test.java.org.apache.aries.application.utils.ManifestProcessorTest.java</file>
      <file type="M">application.application-utils.src.test.java.org.apache.aries.application.utils.manifest.test.BundleManifestTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.BundleConverter.java</file>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.AriesApplicationManagerImpl.java</file>
      <file type="M">application.application-runtime.pom.xml</file>
      <file type="M">application.application-utils.src.test.java.org.apache.aries.application.utils.filesystem.FileSystemTest.java</file>
      <file type="M">application.application-utils.src.test.java.org.apache.aries.application.utils.manifest.ManifestHeaderProcessorTest.java</file>
      <file type="M">application.application-runtime.src.main.java.org.apache.aries.application.runtime.ApplicationContextImpl.java</file>
      <file type="M">application.application-runtime.src.main.java.org.apache.aries.application.runtime.ApplicationContextManagerImpl.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.Content.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.AriesApplicationResolver.java</file>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.AriesApplicationImpl.java</file>
      <file type="M">application.application-management.src.main.resources.OSGI-INF.blueprint.app-management.xml</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.ApplicationMetadataImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.ContentImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.DeploymentMetadataFactoryImpl.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.impl.DeploymentMetadataImpl.java</file>
      <file type="M">application.pom.xml</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.DeploymentMetadataFactory.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.AriesApplicationManager.java</file>
      <file type="M">application.application-api.src.main.java.org.apache.aries.application.management.LocalPlatform.java</file>
      <file type="M">application.application-management.src.main.java.org.apache.aries.application.management.impl.ExplodedEBA.java</file>
      <file type="M">application.application-management.src.test.java.org.apache.aries.application.management.impl.AriesApplicationManagerImplTest.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.utils.filesystem.IOUtils.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.ApplicationMetadata.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.ApplicationMetadataManager.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.Content.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.ServiceDeclaration.java</file>
      <file type="M">application.application-utils.src.main.java.org.apache.aries.application.VersionRange.java</file>
      <file type="M">application.application-management.pom.xml</file>
      <file type="M">application.application-api.pom.xml</file>
      <file type="M">application.application-itests.pom.xml</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.AbstractIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="890" opendate="2012-7-30 00:00:00" fixdate="2012-8-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for recovery of JDBC XA transactions</summary>
      <description>XAResources need to be registered into the TransactionManager in order to be recovered properly at restart.</description>
      <version>None</version>
      <fixedVersion>transaction-jdbc-1.0.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-jdbc.src.main.resources.org.apache.aries.transaction.jdbc.jdbcWrappers.properties</file>
      <file type="M">transaction.transaction-jdbc.src.main.java.org.apache.aries.transaction.jdbc.XADatasourceEnlistingWrapper.java</file>
      <file type="M">transaction.transaction-jdbc.src.main.java.org.apache.aries.transaction.jdbc.NLS.java</file>
      <file type="M">transaction.transaction-jdbc.src.main.java.org.apache.aries.transaction.jdbc.ConnectionWrapper.java</file>
      <file type="M">transaction.transaction-jdbc.src.main.java.org.apache.aries.transaction.jdbc.ConnectionKey.java</file>
      <file type="M">transaction.transaction-jdbc.src.main.java.org.apache.aries.transaction.jdbc.Activator.java</file>
      <file type="M">transaction.transaction-jdbc.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="895" opendate="2012-7-31 00:00:00" fixdate="2012-7-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Missing filter directive on Require-Capability does not translate to a filter value of &lt;namespace&gt;=*.</summary>
      <description>Currently, Subsystems translates a bundle's missing Require-Capability filter directive as &lt;namespace&gt;=* for the purpose of computing the subsystem's Require-Capability header. For example,Require-Capability: yin a bundle's manifest, would translate toRequire-Capability: y;filter:=(y=*)in the subsystem's manifest. This is incorrect because (1) a requirement with a missing filter directive should match any capability from the same namespace and (2) capabilities are not required to use the namespace as an attribute. The current translation would not match a capability from the same namespace if said capability did not use the namespace as an attribute.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.NoRequirementFilterTest.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.DependencyCalculator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.RequireCapabilityRequirement.java</file>
    </fixedFiles>
  </bug>
  <bug id="898" opendate="2012-8-1 00:00:00" fixdate="2012-8-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The blueprint container is not correctly cleaned when a mandatory namespace is unregistered</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.BlueprintContainerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="899" opendate="2012-8-1 00:00:00" fixdate="2012-9-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Possible concurrent access to the namespace handler registry</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="9" opendate="2009-9-30 00:00:00" fixdate="2009-5-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Registration callback called with null service registration properties</summary>
      <description>A service with explicitly set auto-export attribute might cause the registration callback to be invoked with null service registration properties (if auto-export is set to anything else besides 'disabled'). For example: &lt;service id="fooService" ref="fooBean" auto-export="all-classes"&gt; &lt;registration-listener registration-method="register" unregistration-method="unregister"&gt; &lt;bean class="org.apache.geronimo.osgi.RegistrationListener"/&gt; &lt;/registration-listener&gt; &lt;/service&gt;</description>
      <version>None</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-sample.src.main.java.org.apache.aries.blueprint.sample.FooRegistrationListener.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="90" opendate="2009-12-22 00:00:00" fixdate="2009-12-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create samples project</summary>
      <description>Samples for each of the modules</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.helloworld-samples.blueprint-helloworld.blueprint-helloworld-api.src.main.java.org.apache.aries.blueprint.helloworldapi.HelloWorldService.java</file>
      <file type="M">samples.helloworld-samples.blueprint-helloworld.blueprint-helloworld-server.src.main.java.org.apache.aries.blueprint.helloworldserver.HelloWorldServiceImpl.java</file>
      <file type="M">samples.helloworld-samples.blueprint-helloworld.blueprint-helloworld-client.src.main.java.org.apache.aries.blueprint.helloworldclient.HelloWorldClient.java</file>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.src.main.java.org.apache.aries.blueprint.helloworldserver.HelloWorldServiceImpl.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.src.main.java.org.apache.aries.blueprint.helloworldclient.HelloWorldClient.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-api.src.main.resources.META-INF.MANIFEST.MF</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-api.src.main.java.org.apache.aries.blueprint.helloworldapi.HelloWorldService.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="900" opendate="2012-8-3 00:00:00" fixdate="2012-8-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unresolvable root subsystem should have no effect on the system.</summary>
      <description>An unresolvable root subsystem should have no effect on the system in terms of the root subsystem installing, starting, and generally being available for use.For consistency, the root subsystem should still follow the same event pattern for state transitions as other subsystems. Consequently, the root subsystem will still enter the RESOLVING and RESOLVED states, but the resolution work will not actually be done.The root subsystem will fail to resolve, for example, whenever a bundle already exists in the framework that is missing a required dependency. This should not prevent subsystems from functioning.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartAction.java</file>
    </fixedFiles>
  </bug>
  <bug id="901" opendate="2012-8-6 00:00:00" fixdate="2012-8-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Version attribute not applied to multiple package names separated by semicolons in import package header.</summary>
      <description>The specified version attribute should be applied to all packages listed in the associated path of the ImportPackage header. Packages are in the same path when they are separated by semicolons as opposed to commas. For example,org.foo;org.bar;org.foo.bar;version=1.3should result in all three listed packages being associated with version 1.3 or greater. Currently, the first two will be associated with version 0.0.org.foo,org.bar,org.foo.bar;version=1.3In this case, only org.foo.bar is associated with version 1.3 or greater while the first two are version 0.0.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.test.java.org.apache.aries.subsystem.core.Temp.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ImportPackageHeader.java</file>
    </fixedFiles>
  </bug>
  <bug id="902" opendate="2012-8-7 00:00:00" fixdate="2012-8-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reference counts not being checked before removing constituent relationships between the "provisioned to" subsystem and bundle resources.</summary>
      <description>When uninstalling a subsystem, the reference count is not being checked before removing the constituent relationships between the "provisioned to" subsystem and bundle resources. If the reference count is not equal to zero, the constituent relationships should not be removed. For example, the bundle resource might be a dependency of the uninstalling subsystem and a content resource of the "provisioned to" subsystem.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceUninstaller.java</file>
    </fixedFiles>
  </bug>
  <bug id="930" opendate="2012-9-28 00:00:00" fixdate="2012-9-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The abstract reference recipe may end up tracking the same reference multiple times</summary>
      <description></description>
      <version>blueprint-0.3.1,blueprint-core-1.0.1</version>
      <fixedVersion>blueprint-core-1.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="931" opendate="2012-10-2 00:00:00" fixdate="2012-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE in Application iTests</summary>
      <description>The following NPE from application-itests will occasionally occur during the Aries build.java.lang.NullPointerException at org.apache.aries.application.runtime.framework.management.SharedFrameworkPreResolveHook.collectFakeResources(SharedFrameworkPreResolveHook.java:161)The NPE occurs because fwMgr.getSharedBundleFramework() returns null since the shared bundle framework was not created earlier.org.apache.aries.application.runtime.framework.management.BundleFrameworkManagerImpl - Caught exceptionorg.apache.aries.application.management.spi.repository.ContextException: Unable to create or start the shared framework composite bundle null at org.apache.aries.application.runtime.framework.management.SharedBundleFramework.createSharedBundleFramework(SharedBundleFramework.java:83)The shared bundle framework was not created due to a ConcurrentModificationException in the Equinox framework.Caused by: java.util.ConcurrentModificationException at java.util.Hashtable$Enumerator.next(Hashtable.java:1031) at java.util.Hashtable.putAll(Hashtable.java:465) at org.eclipse.osgi.framework.internal.core.FrameworkProperties.internalGetProperties(FrameworkProperties.java:82) at org.eclipse.osgi.framework.internal.core.FrameworkProperties.setProperties(FrameworkProperties.java:95) at org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalInit(EquinoxLauncher.java:64) at org.eclipse.osgi.framework.internal.core.EquinoxLauncher.init(EquinoxLauncher.java:38) at org.eclipse.osgi.launch.Equinox.init(Equinox.java:89) at org.eclipse.osgi.internal.composite.CompositeImpl.findCompanionFramework(CompositeImpl.java:64) at org.eclipse.osgi.internal.composite.CompositeBase.&lt;init&gt;(CompositeBase.java:37) at org.eclipse.osgi.internal.composite.CompositeImpl.&lt;init&gt;(CompositeImpl.java:37) at org.eclipse.osgi.framework.internal.core.AbstractBundle.createBundle(AbstractBundle.java:69) at org.eclipse.osgi.framework.internal.core.Framework.createAndVerifyBundle(Framework.java:712) at org.eclipse.osgi.framework.internal.core.Framework.installWorkerPrivileged(Framework.java:923) ... 49 moreThe CME is a known issue and was fixed as of Equinox 3.7.2. Currently, the application-itests run against both Equinox 3.5.0 and 3.7.0, which are subject to the CME. Unless running against these frameworks is absolutely necessary, I'd like to propose that the itests be executed against 3.8, available in Maven Central, instead in order to avoid these potential "false positives" in the Aries build test results. The other configurations can remain in order to run locally when necessary but would be commented out.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">application.application-itests.src.test.resources.ss-runner.properties</file>
      <file type="M">application.application-itests.src.test.java.org.ops4j.pax.runner.platform.equinox.internal.SsActivator.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.UpdateAppTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRResolverAdvancedTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.OBRAppManagerTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.MinimumImportsTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.IsolatedCfgAdminRuntimeTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicNoOpResolverTest.java</file>
      <file type="M">application.application-itests.src.test.java.org.apache.aries.application.runtime.itests.BasicAppManagerTest.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
