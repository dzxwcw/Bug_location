<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="ARIES">
  <bug id="1063" opendate="2013-5-7 00:00:00" fixdate="2013-9-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries Blueprint 1.0 service does not work with ServiceFactory</summary>
      <description>A blueprint service does not work with Aries Blueprint (Core) 1.1.0 if the implementation bean is a ServiceFactory. This did work with Aries Blueprint 0.3.1.I think the attached demo and patch make the issue clear.</description>
      <version>blueprint-core-1.1.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug id="1064" opendate="2013-5-7 00:00:00" fixdate="2013-5-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Advertise blueprint extender capability as defined in the OSGi enterprise r5 spec</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1175" opendate="2014-4-21 00:00:00" fixdate="2014-4-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>esa-maven-plugin custom headers</summary>
      <description>Information on http://aries.apache.org/modules/esamavenpluginproject.html claims under the "Including Other Headers" section that "You can add any other headers in addition to those calculated from the pom configuration" using the esa-maven-plugin. However, that's not true. A header that I specified within the &lt;instructions/&gt; element did not end up in the generated SUBSYSTEM.MF file.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">esa-maven-plugin.src.test.java.org.apache.aries.plugin.esa.EsaMojoTest.java</file>
      <file type="M">esa-maven-plugin.src.main.java.org.apache.aries.plugin.esa.EsaMojo.java</file>
    </fixedFiles>
  </bug>
  <bug id="1176" opendate="2014-4-24 00:00:00" fixdate="2014-4-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Override subsystem name &amp; description</summary>
      <description>Subsystem-Name header value defaults to project name and Subsystem-Description defaults to project description. It would be nice to override these defaults to something else via instructions. Also, since the project description is optional, the Subsystem-Description should not be generated if there is no description.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">esa-maven-plugin.src.test.resources.unit.basic-esa-custom-instructions.plugin-config.xml</file>
      <file type="M">esa-maven-plugin.src.test.java.org.apache.aries.plugin.esa.EsaMojoTest.java</file>
      <file type="M">esa-maven-plugin.src.main.java.org.apache.aries.plugin.esa.EsaMojo.java</file>
    </fixedFiles>
  </bug>
  <bug id="118" opendate="2010-1-14 00:00:00" fixdate="2010-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add Persistence Context support</summary>
      <description>Add support for managed persistence contexts and blueprint injection of JPA persistence units and contexts.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jpa.jpa-container-context.src.test.resources.jpa.xml</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.namespace.PersistenceContextManagerTest.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.PersistenceBundleHelper.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.TempBundleDelegatingClassLoader.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.PersistenceUnitInfoImpl.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoImpl.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.unit.impl.ManagedPersistenceUnitInfoFactoryImpl.java</file>
      <file type="M">jpa.jpa-container-context.src.main.resources.org.apache.aries.jpa.container.context.namespace.jpa.xsd</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.GlobalPersistenceManager.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.mutable.MutableServiceReferenceMetadata.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry.java</file>
      <file type="M">jpa.jpa-container-context.src.main.resources.OSGI-INF.blueprint.jpa.xml</file>
      <file type="M">jpa.jpa-container-context.main.test.resources.jpa.xml</file>
      <file type="M">jpa.jpa-container-context.main.test.java.org.apache.aries.jpa.container.context.namespace.NSHandlerTest.java</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.impl.PersistenceContextManagerTest.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.PersistenceManager.java</file>
      <file type="M">jpa.jpa-container-context.pom.xml</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.PersistenceUnitConstants.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.EntityManagerFactoryManager.java</file>
      <file type="M">jpa.jpa-container-context.src.test.java.org.apache.aries.jpa.container.context.namespace.NSHandlerTest.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.namespace.NSHandler.java</file>
      <file type="M">jpa.jpa-container-context.src.main.java.org.apache.aries.jpa.container.context.impl.PersistenceContextManager.java</file>
      <file type="M">jpa.jpa-container.src.test.java.org.apache.aries.jpa.container.PersistenceBundleLifecycleTest.java</file>
      <file type="M">jpa.jpa-container.src.main.java.org.apache.aries.jpa.container.impl.PersistenceBundleManager.java</file>
      <file type="M">jpa.jpa-container.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1282" opendate="2015-1-4 00:00:00" fixdate="2015-1-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>BeanRecipe.findMatchingMethods is not able to filter out overridden method signatures</summary>
      <description>I was trying to get an Infinispan cache object from an infinispan CacheManager using the following blueprint configuration:&lt;reference id="cacheManager" availability="mandatory" interface="org.infinispan.manager.CacheContainer" /&gt;&lt;bean id="queueCountCache" factory-ref="cacheManager" factory-method="getCache"&gt; &lt;argument index="0" type="java.lang.String" value="QueueCountCache" /&gt;&lt;/bean&gt;Unfortunately the blueprint startup fails with following error:org.osgi.service.blueprint.container.ComponentDefinitionException: Multiple matching factory methods getCache found on class Proxy36341b52_07db_4c05_bab0_40dbf8a3899a for arguments [QueueCountCache] when instanciating bean queueCountCache: [public org.infinispan.commons.api.BasicCache Proxy36341b52_07db_4c05_bab0_40dbf8a3899a.getCache(java.lang.String), public org.infinispan.Cache Proxy36341b52_07db_4c05_bab0_40dbf8a3899a.getCache(java.lang.String)] at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:305)[7:org.apache.aries.blueprint.core:1.4.0] at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[7:org.apache.aries.blueprint.core:1.4.0] at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[7:org.apache.aries.blueprint.core:1.4.0] ...looking at the matches produced by the BeanRecipe.findMatchingMethods makes it obvious that the CacheContainer implements an interface BasicCacheContainer. The CacheContainer interface overrides the getCache(java.lang.String) that is initially defined in the BasicCacheContainer without any changes. I guess this was implemented for some backward compatibility.public org.infinispan.commons.api.BasicCache Proxy6e18b006_c93d_4840_bb4d_3522802f6a68.getCache(java.lang.String)=[QueueCountCache]andpublic org.infinispan.Cache Proxy6e18b006_c93d_4840_bb4d_3522802f6a68.getCache(java.lang.String)=[QueueCountCache]The BeanRecipe.findMatchingMethods probably also needs to check if the method signatures found are overridden by another method in the matching collection. If that is the case, all methods that are overridden also need to be discharged.Here are the 2 offending interfaces that the BeanReceipe matches. Unfortunately the CacheContainer getCache method is the one it should match but not the one from BasicCacheContainer.CacheContainer.javapackage org.infinispan.manager;import org.infinispan.Cache;import org.infinispan.commons.api.BasicCache;import org.infinispan.commons.api.BasicCacheContainer;public interface CacheContainer extends BasicCacheContainer { @Override &lt;K, V&gt; Cache&lt;K, V&gt; getCache(); @Override &lt;K, V&gt; Cache&lt;K, V&gt; getCache(String cacheName);}BasicCacheContainer.javapackage org.infinispan.commons.api;public interface BasicCacheContainer extends Lifecycle { &lt;K, V&gt; BasicCache&lt;K, V&gt; getCache(); &lt;K, V&gt; BasicCache&lt;K, V&gt; getCache(String cacheName);}</description>
      <version>blueprint-core-1.1.0,blueprint-core-1.4.2</version>
      <fixedVersion>blueprint-core-1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.WiringTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.utils.generics.TypeInference.java</file>
    </fixedFiles>
  </bug>
  <bug id="1298" opendate="2015-2-17 00:00:00" fixdate="2015-7-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support typed configurations in property placeholders</summary>
      <description>It's possible that ConfigurationAdmin puts more complex types to Configuration object. With lists or arrays returned by Configuration aries placeholders are getting crazy trying to convert retrieved value to String and then back to type required by bean.</description>
      <version>blueprint-core-1.1.0</version>
      <fixedVersion>blueprint-core-1.10.0,blueprint-cm-1.3.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.parent.pom.xml</file>
      <file type="M">blueprint.itests.blueprint-itests.src.test.resources.CmPropertyPlaceholderTest.xml</file>
      <file type="M">blueprint.itests.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.cm.service.FooInterface.java</file>
      <file type="M">blueprint.itests.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.cm.service.Foo.java</file>
      <file type="M">blueprint.itests.blueprint-itests.src.test.java.org.apache.aries.blueprint.itests.cm.CmPropertyPlaceholderTest.java</file>
      <file type="M">blueprint.blueprint-parser.src.main.java.org.apache.aries.blueprint.reflect.ValueMetadataImpl.java</file>
      <file type="M">blueprint.blueprint-parser.src.main.java.org.apache.aries.blueprint.mutable.MutableValueMetadata.java</file>
      <file type="M">blueprint.blueprint-noosgi.src.test.java.org.apache.aries.blueprint.ext.PropertyPlaceholderTest.java</file>
      <file type="M">blueprint.blueprint-noosgi.src.main.java.org.apache.aries.blueprint.ext.PropertyPlaceholder.java</file>
      <file type="M">blueprint.blueprint-noosgi.src.main.java.org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler.java</file>
      <file type="M">blueprint.blueprint-noosgi.src.main.java.org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder.java</file>
      <file type="M">blueprint.blueprint-noosgi.pom.xml</file>
      <file type="M">blueprint.blueprint-jexl-evaluator.src.main.resources.OSGI-INF.blueprint.jexl.xml</file>
      <file type="M">blueprint.blueprint-jexl-evaluator.src.main.java.org.apache.aries.blueprint.jexl.evaluator.JexlPropertyEvaluator.java</file>
      <file type="M">blueprint.blueprint-jexl-evaluator.src.main.java.org.apache.aries.blueprint.jexl.evaluator.JexlExpressionParser.java</file>
      <file type="M">blueprint.blueprint-jexl-evaluator.pom.xml</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.ext.PropertyPlaceholderTest.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.PropertyPlaceholder.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.PlaceholdersUtils.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.di.ValueRecipe.java</file>
      <file type="M">blueprint.blueprint-core.pom.xml</file>
      <file type="M">blueprint.blueprint-cm.src.main.java.org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder.java</file>
      <file type="M">blueprint.blueprint-cm.pom.xml</file>
    </fixedFiles>
  </bug>
</bugrepository>
