<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="ARIES">
  <bug fixdate="2010-1-5 01:00:00" id="105" opendate="2010-1-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>The JMX bundle does not export correctly the jmx api</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-1-5 01:00:00" id="106" opendate="2010-1-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>The JMX bundle should work even if all compendium specs are not available</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.useradmin.UserAdminMBeanHandler.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.permissionadmin.PermissionAdminMBeanHandler.java</file>
      <file type="M">jmx.jmx-core.src.main.java.org.apache.aries.jmx.agent.JMXAgentImpl.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2010-1-8 01:00:00" id="109" opendate="2010-1-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blog sample does not persist blogtext.</summary>
      <description>The blog sample persists all of the fields (date, title etc) of a blog entry except the blog text. For example, here is a view of the blogentry table after creating a blogentry with title 'whatever'ij&gt; select * from blogentry;ID |BLOGTEXT |PUBLISHDATE |TITLE |UPDATEDDATE |AUTHOR_EMAIL -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 | |2010-01-08 00:00:00.0 |whatever |NULL |zoe@uk.ibm.com</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.blog-sample.blog-servlet.src.main.java.org.apache.aries.samples.blog.web.util.HTMLOutput.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2013-1-9 01:00:00" id="1116" opendate="2013-9-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint loses bounds for &lt;? super Type&gt; constructors</summary>
      <description>Aries fails to handle use cases when generic bounds are different than extends. Test for reproducing this issue pushed to github: https://github.com/splatch/aries/commit/8ead34453cedfdbba43d84959e9bbf71bb1d249e</description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.container.BeanRecipeTest.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-10-2 01:00:00" id="1118" opendate="2013-10-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide common schema for XML namespace</summary>
      <description>And schema that uses the "xml" namespace things (xml:lang, xml:base, etc...) needs to import http://www.w3.org/XML/1998/namespace. Blueprint could provide a Namespace handler for that namespace to avoid having a bunch of different bundles all having to add this to their namespace handlers.</description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.2.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.resources.OSGI-INF.blueprint.blueprint-ext.xml</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.impl.ExtNamespaceHandler.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2015-2-23 01:00:00" id="1417" opendate="2015-9-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aries Subsystems implementation bundle must provide official capabilities</summary>
      <description>Compendium v6.0.0 states in 134.19 - Capabilities: A capability in the osgi.implementation namespace declaring the implemented specification to be osgi.subsystem. This capability must also declare a uses constraint for the org.osgi.service.subsystem package. For example: Provide-Capability: osgi.implementation; osgi.implementation="osgi.subsystem"; version:Version="1.1"; uses:="org.osgi.service.subsystem"*This capability must follow the rules defined for the osgi.implementation Namespace on page 997. A capability in the osgi.service namespace representing the Subsystem service. This capabilitymust also declare a uses constraint for the org.osgi.service.subsystem package. For example: Provide-Capability: osgi.service; objectClass:List&lt;String&gt;="org.osgi.service.subsystem.Subsystem"; uses:="org.osgi.service.subsystem"</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-2-30 01:00:00" id="1442" opendate="2015-10-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Subsystem impersonates bundles that are a constituent through sharing the osgi.identity capability</summary>
      <description>Feature subsystems should export all capabilities of its constituents. The osgi.identity capability is also exported but I doubt it is supposed to.It might cause problems when using osgi.identity in the preferred-provider header.</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.defect.Aries1442Test.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicSubsystem.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-2-2 01:00:00" id="1445" opendate="2015-11-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bundles that are not direct dependencies of a subsystem can be removed while still in use</summary>
      <description>Bundle A is a constituent of application subsystem S1Bundle A is a constituent of application subsystem S2Bundle A has a package import of b.packageBundle B exports b.packageBundle B imports c.packageBundle C exports c.packageThere is an obr repository with bundle b and cBundle B and C are not constituentsWhen installing S1 bundle B and C are added to the root subsystem to fullfill the requirements of bundle AWhen installing S2 everything is still working.Start S1.Now we uninstall S1 and bundle C is removed. refreshBundlesSubsystem S2 won't start anymore because of that.The testcase uses different bundle ids.</description>
      <version>subsystem-2.0.6,subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Utils.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.UninstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResolveContext.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-4-7 01:00:00" id="1523" opendate="2016-4-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application with fragment in archive and host in OBR will fail to resolve.</summary>
      <description>An application containing a fragment and host bundle as content but with the fragment packaged in the archive and host in an OBR repository will fail to resolve.</description>
      <version>subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-obr.src.test.java.org.apache.aries.subsystem.obr.internal.FelixResourceAdapterTest.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.util.felix.packageinfo</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.util.felix.FelixResourceAdapter.java</file>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.obr.internal.NamespaceTranslator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResolveContext.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-5-22 01:00:00" id="1538" opendate="2016-4-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Never fail a subsystem resolution because an already resolved resource has a missing dependency.</summary>
      <description>The implementation should be forgiving and never fail the resolution of a subsystem when one of its dependencies is an already resolved resource with a missing dependency. This scenario can occur now due to the change made as part of ARIES-1445 whereby an empty wiring map is always returned by the resolve context to the resolver in order to detect indirect dependencies and maintain an accurate use count. Also, note that the scenario can only occur with resources installed outside of the subsystem framework. We suspect that, by far, the most common occurrence will be related to non-subsystem resources having effective:=active requirements.</description>
      <version>subsystem-2.0.8</version>
      <fixedVersion>subsystem-2.0.10</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.ResolveContext.java</file>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.defect.Aries1538Test.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-5-26 01:00:00" id="1539" opendate="2016-4-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow for setting name of generated file</summary>
      <description/>
      <version>None</version>
      <fixedVersion>blueprint-maven-plugin-1.4.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.GenerateMojo.java</file>
      <file type="M">blueprint.blueprint-maven-plugin.src.main.java.org.apache.aries.blueprint.plugin.FilteredClassFinder.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-1-1 01:00:00" id="1558" opendate="2016-6-1 00:00:00" resolution="Unresolved">
    <buginformation>
      <summary>CDI support</summary>
      <description/>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">jpa.pom.xml</file>
      <file type="M">jpa.jpa-parent.pom.xml</file>
      <file type="M">jpa.examples.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-4-2 01:00:00" id="1559" opendate="2016-6-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support injection of static values to bean properties or constructor&amp;#39;s args</summary>
      <description>Quite often there is a need to initialize my functional classes constants values. The Spring framework can be used for this expression language. It would be nice to have similar functionality in Blueprint.For example I want to use this expression:&lt;bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"&gt;&lt;property name="hashAlgorithmName" value="#{T(org.apache.shiro.crypto.hash.Md5Hash).ALGORITHM_NAME}" /&gt;&lt;/bean&gt;instead of this one:&lt;bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"&gt;&lt;property name="hashAlgorithmName" value="MD5" /&gt;&lt;/bean&gt;</description>
      <version>None</version>
      <fixedVersion>blueprint-core-1.8.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.TestBlueprintContainer.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.ext.PropertyPlaceholder.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-9-7 01:00:00" id="1608" opendate="2016-9-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Application with bundle in archive and required bundle in OBR will fail to resolve.</summary>
      <description>Similar to issue ARIES-1523 except a bundle using Require-Bundle in side an application archive will fail to resolve against a required bundle in OBR. The reason is the capability representing the required bundle in OBR does not have the bundle-version attribute set correctly. Instead it uses the 'version' attribute from OBR.</description>
      <version>subsystem-2.0.8</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-obr.src.main.java.org.apache.aries.subsystem.util.felix.FelixCapabilityAdapter.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  
</bugrepository>