<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="ARIES">
  
  
  <bug fixdate="2011-2-26 01:00:00" id="767" opendate="2011-10-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Service property assigned with a service reference gets a ServiceProxyWrapper</summary>
      <description>When defining a service property with a reference as a value, the property is assigned with a ServiceProxyWrapper (inner class of ReferenceRecipe).Here is the way it is defined:&lt;service ref="..." interface="..."&gt; &lt;service-properties&gt; &lt;entry key="Property1"&gt; &lt;ref component-id="serviceRef"/&gt; &lt;/entry&gt; &lt;/service-properties&gt;&lt;/service&gt;&lt;reference id="serviceRef" interface="A" /&gt;I would have expected the service property "Property1" to be assigned with an instance of "A" instead of a ServiceProxyWrapper. However I could get the instance of "A" by calling the method 'convert' and passing a ReifiedType.</description>
      <version>blueprint-0.3.1</version>
      <fixedVersion>blueprint-0.3.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">proxy.proxy-impl.src.main.java.org.apache.aries.proxy.impl.AbstractProxyManager.java</file>
      <file type="M">blueprint.blueprint-core.src.test.resources.test-wiring.xml</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.WiringTest.java</file>
      <file type="M">blueprint.blueprint-core.src.test.java.org.apache.aries.blueprint.TestBlueprintContainer.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2009-12-15 01:00:00" id="83" opendate="2009-12-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Blueprint bundle does not run on Equinox</summary>
      <description>The blueprint bundle does not run on Equinox because it depends on org.osgi.service.cm; version="[1.3.0,2.0.0)" which is not implemented in org.eclipse.equinox.cm_1.0.100.v20090520-1800.</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-bundle.pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2009-1-15 01:00:00" id="86" opendate="2009-12-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add multibundle itest</summary>
      <description>Current itests use blueprint-sample to drive core blueprint features, but are unable to test custom NamespaceHandlers, Interceptors, BeanProcessors etc, as each of these require two bundles (eg, one to declare the nshandler, one to make use of it).This issue will introduce 2 new test bundles, to enable testing of these scenarios (rather than adding just one, and increasing the complexity of the existing sample).</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.nshandlertwo.xsd</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.nshandlerthree.xsd</file>
      <file type="M">blueprint.blueprint-testbundlea.src.main.java.org.apache.aries.blueprint.testbundlea.nshandlerone.xsd</file>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-itests.pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2012-7-5 01:00:00" id="869" opendate="2012-7-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for computing blueprint service dependencies.</summary>
      <description>Subsystems needs to support the ability to compute service dependencies. Applications, for example, require this. This defect will focus on integrating support for service dependencies defined as part of the blueprint specification. We may also wish to support OSGi Declarative Services in another defect.</description>
      <version>None</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SharingPolicyValidator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.RawSubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.InstallAction.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceUninstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceInstaller.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleEventHook.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BasicCapability.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.Activator.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemImportServiceRequirement.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemImportServiceHeader.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.SubsystemExportServiceHeader.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-5 01:00:00" id="870" opendate="2012-7-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>How to handle osgi.ee requirements.</summary>
      <description>When working with the Resolver in order to compute dependencies and resolve subsystems, the ResolveContext will need to handle requests for osgi.ee capabilities. Currently, these capabilities need to be provided by resources packaged with the subsystems.</description>
      <version>None</version>
      <fixedVersion>1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-7-9 01:00:00" id="871" opendate="2012-7-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update dependency on util to version 1.0.0.</summary>
      <description>Update the dependency on aries.util to version 1.0.0. This is the version that OSGi desires to maintain in the enterprise branch of the git repo.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-itests.src.test.java.org.apache.aries.subsystem.itests.SubsystemTest.java</file>
      <file type="M">subsystem.subsystem-itests.pom.xml</file>
      <file type="M">subsystem.subsystem-core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-8-30 01:00:00" id="888" opendate="2012-7-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add a bundle to support JMS with the transaction manager</summary>
      <description/>
      <version>None</version>
      <fixedVersion>transaction-jms-1.0.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">transaction.transaction-jms.pom.xml</file>
      <file type="M">transaction.pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2009-5-30 01:00:00" id="9" opendate="2009-9-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Registration callback called with null service registration properties</summary>
      <description>A service with explicitly set auto-export attribute might cause the registration callback to be invoked with null service registration properties (if auto-export is set to anything else besides 'disabled'). For example: &lt;service id="fooService" ref="fooBean" auto-export="all-classes"&gt; &lt;registration-listener registration-method="register" unregistration-method="unregister"&gt; &lt;bean class="org.apache.geronimo.osgi.RegistrationListener"/&gt; &lt;/registration-listener&gt; &lt;/service&gt;</description>
      <version>None</version>
      <fixedVersion>0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-sample.src.main.java.org.apache.aries.blueprint.sample.FooRegistrationListener.java</file>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.ServiceRecipe.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2009-12-22 01:00:00" id="90" opendate="2009-12-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create samples project</summary>
      <description>Samples for each of the modules</description>
      <version>None</version>
      <fixedVersion>0.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">samples.helloworld-samples.blueprint-helloworld.blueprint-helloworld-api.src.main.java.org.apache.aries.blueprint.helloworldapi.HelloWorldService.java</file>
      <file type="M">samples.helloworld-samples.blueprint-helloworld.blueprint-helloworld-server.src.main.java.org.apache.aries.blueprint.helloworldserver.HelloWorldServiceImpl.java</file>
      <file type="M">samples.helloworld-samples.blueprint-helloworld.blueprint-helloworld-client.src.main.java.org.apache.aries.blueprint.helloworldclient.HelloWorldClient.java</file>
      <file type="M">blueprint.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.src.main.java.org.apache.aries.blueprint.helloworldserver.HelloWorldServiceImpl.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-server.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.src.main.resources.OSGI-INF.blueprint.config.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.src.main.java.org.apache.aries.blueprint.helloworldclient.HelloWorldClient.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-client.pom.xml</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-api.src.main.resources.META-INF.MANIFEST.MF</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-api.src.main.java.org.apache.aries.blueprint.helloworldapi.HelloWorldService.java</file>
      <file type="M">blueprint.blueprint-helloworld.blueprint-helloworld-api.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-8-3 01:00:00" id="900" opendate="2012-8-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unresolvable root subsystem should have no effect on the system.</summary>
      <description>An unresolvable root subsystem should have no effect on the system in terms of the root subsystem installing, starting, and generally being available for use.For consistency, the root subsystem should still follow the same event pattern for state transitions as other subsystems. Consequently, the root subsystem will still enter the RESOLVING and RESOLVED states, but the resolution work will not actually be done.The root subsystem will fail to resolve, for example, whenever a bundle already exists in the framework that is missing a required dependency. This should not prevent subsystems from functioning.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.StartAction.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-8-6 01:00:00" id="901" opendate="2012-8-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Version attribute not applied to multiple package names separated by semicolons in import package header.</summary>
      <description>The specified version attribute should be applied to all packages listed in the associated path of the ImportPackage header. Packages are in the same path when they are separated by semicolons as opposed to commas. For example,org.foo;org.bar;org.foo.bar;version=1.3should result in all three listed packages being associated with version 1.3 or greater. Currently, the first two will be associated with version 0.0.org.foo,org.bar,org.foo.bar;version=1.3In this case, only org.foo.bar is associated with version 1.3 or greater while the first two are version 0.0.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.test.java.org.apache.aries.subsystem.core.Temp.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.SubsystemResource.java</file>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.archive.ImportPackageHeader.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-8-7 01:00:00" id="902" opendate="2012-8-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reference counts not being checked before removing constituent relationships between the "provisioned to" subsystem and bundle resources.</summary>
      <description>When uninstalling a subsystem, the reference count is not being checked before removing the constituent relationships between the "provisioned to" subsystem and bundle resources. If the reference count is not equal to zero, the constituent relationships should not be removed. For example, the bundle resource might be a dependency of the uninstalling subsystem and a content resource of the "provisioned to" subsystem.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">subsystem.subsystem-core.src.main.java.org.apache.aries.subsystem.core.internal.BundleResourceUninstaller.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-9-28 01:00:00" id="930" opendate="2012-9-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>The abstract reference recipe may end up tracking the same reference multiple times</summary>
      <description/>
      <version>blueprint-0.3.1,blueprint-core-1.0.1</version>
      <fixedVersion>blueprint-core-1.1.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">blueprint.blueprint-core.src.main.java.org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.java</file>
    </fixedFiles>
  </bug>
  
</bugrepository>