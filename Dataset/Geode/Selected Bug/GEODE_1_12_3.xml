<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="GEODE">
  <bug fixdate="2020-10-14 01:00:00" id="8495" opendate="2020-9-14 00:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>Make DUnit launch members in non-conflicting directories</summary>
      <description>Currently several features of the DUnit framework prevent tests being run in parallel outside of a docker container:1. The DUnitLauncher launches child VMs in subdirectories with standard names (e.g. vm0, vm1, ...) in the test JVM's working directory. If multiple tests run in parallel, the child VMs created by each test share these directories.2. LocatorStarterRule and ServerStarterRule launch locators and servers in the test JVM, directly in the test JVM's working directory. If multiple tests run in parallel, the members started by these rules share these directories.Each member expects to be the only thing running in its working directory. When members from different tests share directories, they become confused and fail.To allow running tests in parallel outside of docker containers, fix these and other directory conflict problems.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.CacheXml66DUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2020-10-15 01:00:00" id="8497" opendate="2020-9-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Get heap memory occupied by GW senders queue events</summary>
      <description>Extract exact heap memory occupied by GW senders queue.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.beans.stats.GatewaySenderOverflowMonitorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.stats.StatsKey.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.stats.GatewaySenderOverflowMonitor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.GatewaySenderMBeanBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.GatewaySenderMBean.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.GatewaySenderMXBean.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionMapFactory.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2020-9-16 01:00:00" id="8499" opendate="2020-9-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis subscriptions leak if they are not explicitly unsubscribed</summary>
      <description>If subscribed clients disconnect without unsubscribing, the subscription structures are never removed from the list of subscriptions until a PUBLISH to their channel fails.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.test.java.org.apache.geode.redis.internal.pubsub.SubscriptionsJUnitTest.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.pubsub.AbstractSubscription.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.Client.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.GeodeRedisServer.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.internal.pubsub.SubscriptionsIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-1-25 01:00:00" id="850" opendate="2016-1-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add tempus-fugit concurrent testing framework</summary>
      <description>Add testCompile dependency for tempus-fugit concurrent testing framework.http://tempusfugitlibrary.org/</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.dependency-versions.properties</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2020-9-16 01:00:00" id="8500" opendate="2020-9-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tests for Redis QUIT command</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.ExecutionHandlerContext.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-8-25 01:00:00" id="9074" opendate="2021-3-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CacheClientProxyStatistics messageQueueSize does not increase as events are added</summary>
      <description>Something I observed is that while a subscription queue was "full" the default throttling caused geode to only add 10 events/sec to the queue. This makes sense. But what didn't make sense was that the messageQueueSize did not change by 10 events/sec even though, during this time, nothing was draining from the queue. Then when the draining finally started (because the CacheClientUpdater started running after a long register interest that had been blocking it) we saw a huge spike in messageQueueSize when we should have seen gradual growth. In addition to improving messageQueueSize it would also be nice to have a gauge stat that shows how many threads are currently trying to add to the queue. The throttle logic can cause a large number of thread to be blocked.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.statistics.list.html.md.erb</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.MessageDispatcher.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientProxyStats.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.tier.sockets.CacheClientProxyTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-1-26 01:00:00" id="9079" opendate="2021-3-26 00:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Right-size Geode CI instances</summary>
      <description>Verify that heavy-lifter instances are utilizes well for their sizes. </description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.rsync.code.down.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">buildSrc.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-4-26 01:00:00" id="9080" opendate="2021-3-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enable resource-monitoring for Windows CI instances</summary>
      <description>Google monitoring via stackdriver is not enabled on Geode's windows CI instances. Remedy this, to enable better utilization/sizing.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.meta.deploy.meta.sh</file>
      <file type="M">ci.images.google-windows-geode-builder.packer.json</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2021-3-29 01:00:00" id="9086" opendate="2021-3-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Documentation for DECRBY command</summary>
      <description>Ensure that there is sufficient documentation for the DECRBY command in the compatible with redis module. </description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.README.md</file>
      <file type="M">geode-docs.tools.modules.geode.apis.compatible.with.redis.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-4-29 01:00:00" id="9087" opendate="2021-3-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix the documentation for SCAN commands.</summary>
      <description>Fix documentation for SCAN command, especially the data types accepted by it. </description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.geode.apis.compatible.with.redis.html.md.erb</file>
      <file type="M">geode-apis-compatible-with-redis.README.md</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-5-29 01:00:00" id="9218" opendate="2021-4-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode has tests for TLSv1.1 which is disabled by default now</summary>
      <description>According to the Oracle JRE/JDK cryptographic roadmap, TLSv1 and TLSv1.1 are disabled by default as of 11.0.11+9 and 8u291b10. This causes TLSv1.1 tests to fail.</description>
      <version>1.12.3,1.13.3,1.14.0,1.15.0</version>
      <fixedVersion>1.12.3,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SSLUtilTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SocketCreatorFactoryJUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.JMXMBeanDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.distributed.LocatorDUnitTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.rest.internal.web.RestSecurityWithSSLTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.rest.internal.web.controllers.RestAPIsWithSSLDUnitTest.java</file>
    </fixedFiles>
  </bug>
  
</bugrepository>