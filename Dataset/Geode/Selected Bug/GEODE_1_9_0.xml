<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="GEODE">
  
  
  <bug fixdate="2018-10-26 01:00:00" id="5783" opendate="2018-9-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>geode should use a single class to create instances of ThreadFactory</summary>
      <description>Geode creates a large number of ThreadFactory instances. Most of these are created with anonymous inner classes. In most cases the ThreadFactory instance is passed on to a thread pool. Since thread pools are finalizable they will keep alive anything they reference until finalization takes place. Most JVM garbage collectors delay doing finalization as long as possible. Since an anonymous inner class always has a references to the outer class instance, a number of places will end up having a reference to our single GemFireCacheImpl which can end up preventing a large amount of heap from being garbage collected.For the above reasons, and also to avoid code duplication, it would be better if we had a single utility class that took care of creating ThreadFactory instances. We already have one such class in geode named GemFireCacheHelper that is only used from one class. Also google guava has ThreadFactoryBuilder which could be used.</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.Connection.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.logging.LoggingExecutors.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientProxy.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.ReplyMessage.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2018-12-19 01:00:00" id="6223" opendate="2018-12-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Build job(s) should include resolveDependencies task</summary>
      <description>The recent BOM changes broke the resolveDependencies task (as the BOM was required but was note declared as a dependency), but this went undetected in both the precheckin and main CI pipelines, as the task is only targeted in the creation of test images.This task should be a part of the Build test job, to prevent image breakage in the future.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.execute.build.sh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2018-12-19 01:00:00" id="6224" opendate="2018-12-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>BOM task dependencies is inhospitable to external developers</summary>
      <description>As acknowledged in the commit message of GEODE-6198, our approach to depend on the bom publish task was heavy-handed. However, this extends farther than initially realized, as any consumer of Geode will also have to manage these task dependencies.Until a cleaner solution can be identified, the dependencyManagement block currently belonging to the BOM should be applied in place of the BOM. The subproject geode-all-bom should consume this block and publish a BOM that is, for now, reproduced in all other POMs.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.geode-dependency-management.gradle</file>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web-api.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-pulse.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-old-client-support.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-lucene.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-junit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-json.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-experimental-driver.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-dunit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-cq.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-connectors.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-concurrency-test.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-common.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">boms.geode-all-bom.build.gradle</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2018-12-19 01:00:00" id="6227" opendate="2018-12-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>add lsof to test images for NetstatDUnitTest</summary>
      <description>tests such as geode-core/src/distributedTest/java/org/apache/geode/management/internal/cli/NetstatDUnitTest.java expect lsof utility to be available, but current images do not include it.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.images.test-container.Dockerfile</file>
      <file type="M">ci.images.google-geode-builder.scripts.setup.sh</file>
      <file type="M">ci.docker.Dockerfile</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-1-7 01:00:00" id="6252" opendate="2019-1-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Combine dependencies into dependencySets</summary>
      <description/>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.geode-dependency-management.gradle</file>
      <file type="M">gradle.dependency-versions.properties</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-1-8 01:00:00" id="6259" opendate="2019-1-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Simplify publication logic -- remove mavenSnapshotBucket</summary>
      <description>At the moment, the Maven target for publication is determined by:(1) If it was provided on the command line(2) If the version string indicates that it is a release version(3) If a "snapshot bucket" was provided on the commandline(4) Or a default snapshot location.The mavenSnapshotBucket is an unnecessary accessory that injects the provided string into a GCS url. A complete mavenRepository should be provided instead.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.meta.deploy.meta.sh</file>
      <file type="M">ci.pipelines.meta.jinja.template.yml</file>
      <file type="M">gradle.publish.gradle</file>
      <file type="M">gradle.properties</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.deploy.pipeline.sh</file>
      <file type="M">build.gradle</file>
      <file type="M">ci.scripts.execute.publish.sh</file>
      <file type="M">ci.scripts.execute.build.sh</file>
      <file type="M">ci.scripts.archive.results.sh</file>
      <file type="M">ci.pipelines.meta.meta.properties</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-12-5 01:00:00" id="626" opendate="2015-12-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>MemoryChunk methods getSize and copyBytes need unit test coverage</summary>
      <description>The MemoryChunk methods getSize and copyBytes have no unit test coverage.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.internal.offheap.MemoryChunkJUnitTestBase.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  
  <bug fixdate="2019-2-18 01:00:00" id="6302" opendate="2019-1-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>checkPom only checks dependencies, but not other Pom sections</summary>
      <description>Most notable, the dependencyManagement section can now change without the checkPom task failing.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.publish.gradle</file>
      <file type="M">gradle.geode-dependency-management.gradle</file>
      <file type="M">gradle.properties</file>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web-management.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web-api.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.build.gradle</file>
      <file type="M">geode-pulse.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.build.gradle</file>
      <file type="M">geode-protobuf-messages.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf-messages.build.gradle</file>
      <file type="M">geode-old-client-support.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-management.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-lucene.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-junit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-json.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-experimental-driver.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-dunit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-cq.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-connectors.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-concurrency-test.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-common.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-1-22 01:00:00" id="6305" opendate="2019-1-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Switch off parallel mode for WindowsGfshDistributedTest CI jobs</summary>
      <description>The WindowsGfshDistributedTest jobs often fail with bind exceptions. As these jobs are not parallelized, this is probably due to them running in parallel.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-2-22 01:00:00" id="6310" opendate="2019-1-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>upgrade classgraph version</summary>
      <description>Observed that file descriptor is rapidly increasing to a high value such 20K-30K during starting up a cacheserver process with embedded locator. Problem goes away when classgraph-4.0.6.jar is replaced with classgraph-4.6.7.jar.A previous attempt to update Geode's classgraph version (GEODE-5996) was reverted due to increased memory usage concerns. In latest classgraph, memory usage can now be controlled by limiting number of threads, so we should be able to more forward once again.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.deployment.FunctionScanner.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.util.ClasspathScanLoadHelper.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.CommandManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceService.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-2-23 01:00:00" id="6314" opendate="2019-1-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI: Build version should only be rolled, and should always be rolled, at the Build step</summary>
      <description>Currently, the build ID is bumped also at publish as well as Build, and Build only bumps when it is successful. In its role as a single, meaningful identifier, it should always be rolled at Build, and only there.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-1-24 01:00:00" id="6319" opendate="2019-1-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide: Clarify that partitioned regions can be created dynamically</summary>
      <description>The section "Creating Regions Dynamically" states that the DynamicRegionFactory class cannot be used to dynamically create partitioned regions.https://geode.apache.org/docs/guide/18/developing/region_options/dynamic_region_creation.htmlThe doc should clarify that partitioned regions *can* be created dynamically, you just can't use DynamicRegionFactory to do it.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.cache.xml.html.md.erb</file>
      <file type="M">geode-docs.developing.region.options.dynamic.region.creation.html.md.erb</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2019-4-6 01:00:00" id="6373" opendate="2019-2-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Increase the timeout for benchmark tests in Ci</summary>
      <description>After the addition of function execution benchmarks, the timeout in the CI runs need to be increased as they will consume  more time than 2 hours.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-3-22 01:00:00" id="6442" opendate="2019-2-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Statistics numericId should default to PID and textId should default to Member Name</summary>
      <description>StatSampler should use PID if available and fall back to DistributedSystem ID if the PID is unavailable. This is used to help identify the OS and Process Statistics.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.process.ProcessUtils.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.statistics.StatisticsRegistryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.statistics.StatisticsImplTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.statistics.HostStatSamplerTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatisticsRegistry.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatisticsManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatisticsImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.HostStatSampler.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.AbstractStatisticsFactory.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-3-22 01:00:00" id="6443" opendate="2019-2-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log all requests to REST ManagementService</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.web.xml</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.RegionConfigTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ManagementRequestLoggingDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-5-22 01:00:00" id="6444" opendate="2019-2-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Store GC logs in files</summary>
      <description>Display GC logs using separate threads so that they are not blocked till the completion of the benchmark Also store the logs from GC into files.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.run.benchmarks.sh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-3-25 01:00:00" id="6449" opendate="2019-2-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Build and BuildSrc should not rely S3 to resolve dependencies</summary>
      <description/>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.build.gradle</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-2-26 01:00:00" id="6457" opendate="2019-2-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh create jdbc-mapping should find the pdx class if deployed by gfsh</summary>
      <description>Currently, gfsh create jdbc-mapping only finds the PDX class in the classpath. It does not search the files deployed using 'gfsh deploy'. It should search the files deployed by gfsh. </description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-3-27 01:00:00" id="6459" opendate="2019-2-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add option to `create jdbc-mapping` where user can specify the file containing the PDX class</summary>
      <description>*As a* user*I want to* tell gfsh with `create jdbc-mapping` the file containing the PDX class for my domain object*so that I can* create the mapping without deploying the domain class to the server.Use gfsh option name: --pdx-class-file</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.util.internal.MappingConstants.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-2-27 01:00:00" id="6464" opendate="2019-2-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pin OpenSSH in Windows images to version 7.7.2.1</summary>
      <description>The Windows images were recently rebuilt and picked up a new version of OpenSSH (7.9.0.1). It appears that this may be causing build issues as the Windows test runs are failing. Although the gradle call appears to complete, the ssh call, that launches the build, does not exit properly and the job times out.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.images.google-windows-geode-builder.windows-packer.json</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-6-11 01:00:00" id="6634" opendate="2019-4-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix parallel option for repeatTest</summary>
      <description>Currently both -parallel and -no-parallel options are being used for stress tests.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.repeat-new-tests.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-5-15 01:00:00" id="6653" opendate="2019-4-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gfsh command output trimed</summary>
      <description>While executing query on entry with a large key, gfsh automatically trims the columns width so it can fit in available width of the terminal.gfsh&gt;query --query="select * from /example-region"Result : trueLimit  : 100Rows   : 1Result------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut ali.. In a documentation state following:gfsh commands such as query produce output with wide columns that may become misaligned and require manual reformatting to view the output. If the output cannot fit in the available width of the terminal, gfsh automatically trims the columns widths to fit. You can disable this behavior by setting the gfsh environment variable GFSH.TRIMSCRWIDTH to false.But this is wrong described. Only way to disable this behavior is setting gfsh environment variable APP_RESULT_VIEWER to an arbitrary value except 'external' as it enables viewing of the output using UNIX less command.  </description>
      <version>1.7.0,1.8.0,1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.configuring.gfsh.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-6-15 01:00:00" id="6654" opendate="2019-4-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Stats documentation issues</summary>
      <description>Hi,There is no information in documentation (https://geode.apache.org/docs/guide/18/reference/statistics_list.html) about the following statistics: Region Entry Eviction - Heap based eviction (HeapLRUStatistics) Thread stats (VMThreadStats) Client-to-Server communication (ClientSendStats) Disk Store stats (DiskStoreStatistics) There are also these errors in statistics names (doc not aligned with code): "Locator (LocatorStatistics)" should be "Locator (LocatorStats)" "Region Entry Eviction – Size-based (LRUStatistics)" should be "Region Entry Eviction – Size-based (MemLRUStatistics)" "Continuous Querying (CQStatistics)" should be "Continuous Querying (CqQueryStats)" "Gateway Queue (GatewayStatistics)" should be "Gateway Sender statistics (GatewaySenderStatistics)" "Function Execution (FunctionServiceStatistics)" should be "Function Execution (FunctionStatistics)" Also, I cannot find references in the code about the "Delta Propagation (DeltaPropagationStatistics)" described in the documentation</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.statistics.list.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-12-14 01:00:00" id="666" opendate="2015-12-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update awaitility dependency from 1.6.5 to 1.7.0</summary>
      <description>com.jayway.awaitility:awaitility releases are now up to 1.7.0. We should update our dependency from 1.6.5 to 1.7.0.Awaitility is used in IntegrationTests and DistributedTests for awaiting and asserting on asynchronous conditions.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.dependency-versions.properties</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2019-6-30 01:00:00" id="6721" opendate="2019-4-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Start locator with secondary ip will always end up using the primary ip address of the host</summary>
      <description/>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.StartLocatorCommand.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.cli.commands.StartLocatorCommandIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-6-8 01:00:00" id="6749" opendate="2019-5-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Prevent gfsh from creating duplicate named disk stores</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateDiskStoreCommandTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateDiskStoreCommand.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DiskStoreCommandsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-5-8 01:00:00" id="6750" opendate="2019-5-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Clean up Swagger UI model for Management API</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionAttributesType.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-7-4 01:00:00" id="6827" opendate="2019-6-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Benchmark CI: Make Windows jobs not gating for benchmarks</summary>
      <description>In Geode CI, the Benchmark job is blocked by the successful completion of the Windows tests. Since Benchmark runs on linux and the Windows tests still frequently fail with timing issues, it does not make sense for these tests to be gating to Benchmark runs. When they are gating, we do not get frequent runs of the benchmark task.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2019-7-16 01:00:00" id="6966" opendate="2019-7-16 00:00:00" resolution="Abandoned">
    <buginformation>
      <summary>to decouple CF CLI with PCC/Geode - generate table from json based on customer input</summary>
      <description>two points to spike: generate table from json object(1 layer json,  multi layer json) generate table columns based on customer input (scenarios: input match, input partly match, input dis-match)</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.ManagementControllerAdvice.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-8-31 01:00:00" id="7036" opendate="2019-7-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE when previous coordinator is returning to make quorum</summary>
      <description>In configuration with 2 locators and 2 servers, first restart coordinator and non-lead server. After restarted members are up, restart remaining members. At moment when currently restarted locator is returning to quorum, NPE occurs in previous-restarted locator.</description>
      <version>1.9.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.distributed.internal.RestartOfMemberDistributedTest.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.dunit.rules.ClusterStartupRule.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalLocator.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-7-31 01:00:00" id="7037" opendate="2019-7-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>MAX_QUERY_EXECUTION_TIME is incorrectly shown in docs</summary>
      <description>Link:https://geode.apache.org/docs/guide/19/developing/query_additional/query_timeout.htmlText:_"Timeouts for Long-Running QueriesGemFire can monitor and throw an exception when a query runs longer than a configured amount of time. This feature is enabled by setting the critical-heap-percentage attribute which detects that the JVM has too little heap memory.The default query timeout is five hours. Set a different amount of time, in milliseconds, by specifying the system variable gemfire.cache.MAX_QUERY_EXECUTION_TIME. A value of -1 explicitly disables the timeout.When enabled, a query that runs longer than the configured timeout will be cancelled such that it does not finish, and GemFire throws a QueryExecutionTimeoutException."_The above is wrong. The parameter is case sensitive and it should be: gemfire.Cache.MAX_QUERY_EXECUTION_TIME with an upper case C.This was tested and checked in the code:_public static int MAX_QUERY_EXECUTION_TIME = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "Cache.MAX_QUERY_EXECUTION_TIME", -1);_So using gemfire.cache.MAX_QUERY_EXECUTION_TIME will not change the time out. </description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.additional.query.timeout.html.md.erb</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-9-1 01:00:00" id="7039" opendate="2019-8-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Server recovery severely degrades client read traffic (no SingleHop no TX) on redundant partitioned persistent regions</summary>
      <description>Client not using single hop nor transactions is experiencing severe throttling from the cluster when getting data from a partitioned persistent region while server hosting one of the redundant buckets is recovering (in the process of image recovery). Get operation that have not landed on a server hosting the bucket will be proxied to other members that do have the bucket in a random fashion. This random picking has the nasty consequence that chosen server might be the one recovering now and the bucket is not yet ready (BucketNotFoundException), which means local server will handle ForceReattemptException by sleeping 100ms before another (random) attempt. This sleeping is devasteting for throughput observed by the client.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketAdvisor.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-8-7 01:00:00" id="7058" opendate="2019-8-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log4j-core dependency should be optional in geode-core</summary>
      <description>This change depends on all commits for GEODE-2644 and GEODE-6122.</description>
      <version>1.9.0,1.10.0</version>
      <fixedVersion>1.9.1,1.10.0</fixedVersion>
      <type>Wish</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-8-9 01:00:00" id="7066" opendate="2019-8-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Events can be lost in a gateway batch containing duplicate non-conflatable events with conflation enabled</summary>
      <description>If a batch contains duplicate CREATE and DESTROY events on key 1736 like below and conflation is enabled, the earlier events will be overwritten by the later events.GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6072];operation=CREATE;region=/SESSIONS;key=6079],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6073];operation=UPDATE;region=/SESSIONS;key=6079],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|5;sequenceID=6009];operation=CREATE;region=/SESSIONS;key=1736],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6074];operation=DESTROY;region=/SESSIONS;key=6079],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|5;sequenceID=6011];operation=DESTROY;region=/SESSIONS;key=1736],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6087];operation=CREATE;region=/SESSIONS;key=1736],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6089];operation=DESTROY;region=/SESSIONS;key=1736]The batch will look like this after conflation:GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6072];operation=CREATE;region=/SESSIONS;key=6079], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6073];operation=UPDATE;region=/SESSIONS;key=6079], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6087];operation=CREATE;region=/SESSIONS;key=1736], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6074];operation=DESTROY;region=/SESSIONS;key=6079], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6089];operation=DESTROY;region=/SESSIONS;key=1736]All the events from threadID=0x30004|5 are gone.</description>
      <version>1.9.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.serial.SerialGatewaySenderEventProcessorJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderEventProcessorJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.AbstractGatewaySenderEventProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-9-9 01:00:00" id="7067" opendate="2019-8-9 00:00:00" resolution="Not A Problem">
    <buginformation>
      <summary>Release CI tests wrong branch in benchmark</summary>
      <description>The branch tested in the 1.10.0 release pipeline is still pointing at develop, and should be updated to point at apache/geode:release/1.10.0.The release branch should be compared to the most recent high watermark. This is because the performance of the previous release is significantly lower than when the 1.10.0 release branch was cut. In order to detect any degradations in performance that have occurred since the release branch was cut, we should compare the current release candidate with the commit previously determined to be the stable best performance achieved by Geode, in all tests, since the previous release. This was a commit on develop, prior to where the 1.10.0 release branch was cut, and is marked by the tag develop/highwater.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2015-1-21 01:00:00" id="708" opendate="2015-12-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Need the stats for Geode membership health monitor</summary>
      <description>Click to add description</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.fd.GMSHealthMonitorJUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.gms.fd.GMSHealthMonitor.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.LonerDistributionManager.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.DMStats.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.DistributionStats.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  
  <bug fixdate="2019-9-4 01:00:00" id="7164" opendate="2019-9-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>IntelliJ IDEA 2019 error: the output path is not specified for modules</summary>
      <description>When delegating build/run actions to IntelliJ IDEA instead of Gradle, IntelliJ IDEA 2019 fails to build geode with an error similar to the one shown in the screenshot below: Steps to Reproduce:(Tested on IntelliJ IDEA CE versions 2019.1.4 and 2019.2.1) Make sure Gradle delegation is disabled for build/run Instructions for 2019.1.4: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle | Runner Make sure "Delegate build/run actions to Gradle" is unchecked Instructions for 2019.2.1: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle Make sure "Build and Run using:" is set to "IntelliJ IDEA" Clone geode into an empty directory Follow the instructions here to import and build geode using IntelliJ IDEA Enable Gradle build/run delegation Instructions for 2019.1.4: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle | Runner Check "Delegate build/run actions to Gradle" Instructions for 2019.2.1: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle Set "Build and Run using:" to "Gradle" Select "Build Project" from the Build menu to build geode After the build succeeds, revert the change from step 4 to switch back to the IntelliJ build runner Repeat step 5 to build the project again The popup error message shown in the screenshot should show and IntelliJ will not initiate the build</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.ide.gradle</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-9-9 01:00:00" id="7178" opendate="2019-9-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Older versions of Native Client broken in 1.9+ due to missing compatibility code</summary>
      <description>When getting a request to perform an operation, the code does not check for instance of Byte.  Native client sends the operation as a Byte, which currently cause Geode to throws ajava.lang.ClassCastException: class java.lang.Byte cannot be cast to class org.apache.geode.cache.Operation Server versions prior to 1.9.0 had a compatibility check for this Byte</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Destroy65Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.BaseCommandJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Destroy65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.BaseCommand.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-9-10 01:00:00" id="7179" opendate="2019-9-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Alter command to change the state of event processing during AEQ creation</summary>
      <description>Add additional fields to alter async event queue command to change the state of event processing (paused or not) when the AEQ is being created.</description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.AlterAsyncEventQueueCommand.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.AlterAsyncEventQueueCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-1-30 01:00:00" id="718" opendate="2015-12-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gfsh history exposes passwords</summary>
      <description>When using gfsh connect statement, the entire connect statement is getting logged in the gfsh history file, and it shows the password for the key store in clear text in the history file.Here is an example connect statement that is typically executed by a automation linux script.$ ./gfsh _________________________ __ / _____/ ______/ ______/ /____/ / / / __/ /___ /_____ / _____ / / /__/ / ____/ _____/ / / / //______/_/ /______/_/ /_/ v1.0.0-incubating-SNAPSHOTMonitor and Manage GemFiregfsh&gt;connect --locator=vm-abcd[41111] --use-ssl=true --key-store=/var/gemfire//conf/keystore/tomcat.jks --key-store-password=blah-blah --trust-store=/var/gemfire/conf/keystore/tomcat.jks --trust-store-password=blah-blah --ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 --protocols=TLSv1.2Connecting to Locator at [host=vm-abcd, port=41111] ..Connecting to Manager at [host=vm-abcd, port=1099] ..Successfully connected to: [host=vm-abcd, port=1099]Cluster-101 gfsh&gt;history1 …2 …3 connect --locator=vm-abcd[41111] --use-ssl=true --key-store=/var/gemfire/conf/keystore/tomcat.jks --key-store-password=blah-blah --trust-store=/var/gemfire/conf/keystore/tomcat.jks --trust-store-password=blah-blah --ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 --protocols=TLSv1.2</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.management.internal.cli.shell.GfshHistoryJUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.management.internal.cli.shell.jline.GfshHistory.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-12-10 01:00:00" id="7185" opendate="2019-9-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use proper Gradle configuration for new serialization module</summary>
      <description>The geode-serialization module split from geode-core contains classes only within the internal package. So the configuration of the dependency should be implementation, not api.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web.build.gradle</file>
      <file type="M">geode-web-management.build.gradle</file>
      <file type="M">geode-web-api.build.gradle</file>
      <file type="M">geode-wan.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.build.gradle</file>
      <file type="M">geode-redis.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-redis.build.gradle</file>
      <file type="M">geode-rebalancer.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.build.gradle</file>
      <file type="M">geode-protobuf.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.geode-protobuf-test.build.gradle</file>
      <file type="M">geode-protobuf.build.gradle</file>
      <file type="M">geode-memcached.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-memcached.build.gradle</file>
      <file type="M">geode-lucene.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-lucene.build.gradle</file>
      <file type="M">geode-junit.build.gradle</file>
      <file type="M">geode-dunit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-dunit.build.gradle</file>
      <file type="M">geode-cq.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-cq.build.gradle</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-connectors.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-connectors.build.gradle</file>
      <file type="M">geode-assembly.geode-assembly-test.build.gradle</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">extensions.geode-modules.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-9-24 01:00:00" id="7242" opendate="2019-9-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect documentation for AVG and SUM aggregate functions</summary>
      <description>The documentation for OQL Aggregate Functions states that AVG and SUM always return either a Float or Double, but the actual return type can be any of Integer, Long, Float or Double.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.select.aggregates.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-10-1 01:00:00" id="7261" opendate="2019-10-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode V1 admin rest does not start with Spring 5.x jars on the classpath</summary>
      <description>The geode-web war includes several spring jars, but does not include spring-core. With Jetty debug logging enabled we can see the following error: [vm0] 07:30:50.469 [RMI TCP Connection(1)-127.0.0.1] DEBUG org.eclipse.jetty.servlet.ServletHandler - EXCEPTION [vm0] java.lang.NoClassDefFoundError: org/springframework/core/ErrorCoded [vm0] at java.lang.ClassLoader.defineClass1(Native Method) [vm0] at java.lang.ClassLoader.defineClass(ClassLoader.java:763) [vm0] at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) [vm0] at java.net.URLClassLoader.defineClass(URLClassLoader.java:468) [vm0] at java.net.URLClassLoader.access$100(URLClassLoader.java:74) [vm0] at java.net.URLClassLoader$1.run(URLClassLoader.java:369) [vm0] at java.net.URLClassLoader$1.run(URLClassLoader.java:363)In addition, the war file also include commons-logging which causes the war logging to be redirected to stderr.</description>
      <version>1.9.0,1.9.1,1.10.0,1.11.0</version>
      <fixedVersion>1.9.2,1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web.build.gradle</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-10-3 01:00:00" id="7272" opendate="2019-10-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Docker image to build and preview the user guide</summary>
      <description>For building the Geode user guide it is needed to install Ruby and Bookbinder. It would be useful to have a docker image to do this task.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-book.README.md</file>
      <file type="M">dev-tools.docker.docs.view-docs.sh</file>
      <file type="M">dev-tools.docker.docs.Dockerfile</file>
      <file type="M">dev-tools.docker.docs.build-image-common.sh</file>
      <file type="M">dev-tools.docker.docs.build-docs.sh</file>
      <file type="M">dev-tools.docker.base.Dockerfile</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-10-3 01:00:00" id="7273" opendate="2019-10-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode transaction should throw TransactionDataNotColocatedException if the transaction is on replicate region then partitioned region</summary>
      <description>A client transaction should fail with TransactionDataNotColocatedException instead of TransactionDataRebalancedException if transaction worked on the replicate regions first and then worked on an entry in a partitioned region where primary bucket is on another node.User should not work on replicate region first in a transaction, but Geode should throw correct exception as well.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.TXStateProxyImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tx.PartitionedTXRegionStub.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXStateProxyImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXState.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.ClientServerNotColocatedTransactionDistributedTest.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-11-7 01:00:00" id="7417" opendate="2019-11-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI checks do not trigger on geode-book changes</summary>
      <description>due to new branch protection rules, it is now impossible to submit geode-book changes as the required checks will never firewe should remove the exclusion so checks can run</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-3-7 01:00:00" id="7421" opendate="2019-11-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can deploy jar by REST API for Management</summary>
      <description>WHAT 1. can deploy jar file by REST API 2. from feature point , it will cover current 'gfsh deploy' 3. if two files have same file name, the later wins 4. can recognize version pattern. "filename-version&amp;#91;-label&amp;#93;.jar" . filename=&amp;#91;a-zA-Z/-&amp;#93;+, not single "", not end with "" version=&amp;#91;0-9/.&amp;#93;*, not single ".", not end with "." label=&amp;#91;a-zA-Z0-9&amp;#93;*such as: &lt;commons-beanutils-1.9.3.jar&gt; is a later version of &lt;commons-beanutils-1.9.2.jar&gt;, will deploy. &lt;commons-beanutils-1.9.3.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.3-RELEASE.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.1.jar&gt; is an earlier version of &lt;commons-beanutils-1.9.2.jar&gt;, will block it. 5. if there is a version part in the file name, we will deploy them without append "#1" part to the file name 6. can accept "group"</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceIntegrationTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.configuration.DeploymentTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.EntityInfo.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.ClusterManagementListResultAssert.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.web.http.support.HttpRequesterTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.ExportClusterConfigurationCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.web.shell.HttpOperationInvoker.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.web.http.support.HttpRequester.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.functions.DeployFunction.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.realizers.DeploymentRealizerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.mutators.DeploymentManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.domain.ConfigurationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceDeployedJarTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.functions.CacheRealizationFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.DeploymentRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.ConfigurationRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.DeploymentManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.domain.Configuration.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployedJar.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.DeployedJarTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.codeAnalysis.AnalyzeManagementSerializablesJUnitTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListIndexOnPartitionRegionTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.DeployToMultiGroupDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.DeploymentManagementDUnitTest.java</file>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.management-servlet.xml</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.DeploymentManagementController.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.internal.ClientClusterManagementServiceTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Deployment.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.AbstractConfiguration.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.RestTemplateClusterManagementServiceTransport.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.CommandType.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-2-8 01:00:00" id="7428" opendate="2019-11-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>adjustment: set the log-lvl of REST API of Management from info to debug</summary>
      <description>WHY 1. too many logs in the log file, that is a customer concern 2. broker team call RESTAPI for Management for healthcheck per 10 seconds. it will produce too many logs. WHAT 1. change every log which is produced by RESTAPI for management to be DEBUG.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.rest.controllers.ClusterManagementRestLoggingTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ManagementRequestLoggingDistributedTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-11-9 01:00:00" id="7431" opendate="2019-11-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>benchmarks may fail due to infrastructure quota</summary>
      <description>For example, https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/Benchmark/builds/677 failed because there were already 3 benchmarks jobs running at the timeSince the quota is 40 and each benchmark uses 12, we should restrict max_in_flight to 3 for this job</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-12-4 01:00:00" id="7537" opendate="2019-12-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>hang in gii/rebalance of AEQ in recycled server (with persistence)</summary>
      <description>Actively being investigated...</description>
      <version>1.9.0</version>
      <fixedVersion>1.11.0,1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueueJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.GatewaySenderQueueEntrySynchronizationOperation.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.CacheFactoryStaticsIntegrationTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.CacheFactoryStatics.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-12-4 01:00:00" id="7540" opendate="2019-12-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>avoid overwhelming CI when many commits happen on the same day</summary>
      <description>Instead of immediately launching all jobs at once, we could even out the load by setting lower max_in_flight settings for shorter jobs. I estimate we can cut peak load in half without builds taking any longer, for a scenario where 6 commits are in the pipeline at the same time.Reducing load on concourse is desirable because we tend to have more unexplained rsync failures, etc, when concourse is under heavy load.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.images.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-1-4 01:00:00" id="7542" opendate="2019-12-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Break dependency on JavaWorkArounds</summary>
      <description>this work around exists only for pre-Java9 JDKs, fwiw...</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.FlatFormatSerializer.java</file>
      <file type="M">geode-cq.src.main.java.org.apache.geode.cache.query.cq.internal.CqServiceImpl.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.membership.MembershipDependenciesJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.util.JavaWorkarounds.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.ConnectionTable.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientHealthMonitor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.metrics.FunctionStatsManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.BackupDefinition.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.messenger.GMSEncrypt.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.fd.GMSHealthMonitor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.AttributeDescriptor.java</file>
      <file type="M">geode-core.src.jmh.java.org.apache.geode.internal.util.ComputeIfAbsentBenchmark.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManager.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-2-5 01:00:00" id="7550" opendate="2019-12-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add option to show only receivers or senders to "list gateways" gfsh command</summary>
      <description>"list gateways" command shows info about gateway senders and receivers, but I would like to have the possibility of showing info just from senders or receivers.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.wancommand.ListGatewaysCommandDUnitTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ListGatewayCommand.java</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.list.html.md.erb</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.i18n.CliStrings.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-12-5 01:00:00" id="7554" opendate="2019-12-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Benchmark CI: rerun failed tests</summary>
      <description>When tests run in CI fail, they will be written to a file. Read that file and rerun the failed tests until the list is empty, or until the run has been retried 5 times. Any tests that fail 5 times in a row are not flaky and need to be addressed.</description>
      <version>None</version>
      <fixedVersion>1.11.0,1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.run.benchmarks.sh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-12-9 01:00:00" id="7561" opendate="2019-12-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode does not allow creating GW senders with a single dispatcher thread</summary>
      <description>When creating GW sender Geode does not honor --dispatcher-threads when it is equal to 1.Effectively this means one cannot create GW sender with a single dispatcher thread. If you ask for 1 you will get 5(default value). </description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.wancommand.CreateDestroyGatewaySenderCommandDUnitTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.CreateGatewaySenderCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.functions.GatewaySenderCreateFunction.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2020-8-24 01:00:00" id="8451" opendate="2020-8-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis ping response contains unneeded quotes</summary>
      <description>native redis response to ping returns pong, unquoted.  Ours implementation returns "pong" with quotes.  </description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.Coder.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.RedisResponse.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.connection.PingExecutor.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2020-8-25 01:00:00" id="8456" opendate="2020-8-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>upgrade Shiro to 1.6.0</summary>
      <description>Our current Shiro version (1.5.3) is below the recommended version.</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0,1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2020-8-26 01:00:00" id="8459" opendate="2020-8-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis API for Geode handles errors when member disconnects</summary>
      <description>Redis API for Geode should properly handle DistributedSystemDisconnectedException and ForcedDisconnectException when member disconnects. Client should be closed and a null response should be returned.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.ExecutionHandlerContext.java</file>
    </fixedFiles>
  </bug>
  
  
</bugrepository>