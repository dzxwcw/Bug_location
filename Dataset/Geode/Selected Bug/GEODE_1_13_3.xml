<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="GEODE">
  <bug fixdate="2022-3-3 01:00:00" id="10099" opendate="2022-3-3 00:00:00" resolution="Resolved">
    <buginformation>
      <summary>release 1.12.9</summary>
      <description>Release to incorporate GEODE-10093.</description>
      <version>None</version>
      <fixedVersion>1.12.10,1.13.9,1.14.5,1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-7-10 01:00:00" id="101" opendate="2015-7-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Resolve Build Issues</summary>
      <description>The current code build has dependency on a Pivotal internal repository. This dependency has to be removed.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-spark-connector.project.Settings.scala</file>
      <file type="M">gemfire-spark-connector.project.Dependencies.scala</file>
      <file type="M">gemfire-spark-connector.doc.1.building.md</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2022-3-3 01:00:00" id="10100" opendate="2022-3-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>release 1.13.8</summary>
      <description>Release to incorporate  GEODE-10093</description>
      <version>None</version>
      <fixedVersion>1.13.9,1.14.5,1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2022-3-3 01:00:00" id="10101" opendate="2022-3-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>release 1.14.4</summary>
      <description>Release to incorporate GEODE-10093</description>
      <version>None</version>
      <fixedVersion>1.14.5,1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2020-10-14 01:00:00" id="8495" opendate="2020-9-14 00:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>Make DUnit launch members in non-conflicting directories</summary>
      <description>Currently several features of the DUnit framework prevent tests being run in parallel outside of a docker container:1. The DUnitLauncher launches child VMs in subdirectories with standard names (e.g. vm0, vm1, ...) in the test JVM's working directory. If multiple tests run in parallel, the child VMs created by each test share these directories.2. LocatorStarterRule and ServerStarterRule launch locators and servers in the test JVM, directly in the test JVM's working directory. If multiple tests run in parallel, the members started by these rules share these directories.Each member expects to be the only thing running in its working directory. When members from different tests share directories, they become confused and fail.To allow running tests in parallel outside of docker containers, fix these and other directory conflict problems.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.CacheXml66DUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2020-10-15 01:00:00" id="8497" opendate="2020-9-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Get heap memory occupied by GW senders queue events</summary>
      <description>Extract exact heap memory occupied by GW senders queue.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.beans.stats.GatewaySenderOverflowMonitorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.stats.StatsKey.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.stats.GatewaySenderOverflowMonitor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.GatewaySenderMBeanBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.GatewaySenderMBean.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.GatewaySenderMXBean.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionMapFactory.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2020-9-16 01:00:00" id="8499" opendate="2020-9-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis subscriptions leak if they are not explicitly unsubscribed</summary>
      <description>If subscribed clients disconnect without unsubscribing, the subscription structures are never removed from the list of subscriptions until a PUBLISH to their channel fails.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.test.java.org.apache.geode.redis.internal.pubsub.SubscriptionsJUnitTest.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.pubsub.AbstractSubscription.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.Client.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.GeodeRedisServer.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.internal.pubsub.SubscriptionsIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-1-25 01:00:00" id="850" opendate="2016-1-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add tempus-fugit concurrent testing framework</summary>
      <description>Add testCompile dependency for tempus-fugit concurrent testing framework.http://tempusfugitlibrary.org/</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.dependency-versions.properties</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2020-9-16 01:00:00" id="8500" opendate="2020-9-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tests for Redis QUIT command</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.ExecutionHandlerContext.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2021-1-26 01:00:00" id="9079" opendate="2021-3-26 00:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Right-size Geode CI instances</summary>
      <description>Verify that heavy-lifter instances are utilizes well for their sizes. </description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.rsync.code.down.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">buildSrc.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-4-26 01:00:00" id="9080" opendate="2021-3-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enable resource-monitoring for Windows CI instances</summary>
      <description>Google monitoring via stackdriver is not enabled on Geode's windows CI instances. Remedy this, to enable better utilization/sizing.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.meta.deploy.meta.sh</file>
      <file type="M">ci.images.google-windows-geode-builder.packer.json</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2021-3-29 01:00:00" id="9086" opendate="2021-3-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Documentation for DECRBY command</summary>
      <description>Ensure that there is sufficient documentation for the DECRBY command in the compatible with redis module. </description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.README.md</file>
      <file type="M">geode-docs.tools.modules.geode.apis.compatible.with.redis.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-4-29 01:00:00" id="9087" opendate="2021-3-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix the documentation for SCAN commands.</summary>
      <description>Fix documentation for SCAN command, especially the data types accepted by it. </description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.geode.apis.compatible.with.redis.html.md.erb</file>
      <file type="M">geode-apis-compatible-with-redis.README.md</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-5-29 01:00:00" id="9218" opendate="2021-4-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode has tests for TLSv1.1 which is disabled by default now</summary>
      <description>According to the Oracle JRE/JDK cryptographic roadmap, TLSv1 and TLSv1.1 are disabled by default as of 11.0.11+9 and 8u291b10. This causes TLSv1.1 tests to fail.</description>
      <version>1.12.3,1.13.3,1.14.0,1.15.0</version>
      <fixedVersion>1.12.3,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SSLUtilTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SocketCreatorFactoryJUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.JMXMBeanDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.distributed.LocatorDUnitTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.rest.internal.web.RestSecurityWithSSLTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.rest.internal.web.controllers.RestAPIsWithSSLDUnitTest.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2021-7-1 01:00:00" id="9410" opendate="2021-7-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide: gfsh import cluster-configuration inconsistencies</summary>
      <description>Two write-ups on the gfsh import cluster-configuration command seem to differ with regard to whether the operation is allowed on running cache servers.The operation is allowed, but with restrictions. The correct details are provided in the gfsh import command description:https://geode.apache.org/docs/guide/113/tools_modules/gfsh/command-pages/import.html#topic_vnv_grz_ckThe corresponding section under Exporting and Importing Cluster Configurations is less clear, and could be improved:https://geode.apache.org/docs/guide/113/configuring/cluster_config/export-import.html</description>
      <version>1.13.3</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.quick.ref.commands.by.area.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.import.html.md.erb</file>
      <file type="M">geode-docs.configuring.cluster.config.export-import.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2021-7-12 01:00:00" id="9426" opendate="2021-7-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update docs for HTTP Session Management</summary>
      <description> &amp;#91;From a community member&amp;#93; I suspect this affects many older versions ... but I wanted to document what I saw as I attempted to follow the docs:This page has incorrect jar: https://geode.apache.org/docs/guide/113/tools_modules/http_session_mgmt/tomcat_installing_the_module.html "geode-commons jar" should be "geode-common jar" ... no "s"Also missing geode tcp server jar (geode-tcp-server)And is missing this step (copied here from geode-examples):{nofomat}$ cp $CATALINA_HOME/bin/tomcat-juli.jar $CATALINA_HOME/lib/App would not start with this in context.xml ... it was not there already ... and when I added it, startup failed.Suggest working through both the geode-examples AND the official documentation to verify correctness. &amp;#91;Example treated separately - see GEODE-9430&amp;#93;</description>
      <version>1.13.3</version>
      <fixedVersion>1.13.4,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.http.session.mgmt.weblogic.setting.up.the.module.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.http.session.mgmt.tomcat.setting.up.the.module.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.http.session.mgmt.tomcat.installing.the.module.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.http.session.mgmt.tomcat.changing.gf.default.cfg.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.http.session.mgmt.tc.installing.the.module.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.http.session.mgmt.quick.start.html.md.erb</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2021-7-20 01:00:00" id="9443" opendate="2021-7-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Increase kernel.pid_max in CI images</summary>
      <description>Certain Geode tests create a lot of threads. When these tests run in parallel with many other tests (as they do in CI), the whole set of concurrently running tests can overwhelm the Linux kernel's ability to assign PIDs to new threads. When this happens, test processes, Gradle processes, and other processes can become unable to create new threads.The relevant system parameter is kernel.pid_max. On our CI systems, pid_max is 98,304.Raising pid_max to 983040 (10x the default value). A build can run 24 concurrent instances of even our most thread-heavy tests without exceeding this threshold.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.images.google-geode-builder.scripts.setup.sh</file>
    </fixedFiles>
  </bug>
</bugrepository>