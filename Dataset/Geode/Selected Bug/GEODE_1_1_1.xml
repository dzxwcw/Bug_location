<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="GEODE">
  
  
  <bug fixdate="2017-5-13 01:00:00" id="2778" opendate="2017-4-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh help now uses log4j log levels: update user guide</summary>
      <description>Update the user guide to reflect this change.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.configuring.gfsh.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.start.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.export.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.change.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.alter.html.md.erb</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2017-4-20 01:00:00" id="2806" opendate="2017-4-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>when batch is dispatched, if the bucket is not primary, we should still destroy the event from queue</summary>
      <description>This is one of the root causes for data mismatch. When AEQ dispatched a batch, when it tried to destroy the events from queue, the bucket might be no longer primary. There's no need to let the new primary to re-dispatch the batch.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-4-21 01:00:00" id="2809" opendate="2017-4-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode docs: Clarify SSL setup for client</summary>
      <description>The page managing/security/implementing_ssl.html contains an example of setting ssl properties for a client. It would be helpful to clarify which properties refer to client-local entities (e.g. path to keystore) and which are local reflections of server settings (e.g. whether locators and servers are ssl-enabled).</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.security.implementing.ssl.html.md.erb</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2017-5-24 01:00:00" id="2815" opendate="2017-4-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect Error Message in REST API docs for {region}/{key} HTTP.GET command</summary>
      <description>According to the docs at http://gemfire.docs.pivotal.io/geode/rest_apps/get_region_key_data.html error responses HTTP 400 and HTTP 404 appear to be very similar, 400 - BAD REQUEST - Returned if the supplied key is not found in the region. 404 - NOT FOUND - Returned if key does not exist for the region.The source code at PdxBasedCrudController.java:210 &amp; 213 show that 404 actually means "Region does not exist", thus the documentation appears to be incorrect. Other commands are correct in the docs showing 404 means region does not exist.</description>
      <version>1.1.1,1.2.0</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.rest.apps.get.region.key.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.for.multiple.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.html.md.erb</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2017-6-24 01:00:00" id="2819" opendate="2017-4-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>HTTP status code 414 is not documented</summary>
      <description>Whilst consuming the REST API to do a "put all", we built a URI that is too long and thus got a 414 HTTP status code. The documentation that we are using (https://geode.apache.org/docs/guide/11/rest_apps/put_multiple_values_for_keys.html) does not specify what constitutes "too long" and does not include 414 in the Error Codes table at the bottom of the page. The former would be nice; the latter seems necessary.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.rest.apps.put.multiple.values.for.keys.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-8-24 01:00:00" id="2821" opendate="2017-4-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode User Guide: Add running heads with logo</summary>
      <description>In the Geode User Guide, add running heads with the Geode logo as in the Client Guide.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-book.config.yml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2017-5-26 01:00:00" id="2830" opendate="2017-4-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Required permission for executing a function should be DATA:WRITE</summary>
      <description>The required permission for executing a function as listed in the gfsh command table (2nd table) is wrong in the docs:http://gemfire.docs.pivotal.io/geode/managing/security/implementing_authorization.htmlIt is listed as DATA:MANAGE in the gfsh command table, but should be DATA:WRITE.The correct permission is listed in the client operation table above the gfsh table.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.security.implementing.authorization.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-5-27 01:00:00" id="2837" opendate="2017-4-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Start server fails if specified `--dir` does not exist</summary>
      <description>When you execute gfsh&gt; start server --name=server1, the default working directory will be ./server1, and gfsh will create that directory if necessary. However, gfsh&gt; start server --name=server1 --dir=foo will fail if the directory ./foo does not exist. For consistency ease of use, we should instead have gfsh attempt to create the specified directory if necessary. start locator may or may not have the same deficiency.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.i18n.CliStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.LauncherLifecycleCommands.java</file>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.management.internal.cli.commands.LauncherLifecycleCommandsIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2017-5-28 01:00:00" id="2843" opendate="2017-4-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - example should specify &lt;client-cache&gt;</summary>
      <description>Excerpt from John Blum's response to a user's question:See the example here: http://geode.apache.org/docs/guide/11/reference/topics/client-cache.html#cc-pdxUnfortunately, the example is WRONG, as it is using the "peer" cache element tag (&lt;cache&gt; instead of &lt;client-cache&gt;), but this reference (&amp;#91;5&amp;#93;) is from client-cache section...</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.client-cache.html.md.erb</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2017-10-5 01:00:00" id="2888" opendate="2017-5-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>user guide: REST API Region Endpoints use &amp;#39;gemfire-api&amp;#39; in their names</summary>
      <description>The name 'gemfire-api' should be replaced by 'geode' in the Region Endpoints section of the manual. See http://geode.apache.org/docs/guide/11/rest_apps/rest_regions.html and its subsections.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.rest.apps.troubleshooting.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.regions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.queries.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.prereqs.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.functions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.examples.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.admin.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.update.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.update.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.update.cas.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.replace.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.multiple.values.for.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.if.absent.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.execute.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.execute.functions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.create.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.ping.service.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.head.region.size.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.servers.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.key.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.for.multiple.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.regions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.queries.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.functions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.execute.adhoc.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.develop.rest.apps.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.named.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.data.for.multiple.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.data.for.key.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.all.data.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2017-8-8 01:00:00" id="3055" opendate="2017-6-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>data mismatch caused by rebalance. waitUntilFlashed return false</summary>
      <description>/export/buglogs_bvt/xzhou/lucene/concParRegHAPersist-0601-171739lucene/concParRegHAPersist.confA=accessorB=dataStoreaccessorHosts=1accessorThreadsPerVM=5accessorVMsPerHost=1dataStoreHosts=6dataStoreThreadsPerVM=5dataStoreVMsPerHost=1numVMsToStop=2redundantCopies=0no local.confIn dataStoregemfire5_7483/system.log, thread tid=0xdf, putAll Object_1106617:22:27.135 tid=0xdf] generated tag {v1; rv13 shadowKey=293917:22:27.136 _partitionedRegionPARALLELGATEWAYSENDER_QUEUE_1 bucket : null // brq is not ready yetis enqueued to the tempQueue17:22:27.272 tid=0xdf] generated tag {v3; rv15 shadowKey=327817:22:33.111 Subregion created: /_PR/_BAsyncEventQueueindex#partitionedRegionPARALLELGATEWAYSENDER_QUEUE_1vm_3_dataStore3_r02-s28_28143.log:17:22:33.120 Put successfully in the queue shadowKey= 293917:22:33.156 tid=0x7fe started query17:22:33.176 Peeked shadowKey= 2939So the root cause is: the event is still in tempQueue before it's processed, the query happened. WaitUntilFlush should wait until tempQueue is also flushed.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-6-8 01:00:00" id="3056" opendate="2017-6-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Setting an unkown partition-resolver in gfsh throws: null is an invalid Partition Resolver.</summary>
      <description>Example:In this case org.apache.geode.cache.util.Foo does not existgfsh&gt;create region --name=region3 --type=PARTITION --partition-resolver=org.apache.geode.cache.util.FooErrors with: null is an invalid Partition Resolver.null should be "org.apache.geode.cache.util.Foo"</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateAlterDestroyRegionCommands.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-12-9 01:00:00" id="3063" opendate="2017-6-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve docs on default string-based partition resolver</summary>
      <description>The new default partition resolver atorg.apache.geode.cache.util.StringPrefixPartitionResolverneeds more detailed documentation. An example of a string specifying a key in a region operation when this partition resolver is used. What happens if the string specifying a key doesn't have a '|' delimiter. An example of using this partition resolver to colocate two regions.</description>
      <version>None</version>
      <fixedVersion>1.4.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.create.html.md.erb</file>
      <file type="M">geode-docs.images.svg.custom.partitioned.svg</file>
      <file type="M">geode-docs.developing.partitioned.regions.using.custom.partition.resolvers.html.md.erb</file>
      <file type="M">geode-docs.developing.partitioned.regions.overview.custom.partitioning.and.data.colocation.html.md.erb</file>
      <file type="M">geode-docs.developing.partitioned.regions.custom.partitioning.and.data.colocation.html.md.erb</file>
      <file type="M">geode-docs.developing.partitioned.regions.colocating.partitioned.region.data.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2017-7-12 01:00:00" id="3194" opendate="2017-7-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cleanup disk store on failed recovery</summary>
      <description>When recovering from persistent disk stores, it is possible to have the process fail exceptionally (for example, a failure deserializing the data from the disk store). Currently, however, this is not handled in a way that cleans up the partially setup disk store, but should be modified to do so.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.DiskStoreFactoryJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DiskStoreFactoryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-7-12 01:00:00" id="3198" opendate="2017-7-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do not prevent bucket creation if local-max-memory is exceeded</summary>
      <description>In creating a new bucket, if local-max-memory is exceeded on all members, the bucket cannot be created until a member goes below that memory threshold (which may be never, in which case the attempt to create the bucket loops forever). Currently, if all members have indicated they should not make the bucket, the request is again made, but with a "force" flag set to true. This allows overriding the fact that the member believes it already hosts as many buckets as it should for balance, but does not override the local-max-memory check. We should therefore have the force flag also override the memory threshold check, thus allowing bucket creation to proceed, but still attempting to honor not adding it to a member already at or above its target memory limit.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionLocalMaxMemoryDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionDataStoreJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2017-10-22 01:00:00" id="3685" opendate="2017-9-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>MBean wrappers are not always applied correctly</summary>
      <description>Under certain conditions, MBean wrappers are not applied correctly.</description>
      <version>1.1.0,1.1.1,1.2.0,1.2.1</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.management.internal.cli.commands.StopServerAcceptanceTest.java</file>
      <file type="M">geode-web.src.test.java.org.apache.geode.management.internal.web.shell.HttpOperationInvokerSecurityTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.rules.gfsh.GfshRule.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.rules.gfsh.GfshExecution.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.shell.HttpOperationInvoker.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.http.support.SimpleHttpRequester.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.ShellCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.AbstractMultiPartCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.AbstractCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgent.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-10-25 01:00:00" id="3701" opendate="2017-9-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve docs on hash index performance</summary>
      <description>Stronger language is warranted for hash indexes.In a simple test, there was an order of magnitude difference in load and GII performance between the two types of indexes.Range:Client: Loaded 2,000,000 entries in 20,487 msServer 1 Size: 1,272,322,680 bytesServer 2: GIIed in 12,523 msServer 2 Size: 1,272,088,544 bytesHash:Client: Loaded 2,000,000 entries in 257,016 msServer 1 Size: 1,228,010,280 bytesServer 2: GIIed in 218,983 msServer 2 Size: 1,228,161,664 bytesSo, the difference in size was ~45MB, but the difference in time was an order of magnitude.Better wording suggested for file developing/query_index/creating_hash_indexes.html:Using hash index will degrade put performance and recovery time substantially. If memory is not a concern, it is recommended that you use range index.</description>
      <version>None</version>
      <fixedVersion>1.3.0,1.4.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.index.creating.hash.indexes.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-9-25 01:00:00" id="3702" opendate="2017-9-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>New framework for concurrency testing</summary>
      <description>From the mailing list discussion:I'd like to propose two things:1) We introduce a framework for writing unit tests of code that issupposed to be thread safe. This framework should let a developereasily write a test with multiple things going on in parallel. Theframework can then take that code and try to run it with differentthread interleavings.Here's an example of what this could look like:@RunWith(ConcurrentTestRunner.class)public class AtomicIntegerTest { @Test public void parallelIncrementReturns2(ParallelExecutor executor) throws ExecutionException, InterruptedException { AtomicInteger atomicInteger = new AtomicInteger(); executor.inParallel(() -&gt; atomicInteger.incrementAndGet()); executor.inParallel(() -&gt; atomicInteger.incrementAndGet()); executor.execute(); assertEquals(2, atomicInteger.get()); }2) We implement this framework initially using Java Pathfinder, butallow for other methods of testing the code to be plugged in forexample just running the test in the loop. Java pathfinder is coolbecause it can run the code with different interleavings but it doeshave some serious limitations.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
      <file type="M">gradle.rat.gradle</file>
      <file type="M">geode-core.src.test.resources.org.apache.geode.codeAnalysis.sanctionedDataSerializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.FilterProfile.java</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2015-6-27 01:00:00" id="41" opendate="2015-5-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Dummy feature for gitflow validation</summary>
      <description>Dummy feature for gitflow validation</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">COMPILING.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2018-4-6 01:00:00" id="5029" opendate="2018-4-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve docs for query timeout and low memory due to a query</summary>
      <description>The section labeled "Monitoring Queries for Low Memory" can use a bit of improvement. Separate the section into 2 sections: Queries and low memory Query timeout Make the prose clear that this is not just about monitoring, but about action that is taken (exceptions thrown) for queries.</description>
      <version>None</version>
      <fixedVersion>1.6.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.additional.advanced.querying.html.md.erb</file>
      <file type="M">geode-docs.developing.querying.basics.monitor.queries.for.low.memory.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-12-27 01:00:00" id="503" opendate="2015-10-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode can leak SSL keystore password via the log file</summary>
      <description>KeyStore password can be leaked via the log file, as this may get printed and is unintended. This could cause a security issue for some users by leaking information that could allow access to the keystore holding the SSL certificate used to validate connections between members.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.AbstractConfig.java</file>
    </fixedFiles>
  </bug>
  
</bugrepository>