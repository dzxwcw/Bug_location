<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="10099" opendate="2022-3-3 00:00:00" fixdate="2022-3-3 01:00:00" resolution="Resolved">
    <buginformation>
      <summary>release 1.12.9</summary>
      <description>Release to incorporate GEODE-10093.</description>
      <version>None</version>
      <fixedVersion>1.12.10,1.13.9,1.14.5,1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="101" opendate="2015-7-10 00:00:00" fixdate="2015-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Resolve Build Issues</summary>
      <description>The current code build has dependency on a Pivotal internal repository. This dependency has to be removed.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-spark-connector.project.Settings.scala</file>
      <file type="M">gemfire-spark-connector.project.Dependencies.scala</file>
      <file type="M">gemfire-spark-connector.doc.1.building.md</file>
    </fixedFiles>
  </bug>
  <bug id="10100" opendate="2022-3-3 00:00:00" fixdate="2022-3-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>release 1.13.8</summary>
      <description>Release to incorporate  GEODE-10093</description>
      <version>None</version>
      <fixedVersion>1.13.9,1.14.5,1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="10101" opendate="2022-3-3 00:00:00" fixdate="2022-3-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>release 1.14.4</summary>
      <description>Release to incorporate GEODE-10093</description>
      <version>None</version>
      <fixedVersion>1.14.5,1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug id="9064" opendate="2021-3-24 00:00:00" fixdate="2021-4-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Configure serialization filtering for JMX/RMI by default on Java 11</summary>
      <description>The Geode JMX layer should configure the “jmx.remote.rmi.server.serial.filter.pattern” system property on Java 11 to accept only JDK classes identified as open-types for JMX. If the user or another library has already set this system property, then Geode will log a statement and leave it alone.</description>
      <version>1.12.2,1.13.2</version>
      <fixedVersion>1.12.3,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.build.gradle</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.SystemManagementServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.JmxRmiOpenTypesSerialFilterTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.SystemManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgentFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgent.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JmxRmiSerialFilter.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JmxRmiOpenTypesSerialFilter.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.ServerManagerConfiguresJmxSerialFilterIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.LocatorManagerConfiguresJmxSerialFilterIntegrationTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.ServerManagerConfiguresJmxSerialFilterAcceptanceTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.LocatorManagerConfiguresJmxSerialFilterAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="9197" opendate="2021-4-26 00:00:00" fixdate="2021-4-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>StressNewTest should not attempt to run against deleted files</summary>
      <description>This run was a revert which deleted a newly added test. However, StressNewTest still detected a change and wanted to run against it: https://concourse.apachegeode-ci.info/builds/29861</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.repeat-new-tests.sh</file>
    </fixedFiles>
  </bug>
  <bug id="9198" opendate="2021-4-27 00:00:00" fixdate="2021-5-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Keystore/truststore file watcher does not follow symbolic links</summary>
      <description>GEODE-9017 introduced a file watching key/trust manager to automatically reload the key and trust store upon change. However, the file watcher was configured to not follow symbolic links. Some environments such as Kubernetes use symbolic links to mount files inside a container file system. In cases like this (where the key and trust store are represented using symbolic links) the file watcher should follow these links and reload the key and trust store when the underlying target file changes.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.filewatch.PollingFileWatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="9199" opendate="2021-4-27 00:00:00" fixdate="2021-5-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Restructure String Dunit tests to work with compatible with Redis cluster mode</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.distributedTest.java.org.apache.geode.redis.internal.executor.string.StringsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="9202" opendate="2021-4-27 00:00:00" fixdate="2021-6-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement PUBSUB CHANNELS Subcommand</summary>
      <description>Implement the CHANNELS subcommand of the PUBSUB command. Acceptance CriteriaThe CHANNELS subcommand is correctly implemented and unit tests are developed to ensure that the command lists the currently active channels. An active channel is a Pub/Sub channel with one or more subscribers (not including clients subscribed to patterns).If no pattern is specified, all the channels are listed, otherwise if pattern is specified only channels matching the specified glob-style pattern are listed.Return valueArray reply: a list of active channels, optionally matching the specified pattern.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.test.java.org.apache.geode.redis.internal.SupportedCommandsJUnitTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.test.java.org.apache.geode.redis.internal.pubsub.SubscriptionsJUnitTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.RedisConstants.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.RedisCommandType.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.Subscriptions.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSub.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.RedisCommandArgumentsTestHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="9203" opendate="2021-4-27 00:00:00" fixdate="2021-6-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement NUMSUB Subcommand</summary>
      <description>Implement the NUMSUB subcommand. Acceptance CriteriaThe NUMSUB subcommand has been implemented along with unit tests to assert that the subcommand correctly returns the number of subscribers (not counting clients subscribed to patterns) for the specified channels.Return valueArray reply: a list of channels and number of subscribers for every channel. The format is channel, count, channel, count, ..., so the list is flat. The order in which the channels are listed is the same as the order of the channels specified in the command call.Note that it is valid to call this command without channels. In this case it will just return an empty list. </description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.Subscriptions.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSub.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.netty.StringBytesGlossary.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.executor.pubsub.PubSubExecutor.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.pubsub.AbstractSubCommandsIntegrationTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.pubsub.AbstractPubSubIntegrationTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.acceptanceTest.resources.0001-configure-redis-tests.patch</file>
    </fixedFiles>
  </bug>
  <bug id="9205" opendate="2021-4-28 00:00:00" fixdate="2021-7-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement NUMPAT Subcommand</summary>
      <description>Implement the NUMPAT subcommand. Acceptance CriteriaThe NUMPAT subcommand has been implemented and unit tests have been developed that assert that the command correctly returns the number of subscriptions to patterns (that are performed using the PSUBSCRIBE command). Note that this is not just the count of clients subscribed to patterns but the total number of patterns all the clients are subscribed to.Return valueInteger reply: the number of patterns all the clients are subscribed to.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.Subscriptions.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSub.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.netty.StringBytesGlossary.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.executor.pubsub.PubSubExecutor.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.pubsub.AbstractSubCommandsIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="9339" opendate="2021-6-2 00:00:00" fixdate="2021-6-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bump json-smart to recommended version</summary>
      <description>json-smart 2.3 should be updated to 2.3.1(fyi json-smart is used by json-path, not directly by Geode)</description>
      <version>1.12.2,1.13.2,1.14.0,1.15.0</version>
      <fixedVersion>1.12.3,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="934" opendate="2016-2-8 00:00:00" fixdate="2016-3-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI failure: DurableClientSimpleDUnitTest.testReadyForEventsNotCalledImplicitlyWithCacheXML</summary>
      <description>Error Messagecom.gemstone.gemfire.test.dunit.RMIException: While invoking com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest$66.run in VM 2 running on Host japan.gemstone.com with 4 VMsStacktracecom.gemstone.gemfire.test.dunit.RMIException: While invoking com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest$66.run in VM 2 running on Host japan.gemstone.com with 4 VMs at com.gemstone.gemfire.test.dunit.VM.invoke(VM.java:370) at com.gemstone.gemfire.test.dunit.VM.invoke(VM.java:313) at com.gemstone.gemfire.test.dunit.VM.invoke(VM.java:267) at com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest.testReadyForEventsNotCalledImplicitlyWithCacheXML(DurableClientSimpleDUnitTest.java:1322) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:252) at junit.framework.TestSuite.run(TestSuite.java:247) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64) at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360) at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54) at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745)Caused by: junit.framework.AssertionFailedError: expected:&lt;10&gt; but was:&lt;20&gt; at junit.framework.Assert.fail(Assert.java:57) at junit.framework.Assert.failNotEquals(Assert.java:329) at junit.framework.Assert.assertEquals(Assert.java:78) at junit.framework.Assert.assertEquals(Assert.java:234) at junit.framework.Assert.assertEquals(Assert.java:241) at junit.framework.TestCase.assertEquals(TestCase.java:409) at com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest$66.run2(DurableClientSimpleDUnitTest.java:1334) at com.gemstone.gemfire.cache30.CacheSerializableRunnable.run(CacheSerializableRunnable.java:57) at sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at hydra.MethExecutor.executeObject(MethExecutor.java:267) at com.gemstone.gemfire.test.dunit.standalone.RemoteDUnitVM.executeMethodOnObject(RemoteDUnitVM.java:84) at sun.reflect.GeneratedMethodAccessor162.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:323) at sun.rmi.transport.Transport$1.run(Transport.java:200) at sun.rmi.transport.Transport$1.run(Transport.java:197) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:196) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$95(TCPTransport.java:683) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ... 3 more</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.tier.sockets.CacheClientProxy.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.cache.tier.sockets.CacheClientProxy.java</file>
    </fixedFiles>
  </bug>
  <bug id="9346" opendate="2021-6-3 00:00:00" fixdate="2021-7-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>When client received incorrect byte array of PdxType due to broken socket, it should be retried</summary>
      <description>Client's query for PdxType will get a byte array in response message. The byte array is the same at the server, but different query from different client might receive wrong byte array and end up with PdxSerializationException in scalability test with server HA. This could caused by socket broken and bytes are not flushed. We expected such broken socket scenario and prepared some retry lock. However, our retry logic did not consider above scenario, i.e. the message header is correct, but the embedded byte array for PdxType is wrong. The solution is to retry in this case.</description>
      <version>1.12.2,1.13.2,1.14.0,1.15.0</version>
      <fixedVersion>1.12.4,1.13.4,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.QueryOp.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.PDXQueryTestBase.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.PdxQueryDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.PdxLocalQueryDUnitTest.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
