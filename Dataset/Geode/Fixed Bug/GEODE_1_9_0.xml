<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="3902" opendate="2017-10-24 00:00:00" fixdate="2017-4-24 01:00:00" resolution="Cannot Reproduce">
    <buginformation>
      <summary>CI Failure: org.apache.geode.security.ClientGetPutAuthDUnitTest</summary>
      <description>org.apache.geode.security.ClientGetPutAuthDUnitTest &gt; testGetPutAuthorization FAILED java.lang.AssertionError: Suspicious strings were written to the log during this run. Fix the strings or use IgnoredException.addIgnoredException to ignore. ----------------------------------------------------------------------- Found suspect string in log4j at line 9 [error 2017/10/20 17:31:24.457 UTC &lt;RMI TCP Connection(1)-172.17.0.3&gt; tid=0x1e] org.apache.geode.GemFireConfigException: SSL Configuration requires a valid distribution config.</description>
      <version>1.9.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.security.ClientDestroyInvalidateAuthDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="3903" opendate="2017-10-24 00:00:00" fixdate="2017-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refactor current client protocol work to split the protocol from protobuf</summary>
      <description>Currently the protobuf protocol work is all in 1 module. Split the modules into 2 modules: geode-client-protocol - specific to protocol only work geode-protobuf - specific to the protobuf implementation for the client protocol</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.EncodingTypeToSerializationTypeTranslatorJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.serialization.codec.JSONCodecJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.OperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.OpsHandler.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.MessageUtil.java</file>
      <file type="M">geode-protobuf.src.main.resources.META-INF.services.org.apache.geode.internal.serialization.TypeCodec</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.ProtobufOpsProcessor.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.EncodingTypeTranslator.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.TypeCodec.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.SerializationType.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.SerializationService.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.registry.SerializationCodecRegistry.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.registry.exception.CodecNotRegisteredForTypeException.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.registry.exception.CodecAlreadyRegisteredForTypeException.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.exception.UnsupportedEncodingTypeException.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.serialization.codec.JSONCodec.java</file>
      <file type="M">geode-client-protocol.src.main.java.org.apache.geode.internal.protocol.operations.OperationHandler.java</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">settings.gradle</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.serialization.registry.CodecRegistryJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.ProtobufProtocolServiceJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.RemoveRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.PutRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.PutAllRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionNamesRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetAvailableServersOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetAllRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.build.gradle</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.ClientProtocolMessageHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.EncodingTypeTranslator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.exception.InvalidProtocolMessageException.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.Failure.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.MessageExecutionContext.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.OperationContext.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.operations.OperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetAllRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetAvailableServersOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionNamesRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.PutAllRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.PutRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.RemoveRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.security.AuthenticationRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.ProtobufProtocolService.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.ProtobufSerializationService.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.registry.ProtobufOperationContextRegistry.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.exception.IncompatibleAuthenticationMechanismsException.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.InvalidConfigAuthenticator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.ProtobufShiroAuthorizer.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.utilities.ProtobufUtilities.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.ProtocolErrorCode.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.Result.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.Authenticator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.Authorizer.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.NoOpAuthenticator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.NoOpAuthorizer.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.processors.AuthorizationSecurityProcessor.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.processors.NoAuthenticationSecurityProcessor.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.SecurityLookupService.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.security.SecurityProcessor.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.serializer.ProtocolSerializer.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.statistics.NoOpStatistics.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.statistics.ProtocolClientStatistics.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.Success.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.codec.JSONCodec.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.exception.UnsupportedEncodingTypeException.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.registry.exception.CodecAlreadyRegisteredForTypeException.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.registry.exception.CodecNotRegisteredForTypeException.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.registry.SerializationCodecRegistry.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.SerializationService.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.SerializationType.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.serialization.TypeCodec.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.acceptance.CacheConnectionJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.acceptance.CacheConnectionTimeoutJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.acceptance.CacheMaxConnectionJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.acceptance.CacheOperationsJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5783" opendate="2018-9-26 00:00:00" fixdate="2018-10-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>geode should use a single class to create instances of ThreadFactory</summary>
      <description>Geode creates a large number of ThreadFactory instances. Most of these are created with anonymous inner classes. In most cases the ThreadFactory instance is passed on to a thread pool. Since thread pools are finalizable they will keep alive anything they reference until finalization takes place. Most JVM garbage collectors delay doing finalization as long as possible. Since an anonymous inner class always has a references to the outer class instance, a number of places will end up having a reference to our single GemFireCacheImpl which can end up preventing a large amount of heap from being garbage collected.For the above reasons, and also to avoid code duplication, it would be better if we had a single utility class that took care of creating ThreadFactory instances. We already have one such class in geode named GemFireCacheHelper that is only used from one class. Also google guava has ThreadFactoryBuilder which could be used.</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.Connection.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.logging.LoggingExecutors.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientProxy.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.ReplyMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="6223" opendate="2018-12-19 00:00:00" fixdate="2018-12-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Build job(s) should include resolveDependencies task</summary>
      <description>The recent BOM changes broke the resolveDependencies task (as the BOM was required but was note declared as a dependency), but this went undetected in both the precheckin and main CI pipelines, as the task is only targeted in the creation of test images.This task should be a part of the Build test job, to prevent image breakage in the future.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.execute.build.sh</file>
    </fixedFiles>
  </bug>
  <bug id="6224" opendate="2018-12-19 00:00:00" fixdate="2018-12-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>BOM task dependencies is inhospitable to external developers</summary>
      <description>As acknowledged in the commit message of GEODE-6198, our approach to depend on the bom publish task was heavy-handed. However, this extends farther than initially realized, as any consumer of Geode will also have to manage these task dependencies.Until a cleaner solution can be identified, the dependencyManagement block currently belonging to the BOM should be applied in place of the BOM. The subproject geode-all-bom should consume this block and publish a BOM that is, for now, reproduced in all other POMs.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.geode-dependency-management.gradle</file>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web-api.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-pulse.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-old-client-support.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-lucene.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-junit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-json.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-experimental-driver.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-dunit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-cq.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-connectors.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-concurrency-test.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-common.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">boms.geode-all-bom.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="6225" opendate="2018-12-19 00:00:00" fixdate="2018-1-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add support to create jdbc-mapping for catalog and schema</summary>
      <description>The JDBC api support a catalog and schema option. Currently the JDBC connector always set these to null. The create jdbc-mapping should have options that allow users to specify non-default values for catalog and schema. </description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.xml.ElementTypeTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManagerTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlStatementFactoryTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlHandlerTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.RegionMappingTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.main.resources.org.apache.geode.internal.sanctioned-geode-connectors-serializables.txt</file>
      <file type="M">geode-connectors.src.main.resources.META-INF.schemas.geode.apache.org.schema.jdbc.jdbc-1.0.xsd</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.JdbcConnectorServiceXmlParser.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.ElementType.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataView.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManager.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaData.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlStatementFactory.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlHandler.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.PostgresJdbcWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.PostgresJdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.MySqlJdbcWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.MySqlJdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcAsyncWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.internal.TestConfigService.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManagerIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.internal.PostgresTableMetaDataManagerIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.internal.MySqlTableMetaDataManagerIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6227" opendate="2018-12-19 00:00:00" fixdate="2018-12-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add lsof to test images for NetstatDUnitTest</summary>
      <description>tests such as geode-core/src/distributedTest/java/org/apache/geode/management/internal/cli/NetstatDUnitTest.java expect lsof utility to be available, but current images do not include it.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.images.test-container.Dockerfile</file>
      <file type="M">ci.images.google-geode-builder.scripts.setup.sh</file>
      <file type="M">ci.docker.Dockerfile</file>
    </fixedFiles>
  </bug>
  <bug id="6252" opendate="2019-1-7 00:00:00" fixdate="2019-1-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Combine dependencies into dependencySets</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.geode-dependency-management.gradle</file>
      <file type="M">gradle.dependency-versions.properties</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="6259" opendate="2019-1-8 00:00:00" fixdate="2019-1-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Simplify publication logic -- remove mavenSnapshotBucket</summary>
      <description>At the moment, the Maven target for publication is determined by:(1) If it was provided on the command line(2) If the version string indicates that it is a release version(3) If a "snapshot bucket" was provided on the commandline(4) Or a default snapshot location.The mavenSnapshotBucket is an unnecessary accessory that injects the provided string into a GCS url. A complete mavenRepository should be provided instead.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.meta.deploy.meta.sh</file>
      <file type="M">ci.pipelines.meta.jinja.template.yml</file>
      <file type="M">gradle.publish.gradle</file>
      <file type="M">gradle.properties</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.deploy.pipeline.sh</file>
      <file type="M">build.gradle</file>
      <file type="M">ci.scripts.execute.publish.sh</file>
      <file type="M">ci.scripts.execute.build.sh</file>
      <file type="M">ci.scripts.archive.results.sh</file>
      <file type="M">ci.pipelines.meta.meta.properties</file>
    </fixedFiles>
  </bug>
  <bug id="626" opendate="2015-12-5 00:00:00" fixdate="2015-12-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>MemoryChunk methods getSize and copyBytes need unit test coverage</summary>
      <description>The MemoryChunk methods getSize and copyBytes have no unit test coverage.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.internal.offheap.MemoryChunkJUnitTestBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="6260" opendate="2019-1-8 00:00:00" fixdate="2019-1-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Set iterator moveNext() in transaction should not cleanup non-dirty entries when encountering destroyed entry</summary>
      <description>Destroyed entry is not saved in the txState during set operation. However, there is a code path that non dirty entries are cleaned up.</description>
      <version>1.9.0</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.TXStateTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXState.java</file>
    </fixedFiles>
  </bug>
  <bug id="6277" opendate="2019-1-15 00:00:00" fixdate="2019-2-15 01:00:00" resolution="Duplicate">
    <buginformation>
      <summary>CI failure: DistributedNoAckRegionDUnitTest.testNBRegionDestructionDuringGetInitialImage</summary>
      <description> org.apache.geode.cache30.DistributedNoAckRegionDUnitTest &gt; testNBRegionDestructionDuringGetInitialImage FAILED java.lang.AssertionError: asyncGII failedCaused by: org.junit.ComparisonFailure: expected:&lt;[tru]e&gt; but was:&lt;[fals]e&gt;https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/DistributedTestOpenJDK8/builds/288This appears to be part of a larger flakey failure ticket, but this particular failure was not addressed.  Original flakey failure ticket:https://issues.apache.org/jira/browse/GEODE-5412?jql=text%20~%20%22testNBRegionDestructionDuringGetInitialImage%22 </description>
      <version>1.9.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.cache30.MultiVMRegionTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="6288" opendate="2019-1-17 00:00:00" fixdate="2019-1-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>PdxInstance.isDeserializable returns false for a JSON pdx instance</summary>
      <description>PdxInstance.isDeserializable should only return false if the PdxInstance does not change form. For example PdxInstance.getObject should always return the same PdxInstance it is called on.But in the case of PdxInstances created for JSON, getObject returns the JSON form instead of the PdxInstance. So for JSON PdxInstances, isDeserializable should return true.</description>
      <version>1.9.0</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.PdxInstanceImpl.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.pdx.PdxInstanceFactoryJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6289" opendate="2019-1-17 00:00:00" fixdate="2019-1-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>createPdxInstanceFactory should fail if class name is null</summary>
      <description>Currently if you create a PdxInstanceFactory and give it null as the class name the factory will be created with no complaints. But later, that null class name, will cause NullPointerExceptions to be thrown.createPdxInstanceFactory should check the class name for null and throw IllegalArgumentException</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.PdxInstanceFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.RegionService.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.pdx.PdxInstanceFactoryJUnitTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcLoaderIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6291" opendate="2019-1-17 00:00:00" fixdate="2019-2-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh create jdbc-mapping should store pdx field to JDBC table column mapping to cluster config</summary>
      <description>Currently 'gfsh create jdbc-mapping' does not define any of the actual pdx field to column mapping information. Instead it just waits until a get or put is done and then figures out how to do the mapping.gfsh create jdbc-mapping should instead read the meta data from the table and figure out how to map the columns to pdx. The mapping it determines should be stored in cluster config. </description>
      <version>1.9.0</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.TypeRegistry.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.CommandResultAssert.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManagerIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.internal.TestConfigService.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcAsyncWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcDistributedTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.MySqlJdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.PostgresJdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateDataSourceCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeDataSourceCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyDataSourceCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommandDunitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.JdbcClusterConfigDistributedTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.ListDataSourceCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.AbstractJdbcCallback.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.ColumnData.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlHandler.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlToPdxInstanceCreator.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaData.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManager.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataView.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.ElementType.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.JdbcConnectorServiceXmlParser.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.JdbcAsyncWriter.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.JdbcLoader.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.JdbcWriter.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.util.internal.DescribeMappingResult.java</file>
      <file type="M">geode-connectors.src.main.resources.META-INF.schemas.geode.apache.org.schema.jdbc.jdbc-1.0.xsd</file>
      <file type="M">geode-connectors.src.main.resources.org.apache.geode.internal.sanctioned-geode-connectors-serializables.txt</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.AbstractJdbcCallbackTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.ColumnDataTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.RegionMappingTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlHandlerTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlStatementFactoryTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlToPdxInstanceCreatorTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManagerTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.xml.ElementTypeTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.AutoSerializableManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.LonerTypeRegistration.java</file>
    </fixedFiles>
  </bug>
  <bug id="6294" opendate="2019-1-17 00:00:00" fixdate="2019-1-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add disable-jmx configuration property to disable JMX</summary>
      <description>Add disable-jmx configuration property to disable JMX. This option is boolean and will have a false value by default. Setting it to true will prevent Geode from creating and using MBeans.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.DistributionConfigJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfigImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.AbstractDistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.ConfigurationProperties.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.jmx.internal.AdminDistributedSystemJmxImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.internal.DistributedSystemConfigImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.DistributedSystemConfig.java</file>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="6295" opendate="2019-1-18 00:00:00" fixdate="2019-3-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for Micrometer meters and meter registries</summary>
      <description>Add a Micrometer composite meter registry to Geode. Geode code can use this registry to collect key metrics. Client code can add one or more "downstream" meter registries to publish the collected metrics to the external time-series databases of their choice.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheLifecycleMetricsSessionBuilderTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CollectingServiceLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CacheLifecycleMetricsSession.java</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.InternalCacheBuilderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.InternalCacheBuilderAllowsMultipleSystemsTest.java</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-assembly.src.main.dist.LICENSE</file>
      <file type="M">geode-assembly.src.integrationTest.resources.expected.jars.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.geode-assembly-test.src.main.java.org.apache.geode.session.tests.TomcatInstall.java</file>
      <file type="M">extensions.geode-modules-assembly.release.session.bin.modify.war</file>
      <file type="M">extensions.geode-modules-assembly.build.gradle</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.WANTestBase.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.GemFireCacheImplTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalDistributedSystemTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheCreation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalCacheForClientAccess.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalCache.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.CacheConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalDistributedSystem.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.ClientCacheFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.CacheFactory.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CompositeMeterRegistryFactoryTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CompositeMeterRegistryFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalCacheBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="6297" opendate="2019-1-18 00:00:00" fixdate="2019-3-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI failure: LocatorLauncherRemoteFileIntegrationTest.statusWithPidReturnsOnlineWithDetails</summary>
      <description>Failed in Windows CI run 232&gt; Task :geode-core:integrationTestorg.apache.geode.distributed.LocatorLauncherRemoteFileIntegrationTest &gt; statusWithPidReturnsOnlineWithDetails FAILED java.lang.IllegalStateException: Status file 'C:\Users\geode\AppData\Local\Temp\junit7623641902150852427\vf.gf.locator.status' is blank</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.ServerLauncherRemoteIntegrationTestCase.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.LocatorLauncherRemoteIntegrationTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="6302" opendate="2019-1-18 00:00:00" fixdate="2019-2-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>checkPom only checks dependencies, but not other Pom sections</summary>
      <description>Most notable, the dependencyManagement section can now change without the checkPom task failing.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.publish.gradle</file>
      <file type="M">gradle.geode-dependency-management.gradle</file>
      <file type="M">gradle.properties</file>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web-management.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web-api.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.build.gradle</file>
      <file type="M">geode-pulse.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.build.gradle</file>
      <file type="M">geode-protobuf-messages.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf-messages.build.gradle</file>
      <file type="M">geode-old-client-support.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-management.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-lucene.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-junit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-json.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-experimental-driver.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-dunit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-cq.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-connectors.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-concurrency-test.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-common.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="6303" opendate="2019-1-18 00:00:00" fixdate="2019-1-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Membership gets confused by multiple locators being specified by gfsh</summary>
      <description>I started a locator using gfsh and a gemfire.properties file that specified that locator.gfsh start locator --name=locator1 --properties-file=$PWD/gemfire.propertiesgemfire.properties:locators=trout.gemstone.com&amp;#91;30015&amp;#93;locator-wait-time=120jmx-manager-start=truejmx-manager-port=30016log-level=infostatistic-sampling-enabled=truestatistic-sample-rate=60000max-wait-time-reconnect=5000log-level=fine Log files show that the locator was given two addresses in its "locators" setting.  One was the address I had in my gemfire.properties file and the other was the same but using its numeric IPv4 address.locators=trout.gemstone.com&amp;#91;30015&amp;#93;,10.118.26.122&amp;#91;30015&amp;#93; Logs show that both of these addresses were contacted during startup and this caused the locator to take more time starting up.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.GMSUtil.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeaveJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6305" opendate="2019-1-22 00:00:00" fixdate="2019-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Switch off parallel mode for WindowsGfshDistributedTest CI jobs</summary>
      <description>The WindowsGfshDistributedTest jobs often fail with bind exceptions. As these jobs are not parallelized, this is probably due to them running in parallel.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug id="6306" opendate="2019-1-22 00:00:00" fixdate="2019-9-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Have the CreateRegionCommand call the internal Cluster Management service API to create the region with all the options</summary>
      <description>Currently the CreateRegionCommand handles all options supported by gfsh, but cluster management api createRegion call only supports name and type. We should add more option support to the internal api and then have the createRegionCommand directly call the api to do all the work.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.api.ClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionAttributesType.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionAttributesDataPolicy.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.realizers.RegionConfigRealizerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.realizers.ConfigurationRealizerFactoryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationMutatorFactoryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.RegionConfigTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.RegionConfigRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.ConfigurationRealizerFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationMutatorFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.domain.DeclarableTypeInstantiator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.util.RegionPath.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.UpdateCacheFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.RegionCreateFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.CliUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionAttributesImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.commands.CreateRegionCommandIntegrationTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.CreateRegionCommandDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.api.RegionAPIDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.MemberValidatorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.mutators.RegionConfigManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.MemberValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.RegionConfigManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementRestSecurityDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementDunitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6308" opendate="2019-1-22 00:00:00" fixdate="2019-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>start and status gfsh command output is missing line separators</summary>
      <description>Server and Locator start/status/stop gfsh command output is missing line separators.The output used to look like this:Server in /home/username/server4 on 192.0.2.0[40404] as server4 is currently online.Process ID: 49008Uptime: 2 minutes 4 secondsGeode Version: 1.7.0Java Version: 1.8.0_144Log File: /home/username/server4/server4.logJVM Arguments: But it now looks like this:Locator in /Users/klund/dev/gemfire4/give-odd-jar on 10.118.20.84[10334] as give-odd-jar is currently online.Process ID: 799Uptime: 6 secondsGeode Version: 0.0.0Java Version: 1.8.0_181Log File: /Users/klund/dev/gemfire4/give-odd-jar/give-odd-jar.logJVM Arguments: -Dgemfire.enable-cluster-configuration=true -Dgemfire.load-cluster-configuration-from-dir=false -Dgemfire.launcher.registerSignalHandlers=true -Djava.awt.headless=true -Dsun.rmi.dgc.server.gcInterval=9223372036854775806Class-Path: /Users/klund/dev/gemfire4/open/geode-assembly/build/install/apache-geode/lib/geode-core-0.0.0.jar:/Users/klund/dev/gemfire4/open/geode-assembly/build/install/apache-geode/lib/geode-dependencies.jarThe line separators should be restored for readability.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.AbstractLauncherServiceStateTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.AbstractLauncher.java</file>
    </fixedFiles>
  </bug>
  <bug id="6310" opendate="2019-1-22 00:00:00" fixdate="2019-2-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>upgrade classgraph version</summary>
      <description>Observed that file descriptor is rapidly increasing to a high value such 20K-30K during starting up a cacheserver process with embedded locator. Problem goes away when classgraph-4.0.6.jar is replaced with classgraph-4.6.7.jar.A previous attempt to update Geode's classgraph version (GEODE-5996) was reverted due to increased memory usage concerns. In latest classgraph, memory usage can now be controlled by limiting number of threads, so we should be able to more forward once again.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.deployment.FunctionScanner.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.util.ClasspathScanLoadHelper.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.CommandManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceService.java</file>
    </fixedFiles>
  </bug>
  <bug id="6314" opendate="2019-1-23 00:00:00" fixdate="2019-2-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI: Build version should only be rolled, and should always be rolled, at the Build step</summary>
      <description>Currently, the build ID is bumped also at publish as well as Build, and Build only bumps when it is successful. In its role as a single, meaningful identifier, it should always be rolled at Build, and only there.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="6319" opendate="2019-1-24 00:00:00" fixdate="2019-1-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide: Clarify that partitioned regions can be created dynamically</summary>
      <description>The section "Creating Regions Dynamically" states that the DynamicRegionFactory class cannot be used to dynamically create partitioned regions.https://geode.apache.org/docs/guide/18/developing/region_options/dynamic_region_creation.htmlThe doc should clarify that partitioned regions *can* be created dynamically, you just can't use DynamicRegionFactory to do it.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.cache.xml.html.md.erb</file>
      <file type="M">geode-docs.developing.region.options.dynamic.region.creation.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="6344" opendate="2019-1-31 00:00:00" fixdate="2019-1-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>should revert GEODE-1183 before a better fix</summary>
      <description>GEODE-1183 was introduced for a scenario that there're 2 cache-servers at the same jvm, the client will try to create 2 proxy to the server, but since it's the same proxy id, it would end up close/recreate forever. GEODE-1183 will reject an incoming create-proxy request if the server found there's an existing proxy with the same id and its socket is still connected. However, this fix caused some side effects. For example, if the client read time out, it requested the server to recreate the proxy, the server will reject this request and the client will never reconnect. This is due to that at the server side, it cannot determine it's a reconnect request or the same client requests to connect to the 2nd cache-server on the same jvm. There's a proposal to introduce a parameter at the client to fix it. However, before this new re-fix, we decided to revert the original GEODE-1183 to avoid its side-effect.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.Simple2CacheServerDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.CacheClientNotifierDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier.java</file>
    </fixedFiles>
  </bug>
  <bug id="6347" opendate="2019-1-31 00:00:00" fixdate="2019-2-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI failure in CacheXml81DUnitTest.testResourceManagerThresholds</summary>
      <description>This test has failed for the first time since changes to resource management.java.lang.AssertionError: Suspicious strings were written to the log during this run.Fix the strings or use IgnoredException.addIgnoredException to ignore.-----------------------------------------------------------------------Found suspect string in log4j at line 601&amp;#91;error 2019/01/31 09:20:43.510 UTC &lt;Test worker&gt; tid=25&amp;#93; Member: c26734d01750(1:loner):0:6cde35a3 above heap critical threshold. Event generated via notification.-----------------------------------------------------------------------Found suspect string in log4j at line 658&amp;#91;error 2019/01/31 09:20:43.639 UTC &lt;Test worker&gt; tid=25&amp;#93; Member: c26734d01750(1:loner):0:6cde35a3 above heap critical threshold. Event generated via notification. Test logs can be found here: http://files.apachegeode-ci.info/builds/apache-develop-main/1.9.0-SNAPSHOT.0389/test-results/distributedTest/1548929534/http://files.apachegeode-ci.info/builds/apache-develop-main/1.9.0-SNAPSHOT.0389/test-artifacts/1548929534/distributedtestfiles-OpenJDK8-1.9.0-SNAPSHOT.0389.tgz The relevant portion of the log is probably this bit:&amp;#91;info 2019/01/31 09:20:43.504 UTC &lt;Test worker&gt; tid=0x19&amp;#93; Initializing cache using file:/tmp/junit2767642211712670648/XML_8.1/ CacheXml81DUnitTest_testResourceManagerThresholds.xml:{{ &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;cache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns="http:// schema.pivotal.io/gemfire/cache" xsi:schemaLocation="http://schema.pivotal.io/gemfire/cache http://schema.pivotal.io/gemfire/cache/cache-8.1. xsd" version="8.1"&gt;}}{{ &lt;pdx/&gt;}}{{ &lt;function-service/&gt;}}{{ &lt;resource-manager critical-heap-percentage="90.0" eviction-heap-percentage="95.0"/&gt;}}{{ &lt;/cache&gt;}}&amp;#91;error 2019/01/31 09:20:43.510 UTC &lt;Test worker&gt; tid=0x19&amp;#93; Member: c26734d01750(1:loner):0:6cde35a3 above heap critical threshold. Event generated via notification.&amp;#91;info 2019/01/31 09:20:43.512 UTC &lt;Test worker&gt; tid=0x19&amp;#93; Overridding MemoryPoolMXBean heap threshold bytes 0 on pool PS Old Gen&amp;#91;error 2019/01/31 09:20:43.512 UTC &lt;Test worker&gt; tid=0x19&amp;#93; Cache initialization for GemFireCache&amp;#91;id = 1617366676; isClosing = false; isShutDownAll = false; created = Thu Jan 31 09:20:43 UTC 2019; server = false; copyOnRead = false; lockLease = 120; lockTimeout = 60&amp;#93; failed because: java.lang. IllegalArgumentException: Eviction percentage must be less than the critical percentage.&amp;#91;info 2019/01/31 09:20:43.513 UTC &lt;Test worker&gt; tid=0x19&amp;#93; GemFireCache&amp;#91;id = 1617366676; isClosing = true; isShutDownAll = false; created = Thu Jan 31 09:20:43 UTC 2019; server = false; copyOnRead = false; lockLease = 120; lockTimeout = 60&amp;#93;: Now closing.&amp;#91;error 2019/01/31 09:20:43.519 UTC &lt;Test worker&gt; tid=0x19&amp;#93; Eviction percentage must be less than the critical percentage.   </description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.control.HeapMemoryMonitor.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.cache30.CacheXmlTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="6364" opendate="2019-2-5 00:00:00" fixdate="2019-2-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Deploy of invalid jar file still writes file contents to config on locator</summary>
      <description>When deploying a jar (or multiple jars) and at least one has invalid content, the deployed files are still written to the locator and thus will still be included in the ClusterConfig.Partial jar deployments, such as this, should fail completely and not produce any ClusterConfig.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DeployCommand.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.configuration.ClusterConfigDeployJarDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6365" opendate="2019-2-5 00:00:00" fixdate="2019-2-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add server group support for JDBC List Mapping and Destroy Mapping Commands</summary>
      <description>As a Geode user, I want to specify which server group holds the region, so that I can add the JDBC mapping to that region.Given a jdbc-mapping exists for a Geode region on a server group, when I run list jdbc-mapping for that regionThen I can specify the server group with an option on the command line, so that the jdbc-mappings displayed are limited to the mappings in the specified server group.Given a jdbc-mapping exists for a Geode region on a server group, when I run destroy jdbc-mapping for that regionThen I can specify the server group with an option on the command line, so that the jdbc-mapping will only be destroyed if it is found in the specified group.This is a follow up to the story: https://issues.apache.org/jira/browse/GEODE-6273</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.DestroyRegionCommandTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DestroyRegionCommand.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.org.apache.geode.connectors.util.DescribeMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommandFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.main.resources.org.apache.geode.internal.sanctioned-geode-connectors-serializables.txt</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommandDunitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcDistributedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6373" opendate="2019-2-6 00:00:00" fixdate="2019-4-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Increase the timeout for benchmark tests in Ci</summary>
      <description>After the addition of function execution benchmarks, the timeout in the CI runs need to be increased as they will consume  more time than 2 hours.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="6442" opendate="2019-2-22 00:00:00" fixdate="2019-3-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Statistics numericId should default to PID and textId should default to Member Name</summary>
      <description>StatSampler should use PID if available and fall back to DistributedSystem ID if the PID is unavailable. This is used to help identify the OS and Process Statistics.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.process.ProcessUtils.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.statistics.StatisticsRegistryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.statistics.StatisticsImplTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.statistics.HostStatSamplerTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatisticsRegistry.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatisticsManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatisticsImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.HostStatSampler.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.AbstractStatisticsFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="6443" opendate="2019-2-22 00:00:00" fixdate="2019-3-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log all requests to REST ManagementService</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.web.xml</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.RegionConfigTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ManagementRequestLoggingDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6444" opendate="2019-2-22 00:00:00" fixdate="2019-5-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Store GC logs in files</summary>
      <description>Display GC logs using separate threads so that they are not blocked till the completion of the benchmark Also store the logs from GC into files.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.run.benchmarks.sh</file>
    </fixedFiles>
  </bug>
  <bug id="6449" opendate="2019-2-25 00:00:00" fixdate="2019-3-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Build and BuildSrc should not rely S3 to resolve dependencies</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.build.gradle</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="6457" opendate="2019-2-26 00:00:00" fixdate="2019-2-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh create jdbc-mapping should find the pdx class if deployed by gfsh</summary>
      <description>Currently, gfsh create jdbc-mapping only finds the PDX class in the classpath. It does not search the files deployed using 'gfsh deploy'. It should search the files deployed by gfsh. </description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6459" opendate="2019-2-27 00:00:00" fixdate="2019-3-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add option to `create jdbc-mapping` where user can specify the file containing the PDX class</summary>
      <description>*As a* user*I want to* tell gfsh with `create jdbc-mapping` the file containing the PDX class for my domain object*so that I can* create the mapping without deploying the domain class to the server.Use gfsh option name: --pdx-class-file</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.util.internal.MappingConstants.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6461" opendate="2019-2-27 00:00:00" fixdate="2019-1-27 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Jdbc should throw exception if a mapped table deviates from the mapping</summary>
      <description>When a Jdbc Mapping is created it maps values it maps values to the table as it exists during mapping creation. If the table has columns added, removed, or modified then we can't gaurentee the mapping is still correct. Attempting to load a mapping which is out of date should throw an exception prompting the user to delete and recreate their mapping with the new table format.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlToPdxInstanceTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlHandlerTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.RegionMappingTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.main.resources.org.apache.geode.internal.sanctioned-geode-connectors-serializables.txt</file>
      <file type="M">geode-connectors.src.main.resources.META-INF.schemas.geode.apache.org.schema.jdbc.jdbc-1.0.xsd</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.util.internal.MappingConstants.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.RegionMappingConfiguration.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlToPdxInstance.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlHandler.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceImpl.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.JdbcConnectorService.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommand.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.PostgresJdbcWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.PostgresJdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.MySqlJdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcDistributedTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcAsyncWriterIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6464" opendate="2019-2-27 00:00:00" fixdate="2019-2-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pin OpenSSH in Windows images to version 7.7.2.1</summary>
      <description>The Windows images were recently rebuilt and picked up a new version of OpenSSH (7.9.0.1). It appears that this may be causing build issues as the Windows test runs are failing. Although the gradle call appears to complete, the ssh call, that launches the build, does not exit properly and the job times out.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.images.google-windows-geode-builder.windows-packer.json</file>
    </fixedFiles>
  </bug>
  <bug id="6634" opendate="2019-4-11 00:00:00" fixdate="2019-6-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix parallel option for repeatTest</summary>
      <description>Currently both -parallel and -no-parallel options are being used for stress tests.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.repeat-new-tests.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug id="6653" opendate="2019-4-15 00:00:00" fixdate="2019-5-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gfsh command output trimed</summary>
      <description>While executing query on entry with a large key, gfsh automatically trims the columns width so it can fit in available width of the terminal.gfsh&gt;query --query="select * from /example-region"Result : trueLimit  : 100Rows   : 1Result------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut ali.. In a documentation state following:gfsh commands such as query produce output with wide columns that may become misaligned and require manual reformatting to view the output. If the output cannot fit in the available width of the terminal, gfsh automatically trims the columns widths to fit. You can disable this behavior by setting the gfsh environment variable GFSH.TRIMSCRWIDTH to false.But this is wrong described. Only way to disable this behavior is setting gfsh environment variable APP_RESULT_VIEWER to an arbitrary value except 'external' as it enables viewing of the output using UNIX less command.  </description>
      <version>1.7.0,1.8.0,1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.configuring.gfsh.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="6654" opendate="2019-4-15 00:00:00" fixdate="2019-6-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Stats documentation issues</summary>
      <description>Hi,There is no information in documentation (https://geode.apache.org/docs/guide/18/reference/statistics_list.html) about the following statistics: Region Entry Eviction - Heap based eviction (HeapLRUStatistics) Thread stats (VMThreadStats) Client-to-Server communication (ClientSendStats) Disk Store stats (DiskStoreStatistics) There are also these errors in statistics names (doc not aligned with code): "Locator (LocatorStatistics)" should be "Locator (LocatorStats)" "Region Entry Eviction – Size-based (LRUStatistics)" should be "Region Entry Eviction – Size-based (MemLRUStatistics)" "Continuous Querying (CQStatistics)" should be "Continuous Querying (CqQueryStats)" "Gateway Queue (GatewayStatistics)" should be "Gateway Sender statistics (GatewaySenderStatistics)" "Function Execution (FunctionServiceStatistics)" should be "Function Execution (FunctionStatistics)" Also, I cannot find references in the code about the "Delta Propagation (DeltaPropagationStatistics)" described in the documentation</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.statistics.list.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="666" opendate="2015-12-14 00:00:00" fixdate="2015-12-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update awaitility dependency from 1.6.5 to 1.7.0</summary>
      <description>com.jayway.awaitility:awaitility releases are now up to 1.7.0. We should update our dependency from 1.6.5 to 1.7.0.Awaitility is used in IntegrationTests and DistributedTests for awaiting and asserting on asynchronous conditions.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.dependency-versions.properties</file>
    </fixedFiles>
  </bug>
  <bug id="6664" opendate="2019-4-16 00:00:00" fixdate="2019-4-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI failure: org.apache.geode.ClusterCommunicationsDUnitTest.receiveBigResponse</summary>
      <description>org.apache.geode.ClusterCommunicationsDUnitTest &gt; receiveBigResponse&amp;#91;UNSHARED_CONNECTIONS_WITH_SSL&amp;#93; FAILED java.lang.AssertionError: Suspicious strings were written to the log during this run. Fix the strings or use IgnoredException.addIgnoredException to ignore. ----------------------------------------------------------------------- Found suspect string in log4j at line 1681 &amp;#91;fatal 2019/04/15 21:34:59.470 UTC &lt;awaitility-thread&gt; tid=174&amp;#93; ack read exception java.lang.IllegalArgumentException at java.nio.Buffer.position(Buffer.java:244) at org.apache.geode.internal.tcp.MsgReader.readChunk(MsgReader.java:121) at org.apache.geode.internal.tcp.Connection.readAck(Connection.java:2853) at org.apache.geode.distributed.internal.direct.DirectChannel.readAcks(DirectChannel.java:476) at org.apache.geode.distributed.internal.direct.DirectChannel.sendToMany(DirectChannel.java:420) at org.apache.geode.distributed.internal.direct.DirectChannel.sendToOne(DirectChannel.java:241) at org.apache.geode.distributed.internal.direct.DirectChannel.send(DirectChannel.java:595) at org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager.directChannelSend(GMSMembershipManager.java:1710) at org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager.send(GMSMembershipManager.java:1891) at org.apache.geode.distributed.internal.ClusterDistributionManager.sendViaMembershipManager(ClusterDistributionManager.java:2878) at org.apache.geode.distributed.internal.ClusterDistributionManager.sendOutgoing(ClusterDistributionManager.java:2798) at org.apache.geode.distributed.internal.ClusterDistributionManager.sendMessage(ClusterDistributionManager.java:2837) at org.apache.geode.distributed.internal.ClusterDistributionManager.putOutgoing(ClusterDistributionManager.java:1531) at org.apache.geode.ClusterCommunicationsDUnitTest$SerialAckedMessageWithBigReply.send(ClusterCommunicationsDUnitTest.java:354) at org.apache.geode.ClusterCommunicationsDUnitTest.lambda$null$0(ClusterCommunicationsDUnitTest.java:192) at org.awaitility.core.CallableCondition$ConditionEvaluationWrapper.eval(CallableCondition.java:100) at org.awaitility.core.ConditionAwaiter$ConditionPoller.call(ConditionAwaiter.java:192) at org.awaitility.core.ConditionAwaiter$ConditionPoller.call(ConditionAwaiter.java:179) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)============== Test Results Website ================http://s3proxy.gemfire.pivotal.io/gemfire-test-results/9.8/distributedTest/1555373762/index.html=========================================To download the test artifacts from this job, execute the following command after the job has completed: aws s3 cp s3://gemfire-build-artifacts/9.8/9.8.0-build.16/1555373762/distributedtestfiles-9.8.0-build.16.tgz .</description>
      <version>1.9.0</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.NioSslEngineTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.NioSslEngine.java</file>
    </fixedFiles>
  </bug>
  <bug id="6672" opendate="2019-4-18 00:00:00" fixdate="2019-5-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>when create disk-store in gfsh , the folder path in cluster-config file is not same as the inputed value</summary>
      <description>in the latest build. start locator start server "g1-s1" executed gfsh to create disk-storecreate disk-store --name=ds1 --dir=./data/persist4. in the file system , we can find:g1-s1       ---server folder |-----data       |       --------persist5. start another server "g2-s2", in the file system, we can find:g2-s2       ---server folder      |      --------persistthe folder "data" disappeared. 6. and when we executed "export cluster-configuration", we can find:cluster.xml:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;&lt;cache version="1.0" xsi:schemaLocation="http://geode.apache.org/schema/cache http://geode.apache.org/schema/cache/cache-1.0.xsd http://geode.apache.org/schema/lucene http://geode.apache.org/schema/lucene/lucene-1.0.xsd http://geode.apache.org/schema/jdbc http://geode.apache.org/schema/jdbc/jdbc-1.0.xsd" xmlns="http://geode.apache.org/schema/cache" xmlns:lucene="http://geode.apache.org/schema/lucene" xmlns:jdbc="http://geode.apache.org/schema/jdbc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt; &lt;disk-store name="ds1" auto-compact="true" compaction-threshold="50" allow-force-compaction="false" max-oplog-size="1024" time-interval="1000" write-buffer-size="32768" queue-size="0" disk-usage-warning-percentage="90" disk-usage-critical-percentage="99"&gt;  &lt;disk-dirs&gt; &lt;disk-dir dir-size="2147483647"&gt;persist&lt;/disk-dir&gt;   &lt;/disk-dirs&gt; &lt;/disk-store&gt;&lt;/cache&gt;so the configuration stored in Cluster configuration Service is not as same as we inputed.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateDiskStoreCommandTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.DiskStoreType.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.RegionConfigTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateDiskStoreCommand.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DiskStoreCommandsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6677" opendate="2019-4-18 00:00:00" fixdate="2019-6-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Function with timeout, isHA==true and retries can lead to issues</summary>
      <description>A user can set `isHA() == true`, retries == -1, and `CLIENT_FUNCTION_TIMEOUT`.The timeout is currently implemented as per attempt.   The default is 10000 ms.The default for retries is -1.With the default of -1 Geode will continually attempt to call the function and ignore the expected behavior.    The expected behavior with respect to the default of -1 that means each server will be retried once and the system should throw an exception.From query the exception that is thrown is for system with 2 servers when the query exceeds the time out and retry of -1:Exception in thread "main" org.apache.geode.cache.client.ServerConnectivityException: Pool unexpected socket timed out on client connection=Pooled Connection to voltron:64615: Connection&amp;#91;voltron:64615&amp;#93;@1279740095 attempt=2). Server unreachable: could not connect after 2 attempts </description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.client.internal.ExecuteRegionFunctionOpTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.SingleHopClientExecutor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.RemoveAllOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.PutAllOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.GetAllOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ExecuteRegionFunctionSingleHopOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ExecuteRegionFunctionOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ExecuteFunctionOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.execute.Execution.java</file>
    </fixedFiles>
  </bug>
  <bug id="6717" opendate="2019-4-29 00:00:00" fixdate="2019-8-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NotAuthorizedException during JMX scraping</summary>
      <description>Geode shows the following log and the JMX statistics gathering fails:[info 2019/04/29 15:02:39.609 CEST locator &lt;RMI TCP Connection(23)-127.0.0.1&gt; tid=0x80] NotAuthorizedException: null not authorized for CLUSTER:READTo reproduce this start geode with access control enabled and start JMX scraping (e.g. with jmx-exporter) from 2 processes using the same credentials at the same time. What happens is that the first RMI TCP connection is created, the user is authenticated and an Apache Shiro session is created. If the second process starts collecting JMX info while the first one is still running, his RMI TCP Connection will not create a new session, but attach to the existing one. Once the first connection ends, the session is stopped, the cache emptied and the second connection is left trying to gather info without a valid session and credentials info. As I saw this is how Apache Shiro works:To create a session it use method getSession(boolean create). In case there is already an existing session associated with the same Subject, it is returned and create argument is ignored. If no session exist and create is true, new session will be created, associated with that Subject and then returned. Workaround for this is checking how many processes are connected to the session, and logout only if this is the latest process connected on it. </description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.MBeanServerConnectionRule.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.security.shiro.JMXShiroAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="6719" opendate="2019-4-29 00:00:00" fixdate="2019-5-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>App servers using custom DEFAULT diskstores should be able to restart</summary>
      <description>Issue: Start servers with DEFAULT diskstores with custom directory location other than '.' and do not set the diskstore in the region attributes tag in the cache xml. Since it is named DEFAULT, it should automatically link itself to the region. Start the app server  Stop the app server Start the app server. This causes a failure as app server requests it create the default diskstore at . but the default diskstore was already created at the custom location.Solution: If the existing region and the requested region both use the default disk store then the existing diskstore properties with take precedence over the requested ones. The requested disktore properties will be ignored if there is a default diskstore already present.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.RegionAttributesCreation.java</file>
      <file type="M">extensions.geode-modules.src.main.java.org.apache.geode.modules.util.RegionHelper.java</file>
      <file type="M">extensions.geode-modules.src.main.java.org.apache.geode.modules.util.CreateRegionFunction.java</file>
      <file type="M">extensions.geode-modules.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="6721" opendate="2019-4-30 00:00:00" fixdate="2019-6-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Start locator with secondary ip will always end up using the primary ip address of the host</summary>
      <description></description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.StartLocatorCommand.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.cli.commands.StartLocatorCommandIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6749" opendate="2019-5-8 00:00:00" fixdate="2019-6-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Prevent gfsh from creating duplicate named disk stores</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateDiskStoreCommandTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateDiskStoreCommand.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DiskStoreCommandsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6750" opendate="2019-5-8 00:00:00" fixdate="2019-5-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Clean up Swagger UI model for Management API</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionAttributesType.java</file>
    </fixedFiles>
  </bug>
  <bug id="6824" opendate="2019-5-31 00:00:00" fixdate="2019-6-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI Failure: BackupIntegrationTest</summary>
      <description>On Windows 2016, this test fails with errors like this:org.apache.geode.internal.cache.backup.BackupIntegrationTest &gt; testIncrementalBackupAndRecover FAILED java.lang.AssertionError: Restore scripts [] expected:&lt;1&gt; but was:&lt;0&gt; at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.failNotEquals(Assert.java:834) at org.junit.Assert.assertEquals(Assert.java:645) at org.apache.geode.internal.cache.backup.BackupIntegrationTest.restoreBackup(BackupIntegrationTest.java:443) at org.apache.geode.internal.cache.backup.BackupIntegrationTest.testIncrementalBackupAndRecover(BackupIntegrationTest.java:235)The logs contain more indicators of what's going wrong:[warn 2019/05/31 10:08:47.953 GMT &lt;BackupServiceThread1&gt; tid=0xf5] Unable to delete temporary directory created during backup, C:\Users\geode\AppData\Local\Temp\backup_15592973278755095066745076642151java.io.IOException: Unable to delete file: C:\Users\geode\AppData\Local\Temp\junit2122524286779777274\disk_Dir2\backupTemp_1559297327875\BACKUPdiskStore_2.crf at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:2400) at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1721) at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1617) at org.apache.geode.internal.cache.backup.TemporaryBackupFiles.deleteDirectory(TemporaryBackupFiles.java:133) at org.apache.geode.internal.cache.backup.TemporaryBackupFiles.cleanupFiles(TemporaryBackupFiles.java:126) at org.apache.geode.internal.cache.backup.BackupTask.cleanup(BackupTask.java:183) at org.apache.geode.internal.cache.backup.BackupTask.doBackup(BackupTask.java:125) at org.apache.geode.internal.cache.backup.BackupTask.backup(BackupTask.java:82) at org.apache.geode.internal.cache.backup.BackupService.lambda$prepareBackup$0(BackupService.java:62) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Way under the covers, during a backup, we create hard links from the original file to a backup file (if hard linking fails then there is a fallback to simply copy the file).My guess is that the semantics of hard links may have changed between Windows versions (which is why we're suddenly seeing this on Windows 2016).</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.BackupFileCopier.java</file>
    </fixedFiles>
  </bug>
  <bug id="6827" opendate="2019-6-4 00:00:00" fixdate="2019-7-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Benchmark CI: Make Windows jobs not gating for benchmarks</summary>
      <description>In Geode CI, the Benchmark job is blocked by the successful completion of the Windows tests. Since Benchmark runs on linux and the Windows tests still frequently fail with timing issues, it does not make sense for these tests to be gating to Benchmark runs. When they are gating, we do not get frequent runs of the benchmark task.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="6895" opendate="2019-6-20 00:00:00" fixdate="2019-9-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Change v2 REST API context to &amp;#39;management/v2&amp;#39;</summary>
      <description>Change our endpoint from geode-management/v2 to management/v2</description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.web.xml</file>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.geode-management-servlet.xml</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.PdxManagementTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.MemberManagementServiceRestIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.JsonSerializationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.GeneralManagementServiceRestIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.GatewayManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementSecurityRestDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.MemberManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ConfigurePDXDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ClientClusterManagementServiceDUnitTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.PlainClusterManagementServiceBuilder.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalLocator.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.rest.SwaggerManagementVerificationIntegrationTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.DisabledClusterConfigTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementRestSecurityDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.GeodeManagementFeatureFlagDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClusterManagementLocatorReconnectDunitTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.internal.rest.RegionManagementAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6897" opendate="2019-6-20 00:00:00" fixdate="2019-7-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create a REST v2 endpoint to do rebalance</summary>
      <description>For the first iteration, we are:1. make it an async request2. have an endpoint to check status of this request3. keep the rebalance operation status in memory only4. Can do one rebalance at a time, ignore the concurrent rebalance request5. do not implement cancel operation yet.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementListResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.MemberConfig.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-core.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
      <file type="M">geode-web-management.src.main.webapp.docs.index.html</file>
      <file type="M">geode-web-management.src.main.resources.swagger-management.properties</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.swagger.SwaggerConfig.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.ManagementControllerAdvice.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-api.src.main.resources.swagger.properties</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-management.src.test.script.list-management-url.sh</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.api.ClusterManagementOperationStatusResultTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.api.ClusterManagementOperationResultTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.runtime.RuntimeRegionInfo.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.runtime.MemberInformation.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.runtime.GatewayReceiverInfo.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.runtime.CacheServerInfo.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClusterManagementOperationStatusResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Pdx.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.RestfulEndpoint.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.RealizationResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.JsonSerializable.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.CorrespondWith.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ConfigurationResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementOperationResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementOperation.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.CompletableFutureProxy.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RebalanceOperationController.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.operation.OperationManagerTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.resources.ManagementClientCreateRegion.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.client.CreateRegionWithDiskstoreAndSecurityDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClientClusterManagementServiceDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClientClusterManagementSSLTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClusterManagementLocatorReconnectDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClusterManagementServiceOnServerTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.GatewayReceiverManagementDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListIndexManagementDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListRegionManagementDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ManagementRequestLoggingDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.MemberManagementServiceDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementDunitTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.api.RegionAPIDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.ClusterManagementResultTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommandTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.ClusterManagementResultAssert.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.runtime.RuntimeInfo.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ClientClusterManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ConfigurePDXDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.MemberManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.GatewayManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.JsonSerializationTest.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.GatewayManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceIntegrationTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementRestSecurityDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementSecurityRestDUnitTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.operation.RebalanceOperation.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.ClusterManagementSecurityRestIntegrationTest.java</file>
      <file type="M">geode-assembly.geode-assembly-test.src.main.java.org.apache.geode.test.junit.rules.HttpResponseAssert.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ServerRestartTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.rest.SwaggerManagementVerificationIntegrationTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.rest.internal.web.SwaggerVerificationIntegrationTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.RebalanceCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.operation.OperationHistoryManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.operation.OperationManager.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.operation.OperationHistoryManagerTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.ClusterManagementListResultAssert.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.CacheElement.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.GatewayReceiverConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="6899" opendate="2019-6-22 00:00:00" fixdate="2019-6-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>retried client should set last try&amp;#39;s version tag if found</summary>
      <description>client does a put to serverA with replicated region, serverA distributed to B and C, before the distribution arrived at C, A is killed. Then client could retry to C. C noticed this is a retry operation, it will search for previous try's version tag. The found tag should be set into the current event. Interesting thing is:I found other operations, such as PutIfAbsent and create, they both did that. But replace (i.e. put) did not. Another issue is: GEODE-6802 introduce a synchronizeIfNotScheduled(). But there could be a race that membershipListener is also scheduling. The fix is to pause 1 second before calling the newly introduced synchronizeIfNotScheduled().</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.DistributedRegionJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InitialImageOperation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DistributedRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="6954" opendate="2019-7-10 00:00:00" fixdate="2019-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GatewaySenderMXBean wrongly reports state</summary>
      <description>After creating gateways senders and receivers between two geode clusters replications is established. After restart gateway receiver, list gateways command shows that everything is connected and replication works.But when checking gateway sender state over JMX with GatewaySenderMXBean and checking isConnected() I got false, but should be true as it is connected.Steps to reproduce issue: create two sites (geode-examples/wan) check GW sender stats with jconsole (Connected = true) stop GW receiver on the remote site (Connected = false) put some entry (it will be in the queue waiting for connection) start GW receiver on the remote site (Connected = false) replication is established, the event is processed to the remote site (Connected = false, should be true)</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.management.WANManagementDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.GatewaySenderMBeanBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.serial.ConcurrentSerialGatewaySenderEventProcessor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ConcurrentParallelGatewaySenderEventProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="6966" opendate="2019-7-16 00:00:00" fixdate="2019-7-16 01:00:00" resolution="Abandoned">
    <buginformation>
      <summary>to decouple CF CLI with PCC/Geode - generate table from json based on customer input</summary>
      <description>two points to spike: generate table from json object(1 layer json,  multi layer json) generate table columns based on customer input (scenarios: input match, input partly match, input dis-match)</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.ManagementControllerAdvice.java</file>
    </fixedFiles>
  </bug>
  <bug id="6998" opendate="2019-7-22 00:00:00" fixdate="2019-7-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE during update of index due to GII</summary>
      <description>On REPLICATE_PERSISTENT region with defined indexes, in configuration with 2 servers, continues traffic (put, delete) is run. After one server is restarted, NullPointerException occurres.</description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.resources.org.apache.geode.cache.query.dunit.PersistentPartitionWithIndex.xml</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.PartitionedRegionCompactRangeIndexDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.index.CompactRangeIndex.java</file>
    </fixedFiles>
  </bug>
  <bug id="7" opendate="2015-5-7 00:00:00" fixdate="2015-7-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Off heap data storage</summary>
      <description>This is a feature that has been under development for GemFire but was not part of the initial drop of code for geode.Geode stores a lot of data in the java heap. With very large heap sizes, this can lead to performance impacts due to garbage collection time.Rather than storing data in the java heap, store data in native memory managed by Geode.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.build.gradle</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ShowMissingDiskStoreCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.internal.rest.StandaloneClientManagementAPIAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7036" opendate="2019-7-31 00:00:00" fixdate="2019-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE when previous coordinator is returning to make quorum</summary>
      <description>In configuration with 2 locators and 2 servers, first restart coordinator and non-lead server. After restarted members are up, restart remaining members. At moment when currently restarted locator is returning to quorum, NPE occurs in previous-restarted locator.</description>
      <version>1.9.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.distributed.internal.RestartOfMemberDistributedTest.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.dunit.rules.ClusterStartupRule.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalLocator.java</file>
    </fixedFiles>
  </bug>
  <bug id="7037" opendate="2019-7-31 00:00:00" fixdate="2019-7-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>MAX_QUERY_EXECUTION_TIME is incorrectly shown in docs</summary>
      <description>Link:https://geode.apache.org/docs/guide/19/developing/query_additional/query_timeout.htmlText:_"Timeouts for Long-Running QueriesGemFire can monitor and throw an exception when a query runs longer than a configured amount of time. This feature is enabled by setting the critical-heap-percentage attribute which detects that the JVM has too little heap memory.The default query timeout is five hours. Set a different amount of time, in milliseconds, by specifying the system variable gemfire.cache.MAX_QUERY_EXECUTION_TIME. A value of -1 explicitly disables the timeout.When enabled, a query that runs longer than the configured timeout will be cancelled such that it does not finish, and GemFire throws a QueryExecutionTimeoutException."_The above is wrong. The parameter is case sensitive and it should be: gemfire.Cache.MAX_QUERY_EXECUTION_TIME with an upper case C.This was tested and checked in the code:_public static int MAX_QUERY_EXECUTION_TIME = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "Cache.MAX_QUERY_EXECUTION_TIME", -1);_So using gemfire.cache.MAX_QUERY_EXECUTION_TIME will not change the time out. </description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.additional.query.timeout.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7038" opendate="2019-7-31 00:00:00" fixdate="2019-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>After auto-reconnect a server&amp;#39;s multicat communications aren&amp;#39;t working correctly</summary>
      <description>This was observed in an server having multicast enabled on a Region.  The server went into a GC pause and was kicked out of the cluster.  After auto-reconnecting all of the servers were requested to shut down and they all hung on destroy-region message responses.  Statistics showed constant multicast retransmission requests but no retransmissions being sent.When a Region is configured to use multicast all of its cache operation messages are multicast, including a destroy-region message.Some time ago we decided to stop sending Join Request Responses during discovery.  These messages were responsible for carrying the JGroups multicast message digest so that a joining member could install this digest into its multicast protocol.  Today these messages are only sent if a UDP Diffie-Hellman algorithm has been specified.  We need to also ensure that we send these messages if multicast is enabled. </description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.ServiceConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.messenger.JGroupsMessenger.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.messages.JoinResponseMessage.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.fd.GMSHealthMonitor.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.DistributedMulticastRegionDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7039" opendate="2019-8-1 00:00:00" fixdate="2019-9-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Server recovery severely degrades client read traffic (no SingleHop no TX) on redundant partitioned persistent regions</summary>
      <description>Client not using single hop nor transactions is experiencing severe throttling from the cluster when getting data from a partitioned persistent region while server hosting one of the redundant buckets is recovering (in the process of image recovery). Get operation that have not landed on a server hosting the bucket will be proxied to other members that do have the bucket in a random fashion. This random picking has the nasty consequence that chosen server might be the one recovering now and the bucket is not yet ready (BucketNotFoundException), which means local server will handle ForceReattemptException by sleeping 100ms before another (random) attempt. This sleeping is devasteting for throughput observed by the client.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketAdvisor.java</file>
    </fixedFiles>
  </bug>
  <bug id="7050" opendate="2019-8-6 00:00:00" fixdate="2019-8-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log4jAgent should avoid casting non-log4j loggers</summary>
      <description>Users should be able to use SLF4J API with Geode even when log4j-core is in the class path and the Geode log4j appenders are being used.Log4jAgent assumes that all Loggers are Log4J loggers. This can result in a ClassCastException when encountering an instance of SLF4JLogger.Caused by: java.lang.ClassCastException: org.apache.logging.slf4j.SLF4JLogger cannot be cast to org.apache.logging.log4j.core.Logger at org.apache.geode.internal.logging.log4j.Log4jAgent.getRootLoggerContext(Log4jAgent.java:91) at org.apache.geode.internal.logging.log4j.Log4jAgent.getConfiguration(Log4jAgent.java:95) at org.apache.geode.internal.logging.log4j.Log4jAgent.isUsingGemFireDefaultConfig(Log4jAgent.java:80) at org.apache.geode.internal.logging.log4j.Log4jAgent.shouldUpdateLogLevels(Log4jAgent.java:129) at org.apache.geode.internal.logging.log4j.Log4jAgent.configure(Log4jAgent.java:107) at org.apache.geode.internal.logging.Configuration.configChanged(Configuration.java:152) at org.apache.geode.internal.logging.Configuration.initialize(Configuration.java:141) at org.apache.geode.internal.logging.LoggingSession.createSession(LoggingSession.java:65) at org.apache.geode.distributed.internal.InternalDistributedSystem.initialize(InternalDistributedSystem.java:762) at org.apache.geode.distributed.internal.InternalDistributedSystem.newInstance(InternalDistributedSystem.java:446) at org.apache.geode.distributed.internal.InternalDistributedSystem.newInstance(InternalDistributedSystem.java:432) at org.apache.geode.distributed.internal.InternalDistributedSystem.connectInternal(InternalDistributedSystem.java:257) at org.apache.geode.distributed.DistributedSystem.connect(DistributedSystem.java:164) at org.apache.geode.cache.client.ClientCacheFactory.basicCreate(ClientCacheFactory.java:243) at org.apache.geode.cache.client.ClientCacheFactory.create(ClientCacheFactory.java:214) at org.springframework.data.gemfire.client.ClientCacheFactoryBean.createCache(ClientCacheFactoryBean.java:391) at org.springframework.data.gemfire.CacheFactoryBean.resolveCache(CacheFactoryBean.java:325) at org.springframework.data.gemfire.CacheFactoryBean.init(CacheFactoryBean.java:269) ... 107 more</description>
      <version>1.9.0,1.10.0</version>
      <fixedVersion>1.9.1,1.10.0,1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.logging.ProviderAgentLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="7058" opendate="2019-8-7 00:00:00" fixdate="2019-8-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log4j-core dependency should be optional in geode-core</summary>
      <description>This change depends on all commits for GEODE-2644 and GEODE-6122.</description>
      <version>1.9.0,1.10.0</version>
      <fixedVersion>1.9.1,1.10.0</fixedVersion>
      <type>Wish</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7066" opendate="2019-8-9 00:00:00" fixdate="2019-8-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Events can be lost in a gateway batch containing duplicate non-conflatable events with conflation enabled</summary>
      <description>If a batch contains duplicate CREATE and DESTROY events on key 1736 like below and conflation is enabled, the earlier events will be overwritten by the later events.GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6072];operation=CREATE;region=/SESSIONS;key=6079],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6073];operation=UPDATE;region=/SESSIONS;key=6079],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|5;sequenceID=6009];operation=CREATE;region=/SESSIONS;key=1736],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6074];operation=DESTROY;region=/SESSIONS;key=6079],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|5;sequenceID=6011];operation=DESTROY;region=/SESSIONS;key=1736],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6087];operation=CREATE;region=/SESSIONS;key=1736],GatewaySenderEventImpl[id=EventID[id=31bytes;threadID=0x30004|6;sequenceID=6089];operation=DESTROY;region=/SESSIONS;key=1736]The batch will look like this after conflation:GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6072];operation=CREATE;region=/SESSIONS;key=6079], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6073];operation=UPDATE;region=/SESSIONS;key=6079], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6087];operation=CREATE;region=/SESSIONS;key=1736], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6074];operation=DESTROY;region=/SESSIONS;key=6079], GatewaySenderEventImpl[id=EventID[id=31 bytes;threadID=0x30004|6;sequenceID=6089];operation=DESTROY;region=/SESSIONS;key=1736]All the events from threadID=0x30004|5 are gone.</description>
      <version>1.9.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.serial.SerialGatewaySenderEventProcessorJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderEventProcessorJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.AbstractGatewaySenderEventProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="7067" opendate="2019-8-9 00:00:00" fixdate="2019-9-9 01:00:00" resolution="Not A Problem">
    <buginformation>
      <summary>Release CI tests wrong branch in benchmark</summary>
      <description>The branch tested in the 1.10.0 release pipeline is still pointing at develop, and should be updated to point at apache/geode:release/1.10.0.The release branch should be compared to the most recent high watermark. This is because the performance of the previous release is significantly lower than when the 1.10.0 release branch was cut. In order to detect any degradations in performance that have occurred since the release branch was cut, we should compare the current release candidate with the commit previously determined to be the stable best performance achieved by Geode, in all tests, since the previous release. This was a commit on develop, prior to where the 1.10.0 release branch was cut, and is marked by the tag develop/highwater.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7074" opendate="2019-8-12 00:00:00" fixdate="2019-12-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>improve Cluster Management Rest api Swagger documentation</summary>
      <description>the api operation names the json request/response wording changes. If you do a POST on the "pdx" endpoint and give it a bad json input it returns 400 Error: Bad Request but this in not documented in swagger (swagger only mentions: 200, 201, 401, 403, 404, and 500).The 400 returns the following json output:{"statusCode": "ILLEGAL_ARGUMENT","statusMessage": "JSON parse error: Unexpected end-of-input: expected close marker for Object (start marker at [Source: (PushbackInputStream); line: 1, column: 1]); nested exception is com.fasterxml.jackson.core.io.JsonEOFException: Unexpected end-of-input: expected close marker for Object (start marker at [Source: (PushbackInputStream); line: 1, column: 1])\n at [Source: (PushbackInputStream); line: 6, column: 103]."} Swagger will show example json docs and it always shows "statusCode" to be "ILLEGAL_ARGUMENT".I think this is because it is the first enum value. If we changed "OK" to be the first the swagger examples would be better. hide "group, groups, " for config pdx from Swagger docs. </description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.AbstractConfiguration.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementResult.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RebalanceOperationController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.PingManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.PdxManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.GatewayManagementController.java</file>
    </fixedFiles>
  </bug>
  <bug id="7075" opendate="2019-8-12 00:00:00" fixdate="2019-9-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>"class" field should not be part of json results</summary>
      <description> For REST API V2 for management, Most all of the rest api results that describe something end up having a "class" field with a value that shows the java class that implemented this json doc. This seems like an implementation detail that should be ignored when creating the json doc. For and example see MemberInformation and MemberConfig when you hit the "members" endpoint.TODO hide for REST CALL show it for JAVA call</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.ManagementControllerAdvice.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceIntegrationTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.CompletableFutureProxy.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
    </fixedFiles>
  </bug>
  <bug id="7077" opendate="2019-8-12 00:00:00" fixdate="2019-12-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>POST pdx can not update the pdx config when a server is running</summary>
      <description>For REST API V2 for management, I had one locator and one server. I did a post pdx and it worked. I then tried doing it again and it failed like so:409 Error: Conflict{"statusCode": "ENTITY_EXISTS","statusMessage": "Pdx 'PDX' already exists on member(s) server1."}Note that "409" is not documented in swagger.I would expect to be able to update the pdx config with the same type of message I get on a create (that if a server is running it needs to be restarted).If I stopped server1 then the POST worked with a 201:{"statusCode": "OK","statusMessage": "Successfully updated configuration for cluster.","uri": "/management/experimental/configurations/pdx"}I think POST pdx create and update should be consistent with each other. They should both either force you to stop a running server before you can do the op, or they should both support being done when a server is running.TODO update the method to be put from post, the response will be 200 when everything runs well</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.PdxManagementController.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ConfigurePDXDUnitTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.AbstractConfiguration.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.MemberValidatorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.MemberValidator.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.GatewayReceiverManagementDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7079" opendate="2019-8-12 00:00:00" fixdate="2019-8-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE Upon Restart When Using Asynchronous Event Distribution &amp; Conflation</summary>
      <description>The following combination of features cannot be safely configured when using pure Geode Java API: Replicated Region. Serial Gateway Sender or Serial Asynchronous Event Queue. Serial Gateway Sender / Serial Asynchronous Event Queue is Persistent. Conflation is Enabled for the Serial Gateway Sender / Serial Asynchronous Event Queue.The problem is that, after a restart, events left-over in the persistent queue begin processing before their source Region is instantiated, causing a NullPointerExceptions while executing the conflation logic.The Region is only required because internally we need its name, but the name itself is already stored within the actual event so it should be safe to replace gsEvent.getRegion().getFullPath() by gsEvent.getRegionToConflate() or gsEvent.getRegionPath().</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.serial.SerialWANConflationDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderEventProcessorJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.AbstractGatewaySenderEventProcessor.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.wan.asyncqueue.AsyncEventListenerDistributedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="708" opendate="2015-12-21 00:00:00" fixdate="2015-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Need the stats for Geode membership health monitor</summary>
      <description>Click to add description</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.fd.GMSHealthMonitorJUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.gms.fd.GMSHealthMonitor.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.LonerDistributionManager.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.DMStats.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.DistributionStats.java</file>
    </fixedFiles>
  </bug>
  <bug id="7088" opendate="2019-8-14 00:00:00" fixdate="2019-8-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Possible ConcurrentModificationException while client queue image is copied</summary>
      <description>The following corner case scenario will result in a ConcurrentModificationException which causes the queue image transfer to fail and subsequently client registration to fail: Client 1 is currently opening a subscription endpoint with server 1 and events are being staged in the client's temporary registration queue One or more of those events also match interest for Client 2 who is already fully registered, so the event is put into Client 2's queue (in addition to Client 1's temp queue) Client 2 asks server 2 to open a secondary subscription endpoint.  Server 2 attempts to copy Client 2's queue from server 1. This results in serializing all of the events in Client 2's queue. While the image is being transferred, Client 1 finishes registration and begins to drain its temporary registration queue.  The filter info for each event is recalculated which ends up mutating the shared event in Client 2's queue. The event has some metadata stored as a non-concurrent set.  Recalculating the filter info for Client 1 will mutate that set, but the image transfer for Client 2 is trying to copy that set simultaneously.  This can result in a ConcurrentModificationException because the set is not thread safe.  Note that there no danger in recalculating the filter from Client 2's perspective, because it is already in Client 2's queue.  As such, Client 2's queue transfer should be tolerant of such modifications since they have no consequence to it.</description>
      <version>None</version>
      <fixedVersion>1.10.0,1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.ClientUpdateMessageImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientUpdateMessageImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier.java</file>
      <file type="M">geode-core.src.integrationTest.resources.org.apache.geode.codeAnalysis.sanctionedDataSerializables.txt</file>
    </fixedFiles>
  </bug>
  <bug id="7091" opendate="2019-8-15 00:00:00" fixdate="2019-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add Micrometer binders to default meter registry</summary>
      <description>As a user, there are specific JVM metrics, GC metrics, Uptime, and FileDescriptor metrics that help indicate and track down issues with health of the cluster, that I want to access in order to understand the health of my cluster.Add the following Micrometer binders: JvmGcMetrics ProcessorMetrics JvmThreadMetrics UptimeMetrics FileDescriptorMetrics</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactoryTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactory.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.MicrometerBinderTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7092" opendate="2019-8-15 00:00:00" fixdate="2019-8-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ReconnectWithUDPSecurityDUnitTest fails due to insufficient MEMBER_TIMEOUT</summary>
      <description>Flaky test. In this CI run: https://concourse.gemfire-ci.info/teams/main/pipelines/gemfire-develop-main/jobs/DistributedTestOpenJDK8/builds/879 These two tests failed: ReconnectWithUDPSecurityDUnitTest &gt; testReconnectOnForcedDisconnectReconnectWithUDPSecurityDUnitTest &gt; testReconnectCollidesWithApplication They both boil down to: doTestReconnectOnForcedDisconnect() which calls getDistributedSystemProperties() to get property values to set. MEMBER_TIMEOUT is set to 1 second which is insufficient.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.ReconnectDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7156" opendate="2019-9-3 00:00:00" fixdate="2019-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>support token based authentication in management rest api</summary>
      <description>Whyto support securities needs of customers, we need to provide token access.WHAT (for current plan)support access token in REST API NOT To-Dodon't break the support of username/passwd in REST API for GEODE</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RequestWithAuthTokenTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.PlainClusterManagementServiceBuilder.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.client.ClusterManagementServiceBuilder.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.GeodeClusterManagementServiceBuilder.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.builder.ClusterManagementServiceBuilder.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.rest.internal.web.ManagementRestAuthTokenIntegrationTest.java</file>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
      <file type="M">geode-docs.configuring.running.cluster-management-service.html.md.erb</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.swagger.SwaggerConfig.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.rest.SwaggerManagementVerificationIntegrationTest.java</file>
      <file type="M">geode-web.src.distributedTest.java.org.apache.geode.management.internal.security.LogNoPasswordDistributedTest.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.GeodeAuthenticationProvider.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.SecuredLocatorContextLoader.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.LocatorWebContext.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.GeodeComponent.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.BaseLocatorContextLoader.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.AbstractConfigTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.DistributionConfigJUnitTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.security.SecurityManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.security.ResourceConstants.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalHttpService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.AbstractConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.examples.SimpleSecurityManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalLocator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfigImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.AbstractDistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.ConfigurationProperties.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.InternalDistributedSystemJUnitTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
    </fixedFiles>
  </bug>
  <bug id="7159" opendate="2019-9-4 00:00:00" fixdate="2019-12-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>PoolManager.close(keepAlive) naively assumes all "registered" Pool objects are o.a.g.cache.client.internal.PoolImpl implementations!</summary>
      <description>This certainly does not work in a proper "Unit" Test with "mocked" collaborators!</description>
      <version>None</version>
      <fixedVersion>1.11.0,1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PoolManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="7160" opendate="2019-9-4 00:00:00" fixdate="2019-10-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove Usages of AttributesFactory in geode-wan module</summary>
      <description>In order to remove the AttributesFactory class in a future release, we need to start removing it from our source code step by step.This ticket is to entirely remove references of the deprecated class within the geode-wan module.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.integrationTest.java.org.apache.geode.internal.cache.wan.misc.WANConfigurationJUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.WANTestBase.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.serial.SerialGatewaySenderQueueDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelWANPersistenceEnabledGatewaySenderDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueueOverflowDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.CacheClientNotifierDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.UpdateVersionDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7161" opendate="2019-9-4 00:00:00" fixdate="2019-9-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove Usages of AttributesFactory in geode-redis module</summary>
      <description>In order to remove the AttributesFactory class in a future release, we need to start removing it from our source code step by step.This ticket is to entirely remove references of the deprecated class within the geode-redis module.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="7162" opendate="2019-9-4 00:00:00" fixdate="2019-11-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove Usages of AttributesFactory in geode-lucene module</summary>
      <description>In order to remove the AttributesFactory class in a future release, we need to start removing it from our source code step by step.This ticket is to entirely remove references of the deprecated class within the geode-lucene module.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.LuceneIndexForPartitionedRegionTest.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneRegionListener.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneIndexForPartitionedRegion.java</file>
      <file type="M">geode-lucene.geode-lucene-test.src.main.java.org.apache.geode.cache.lucene.test.LuceneTestUtilities.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.RegionAttributesCreation.java</file>
    </fixedFiles>
  </bug>
  <bug id="7164" opendate="2019-9-4 00:00:00" fixdate="2019-9-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>IntelliJ IDEA 2019 error: the output path is not specified for modules</summary>
      <description>When delegating build/run actions to IntelliJ IDEA instead of Gradle, IntelliJ IDEA 2019 fails to build geode with an error similar to the one shown in the screenshot below: Steps to Reproduce:(Tested on IntelliJ IDEA CE versions 2019.1.4 and 2019.2.1) Make sure Gradle delegation is disabled for build/run Instructions for 2019.1.4: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle | Runner Make sure "Delegate build/run actions to Gradle" is unchecked Instructions for 2019.2.1: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle Make sure "Build and Run using:" is set to "IntelliJ IDEA" Clone geode into an empty directory Follow the instructions here to import and build geode using IntelliJ IDEA Enable Gradle build/run delegation Instructions for 2019.1.4: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle | Runner Check "Delegate build/run actions to Gradle" Instructions for 2019.2.1: Go to Preferences | Build, Execution, Deployment | Build Tools | Gradle Set "Build and Run using:" to "Gradle" Select "Build Project" from the Build menu to build geode After the build succeeds, revert the change from step 4 to switch back to the IntelliJ build runner Repeat step 5 to build the project again The popup error message shown in the screenshot should show and IntelliJ will not initiate the build</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.ide.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7171" opendate="2019-9-8 00:00:00" fixdate="2019-12-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Encapsulate metrics session responsibilities</summary>
      <description>Too many parts of Geode are starting to know too much about the details of a metrics session. We should encapsulate metrics session details and provide appropriate methods to interact with the session.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.src.test.java.org.apache.geode.test.micrometer.MeterAssertTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.micrometer.AbstractMeterAssert.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.GeodeCompositeMeterRegistryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactoryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactoryBindersTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheLifecycleMetricsSessionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheLifecycleMetricsSessionBuilderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.InternalCacheBuilderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.InternalCacheBuilderAllowsMultipleSystemsTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.GemFireCacheImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.metrics.package-info.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.metrics.MetricsSession.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.metrics.MetricsPublishingService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.GeodeCompositeMeterRegistry.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CompositeMeterRegistryFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CacheLifecycleMetricsSession.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheCreation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.ReconnectableCache.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalCacheForClientAccess.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalCacheBuilder.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalCache.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalDistributedSystem.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.DistributedSystem.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.ClientCacheFactory.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.InternalDistributedSystemSecurityIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.InternalDistributedSystemJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.InternalDistributedSystemBuilderIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.CacheFactoryIntegrationTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.metrics.MeterSubregistryReconnectDistributedTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.SimpleMetricsPublishingService.java</file>
    </fixedFiles>
  </bug>
  <bug id="7172" opendate="2019-9-9 00:00:00" fixdate="2019-10-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add ArchUnit test to break TCPServer dependencies on geode-core</summary>
      <description>We would like to shift responsibilities of running the TCPServer which handles PeerRequestMessages from the Locator to the membership module.  This is a step towards being able to run membership tests in isolation from the rest of geode-core. A first step is to write an ArchUnit test which will highlight dependencies from the tcpserver package to the rest of geode-core.  After the test is written, we can work through breaking all of the undesired dependencies.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-logging.src.main.java.org.apache.geode.internal.logging.EntriesCollection.java</file>
      <file type="M">geode-logging.src.main.java.org.apache.geode.internal.logging.LogWithToString.java</file>
      <file type="M">geode-logging.src.main.java.org.apache.geode.internal.logging.log4j.message.GemFireParameterizedMessage.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.EntriesSet.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.EntriesCollection.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.AbstractRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.Region.java</file>
    </fixedFiles>
  </bug>
  <bug id="7178" opendate="2019-9-9 00:00:00" fixdate="2019-9-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Older versions of Native Client broken in 1.9+ due to missing compatibility code</summary>
      <description>When getting a request to perform an operation, the code does not check for instance of Byte.  Native client sends the operation as a Byte, which currently cause Geode to throws ajava.lang.ClassCastException: class java.lang.Byte cannot be cast to class org.apache.geode.cache.Operation Server versions prior to 1.9.0 had a compatibility check for this Byte</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Destroy65Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.BaseCommandJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Destroy65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.BaseCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="7179" opendate="2019-9-10 00:00:00" fixdate="2019-9-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Alter command to change the state of event processing during AEQ creation</summary>
      <description>Add additional fields to alter async event queue command to change the state of event processing (paused or not) when the AEQ is being created.</description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.AlterAsyncEventQueueCommand.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.AlterAsyncEventQueueCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="718" opendate="2015-12-30 00:00:00" fixdate="2015-1-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gfsh history exposes passwords</summary>
      <description>When using gfsh connect statement, the entire connect statement is getting logged in the gfsh history file, and it shows the password for the key store in clear text in the history file.Here is an example connect statement that is typically executed by a automation linux script.$ ./gfsh _________________________ __ / _____/ ______/ ______/ /____/ / / / __/ /___ /_____ / _____ / / /__/ / ____/ _____/ / / / //______/_/ /______/_/ /_/ v1.0.0-incubating-SNAPSHOTMonitor and Manage GemFiregfsh&gt;connect --locator=vm-abcd[41111] --use-ssl=true --key-store=/var/gemfire//conf/keystore/tomcat.jks --key-store-password=blah-blah --trust-store=/var/gemfire/conf/keystore/tomcat.jks --trust-store-password=blah-blah --ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 --protocols=TLSv1.2Connecting to Locator at [host=vm-abcd, port=41111] ..Connecting to Manager at [host=vm-abcd, port=1099] ..Successfully connected to: [host=vm-abcd, port=1099]Cluster-101 gfsh&gt;history1 …2 …3 connect --locator=vm-abcd[41111] --use-ssl=true --key-store=/var/gemfire/conf/keystore/tomcat.jks --key-store-password=blah-blah --trust-store=/var/gemfire/conf/keystore/tomcat.jks --trust-store-password=blah-blah --ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 --protocols=TLSv1.2</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.management.internal.cli.shell.GfshHistoryJUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.management.internal.cli.shell.jline.GfshHistory.java</file>
    </fixedFiles>
  </bug>
  <bug id="7184" opendate="2019-9-10 00:00:00" fixdate="2019-12-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add function execution timers</summary>
      <description>Developers oftentimes deploy their own functions to the system to enable decorator pattern for caching to add information to specific key/value pairs. In doing so, they can introduce bottlenecks into the system where server-side functions can cause issues or make things slower than intended. We want a way that users can view functions that they create, and see what the average execution time looks like. Meter Type: Timer Name: geode.function.executions Description: TBD Tags: &lt;common_tags&gt;, function (getId on function, if DNE present getClass.getname of deployed function), succeeded (true/false)Acceptance CriteriaMeter creation/deletion: Create meter on function executionMeasurement: On an individual server, start the timer when a USER function is invoked/executed, and stop the timer when the user function completes OR errors. If it throws a Function Execution or another error then the tag function.isSuccessful=falseDetails on Functions and their execution: https://geode.apache.org/docs/guide/110/developing/function_exec/function_execution.htmlScenariosScenario: The timers are created when the function is first executedGiven a user executed a function with ID functionToTime on a cluster with 1 locator/1 serverAnd functionToTime has not been executed previouslyThen the server has the following timer: name: geode.function.executions tag: id = functionToTime tag: succeeded = true count &gt; 1 totalTime &gt;= 5,000,000,000nsAnd the server has the following timer: name: geode.function.executions tag: id = functionToTime tag: succeeded = false count = 0 totalTime = 0Scenario: Successful singular function execution (registered execution)Given a user registers a function with ID functionToTime (that waits for 5 seconds) on a cluster with 1 locator/1 serverWhen functionToTime is triggered using gfsh command: "execute function --id=functionToTime"And the function completes without errorThen the server has the following timer: name: geode.function.executions tag: id = functionToTime tag: succeeded = true count = 1 totalTime &gt;= 5,000,000,000nsScenario: Successful singular function execution (unregistered execution)Given an unregistered function with ID functionToTime (that waits for 5 seconds) exists When triggered on a client using "FunctionService.onServers(cache).execute(new FunctionToTime())"And the function completes without errorThen the server has the following timer: name: geode.function.executions tag: id = functionToTime tag: succeeded = true count = 1 totalTime &gt;= 5,000,000,000nsScenario: Singular function execution with Any ExceptionGiven an unregistered function with ID functionToTime (that waits for 5 seconds) exists When triggered on a client using "FunctionService.onServers(cache).execute(new FunctionToTime())"And the function exits with a Any exception error after running for 5 secondsThen the server has the following timer: name: geode.function.executions tag: id = functionToTime tag: succeeded = false count = 1 totalTime &gt;= 5,000,000,000nsScenario: Function execution onRegion multi-serverGiven a cluster with 1 locator (named L1) as well as 2 servers (named S1,S2)And a region called RR1 that is a replicate regionWhen a function execution is triggered against that replicate region using "FunctionService.onRegion(regionRR1).execute(new FunctionToTime())"Then one server has the following timer: name: geode.function.executions tag: id = functionToTime tag: succeeded = true count = 1 totalTime &gt;= 5,000,000,000nsAnd the other server has the following timer: name: geode.cache.function.executions tag: id = functionToTime tag: succeeded = true count = 0 totalTime = 0Scenario: Function execution onRegion with partition region multiple timesScenario: Function execution onRegion multi-serverGiven a cluster with 1 locator (named L1) as well as 2 servers (named S1,S2)And a partition region called PR1 that only exists on S1When a function execution is triggered 10 times against that replicate region using "FunctionService.onRegion(regionPR1).execute(new FunctionToTime())"Then S1 has the following timer: name: geode.function.executions tag:id = functionToTime tag:succeeded = true count = 10And S2 has the following timer: name: geode.cache.function.executions tag:id = functionToTime tag:succeeded = true count = 0Scenario: Function execution onRegion with replicate region multiple timesScenario: Function execution onRegion multi-serverGiven a cluster with 1 locator (named L1) as well as 2 servers (named S1,S2)And a replicate region called RR1 existsWhen a function execution is triggered 10 times against that replicate region using "FunctionService.onRegion(regionRR1).execute(new FunctionToTime())"Then when you aggregate both S1 and S2 server metrics for geode.function.executions with id:functionToTime with succeeded:true then the total count of the aggregate will be 10</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.function.executions.FunctionToTimeWithResult.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.function.executions.FunctionToTimeWithoutResult.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.function.executions.FunctionExecutionsTimerNoResultTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.function.executions.FunctionExecutionsTimerLonerTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.function.executions.FunctionExecutionsTimerClusterTest.java</file>
      <file type="M">geode-junit.src.test.java.org.apache.geode.test.compiler.ClassBuilderTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.compiler.TestObject.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.compiler.ClassBuilder.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.bean.stats.MemberLevelStatsTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.MemberMBeanBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction66.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.MemberFunctionStreamingMessage.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.ServerToClientFunctionResultSender65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.ServerToClientFunctionResultSender.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.ServerRegionFunctionExecutor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.ServerFunctionExecutor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.PartitionedRegionFunctionResultSender.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.MemberFunctionResultSender.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.FunctionStats.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.FunctionServiceStats.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.DistributedRegionFunctionResultSender.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.AbstractExecution.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DistributedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalDistributedSystem.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ExecuteRegionFunctionSingleHopOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ExecuteRegionFunctionOp.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ExecuteFunctionOp.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.execute.FunctionServiceStatsDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.execute.FunctionRetryTestBase.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.StartServerCommandDUnitTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.RegionEntriesGaugeTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.MicrometerBinderTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.GatewayReceiverMetricsTest.java</file>
      <file type="M">extensions.geode-modules.src.distributedTest.java.org.apache.geode.modules.util.ClientServerSessionCacheDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7185" opendate="2019-9-10 00:00:00" fixdate="2019-12-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use proper Gradle configuration for new serialization module</summary>
      <description>The geode-serialization module split from geode-core contains classes only within the internal package. So the configuration of the dependency should be implementation, not api.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web.build.gradle</file>
      <file type="M">geode-web-management.build.gradle</file>
      <file type="M">geode-web-api.build.gradle</file>
      <file type="M">geode-wan.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.build.gradle</file>
      <file type="M">geode-redis.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-redis.build.gradle</file>
      <file type="M">geode-rebalancer.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.build.gradle</file>
      <file type="M">geode-protobuf.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.geode-protobuf-test.build.gradle</file>
      <file type="M">geode-protobuf.build.gradle</file>
      <file type="M">geode-memcached.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-memcached.build.gradle</file>
      <file type="M">geode-lucene.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-lucene.build.gradle</file>
      <file type="M">geode-junit.build.gradle</file>
      <file type="M">geode-dunit.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-dunit.build.gradle</file>
      <file type="M">geode-cq.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-cq.build.gradle</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-connectors.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-connectors.build.gradle</file>
      <file type="M">geode-assembly.geode-assembly-test.build.gradle</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">extensions.geode-modules.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7242" opendate="2019-9-24 00:00:00" fixdate="2019-9-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect documentation for AVG and SUM aggregate functions</summary>
      <description>The documentation for OQL Aggregate Functions states that AVG and SUM always return either a Float or Double, but the actual return type can be any of Integer, Long, Float or Double.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.select.aggregates.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7261" opendate="2019-10-1 00:00:00" fixdate="2019-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode V1 admin rest does not start with Spring 5.x jars on the classpath</summary>
      <description>The geode-web war includes several spring jars, but does not include spring-core. With Jetty debug logging enabled we can see the following error: [vm0] 07:30:50.469 [RMI TCP Connection(1)-127.0.0.1] DEBUG org.eclipse.jetty.servlet.ServletHandler - EXCEPTION [vm0] java.lang.NoClassDefFoundError: org/springframework/core/ErrorCoded [vm0] at java.lang.ClassLoader.defineClass1(Native Method) [vm0] at java.lang.ClassLoader.defineClass(ClassLoader.java:763) [vm0] at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) [vm0] at java.net.URLClassLoader.defineClass(URLClassLoader.java:468) [vm0] at java.net.URLClassLoader.access$100(URLClassLoader.java:74) [vm0] at java.net.URLClassLoader$1.run(URLClassLoader.java:369) [vm0] at java.net.URLClassLoader$1.run(URLClassLoader.java:363)In addition, the war file also include commons-logging which causes the war logging to be redirected to stderr.</description>
      <version>1.9.0,1.9.1,1.10.0,1.11.0</version>
      <fixedVersion>1.9.2,1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7268" opendate="2019-10-2 00:00:00" fixdate="2019-11-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make gfsh alter region command similar to the API behavior</summary>
      <description>currently the gfsh command for alter region assigns the buckets to the region, before starting with the PR update config. This is not what the API does while altering a region This was requirement from the Lucene reindex story but that feature follows a different code path and will the be not affected if the assign buckets command was removed from the gfsh command. This also results in soft hangs when there are a lot of regions and gateway senders.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneServiceImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="7272" opendate="2019-10-3 00:00:00" fixdate="2019-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Docker image to build and preview the user guide</summary>
      <description>For building the Geode user guide it is needed to install Ruby and Bookbinder. It would be useful to have a docker image to do this task.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-book.README.md</file>
      <file type="M">dev-tools.docker.docs.view-docs.sh</file>
      <file type="M">dev-tools.docker.docs.Dockerfile</file>
      <file type="M">dev-tools.docker.docs.build-image-common.sh</file>
      <file type="M">dev-tools.docker.docs.build-docs.sh</file>
      <file type="M">dev-tools.docker.base.Dockerfile</file>
    </fixedFiles>
  </bug>
  <bug id="7273" opendate="2019-10-3 00:00:00" fixdate="2019-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode transaction should throw TransactionDataNotColocatedException if the transaction is on replicate region then partitioned region</summary>
      <description>A client transaction should fail with TransactionDataNotColocatedException instead of TransactionDataRebalancedException if transaction worked on the replicate regions first and then worked on an entry in a partitioned region where primary bucket is on another node.User should not work on replicate region first in a transaction, but Geode should throw correct exception as well.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.TXStateProxyImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tx.PartitionedTXRegionStub.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXStateProxyImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXState.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.ClientServerNotColocatedTransactionDistributedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7414" opendate="2019-11-7 00:00:00" fixdate="2019-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SSL ClientHello server_name extension</summary>
      <description>We propose to add the server_name extension to the ClientHello message. The extension would hold the distributed system ID of the site where the connection originated from.This will be used to determine internal geode communication, and communication between geode sites.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.DistributionConfigJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SSLConfigurationFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfigImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.AbstractDistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.ConfigurationProperties.java</file>
      <file type="M">gradle.japicmp.gradle</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.build.gradle</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.net.SSLParameterExtension.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.SSLConfig.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.net.SSLSocketParameterExtensionIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7417" opendate="2019-11-7 00:00:00" fixdate="2019-11-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI checks do not trigger on geode-book changes</summary>
      <description>due to new branch protection rules, it is now impossible to submit geode-book changes as the required checks will never firewe should remove the exclusion so checks can run</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7421" opendate="2019-11-7 00:00:00" fixdate="2019-3-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can deploy jar by REST API for Management</summary>
      <description>WHAT 1. can deploy jar file by REST API 2. from feature point , it will cover current 'gfsh deploy' 3. if two files have same file name, the later wins 4. can recognize version pattern. "filename-version&amp;#91;-label&amp;#93;.jar" . filename=&amp;#91;a-zA-Z/-&amp;#93;+, not single "", not end with "" version=&amp;#91;0-9/.&amp;#93;*, not single ".", not end with "." label=&amp;#91;a-zA-Z0-9&amp;#93;*such as: &lt;commons-beanutils-1.9.3.jar&gt; is a later version of &lt;commons-beanutils-1.9.2.jar&gt;, will deploy. &lt;commons-beanutils-1.9.3.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.3-RELEASE.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.1.jar&gt; is an earlier version of &lt;commons-beanutils-1.9.2.jar&gt;, will block it. 5. if there is a version part in the file name, we will deploy them without append "#1" part to the file name 6. can accept "group"</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceIntegrationTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.configuration.DeploymentTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.EntityInfo.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.ClusterManagementListResultAssert.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.web.http.support.HttpRequesterTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.ExportClusterConfigurationCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.web.shell.HttpOperationInvoker.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.web.http.support.HttpRequester.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.functions.DeployFunction.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.realizers.DeploymentRealizerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.mutators.DeploymentManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.domain.ConfigurationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceDeployedJarTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.functions.CacheRealizationFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.DeploymentRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.ConfigurationRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.DeploymentManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.domain.Configuration.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployedJar.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.DeployedJarTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.codeAnalysis.AnalyzeManagementSerializablesJUnitTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListIndexOnPartitionRegionTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.DeployToMultiGroupDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.DeploymentManagementDUnitTest.java</file>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.management-servlet.xml</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.DeploymentManagementController.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.internal.ClientClusterManagementServiceTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Deployment.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.AbstractConfiguration.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.RestTemplateClusterManagementServiceTransport.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.CommandType.java</file>
    </fixedFiles>
  </bug>
  <bug id="7424" opendate="2019-11-8 00:00:00" fixdate="2019-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can create index in RESTAPI for Management</summary>
      <description>WHAT 1. endpoint: &amp;#91;POST&amp;#93; `management/v1/indexes` 1. parameter: "name(indexID)", "expression", "region", "type", "group" 1. expected result: create index by specified parameters 1. type: default is "range" 1. region is required 1. name(indexID) is required 1. expression is required 1. "hash" type is not supported. Note1. request body```JSON{ "name": "Foo6name3", "expression": "name3", "regionPath": "/Foo6", “group”：“”， “type”：“” range|key }```</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.IndexValidatorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.IndexValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.IndexConfigManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="7425" opendate="2019-11-8 00:00:00" fixdate="2019-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can delete index in RESTAPI for Management</summary>
      <description>WHAT 1. endpoint: &amp;#91;DELETE&amp;#93; `management/v1/indexes` 1. parameter: "name", "region", "group" 1. expected result: delete index as specified parameters</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementControllerSpringTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.ClusterManagementSecurityRestIntegrationTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementRealizationResult.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.IndexValidatorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.realizers.IndexRealizerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.mutators.IndexConfigManagerTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.IndexValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.IndexRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.IndexConfigManager.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListIndexManagementDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7428" opendate="2019-11-8 00:00:00" fixdate="2019-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>adjustment: set the log-lvl of REST API of Management from info to debug</summary>
      <description>WHY 1. too many logs in the log file, that is a customer concern 2. broker team call RESTAPI for Management for healthcheck per 10 seconds. it will produce too many logs. WHAT 1. change every log which is produced by RESTAPI for management to be DEBUG.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.rest.controllers.ClusterManagementRestLoggingTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ManagementRequestLoggingDistributedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7431" opendate="2019-11-9 00:00:00" fixdate="2019-11-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>benchmarks may fail due to infrastructure quota</summary>
      <description>For example, https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/Benchmark/builds/677 failed because there were already 3 benchmarks jobs running at the timeSince the quota is 40 and each benchmark uses 12, we should restrict max_in_flight to 3 for this job</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7432" opendate="2019-11-11 00:00:00" fixdate="2019-11-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix spelling error in Aggregate Function Tests</summary>
      <description>Some of the aggregate function tests define/use the method parametrizedSetUp, it should be parameterizedSetUp instead.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.SumIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.MinIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.MaxIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.CountIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.AvgIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7436" opendate="2019-11-11 00:00:00" fixdate="2019-2-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can recognize version part when deploy function jar in GFSH</summary>
      <description>WHAT 1. recognize version part of file name, for the file to be deployed 1. can recognize version pattern. "filename-version&amp;#91;label&amp;#93;.jar" . filename=&amp;#91;a-zA-Z/-&amp;#93;+, not single "", not end with "" version=&amp;#91;0-9/.&amp;#93;*, not single ".", not end with "." label=&amp;#91;-/.&amp;#93;{1}&amp;#91;a-zA-Z0-9&amp;#93;*such as: &lt;commons-beanutils-1.9.3.jar&gt; is a later version of &lt;commons-beanutils-1.9.2.jar&gt;, will deploy. &lt;commons-beanutils-1.9.3.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.3-RELEASE.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.ClusterConfigurationLoaderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceJunitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.JarDeployerFileTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.DeployedJarTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DeploySemanticVersionJarDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.domain.ConfigurationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ExportClusterConfigurationCommandTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.ClassPathLoaderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.domain.Configuration.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.UndeployFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.ListDeployedFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.DeployFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DeployCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.JarDeployer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployJarChildFirstClassLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployedJar.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.ClassPathLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.ClusterConfigurationLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceService.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.JarDeployerIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.JarDeployerDeadlockTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.DeployedJarJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.ClassPathLoaderJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.ClassPathLoaderIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.ClassPathLoaderDeployTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.IncrementalBackupIntegrationTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DeployWithGroupsDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DeployCommandRedeployDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7537" opendate="2019-12-4 00:00:00" fixdate="2019-12-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>hang in gii/rebalance of AEQ in recycled server (with persistence)</summary>
      <description>Actively being investigated...</description>
      <version>1.9.0</version>
      <fixedVersion>1.11.0,1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueueJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.GatewaySenderQueueEntrySynchronizationOperation.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.CacheFactoryStaticsIntegrationTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.CacheFactoryStatics.java</file>
    </fixedFiles>
  </bug>
  <bug id="7540" opendate="2019-12-4 00:00:00" fixdate="2019-12-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>avoid overwhelming CI when many commits happen on the same day</summary>
      <description>Instead of immediately launching all jobs at once, we could even out the load by setting lower max_in_flight settings for shorter jobs. I estimate we can cut peak load in half without builds taking any longer, for a scenario where 6 commits are in the pipeline at the same time.Reducing load on concourse is desirable because we tend to have more unexplained rsync failures, etc, when concourse is under heavy load.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.images.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7542" opendate="2019-12-4 00:00:00" fixdate="2019-1-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Break dependency on JavaWorkArounds</summary>
      <description>this work around exists only for pre-Java9 JDKs, fwiw...</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.FlatFormatSerializer.java</file>
      <file type="M">geode-cq.src.main.java.org.apache.geode.cache.query.cq.internal.CqServiceImpl.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.membership.MembershipDependenciesJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.util.JavaWorkarounds.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.ConnectionTable.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientHealthMonitor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.metrics.FunctionStatsManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.BackupDefinition.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.messenger.GMSEncrypt.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.fd.GMSHealthMonitor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.AttributeDescriptor.java</file>
      <file type="M">geode-core.src.jmh.java.org.apache.geode.internal.util.ComputeIfAbsentBenchmark.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.TableMetaDataManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="7550" opendate="2019-12-5 00:00:00" fixdate="2019-2-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add option to show only receivers or senders to "list gateways" gfsh command</summary>
      <description>"list gateways" command shows info about gateway senders and receivers, but I would like to have the possibility of showing info just from senders or receivers.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.wancommand.ListGatewaysCommandDUnitTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ListGatewayCommand.java</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.list.html.md.erb</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.i18n.CliStrings.java</file>
    </fixedFiles>
  </bug>
  <bug id="7554" opendate="2019-12-5 00:00:00" fixdate="2019-12-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Benchmark CI: rerun failed tests</summary>
      <description>When tests run in CI fail, they will be written to a file. Read that file and rerun the failed tests until the list is empty, or until the run has been retried 5 times. Any tests that fail 5 times in a row are not flaky and need to be addressed.</description>
      <version>None</version>
      <fixedVersion>1.11.0,1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.run.benchmarks.sh</file>
    </fixedFiles>
  </bug>
  <bug id="7561" opendate="2019-12-9 00:00:00" fixdate="2019-12-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode does not allow creating GW senders with a single dispatcher thread</summary>
      <description>When creating GW sender Geode does not honor --dispatcher-threads when it is equal to 1.Effectively this means one cannot create GW sender with a single dispatcher thread. If you ask for 1 you will get 5(default value). </description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.wancommand.CreateDestroyGatewaySenderCommandDUnitTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.CreateGatewaySenderCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.functions.GatewaySenderCreateFunction.java</file>
    </fixedFiles>
  </bug>
  <bug id="7583" opendate="2019-12-16 00:00:00" fixdate="2019-2-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>"status locator --name/--dir" is not working properly when locator ssl is enabled</summary>
      <description>in 1.8: 1. start a locator with ssl enabled2. "status locator --dir" or "status locator --name" would trigger such error messages in the locator log:&amp;#91;info 2019/12/16 08:57:39.958 PST locator &lt;locator request thread 1&gt; tid=0x23&amp;#93; Exception in processing request from 10.118.20.75javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection? at sun.security.ssl.InputRecord.handleUnknownRecord(InputRecord.java:710) at sun.security.ssl.InputRecord.read(InputRecord.java:527) at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:975) at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1367) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1395) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1379) at org.apache.geode.internal.net.SocketCreator.handshakeIfSocketIsSSL(SocketCreator.java:981) at org.apache.geode.distributed.internal.tcpserver.TcpServer.lambda$processRequest$0(TcpServer.java:346) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)In develop branch: the gfsh output would be a strange ClassCastException. It's definitely broken on develop</description>
      <version>1.8.0,1.9.0,1.10.0,1.11.0</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.MemberStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.LocatorLauncherStartupRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.GfshCommandRule.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.LocatorLauncherStatusTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.StatusLocatorCommandDunitTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.OfflineGfshCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.lifecycle.StatusLocatorCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ConnectCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.utils.ClusterConfigurationStatusRetriever.java</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.status.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="8076" opendate="2020-5-5 00:00:00" fixdate="2020-5-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>simplify redis concurrency code</summary>
      <description>Currently when doing a redis set operation, for example sadd, the code has to be careful to deal with other threads concurrently changing the same set.It does this in a number of ways but this could be simplified by having a higher level layer of the code ensure that for a given redis "key" operations will done in sequential order.This can be done safely in a distributed cluster because we now route all operations for a given key to the server that is storing the primary copy of data for that key.I spike was done and we found that this form of locking did not hurt performance. Since it allows simpler code that is less likely to have subtle concurrency issues we plan on merging the work done in the spike into the product.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.test.java.org.apache.geode.redis.internal.RegionProviderJUnitTest.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RegionProvider.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SScanExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SRemExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SRandMemberExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SPopExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SMoveExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SMembersExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SIsMemberExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SetOpExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SetExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SCardExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SAddExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.RedisSet.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.GeodeRedisSetWithFunctions.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.DeltaSet.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.CommandFunction.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
      <file type="M">geode-redis.src.integrationTest.resources.org.apache.geode.codeAnalysis.sanctionedDataSerializables.txt</file>
      <file type="M">geode-redis.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
    </fixedFiles>
  </bug>
  <bug id="8451" opendate="2020-8-24 00:00:00" fixdate="2020-8-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis ping response contains unneeded quotes</summary>
      <description>native redis response to ping returns pong, unquoted.  Ours implementation returns "pong" with quotes.  </description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.Coder.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.RedisResponse.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.connection.PingExecutor.java</file>
    </fixedFiles>
  </bug>
  <bug id="8455" opendate="2020-8-25 00:00:00" fixdate="2020-9-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Different behavior in transactions on partitioned regions between creating the region with a parallel gateway sender vs altering the region to add the parallel gateway sender</summary>
      <description>When creating a partitioned region and then altering it by adding a parallel gateway sender, I have observed that, when sending transactions to the partitioned region, an event (GatewaySenderEvent) for each transaction is sent to every server hosting buckets for the partitioned region and not only to that/those hosting the bucket where the data in the transaction belongs.So, for example, in a partitioned region provided by two cache servers where redundancy is zero, when a transaction is sent, the put is done on the server hosting the bucket where the data in the transaction is to be stored but an event for the put is sent to the two members. This provokes in the server not hosting locally the bucket for the data in the event that the event (GatewaySenderEvent) is stored in the bucketToTempQueueMap member variable of the ParallelGatewaySenderQueue.Those events are eventually removed from that member as events are sent by the gateway sender to the remote site. Nevertheless, if the remote site cannot be reached, the events are kept in that member which could provoke a heap exhaustion problem if there is a sufficient amount of incoming transactions and the remote site cannot be reached for the required amount of time.Events for a transaction should only be sent to the servers hosting the bucket for the data in the transaction and not to all servers.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.WANTestBase.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.serial.SerialWANStatsDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelWANStatsDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelWANPropagationDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="8456" opendate="2020-8-25 00:00:00" fixdate="2020-8-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>upgrade Shiro to 1.6.0</summary>
      <description>Our current Shiro version (1.5.3) is below the recommended version.</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0,1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8459" opendate="2020-8-26 00:00:00" fixdate="2020-8-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis API for Geode handles errors when member disconnects</summary>
      <description>Redis API for Geode should properly handle DistributedSystemDisconnectedException and ForcedDisconnectException when member disconnects. Client should be closed and a null response should be returned.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.ExecutionHandlerContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="8462" opendate="2020-8-26 00:00:00" fixdate="2020-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GeodeRedisServer should fail with msg if redis-port and redis-bind-address are in use</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.NettyRedisServer.java</file>
      <file type="M">geode-redis.src.distributedTest.java.org.apache.geode.redis.GeodeRedisServerStartupDUnitTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.ExpireAtNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.build.gradle</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.rules.gfsh.GfshExecution.java</file>
    </fixedFiles>
  </bug>
  <bug id="8463" opendate="2020-8-26 00:00:00" fixdate="2020-8-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>server&amp;#39;s log filled with SSLException: Tag mismatch!</summary>
      <description>In a TLS test using the latest Oracle JDK8 server logs filled with these messages:[info 2020/08/10 17:09:19.204 PDT &lt;P2P message reader for rs-GEM-2886-FD2236a0i32xlarge-hydra-client-1(bridgegemfire4_host1_27404:27404)&lt;ec&gt;&lt;v1&gt;:41003 shared ordered uid=7 local port=41284 remote port=37024&gt; tid=0x6c] P2P message reader@26dd073d io exception for rs-GEM-2886-FD2236a0i32xlarge-hydra-client-1(bridgegemfire4_host1_27404:27404)&lt;ec&gt;&lt;v1&gt;:41003(uid=7)javax.net.ssl.SSLException: Tag mismatch! at sun.security.ssl.Alert.createSSLException(Alert.java:133) at sun.security.ssl.TransportContext.fatal(TransportContext.java:327) at sun.security.ssl.TransportContext.fatal(TransportContext.java:270) at sun.security.ssl.TransportContext.fatal(TransportContext.java:265) at sun.security.ssl.SSLTransport.decode(SSLTransport.java:119) at sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:594) at sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:549) at sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:413) at sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:392) at javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:626) at org.apache.geode.internal.net.NioSslEngine.unwrap(NioSslEngine.java:272) at org.apache.geode.internal.tcp.Connection.processInputBuffer(Connection.java:2727) at org.apache.geode.internal.tcp.Connection.readMessages(Connection.java:1621) at org.apache.geode.internal.tcp.Connection.run(Connection.java:1458) at java.lang.Thread.run(Thread.java:748)Caused by: javax.crypto.AEADBadTagException: Tag mismatch! at com.sun.crypto.provider.GaloisCounterMode.decryptFinal(GaloisCounterMode.java:620) at com.sun.crypto.provider.CipherCore.finalNoPadding(CipherCore.java:1116) at com.sun.crypto.provider.CipherCore.fillOutputBuffer(CipherCore.java:1053) at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:853) at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:446) at javax.crypto.CipherSpi.bufferCrypt(CipherSpi.java:826) at javax.crypto.CipherSpi.engineDoFinal(CipherSpi.java:730) at javax.crypto.Cipher.doFinal(Cipher.java:2463) at sun.security.ssl.SSLCipher$T13GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1880) at sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:240) at sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:197) at sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:160) at sun.security.ssl.SSLTransport.decode(SSLTransport.java:110)  The protocol and cipher were both set to "any".We determined that this was selecting TLSv1.3, which was only recently introduced as an available protocol in Oracle's JDK8.  If TLSv1.2 is specified instead of "any" things work fine.The problem does not occur with Geode v1.13 unless you request TLSv1.3 with Oracle JDK8.  We were using 1.8.0_261.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SSLUtilTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SSLUtil.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
