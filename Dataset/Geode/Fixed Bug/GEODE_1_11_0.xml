<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="4267" opendate="2018-1-9 00:00:00" fixdate="2018-12-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>PersistentRecoveryOrderOldConfigDUnitTest.testCrashDuringPreparePersistentId fails intermittently due to DistributedSystemDisconnectedException suspect string</summary>
      <description>org.apache.geode.internal.cache.persistence.PersistentRecoveryOrderOldConfigDUnitTest &gt; testCrashDuringPreparePersistentId FAILED java.lang.RuntimeException: org.apache.geode.distributed.DistributedSystemDisconnectedException: This connection to a distributed system has been disconnected. Caused by: org.apache.geode.distributed.DistributedSystemDisconnectedException: This connection to a distributed system has been disconnected. java.lang.AssertionError: Suspicious strings were written to the log during this run. Fix the strings or use IgnoredException.addIgnoredException to ignore. ----------------------------------------------------------------------- Found suspect string in log4j at line 1443 [error 2017/12/16 00:50:26.778 UTC &lt;RMI TCP Connection(1)-10.254.0.146&gt; tid=0x1b] org.apache.geode.distributed.DistributedSystemDisconnectedException: This connection to a distributed system has been disconnected.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.persistence.PersistentRecoveryOrderDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="4268" opendate="2018-1-9 00:00:00" fixdate="2018-7-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move jmh benchmarks to geode-code</summary>
      <description>Instead of having all jmh benchmarks in their own module, add them to the module where the codd they benchmark resides.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.UpdateOnRegionBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.RegionOperationBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.RangeQueryWithIndexBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.GetsWithEvictionPerformanceBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.GetOnRegionBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.FirstEvictionBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.EvictionWithPartiallyMarkedListsBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.EvictionMultiThreadedPerformanceBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.EvictionBasePerformanceBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.CreateWithEvictionUnderLimitBenchmark.java</file>
      <file type="M">geode-benchmarks.src.jmh.java.org.apache.geode.cache.benchmark.CreateOnRegionBenchmark.java</file>
      <file type="M">geode-benchmarks.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="4270" opendate="2018-1-10 00:00:00" fixdate="2018-2-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>[CI Failure] org.apache.geode.cache.query.cq.dunit.CqSecurityAuthorizedUserDUnitTest &gt; cqExecuteWithInitialResultsWithMethodInvocationWithUnpopulatedRegionAndFollowedByAPutShouldTriggerCqError[0] FAILED</summary>
      <description>org.apache.geode.cache.query.cq.dunit.CqSecurityAuthorizedUserDUnitTest &gt; cqExecuteWithInitialResultsWithMethodInvocationWithUnpopulatedRegionAndFollowedByAPutShouldTriggerCqError[0] FAILED org.apache.geode.test.dunit.RMIException: While invoking org.apache.geode.security.query.QuerySecurityBase$$Lambda$50/1990038369.run in VM 1 running on Host 6b888a694193 with 4 VMs at org.apache.geode.test.dunit.VM.invoke(VM.java:393) at org.apache.geode.test.dunit.VM.invoke(VM.java:363) at org.apache.geode.test.dunit.VM.invoke(VM.java:308) at org.apache.geode.security.query.QuerySecurityBase.putIntoRegion(QuerySecurityBase.java:202) at org.apache.geode.cache.query.cq.dunit.CqSecurityAuthorizedUserDUnitTest.cqExecuteWithInitialResultsWithMethodInvocationWithUnpopulatedRegionAndFollowedByAPutShouldTriggerCqError(CqSecurityAuthorizedUserDUnitTest.java:138) Caused by: org.apache.geode.cache.client.ServerOperationException: remote server on 6b888a694193(153:loner):32936:ced4ccdc: org.apache.geode.security.GemFireSecurityException: Error: Anonymous User Caused by: org.apache.geode.security.GemFireSecurityException: Error: Anonymous UserTest logshttps://concourse.apachegeode-ci.info/teams/main/pipelines/develop/jobs/DistributedTest/builds/70#L5a4ed7fc:654</description>
      <version>None</version>
      <fixedVersion>1.5.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientProxy.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier.java</file>
    </fixedFiles>
  </bug>
  <bug id="4274" opendate="2018-1-10 00:00:00" fixdate="2018-4-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add geode-examples job to CI</summary>
      <description>The concourse pipeline should test geode-examples.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.develop.yml</file>
    </fixedFiles>
  </bug>
  <bug id="5596" opendate="2018-8-17 00:00:00" fixdate="2018-8-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Client ends up with destroyed entry after invalidate()</summary>
      <description>If a client is doing a destroy, putAll and invalidate in separate threads and the events align like this in the server: destroy then create then invalidate, the client may end up having a destroyed entry instead of an invalid entry.This is a long standing issue with Geode (and formerly with GemFire) that a client does not create an Invalid entry in some situations. A lot of this was cleared up when we implemented concurrency controls in the cache but this one corner case remains.Fixing this issue requires a small change in behavior for client caches in how they handle the invalidate() operation, but I think it's a change for the better.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientServerMiscDUnitTestBase.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.AttributesFactoryJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.AbstractRegionMap.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.AttributesFactory.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.ClientServerCCEDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5601" opendate="2018-8-20 00:00:00" fixdate="2018-8-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>AcceptanceTests are run in parallel without using containers, resulting in port conflicts</summary>
      <description>org.apache.geode.management.internal.cli.commands.DeployWithLargeJarTest &gt; deployLargeSetOfJars FAILED org.junit.ComparisonFailure: expected:&lt;[0]&gt; but was:&lt;[1]&gt; at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at org.apache.geode.test.junit.rules.gfsh.GfshScript.awaitIfNecessary(GfshScript.java:117) at org.apache.geode.test.junit.rules.gfsh.GfshRule.execute(GfshRule.java:135) at org.apache.geode.test.junit.rules.gfsh.GfshScript.execute(GfshScript.java:106) at org.apache.geode.management.internal.cli.commands.DeployWithLargeJarTest.deployLargeSetOfJars(DeployWithLargeJarTest.java:41)Passes: https://concourse.apachegeode-ci.info/teams/main/pipelines/pr-develop/jobs/AcceptanceTest/builds/721Fails: https://concourse.apachegeode-ci.info/teams/main/pipelines/pr-develop/jobs/AcceptanceTest/builds/728</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.execute.tests.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="6954" opendate="2019-7-10 00:00:00" fixdate="2019-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GatewaySenderMXBean wrongly reports state</summary>
      <description>After creating gateways senders and receivers between two geode clusters replications is established. After restart gateway receiver, list gateways command shows that everything is connected and replication works.But when checking gateway sender state over JMX with GatewaySenderMXBean and checking isConnected() I got false, but should be true as it is connected.Steps to reproduce issue: create two sites (geode-examples/wan) check GW sender stats with jconsole (Connected = true) stop GW receiver on the remote site (Connected = false) put some entry (it will be in the queue waiting for connection) start GW receiver on the remote site (Connected = false) replication is established, the event is processed to the remote site (Connected = false, should be true)</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.management.WANManagementDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.GatewaySenderMBeanBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.serial.ConcurrentSerialGatewaySenderEventProcessor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ConcurrentParallelGatewaySenderEventProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="7120" opendate="2019-8-23 00:00:00" fixdate="2019-8-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Adjust pipeline values to avoid timeouts and out of memory failures</summary>
      <description>Adjust pipeline values to avoid timeouts and out of memory failures: Increase distributedTest RAM memory from 180 to 250 Increase rsync timeout from 5m to 10m Increase acceptanceTest timeout from 45m to 1hThe distributedTest RAM needs to be increased to avoid Jetty/Tomcat out of memory failures when forking new processes:org.apache.geode.session.tests.Jetty9CachingClientServerTest &gt; containersShouldHavePersistentSessionData FAILED java.lang.RuntimeException: Something very bad happened when trying to start container JETTY9_client-server_containersShouldHavePersistentSessionData_0_a6ebd229-072b-47db-a9bf-ca3713175f05_&lt;unknown&gt; Caused by: java.lang.RuntimeException: Something very bad happened to this container when starting. Check the cargo_logs folder for container logs. Caused by: java.io.IOException: Unable to run modify_war script, command: [/tmp/geode_container_install17845041006471328987/cargo_modules/Apache_Geode_Modules-1.11.0-SNAPSHOT-AppServer/bin/modify_war, -J, -Xmx2096m, -w, /home/geode/geode/geode-assembly/build/distributedTest254/../../../extensions/session-testing-war/build/libs/session-testing-war.war, -t, client-server, -o, /tmp/geode_container_install17845041006471328987/cargo_wars/JETTY9_client-server_containersShouldHavePersistentSessionData_0_a6ebd229-072b-47db-a9bf-ca3713175f053692095078744488223.war, -p, gemfire.cache.enable_local_cache=true, -p, gemfire.property.log-file=/home/geode/geode/geode-assembly/build/distributedTest254/cargo_logs/JETTY9_client-server_containersShouldHavePersistentSessionData_0_a6ebd229-072b-47db-a9bf-ca3713175f05/gemfire.log, -p, gemfire.property.cache-xml-file=/home/geode/geode/geode-assembly/build/distributedTest254/cargo_logs/JETTY9_client-server_containersShouldHavePersistentSessionData_0_a6ebd229-072b-47db-a9bf-ca3713175f05/cache-client.xml] log file: ERROR: Error updating web.xml ng: INFO: os::commit_memory(0x000000077d000000, 2147483648, 0) failed; error='Not enough space' (errno=12)The actual failure from OpenJDK is:OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00007f74a4ba4000, 65536, 1) failed; error='Not enough space' (errno=12) [thread 26510 also had an error]The rsync timeout needs to be increased to avoid these timeouts:BUILD SUCCESSFUL in 12s1 actionable task: 1 up-to-date+ rsync -e 'ssh -i instance-data/sshkey -o ConnectionAttempts=60 -o StrictHostKeyChecking=no' -ah geode@10.0.0.116:geode /tmp/build/1a3d1be6/geode-results/rsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at rsync.c(642) [generator=3.1.3]rsync error: received SIGUSR1 (code 19) at main.c(1440) [receiver=3.1.3]rsync: [generator] write error: Broken pipe (32)timeout exceededThe acceptanceTest timeout needs to be increased from 45m to 1h:&gt; Task :geode-connectors:acceptanceTestWARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by org.apache.geode.internal.size.ObjectTraverser (file:/home/geode/geode/geode-core/build/libs/geode-core-1.11.0-SNAPSHOT.jar) to field java.lang.String.valueWARNING: Please consider reporting this to the maintainers of org.apache.geode.internal.size.ObjectTraverserWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future releaseWARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by org.apache.geode.internal.size.ObjectTraverser (file:/home/geode/geode/geode-core/build/libs/geode-core-1.11.0-SNAPSHOT.jar) to field java.lang.String.valueWARNING: Please consider reporting this to the maintainers of org.apache.geode.internal.size.ObjectTraverserWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future releasetimeout exceeded</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Wish</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7124" opendate="2019-8-26 00:00:00" fixdate="2019-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability to create AEQ in a paused state</summary>
      <description>As discussed on the dev list, it was requested that we be able to create an AEQ in a paused state.  This means that the dispatcher does not dispatch events to it's listeners.The queue itself will be queuing events but the dispatching thread is "blocked" until it is resumed/unpaused.A different ticket will be created for resuming/unpausing the AEQ.</description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.main.java.org.apache.geode.internal.cache.wan.serial.SerialGatewaySenderImpl.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderImpl.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.asyncqueue.internal.AsyncEventQueueFactoryImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.InternalGatewaySender.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.AbstractGatewaySender.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.internal.SerialAsyncEventQueueImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.internal.ParallelAsyncEventQueueImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.internal.AsyncEventQueueFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.AsyncEventQueueFactory.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.wan.asyncqueue.AsyncEventQueueValidationsJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7126" opendate="2019-8-26 00:00:00" fixdate="2019-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability to resume/unpause an AEQ if it has been paused</summary>
      <description>This api will start up the dispatcher thread or somehow resume dispatching if the dispatcher has been paused (see https://issues.apache.org/jira/browse/GEODE-7124).This ticket is only for resuming a paused AEQ.  We can add a pausing api directly to the AEQ at a later date as requested.</description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.CacheConfig.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.asyncqueue.internal.AsyncEventQueueFactoryImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheXmlParser.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheCreation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.internal.AsyncEventQueueFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.AsyncEventQueueFactory.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.wan.asyncqueue.AsyncEventQueuePausedDUnitTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.AsyncEventQueueCreation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.internal.AsyncEventQueueImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.asyncqueue.AsyncEventQueue.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.wan.asyncqueue.AsyncEventQueueValidationsJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7127" opendate="2019-8-26 00:00:00" fixdate="2019-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add GFSH arguments for starting AEQ in a paused state</summary>
      <description>Related to https://issues.apache.org/jira/browse/GEODE-7124There should be a new variable/argument for creating an AEQ in a paused state. </description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ListAsyncEventQueuesTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateAsyncEventQueueCommandTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.i18n.CliStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.CreateAsyncEventQueueFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.domain.AsyncEventQueueDetails.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ListAsyncEventQueuesCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateAsyncEventQueueCommand.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.ListAsyncEventQueuesCommandDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.CreateAsyncEventQueueCommandDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.ListAsyncEventQueuesFunction.java</file>
    </fixedFiles>
  </bug>
  <bug id="7128" opendate="2019-8-26 00:00:00" fixdate="2019-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add GFSH command for resuming an AEQ from a paused state</summary>
      <description>Related to https://issues.apache.org/jira/browse/GEODE-7126andGEODE-7127There should be a way to resume an existing AEQ from a paused state.  This would probably require a new command</description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.cli.ConverterHint.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ResumeAsyncEventQueueDispatcherCommandTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.i18n.CliStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.ResumeAsyncEventQueueDispatcherFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ResumeAsyncEventQueueDispatcherCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CommandAvailabilityIndicator.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.ResumeAsyncEventQueueDispatcherDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7129" opendate="2019-8-26 00:00:00" fixdate="2019-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>XML and cluster config changes for creating AEQ in a paused state</summary>
      <description>There should be a way in XML and cluster config to create an AEQ in a paused state. This is related to https://issues.apache.org/jira/browse/GEODE-7124 and https://issues.apache.org/jira/browse/GEODE-7127 </description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.CacheConfig.java</file>
      <file type="M">geode-core.src.main.resources.META-INF.schemas.geode.apache.org.schema.cache.cache-1.0.xsd</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheXmlParser.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheXml.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheCreation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheConfig.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.wan.asyncqueue.AsyncEventQueueValidationsJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7130" opendate="2019-8-26 00:00:00" fixdate="2019-8-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Expired global transaction was not correctly cleaned up</summary>
      <description>When trying to fix GEODE-7114, I discovered that the global transaction timed out was not correctly cleaned up and leave the transaction in an uncommitted state state and could block other transactions.The following exception is thrown if you repeatedly running the same test (test7()) &amp;#8211; this is because the first transaction not rolled back when timed out.org.apache.geode.test.dunit.RMIException: While invoking org.apache.geode.internal.jta.dunit.TransactionTimeOutDUnitTest$$Lambda$28/199449817.run in VM 0 running on Host localhost with 4 VMs at org.apache.geode.test.dunit.VM.executeMethodOnObject(VM.java:579) at org.apache.geode.test.dunit.VM.invoke(VM.java:406) at org.apache.geode.internal.jta.dunit.TransactionTimeOutDUnitTest.test7(TransactionTimeOutDUnitTest.java:187) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:54) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)Caused by: java.lang.AssertionError: Exception occurred in test Commit due to at org.apache.geode.test.dunit.Assert.fail(Assert.java:66) at org.apache.geode.internal.jta.dunit.TransactionTimeOutDUnitTest.runTest9(TransactionTimeOutDUnitTest.java:406) at org.apache.geode.internal.jta.dunit.TransactionTimeOutDUnitTest.lambda$test7$bb17a952$1(TransactionTimeOutDUnitTest.java:187) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.geode.test.dunit.internal.MethodInvoker.executeObject(MethodInvoker.java:123) at org.apache.geode.test.dunit.internal.RemoteDUnitVM.executeMethodOnObject(RemoteDUnitVM.java:69) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) at sun.rmi.transport.Transport$1.run(Transport.java:200) at sun.rmi.transport.Transport$1.run(Transport.java:197) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:196) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.iapi.jdbc.BrokeredStatement.execute(Unknown Source) at org.apache.geode.internal.jta.dunit.TransactionTimeOutDUnitTest.runTest9(TransactionTimeOutDUnitTest.java:383) ... 24 moreCaused by: ERROR 40XL1: A lock could not be obtained within the time requested at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(Unknown Source) at org.apache.derby.impl.services.locks.AbstractPool.lockObject(Unknown Source) at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(Unknown Source) at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapController.lockRow(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapController.lockRow(Unknown Source) at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(Unknown Source) at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanRowOnPage(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeController.doIns(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeController.insert(Unknown Source) at org.apache.derby.impl.store.access.btree.index.B2IController.insert(Unknown Source) at org.apache.derby.impl.sql.catalog.TabInfoImpl.insertRowListImpl(Unknown Source) at org.apache.derby.impl.sql.catalog.TabInfoImpl.insertRow(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source) at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source) at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 29 more</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.jta.TransactionManagerImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.jta.GlobalTransaction.java</file>
    </fixedFiles>
  </bug>
  <bug id="7136" opendate="2019-8-27 00:00:00" fixdate="2019-9-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>both "group" and "groups" shows up in the v2 rest api</summary>
      <description>It seems confusing to have both "group" and "groups" as attributes. Seems like it should just be "groups". some output which has both group and groups are the followings: region pdx receiver</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.cache.configuration.ConfigurationJsonMappingTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.cache.configuration.AbstractConfigurationTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Pdx.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.GatewayReceiver.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.AbstractConfiguration.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementService.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.MemberValidatorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.CacheElementValidatorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommandTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.MemberValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.CacheElementValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.ConfigurationPersistenceService.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommandDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListRegionManagementDunitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7139" opendate="2019-8-27 00:00:00" fixdate="2019-8-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cleanup the common tags on the meters.</summary>
      <description>Change the following common tags: Cluster_id = cluster Member_name = member host_name = hostfor better consistency.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactoryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactoryBindersTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="7140" opendate="2019-8-27 00:00:00" fixdate="2019-8-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Rename the meters for entries</summary>
      <description>Rename metric 'member.region.entries' to 'geode.cache.entries'Rename tag 'region_name' to 'region'</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.RegionPerfStatsTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionPerfStats.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.RegionEntriesGaugeTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7146" opendate="2019-8-29 00:00:00" fixdate="2019-9-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document Aggregate Function Limitations</summary>
      <description>Make sure the docs cover the concerns about things that can't be done with aggregate functions.Some of the concerns/limitations to add in the documentation: Can't be used in CQ. What happens if SUM result is higher than Double.MAX_VALUE. What happens if COUNT result is higher than Long.MAX_VALUE. What happens if AVG result is Infinity (floating-point operation that overflows). What happens if the intermediate count, when calculating the AVG operation, is higher than Long.MAX_VALUE. What happens if the intermediate summation, when calculating the AVG operation, is higher than Double.MAX_VALUE.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.getting.started.querying.quick.reference.html.md.erb</file>
      <file type="M">geode-docs.developing.query.select.the.select.statement.html.md.erb</file>
      <file type="M">geode-docs.developing.query.additional.supported.keywords.html.md.erb</file>
      <file type="M">geode-docs.developing.continuous.querying.implementing.continuous.querying.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7150" opendate="2019-8-30 00:00:00" fixdate="2019-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use LONG instead of INT in Aggregation Functions</summary>
      <description>OQL aggregate functions (COUNT and AVG) can “silently” overflow as Geode internally uses int to compute the aggregations, basically meaning that we can return an overflowed value instead of the proper result.As an example, if COUNT evaluates to 2147483648 (Integer.MAX_VALUE + 1) the user will receive -2147483648 (Integer.MIN_VALUE) and so on.We should modify the internal implementation to use `Long` instead of `Int`, and properly document the limitation (see GEODE-7146).</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.aggregate.AvgPRQueryNodeTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.aggregate.AvgBucketNodeTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.aggregate.CountPRQueryNode.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.aggregate.Count.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.aggregate.AvgPRQueryNode.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.aggregate.AvgBucketNode.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.aggregate.Avg.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.aggregate.AbstractAggregator.java</file>
    </fixedFiles>
  </bug>
  <bug id="7152" opendate="2019-8-30 00:00:00" fixdate="2019-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>AlertAppender recursion causes ForcedDisconnect to hang</summary>
      <description>AlertAppender uses a ThreadLocal to prevent recursive calls from actually doing anything. However, a recent upgrade to our log4j dependencies seems to have changed the behavior such that log4j refuses to invoke doAppend if the thread is currently handling a sendAlert initiated from doAppend. To fix this bug, we will need to change sendAlert to be asynchronous.In this run we are expecting ForcedDisconnects, but they don't occur until after the hang is declared.The appearance of these "Recursive call to appender" messages is new:wan_bridgeNetworkPartition1-0812-213411/bgexec15919_14066.log: 2019-08-12 21:37:47,554 Geode Failure Detection thread 6 ERROR Recursive call to appender ALERT&amp;#42;** Test is dropping the networkwan_bridgeNetworkPartition1-0812-213411/vm_9_locator_1_2_host2_13435.log: [info 2019/08/12 21:37:46.265 PDT &lt;vm_9_thr_13_locator_1_2_host2_13435&gt; tid=0x94] Dropping network connection from rs-FullRegression13040513a0i3large-hydra-client-46 to rs-FullRegression13040513a0i3large-hydra-client-1 and from rs-FullRegression13040513a0i3large-hydra-client-1 to rs-FullRegression13040513a0i3large-hydra-client-46&amp;#42;** Here are the appender messageswan_bridgeNetworkPartition1-0812-213411/bgexec15919_14066.log: 2019-08-12 21:37:47,554 Geode Failure Detection thread 6 ERROR Recursive call to appender ALERTwan_bridgeNetworkPartition1-0812-213411/bgexec15919_14066.log: 2019-08-12 21:37:47,554 Geode Failure Detection thread 4 ERROR Recursive call to appender ALERTwan_bridgeNetworkPartition1-0812-213411/bgexec15919_14066.log: 2019-08-12 21:37:47,554 Geode Failure Detection thread 5 ERROR Recursive call to appender ALERTwan_bridgeNetworkPartition1-0812-213411/bgexec15919_14066.log: 2019-08-12 21:37:47,556 Geode Failure Detection thread 5 ERROR Recursive call to appender ALERTwan_bridgeNetworkPartition1-0812-213411/bgexec15919_14066.log: 2019-08-12 21:37:47,558 Geode Failure Detection thread 4 ERROR Recursive call to appender ALERTwan_bridgeNetworkPartition1-0812-213411/bgexec15919_14066.log: 2019-08-12 21:37:47,559 Geode Failure Detection thread 4 ERROR Recursive call to appender ALERT&amp;#42;** network is droppedwan_bridgeNetworkPartition1-0812-213411/vm_9_locator_1_2_host2_13435.log: [info 2019/08/12 21:37:47.136 PDT &lt;vm_9_thr_13_locator_1_2_host2_13435&gt; tid=0x94] Dropped network connection from rs-FullRegression13040513a0i3large-hydra-client-46 to rs-FullRegression13040513a0i3large-hydra-client-1 and from rs-FullRegression13040513a0i3large-hydra-client-1 to rs-FullRegression13040513a0i3large-hydra-client-46&amp;#42;** hang is declaredwan_bridgeNetworkPartition1-0812-213411/taskmaster_15326.log: [severe 2019/08/12 21:40:44.626 PDT &lt;master_15326&gt; tid=0x1] Result for vm_12_thr_16_wan1Lose_host1_14084: TASK[0] splitBrain.NetworkPartitionTest.HydraTask_doEntryOperations: HANG a client exceeded max result wait sec: 180&amp;#42;** now we see ForcedDisconnects[fatal 2019/08/12 21:40:57.826 PDT &lt;unicast receiver,rs-FullRegression13040513a0i3large-hydra-client-46-43284&gt; tid=0x24] Membership service failure: Membership coordinator 10.32.110.145(gemfire3_host1_14066:14066:locator)&lt;ec&gt;&lt;v2&gt;:41000 has declared that a network partition has occurredorg.apache.geode.ForcedDisconnectException: Membership coordinator 10.32.110.145(gemfire3_host1_14066:14066:locator)&lt;ec&gt;&lt;v2&gt;:41000 has declared that a network partition has occurred at org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager.forceDisconnect(GMSMembershipManager.java:2506) at org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.forceDisconnect(GMSJoinLeave.java:1106) at org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.processMessage(GMSJoinLeave.java:1481) at org.apache.geode.distributed.internal.membership.gms.messenger.JGroupsMessenger$JGroupsReceiver.receive(JGroupsMessenger.java:1328) at org.apache.geode.distributed.internal.membership.gms.messenger.JGroupsMessenger$JGroupsReceiver.receive(JGroupsMessenger.java:1266) at org.jgroups.JChannel.invokeCallback(JChannel.java:816) at org.jgroups.JChannel.up(JChannel.java:741) at org.jgroups.stack.ProtocolStack.up(ProtocolStack.java:1030) at org.jgroups.protocols.FRAG2.up(FRAG2.java:165) at org.jgroups.protocols.FlowControl.up(FlowControl.java:390) at org.jgroups.protocols.UNICAST3.deliverMessage(UNICAST3.java:1077) at org.jgroups.protocols.UNICAST3.handleDataReceived(UNICAST3.java:792) at org.jgroups.protocols.UNICAST3.up(UNICAST3.java:433) at org.apache.geode.distributed.internal.membership.gms.messenger.StatRecorder.up(StatRecorder.java:73) at org.apache.geode.distributed.internal.membership.gms.messenger.AddressManager.up(AddressManager.java:72) at org.jgroups.protocols.TP.passMessageUp(TP.java:1658) at org.jgroups.protocols.TP$SingleMessageHandler.run(TP.java:1876) at org.jgroups.util.DirectExecutor.execute(DirectExecutor.java:10) at org.jgroups.protocols.TP.handleSingleMessage(TP.java:1789) at org.jgroups.protocols.TP.receive(TP.java:1714) at org.apache.geode.distributed.internal.membership.gms.messenger.Transport.receive(Transport.java:152) at org.jgroups.protocols.UDP$PacketReceiver.run(UDP.java:701) at java.lang.Thread.run(Thread.java:748)</description>
      <version>1.11.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.alerting.internal.ClusterAlertMessagingTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.alerting.internal.ClusterAlertMessaging.java</file>
    </fixedFiles>
  </bug>
  <bug id="7204" opendate="2019-9-12 00:00:00" fixdate="2019-9-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add documentation for Asynchronous Event Queue pause-event-processing configuration</summary>
      <description>With the work done for https://issues.apache.org/jira/browse/GEODE-7121 we've added the new configuration attribute to Async Event Queues. We should add references to this in our documentation for cache-xml, the AsyncEventQueueFactory class, and the create/alter async-event-queue commands.</description>
      <version>None</version>
      <fixedVersion>1.9.2,1.10.0,1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.quick.ref.commands.by.area.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.resume.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.create.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.alter.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.cache.xml.2.gfsh.html.md.erb</file>
      <file type="M">geode-docs.reference.topics.cache.xml.html.md.erb</file>
      <file type="M">geode-docs.managing.security.implementing.authorization.html.md.erb</file>
      <file type="M">geode-docs.configuring.cluster.config.gfsh.persist.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7212" opendate="2019-9-17 00:00:00" fixdate="2019-12-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - Authorization - update security permissions</summary>
      <description>"Fine-grained security" changes were implemented in v1.3, but docs &amp; Wiki were only recently updated. Pick up these changes in the user guide. See https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.security.implementing.authorization.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7213" opendate="2019-9-17 00:00:00" fixdate="2019-1-17 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Zero-sized array for toArray() is recommended in modern JDK</summary>
      <description>pre-defined array size for allocation was a requirement in pre-JDK6 era.toArray(new T&amp;#91;0&amp;#93;) seems faster, safer, and contractually cleaner, and therefore should be the default choice now.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.ReflectionBasedAutoSerializer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.shell.support.HttpInvocationHandler.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.lifecycle.StartVsdCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.lifecycle.StartJVisualVMCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.lifecycle.StartJConsoleCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.RegionMBeanBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.DistributedSystemBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.SystemAdmin.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.stats50.VMStats50.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatisticsTypeXml.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.statistics.StatArchiveReader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.size.ObjectTraverser.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheXmlParser.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXManagerImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.InternalClientMembership.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.snapshot.SnapshotPacket.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.SearchLoadAndWriteProcessor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InitialImageOperation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DiskStoreImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.StatAlertsManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.locks.DLockRecoverGrantorProcessor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.locks.DLockGrantor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionMessage.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.QCompiler.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.PathUtils.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.MethodDispatch.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.CompiledJunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.jmx.internal.DynamicManagedBean.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.jmx.internal.AgentLauncher.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.internal.SystemMemberCacheImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.internal.DistributedSystemConfigImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="7261" opendate="2019-10-1 00:00:00" fixdate="2019-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode V1 admin rest does not start with Spring 5.x jars on the classpath</summary>
      <description>The geode-web war includes several spring jars, but does not include spring-core. With Jetty debug logging enabled we can see the following error: [vm0] 07:30:50.469 [RMI TCP Connection(1)-127.0.0.1] DEBUG org.eclipse.jetty.servlet.ServletHandler - EXCEPTION [vm0] java.lang.NoClassDefFoundError: org/springframework/core/ErrorCoded [vm0] at java.lang.ClassLoader.defineClass1(Native Method) [vm0] at java.lang.ClassLoader.defineClass(ClassLoader.java:763) [vm0] at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) [vm0] at java.net.URLClassLoader.defineClass(URLClassLoader.java:468) [vm0] at java.net.URLClassLoader.access$100(URLClassLoader.java:74) [vm0] at java.net.URLClassLoader$1.run(URLClassLoader.java:369) [vm0] at java.net.URLClassLoader$1.run(URLClassLoader.java:363)In addition, the war file also include commons-logging which causes the war logging to be redirected to stderr.</description>
      <version>1.9.0,1.9.1,1.10.0,1.11.0</version>
      <fixedVersion>1.9.2,1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7268" opendate="2019-10-2 00:00:00" fixdate="2019-11-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make gfsh alter region command similar to the API behavior</summary>
      <description>currently the gfsh command for alter region assigns the buckets to the region, before starting with the PR update config. This is not what the API does while altering a region This was requirement from the Lucene reindex story but that feature follows a different code path and will the be not affected if the assign buckets command was removed from the gfsh command. This also results in soft hangs when there are a lot of regions and gateway senders.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneServiceImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="7272" opendate="2019-10-3 00:00:00" fixdate="2019-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Docker image to build and preview the user guide</summary>
      <description>For building the Geode user guide it is needed to install Ruby and Bookbinder. It would be useful to have a docker image to do this task.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-book.README.md</file>
      <file type="M">dev-tools.docker.docs.view-docs.sh</file>
      <file type="M">dev-tools.docker.docs.Dockerfile</file>
      <file type="M">dev-tools.docker.docs.build-image-common.sh</file>
      <file type="M">dev-tools.docker.docs.build-docs.sh</file>
      <file type="M">dev-tools.docker.base.Dockerfile</file>
    </fixedFiles>
  </bug>
  <bug id="7273" opendate="2019-10-3 00:00:00" fixdate="2019-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode transaction should throw TransactionDataNotColocatedException if the transaction is on replicate region then partitioned region</summary>
      <description>A client transaction should fail with TransactionDataNotColocatedException instead of TransactionDataRebalancedException if transaction worked on the replicate regions first and then worked on an entry in a partitioned region where primary bucket is on another node.User should not work on replicate region first in a transaction, but Geode should throw correct exception as well.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.TXStateProxyImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tx.PartitionedTXRegionStub.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXStateProxyImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXState.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.ClientServerNotColocatedTransactionDistributedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7291" opendate="2019-10-14 00:00:00" fixdate="2019-10-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cluster and Member micrometer common tags should not be used with empty values</summary>
      <description>Creating tags without values is something that Micrometer recommends against doing. With our common tags we need to consider the implications of adding them outside of a server/locator member of a cluster.Given I create a cache without a member name When I add a meterregistry to that cacheThen I should not see the member common tag:- memberAnd I should see the following common tags:- cluster- host- member_typeGiven I create a clientcache through JavaWhen I add a meterregistry to that cacheThen I should not see the following common tags:- clusterAnd I should see the following common tags:- host- member- member_type</description>
      <version>1.11.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactoryTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactoryBindersTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.InternalCacheBuilderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.GemFireCacheImplTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CompositeMeterRegistryFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.metrics.CacheMeterRegistryFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalCacheBuilder.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.InternalClientCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="7294" opendate="2019-10-14 00:00:00" fixdate="2019-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update dependencies for v1.12</summary>
      <description>Update all the dependencies we can.  See attached PR.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">static-analysis.pmd-rules.build.gradle</file>
      <file type="M">geode-wan.build.gradle</file>
      <file type="M">geode-lucene.src.integrationTest.java.org.apache.geode.cache.lucene.LuceneIndexCreationPersistenceIntegrationTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.RegisterDriverCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.ListDriversCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DeregisterDriverCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateDataSourceCommandDUnitTest.java</file>
      <file type="M">geode-connectors.build.gradle</file>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.geode-assembly-test.src.main.java.org.apache.geode.session.tests.TomcatInstall.java</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7296" opendate="2019-10-15 00:00:00" fixdate="2019-11-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix Geode release scripts</summary>
      <description>Minor bug fixes</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">dev-tools.release.prepare.rc.sh</file>
      <file type="M">dev-tools.release.deploy.rc.pipeline.sh</file>
      <file type="M">dev-tools.release.commit.rc.sh</file>
    </fixedFiles>
  </bug>
  <bug id="7322" opendate="2019-10-18 00:00:00" fixdate="2019-10-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>generate wiki page of Cluster Management Service from Swagger page</summary>
      <description>#WHYwe want to get the latest update of restapi, and update wiki page automatically#WHATfind a programming way to update wiki pageAnd sync the latest update of Swagger to wikirelated:GEODE-7205 : https://issues.apache.org/jira/browse/GEODE-7205</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.test.script.update-management-wiki.sh</file>
    </fixedFiles>
  </bug>
  <bug id="7326" opendate="2019-10-21 00:00:00" fixdate="2019-12-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add cache gets timers</summary>
      <description>WhyUsers want to understand the performance of their operations within the server.Acceptance CriteriaType: timerName: geode.cache.getsTags: region, result=hit/missLifecycle of meter: The hit/miss meter for each region is created when the region is created. The meter(s) are removed when the region is destroyed/closed.Description for meter: The total time and count for GET requests from clients.Thing to measure : A count and total time for GET operations that didn't error, by this specific Server (1 or many cacheservers) in the geode cluster from when the server receives the request to when it sends the response.Business Rule for this measurement: This meter records any operation sent through a CacheServerScenariosScenario: Java client hitsGiven a cluster with a Server1 and a Locator1 with time statistics enabledWhen the oldest supported java client issues 5 get operations using the region.get(key) commandThen a meter on Server1 exists such that: Meter Name = 'geode.cache.gets' Count = 5 Total Time = total time spent from received request to response to client for these 5 requests Tag: region = region that the 'get' method was called against Tag: result=hitScenario: Java client missesGiven a cluster with a Server1 and a Locator1 with time statistics enabledWhen the oldest supported java client issues 5 get operations where the user is getting a key that doesn't exist in the region using the region.get(key) commandThen a meter on Server1 exists such that: Meter Name = 'geode.cache.gets' Count = 5 Total Time = total time spent from received request to response to client for these 5 requests Tag: region = region that the 'get' method was called against Tag: result=missScenario: Java client hits with time stats disabledGiven a cluster with a Server1 and a Locator1 with time statistics disabledWhen a java client issues a get operation using the region.get(key) command where the key existsThen a meter on Server1 exists such that: Meter Name = 'geode.cache.gets' Count = 1 Total Time = 0 Tag: region = region that the 'get' method was called against Tag: result=hitScenario: Java client error responseGiven a cluster with a Server1And a RegionA exists with NO entry with a Key="1"And the client is unauthorized for Key="1"When the client issues a region.get(1) requestThen no meter on Server1 should exist like: Meter Name = 'geode.cache.gets' Tag: region = RegionA</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.assertj.Conditions.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.CacheGetsTimerTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.micrometer.TimerAssert.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.micrometer.AbstractMeterAssert.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Get70Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.RegionPerfStatsTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GetEntry70.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Get70.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionStats.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionPerfStats.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.CachePerfStats.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.metrics.function.executions.FunctionExecutionsTimerNoResultTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="733" opendate="2016-1-6 00:00:00" fixdate="2016-12-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cluster Config service can throw a spurious exception</summary>
      <description>Occasionally this exception has been seen:info 2015/04/07 19:08:34.129 UTC locator0 &lt;locator request thread[44]&gt; tid=0x135a0] Attempting to unlock &lt;DLockService@55d6956e named __CLUSTER_CONFIG_LS destroyed=false grantorId=[LockGrantorId: lockGrantorMember=10.138.46.164(locator0:1522:locator)&lt;ec&gt;&lt;v0&gt;:55053, lockGrantorVersion=1, lockGrantorSerialNumber=3] grantor=&lt;DLockGrantor@41c8af04 state=READY name=__CLUSTER_CONFIG_LS version=1&gt;&gt; : __CLUSTER_CONFIG_LOCK , but this thread does not own the lock.com.gemstone.gemfire.distributed.LockNotHeldException: Attempting to unlock &lt;DLockService@55d6956e named __CLUSTER_CONFIG_LS destroyed=false grantorId=[LockGrantorId: lockGrantorMember=10.138.46.164(locator0:1522:locator)&lt;ec&gt;&lt;v0&gt;:55053, lockGrantorVersion=1, lockGrantorSerialNumber=3] grantor=&lt;DLockGrantor@41c8af04 state=READY name=__CLUSTER_CONFIG_LS version=1&gt;&gt; : __CLUSTER_CONFIG_LOCK , but this thread does not own the lock. at com.gemstone.gemfire.distributed.internal.locks.DLockService.unlock(DLockService.java:1941) at com.gemstone.gemfire.distributed.internal.SharedConfiguration.createConfigurationReponse(SharedConfiguration.java:376) at com.gemstone.gemfire.management.internal.configuration.handlers.ConfigurationRequestHandler.processRequest(ConfigurationRequestHandler.java:44) at com.gemstone.gemfire.distributed.internal.InternalLocator$LocatorHandler.processRequest(InternalLocator.java:1394) at com.gemstone.org.jgroups.stack.tcpserver.TcpServer$3.run(TcpServer.java:373) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)The problem is that there is an unlock in a finally block but no check to determine if the lock is actually being held.This was looked at previously and the proposed solution was:--- a/src/com/gemstone/gemfire/distributed/internal/SharedConfiguration.java+++ b/src/com/gemstone/gemfire/distributed/internal/SharedConfiguration.java@@ -362,8 +362,9 @@ public class SharedConfiguration { for (int i=0; i&lt;configRequest.getNumAttempts(); i++) { boolean isLocked = sharedConfigLockingService.lock(SHARED_CONFIG_LOCK_NAME, 5000, 5000);- try {- if (isLocked) {+ + if (isLocked) {+ try { logger.info("Building up configuration response with following configurations"); Set&lt;String&gt; groups = configRequest.getGroups(); groups.add(SharedConfiguration.CLUSTER_CONFIG);@@ -381,10 +382,10 @@ public class SharedConfiguration { } configResponse.setFailedToGetSharedConfig(false); return configResponse;+ }finally {+ sharedConfigLockingService.unlock(SHARED_CONFIG_LOCK_NAME); }- } finally {- sharedConfigLockingService.unlock(SHARED_CONFIG_LOCK_NAME);- }+ }</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceService.java</file>
    </fixedFiles>
  </bug>
  <bug id="7331" opendate="2019-10-21 00:00:00" fixdate="2019-10-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve docs on logging (with optional Log4j)</summary>
      <description>Log4j is in its own module.  Update the docs to reflect changes.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.logging.configuring.log4j2.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7332" opendate="2019-10-21 00:00:00" fixdate="2019-10-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add OQL Aggregates link in docs</summary>
      <description>Small change, but useful. File developing/querying_basics/what_is_a_query_string.html has a list of useful query string building blocks.  Add a link to the descriptions of the OQL aggregates to the list.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.querying.basics.what.is.a.query.string.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7336" opendate="2019-10-22 00:00:00" fixdate="2019-10-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>UpgradeTestOpenJDK8/11 failing in PR and CI</summary>
      <description>Looks like gradle is exiting for some reason. Here is just one example.... It does not appear to correlate to a checkin so looking at it the checkin might be a red herring.https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-pr/jobs/UpgradeTestOpenJDK11/builds/4557 https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-pr/jobs/UpgradeTestOpenJDK11/builds/4555https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-pr/jobs/UpgradeTestOpenJDK11/builds/4552 &gt; Task :geode-assembly:docs09:15:31&gt; Task :geode-assembly:installDist09:15:31&gt; Task :geode-assembly:compileUpgradeTestJava09:15:56&gt; Task :geode-assembly:upgradeTestClasses09:15:57&gt; Task :geode-lucene:upgradeTest09:15:57&gt; Task :geode-wan:upgradeTest09:16:01&gt; Task :geode-core:upgradeTest09:25:12&gt; Task :geode-assembly:upgradeTest09:25:1209:25:12The message received from the daemon indicates that the daemon has disappeared.09:25:12Build request sent: Build{id=001d3438-086b-4d20-b08c-d57006b0f947, currentDir=/home/geode/geode}09:25:13Attempting to read last messages from the daemon log...09:25:13Daemon pid: 535909:25:13 log file: /home/geode/.gradle/daemon/5.4/daemon-5359.out.log09:25:13----- Last 20 lines from daemon log file - daemon-5359.out.log -----09:25:13Note: Recompile with -Xlint:unchecked for details.09:25:13Note: Some input files use or override a deprecated API.09:25:13Note: Recompile with -Xlint:deprecation for details.09:25:13Note: Some input files use unchecked or unsafe operations.09:25:13Note: Recompile with -Xlint:unchecked for details.09:25:13Note: Some input files use or override a deprecated API.09:25:13Note: Recompile with -Xlint:deprecation for details.09:25:13Note: Some input files use or override a deprecated API.09:25:13Note: Recompile with -Xlint:deprecation for details.09:25:13Note: /home/geode/geode/geode-lucene/src/upgradeTest/java/org/apache/geode/cache/lucene/LuceneSearchWithRollingUpgradeDUnit.java uses unchecked or unsafe operations.09:25:13Note: Recompile with -Xlint:unchecked for details.09:25:13Note: Some input files use or override a deprecated API.09:25:13Note: Recompile with -Xlint:deprecation for details.09:25:13Note: Some input files use unchecked or unsafe operations.09:25:13Note: Recompile with -Xlint:unchecked for details.09:25:13Do not allow more than 48 test workers09:25:13Note: Some input files use or override a deprecated API.09:25:13Note: Recompile with -Xlint:deprecation for details.09:25:13Note: Some input files use unchecked or unsafe operations.09:25:13Note: Recompile with -Xlint:unchecked for details.09:25:13----- End of the daemon log -----09:25:1309:25:1309:25:13FAILURE: Build failed with an exception.09:25:1309:25:13* What went wrong:09:25:13Gradle build daemon disappeared unexpectedly (it may have been killed or may have crashed)09:25:1309:25:13* Try:09:25:13Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.09:25:1309:25:13* Get more help at https://help.gradle.org</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat8WithOldModulesMixedWithCurrentCanDoPutFromOldModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat8WithOldModulesMixedWithCurrentCanDoPutFromCurrentModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat8WithOldModuleCanDoPutsTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat7079WithOldModulesMixedWithCurrentCanDoPutFromOldModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat7079WithOldModulesMixedWithCurrentCanDoPutFromCurrentModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat7079WithOldModuleCanDoPutsTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7337" opendate="2019-10-23 00:00:00" fixdate="2019-11-23 01:00:00" resolution="Implemented">
    <buginformation>
      <summary>Create DescribeQueryService GFSH Command</summary>
      <description>To complement the addition of the AlterQueryService GFSH command, a command to describe the QueryConfigurationService should be added.The description should include the fully qualified class name of the MethodInvocationAuthorizer currently in use along with any parameters used to create it if applicable. The description should also return the value of the gemfireQueryService.allowUntrustedMethodInvocation system property.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CommandAvailabilityIndicator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.management.configuration.QueryConfigService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.QueryConfigurationServiceImpl.java</file>
      <file type="M">geode-core.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.GfshParserAutoCompletionIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7338" opendate="2019-10-23 00:00:00" fixdate="2019-11-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>create-images pipeline triggers on wrong base container image</summary>
      <description>build-concourse-docker-image triggers on base-image `openjdk:8`, but the `FROM` statement in the `Dockerfile` is `buildpack-deps:bionic-scm`</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.images.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7339" opendate="2019-10-23 00:00:00" fixdate="2019-12-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>move "experimental" out of url</summary>
      <description>WHY reduce the migration cost of customers for future formal release encourage developer to use it WHAT replace "experimental" with "v1" in the url update the documentation about url updates update the documentation to tag all the endpoint as experimental</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.test.java.org.apache.geode.management.internal.rest.controllers.ManagementControllerAdviceTest.java</file>
      <file type="M">geode-web-management.src.main.resources.swagger-management.properties</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.swagger.SwaggerConfig.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RequestWithAuthTokenTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.PdxManagementTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.MemberManagementServiceRestIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.JsonSerializationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.HateoasIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.GeneralManagementServiceRestIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.GatewayManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.ClusterManagementSecurityRestIntegrationTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.MemberManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ConfigurePDXDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ClientClusterManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.PlainLocatorContextLoader.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.swagger.config.SwaggerConfig.java</file>
      <file type="M">geode-management.src.test.script.update-management-wiki.sh</file>
      <file type="M">geode-management.src.test.script.list-management-url.sh</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.api.LinksTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Links.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementOperation.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.rest.SwaggerManagementVerificationIntegrationTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.DisabledClusterConfigTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.JQFilterVerificationDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ManagementRequestLoggingDistributedTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.GeodeManagementServiceFlagDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClusterManagementLocatorReconnectDunitTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.internal.rest.RegionManagementAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="734" opendate="2016-1-6 00:00:00" fixdate="2016-12-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh export stack-traces should not require an output file with extension .txt</summary>
      <description>gfsh export stack-traces requires a file with a .txt extension:gfsh&gt;export stack-traces --file=/tmp/trace.logInvalid file type, the file extension must be ".txt"This seems like a totally arbitrary restriction. Please can it be removed.If the concern is that an existing file might be overwritten then we should have a user prompt indicating that.</description>
      <version>None</version>
      <fixedVersion>1.1.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.resources.org.apache.geode.management.internal.cli.commands.golden-help-offline.properties</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ShowStackTraceDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.MiscellaneousCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.i18n.CliStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.MiscellaneousCommands.java</file>
    </fixedFiles>
  </bug>
  <bug id="7340" opendate="2019-10-23 00:00:00" fixdate="2019-10-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove geode-old-versions from Geode compile/runtime dependency list</summary>
      <description>The geode-old-versions subprojects are downloaded regardless of Gradle target chosen. They are only needed for running the upgrade tests and some acceptance tests. Fix the dependency configurations to only download and extract them if those targets are requested.Primary effect: cleans up the dependency list for compile/runtime</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.build.gradle</file>
      <file type="M">geode-serialization.build.gradle</file>
      <file type="M">geode-old-versions.build.gradle</file>
      <file type="M">geode-lucene.build.gradle</file>
      <file type="M">geode-logging.build.gradle</file>
      <file type="M">geode-junit.build.gradle</file>
      <file type="M">geode-dunit.build.gradle</file>
      <file type="M">geode-cq.build.gradle</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7341" opendate="2019-10-23 00:00:00" fixdate="2019-10-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Need to provide a way for user to avoid lock memory if not enough memory available</summary>
      <description>Currently Geode supports ALLOW_MEMORY_OVERCOMMIT when encountering not enough memory available during lock memory. Geode should provide another way to avoid locking memory at all.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalDistributedSystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="7354" opendate="2019-10-24 00:00:00" fixdate="2019-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>break dependencies on SystemFailure</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.tcpserver.TcpServerDependenciesTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.tcpserver.TcpServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="7355" opendate="2019-10-24 00:00:00" fixdate="2019-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Break dependencies on DistributionStats</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-logging.build.gradle</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.tcpserver.TcpServerDependenciesTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.membership.MembershipDependenciesJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.logging.CoreLoggingExecutors.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.TcpServerFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.tcpserver.TcpServer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.PooledExecutorWithDMStats.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.tcpserver.TCPServerSSLJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.tcpserver.TCPClientSSLIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7357" opendate="2019-10-24 00:00:00" fixdate="2019-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>membership-timeout documentation is incorrect</summary>
      <description>The description for membership-timeout on https://geode.apache.org/docs/guide/110/reference/topics/gemfire_properties.html is incorrect.It describes the member-timeout behavior of an old version of the product, before geode 1.0. Based on this description, a user might assume that an unresponsive member will be kicked out of the system only after 3*member-timeout milliseconds have elapsed. That may have been true before geode 1.0, but the geode has a different failure detection algorithm which will remove members after a minimum of 2*member-timeout milliseconds</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7361" opendate="2019-10-25 00:00:00" fixdate="2019-10-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Break dependencies on PoolStatHelper &amp; CoreLoggingExecutors</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.tcpserver.TcpServerDependenciesTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.TcpServerFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.tcpserver.TcpServer.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.tcpserver.TCPServerSSLJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.tcpserver.TCPClientSSLIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7363" opendate="2019-10-25 00:00:00" fixdate="2019-12-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add member type the tags for meterics</summary>
      <description>This would be good to tell the type of member that is providing the information such as server, locator, embedded cache, or a server with an embedded locator.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.metrics.internal.InternalDistributedSystemMetricsServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.metrics.internal.InternalDistributedSystemMetricsServiceBuilderTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.metrics.internal.InternalDistributedSystemMetricsService.java</file>
    </fixedFiles>
  </bug>
  <bug id="7365" opendate="2019-10-25 00:00:00" fixdate="2019-12-25 01:00:00" resolution="Abandoned">
    <buginformation>
      <summary>DistributedTest, AcceptanceTest timing out a lot</summary>
      <description>examples:https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/DistributedTestOpenJDK8/builds/1231https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/AcceptanceTestOpenJDK11/builds/1214 no tests appear to be hung.  probably just need to increase the timeout on these jobs</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7367" opendate="2019-10-28 00:00:00" fixdate="2019-11-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Specify memory usage for Cargo test containers</summary>
      <description>Currently the server container class used by cargo tests has no specification for max and initial heap causing them to default to amounts much larger than what our tests need. This has caused the Tomcat Cargo tests to use significantly more memory than they need to and put additional stress on the CI process.We can fix this by specifying an appropriate amount of memory in the server container's configuration object.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat8WithOldModulesMixedWithCurrentCanDoPutFromOldModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat8WithOldModulesMixedWithCurrentCanDoPutFromCurrentModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat7079WithOldModulesMixedWithCurrentCanDoPutFromCurrentModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat7079WithOldModuleCanDoPutsTest.java</file>
      <file type="M">geode-assembly.geode-assembly-test.src.main.java.org.apache.geode.session.tests.ServerContainer.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat7079WithOldModulesMixedWithCurrentCanDoPutFromOldModuleTest.java</file>
      <file type="M">geode-assembly.src.upgradeTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTomcat8WithOldModuleCanDoPutsTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7372" opendate="2019-10-29 00:00:00" fixdate="2019-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh shutdown --include-locators confirmation is ignored</summary>
      <description>The gfsh shutdown command prompts the User for confirmation of the shutdown. If the User types n for no, it should abort and do nothing. However, the shutdown proceeds and shuts down the entire cluster including the locator regardless of how the User answers the prompt.gfsh&gt;shutdown --include-locatorsAs a lot of data in memory will be lost, including possibly events in queues, do you really want to shutdown the entire distributed system? (Y/n): nShutdown is triggered</description>
      <version>1.11.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ShutdownCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="7373" opendate="2019-10-29 00:00:00" fixdate="2019-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add restriction to the type of credentials jmx should accept</summary>
      <description>Jmx credentials should only be in the form of String or String[]</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgent.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.security.shiro.JMXShiroAuthenticator.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.security.JmxCredentialTypeTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7374" opendate="2019-10-29 00:00:00" fixdate="2019-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ResultModel cannot be cast to Result</summary>
      <description>a class cast failure when they use CommandService(like attached java class) to run gfsh command such as list region:org.apache.geode.management.internal.cli.result.model.ResultModel cannot be cast to org.ap</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.remote.MemberCommandService.java</file>
    </fixedFiles>
  </bug>
  <bug id="7383" opendate="2019-10-30 00:00:00" fixdate="2019-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>geode-ci concourse resource doesn&amp;#39;t care about all of ci directory</summary>
      <description>Currently the geode-ci concourse resource is constrained to only care about parts of the ci directory in the repository. Because this resource does not trigger any jobs directly, it should pay attention to the entire ci directory.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7442" opendate="2019-11-12 00:00:00" fixdate="2019-11-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>IllegalStateException: Attempting to use localMaxMemory for off-heap but value is not yet known</summary>
      <description>The fix for GEODE-7162 introduced an internal regression: the CacheXmlGenerator might throw an exception whenever we use it to generate a cache.xml using a declarative approach with a partitioned region configured with off-heap and no local-max-memory.The issue is that we're overriding (partitionAttributes.setOffHeap(offHeap)) the off-heap value after cloning and merging the original partition attributes, causing a problem when using a declarative approach as we can't automatically detect the default local-max-memory if the member has not been started yet (not JVM to query).</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.RegionAttributesCreation.java</file>
    </fixedFiles>
  </bug>
  <bug id="7446" opendate="2019-11-12 00:00:00" fixdate="2019-12-12 01:00:00" resolution="Done">
    <buginformation>
      <summary>Upgrade Spring dependencies from 4.x to 5.x</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.test.gradle</file>
      <file type="M">geode-web.src.main.webapp.WEB-INF.geode-mgmt-servlet.xml</file>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.management-servlet.xml</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-management.build.gradle</file>
      <file type="M">geode-web-api.src.main.webapp.WEB-INF.geode-servlet.xml</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.util.JsonWriter.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-api.build.gradle</file>
      <file type="M">geode-pulse.src.main.webapp.WEB-INF.spring-security.xml</file>
      <file type="M">geode-pulse.src.main.webapp.WEB-INF.mvc-dispatcher-servlet.xml</file>
      <file type="M">geode-assembly.src.integrationTest.resources.expected.jars.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.test.junit.rules.GeodeHttpClientRule.java</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="745" opendate="2016-1-7 00:00:00" fixdate="2016-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>include-locators in shutdown command is ignored</summary>
      <description>The management REST API endpoint for shutdown, does not accept the include-locators parameter, and hence does not shutdown the locators.To reproduce connect to cluster using http:gfshconnect --use-http --url=...shutdown --include-locators=trueObserve that the locators are not shutdown.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.management.internal.web.controllers.MiscellaneousCommandsController.java</file>
    </fixedFiles>
  </bug>
  <bug id="7478" opendate="2019-11-19 00:00:00" fixdate="2019-12-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode session management fails to replicate if enableLocalCache is set to true in Tomcat module for client-sever setting</summary>
      <description>Currently geode only tests client-server setting with local cache not enabled.If enableLocalCache is set to true (the default setting), the session replication would fail in client-server case.This is caused by the following code: if (sessionRegion.getAttributes().getDataPolicy() == DataPolicy.EMPTY) { sessionRegion.registerInterest("ALL_KEYS", InterestResultPolicy.KEYS); }And /* * If we're using an empty client region, we register interest so that expired sessions are * destroyed correctly. */ if (!getSessionManager().getEnableLocalCache()) { region.registerInterest("ALL_KEYS", InterestResultPolicy.KEYS); }The implementation would cause only one Tomcat local client cache has the correct data for the session. If a user tries on to any other Tomcat instance, it would be a cache miss as the session data is not sent to other client caches. This would trigger a get from the server, and bring in the session data to the new client cache (in the new Tomcat instance). So far we do not have data replication problem.However, if there is an update on the session (adding a new attribute or update an existing attribute), these update of the session would not be replicated to the other Tomcat instance. If user failed over/land on different Tomcat, the session data are different.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.session.tests.CargoTestBase.java</file>
      <file type="M">geode-assembly.geode-assembly-test.src.main.java.org.apache.geode.session.tests.TomcatInstall.java</file>
      <file type="M">extensions.geode-modules.src.main.java.org.apache.geode.modules.session.catalina.ClientServerSessionCache.java</file>
      <file type="M">extensions.geode-modules-tomcat8.src.distributedTest.java.org.apache.geode.modules.session.Tomcat8SessionsClientServerDUnitTest.java</file>
      <file type="M">extensions.geode-modules-session-internal.src.main.java.org.apache.geode.modules.session.internal.common.ClientServerSessionCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="748" opendate="2016-1-7 00:00:00" fixdate="2016-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unexpected version string returned from gfsh</summary>
      <description>gfsh version returns a version number with a prepended 'v'. This is inconsistent with the actual versioning which never includes a 'v'.The v should be removed from the specific gfsh command.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.management.internal.cli.shell.Gfsh.java</file>
    </fixedFiles>
  </bug>
  <bug id="7485" opendate="2019-11-20 00:00:00" fixdate="2019-12-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>can not get index with "." in name by REST API for Management</summary>
      <description>precondition: 1. there is a region named "Foo6" in cluster 2. RESTAPI for Management is on.steps to reproduce1. create index by GFSH, with a "." in index name, such as "Foo6.name2"2. get all the indexes by REST API for Management, &amp;#91;GET&amp;#93;'/management/v1/indexes'3. in the response of &amp;#91;GET&amp;#93;'/management/v1/indexes', a index named "Foo6.name2" will be found in the index list4. and there is a "self" link in the links part of "Foo6.name2", it will be "http://localhost:7070/management/v1/regions/Foo6/indexes/Foo6.name2"5. and then , when you click on this link, you will get an error response: "Index 'Foo6' does not exist."expected result:1. can get a index by click that link.possible cause: 1. maybe RESTAPI for Management can not deal with "." as index name</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RebalanceOperationController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.GatewayManagementController.java</file>
    </fixedFiles>
  </bug>
  <bug id="7487" opendate="2019-11-21 00:00:00" fixdate="2019-11-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Running CQs should always use the latest installed Method Invocation Authorizer</summary>
      <description>When a MethodInvocationAuthorizer is changed in runtime, all running CQs should be updated to use it in order to avoid security issues. The previously cached results need to be invalidated/cleared as cached keys may not be valid anymore.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-cq.src.main.java.org.apache.geode.cache.query.cq.internal.ServerCQImpl.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionQueryEvaluatorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.QueryExecutionContextTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.QCompilerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.NWayMergeResultsTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.MethodDispatchTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.index.CompactRangeIndexTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.ExecutionContextTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.CompiledAggregateFunctionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.AttributeDescriptorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.ExecutionContext.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.DefaultQueryService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.cq.ServerCQ.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.ExecutionContextIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.DefaultQuerySecurityIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7494" opendate="2019-11-22 00:00:00" fixdate="2019-12-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update ArchUnit from 0.10.2 to 0.12.0</summary>
      <description>ArchUnit 0.12.0 has been released. We should update the Geode dependency:https://github.com/TNG/ArchUnit/releases/tag/v0.12.0</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Wish</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7498" opendate="2019-11-25 00:00:00" fixdate="2019-2-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>support type in list indexes of REST API for Management</summary>
      <description>WHAT:need to show "type" in &amp;#91;GET&amp;#93;"/management/v1/indexes"three types: range( default) key hash (deprecated)</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.RegionType.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Index.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.IndexType.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.converters.IndexConverterTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.converters.IndexConverter.java</file>
    </fixedFiles>
  </bug>
  <bug id="75" opendate="2015-7-1 00:00:00" fixdate="2015-7-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Rebalance independent regions in parallel</summary>
      <description>Rebalancing a single region happens under a distributed lock by a single coordinator. Multiple non-colocated regions should be able to be rebalanced independently.However, when rebalance is invoked through the API, a single thread goes throw each region one by one and rebalances it.We should provide the ability to parallelize a rebalance invoked through the API, so that each region can be rebalanced in parallel.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.internal.cache.control.RebalanceOperationDUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.control.RebalanceResultsImpl.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.control.RebalanceOperationImpl.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.control.InternalResourceManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="7502" opendate="2019-11-26 00:00:00" fixdate="2019-12-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove findbugs-annotations dependency from runtime</summary>
      <description>findbugs-annotations is used in compilation time for static code analysis, but it is currently set as a geode-core runtime dependency.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-memcached.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-memcached.build.gradle</file>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-assembly.src.integrationTest.resources.expected.jars.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.BundledJarsJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7504" opendate="2019-11-26 00:00:00" fixdate="2019-2-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>support creating regions with eviction</summary>
      <description>The new rest api supports creating regions but they can not be configured for eviction.Support for eviction should be added.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-common.src.main.java.org.apache.geode.util.internal.GeodeJsonMapper.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.configuration.RegionTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.PlainClusterManagementServiceBuilder.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Region.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.RegionConfigValidatorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.converters.RegionConverterTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.RegionAttributesTypeTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.RegionConfigValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.converters.RegionConverter.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.RegionAttributesType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.DeclarableType.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RegionManagementDunitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7583" opendate="2019-12-16 00:00:00" fixdate="2019-2-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>"status locator --name/--dir" is not working properly when locator ssl is enabled</summary>
      <description>in 1.8: 1. start a locator with ssl enabled2. "status locator --dir" or "status locator --name" would trigger such error messages in the locator log:&amp;#91;info 2019/12/16 08:57:39.958 PST locator &lt;locator request thread 1&gt; tid=0x23&amp;#93; Exception in processing request from 10.118.20.75javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection? at sun.security.ssl.InputRecord.handleUnknownRecord(InputRecord.java:710) at sun.security.ssl.InputRecord.read(InputRecord.java:527) at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:975) at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1367) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1395) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1379) at org.apache.geode.internal.net.SocketCreator.handshakeIfSocketIsSSL(SocketCreator.java:981) at org.apache.geode.distributed.internal.tcpserver.TcpServer.lambda$processRequest$0(TcpServer.java:346) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)In develop branch: the gfsh output would be a strange ClassCastException. It's definitely broken on develop</description>
      <version>1.8.0,1.9.0,1.10.0,1.11.0</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.MemberStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.LocatorLauncherStartupRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.GfshCommandRule.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.LocatorLauncherStatusTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.StatusLocatorCommandDunitTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.OfflineGfshCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.lifecycle.StatusLocatorCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ConnectCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.utils.ClusterConfigurationStatusRetriever.java</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.status.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7588" opendate="2019-12-17 00:00:00" fixdate="2019-1-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>geode-gfsh module is missing geode-all-bom, which results in its dependencies not having versions.</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-gfsh.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-gfsh.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7589" opendate="2019-12-17 00:00:00" fixdate="2019-2-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide ability to have batch dispatch be time based instead of size based</summary>
      <description>It would be nice to be able to configure wan to dispatch batches at intervals of time (time triggered) instead of batch size triggered.Currently we have batchIntervalTime and batchSize.  The wan will dispatch when the size of batch matches batchSize OR when the time interval is hit.  We can provide the user the ability to set the batchSize to say -1 and only trigger dispatch based on time and no longer on batch size.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.serial.SerialGatewaySenderQueueDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.misc.CommonParallelGatewaySenderDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.serial.SerialGatewaySenderQueue.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ConcurrentParallelGatewaySenderQueue.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionQueue.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.wan.misc.CommonParallelAsyncEventQueueOffHeapDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.wan.misc.CommonParallelAsyncEventQueueDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7593" opendate="2019-12-18 00:00:00" fixdate="2019-12-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Indexing pdx strings with eviction does not provide eviction benefits</summary>
      <description>PdxStrings hold references to the values bytes.  When the indexed key is a pdx string, the index holds references in memory.  Eviction will properly evict the region entry's value but the index holds the values byte in memory still.</description>
      <version>None</version>
      <fixedVersion>1.11.0,1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.index.AbstractIndex.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.index.AbstractIndexMaintenanceIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7596" opendate="2019-12-18 00:00:00" fixdate="2019-12-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Separate PR polling from use of Apache repo:status token</summary>
      <description>GitHub API rate-limits are ruining many good PRs. Try and mitigate our use. If still occurring, escalate to ASF INFRA.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7599" opendate="2019-12-19 00:00:00" fixdate="2019-2-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use GCI Concourse resource to track compute image versions</summary>
      <description>Use the Google Compute Image resource in concourse as an input to jobs that use the heavy-lifter pattern. This will make it easier to track job failures due to an image rebuild.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.rsync.code.down.sh</file>
      <file type="M">ci.scripts.create.instance.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.meta.deploy.meta.sh</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
      <file type="M">ci.images.google-geode-builder.packer.json</file>
    </fixedFiles>
  </bug>
  <bug id="7614" opendate="2019-12-20 00:00:00" fixdate="2019-12-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>testClientHealthStats_SubscriptionEnabled fails because subscriptions aren&amp;#39;t visible as soon as clients are</summary>
      <description>testClientHealthStats_SubscriptionEnabled failed because it expects the number of subscriptions to immediately match the number of clients. But they are not synched.The solution is for the test (in verifyClientsAndSubscription()) to assert (via awaitility) that the expected number of subscriptions eventually matches the expectation.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.ClientHealthStatsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="762" opendate="2016-1-7 00:00:00" fixdate="2016-9-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Change the default setting for enable-network-partition-detection to true</summary>
      <description>The default setting for enable-network-partition-detection should be changed from false to true.Distributed unit tests should continue to use a default setting of false since they do a lot of HA testing with a small number of VMs.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-cq.src.test.java.com.gemstone.gemfire.management.internal.cli.commands.ClientCommandsDUnitTest.java</file>
      <file type="M">geode-cq.src.test.java.com.gemstone.gemfire.cache.query.cq.dunit.CqStatsUsingPoolOptimizedExecuteDUnitTest.java</file>
      <file type="M">geode-cq.src.test.java.com.gemstone.gemfire.cache.query.cq.dunit.CqStatsUsingPoolDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.test.dunit.standalone.ProcessManager.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.test.dunit.internal.JUnit4DistributedTestCase.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.security.AbstractSecureServerDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.management.UniversalMembershipListenerAdapterDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.LonerDMJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.internal.cache.partitioned.Bug39356DUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.internal.cache.ConcurrentMapOpsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.internal.cache.Bug41733DUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.cache30.TXDistributedDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.cache30.RRSynchronizationDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.cache30.RegionMembershipListenerDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.cache30.PRBucketSynchronizationDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.cache30.ClientMembershipDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.cache.wan.GatewaySenderEventImpl.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.NetView.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.gms.messenger.JGroupsMessenger.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.distributed.internal.DistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.distributed.ConfigurationProperties.java</file>
      <file type="M">geode-assembly.src.test.java.com.gemstone.gemfire.rest.internal.web.controllers.RestAPITestBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="7707" opendate="2020-1-16 00:00:00" fixdate="2020-5-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tab completing `--url` on `connect` gives two default values</summary>
      <description>Expected resultTo see a string indicating one default value such as "Default is 'http://localhost:7070/geode-mgmt/v1'"Actual resultThis string "optional --url: Indicates the base URL to the Manager's HTTP service. For example: 'http://&lt;host&gt;:&lt;port&gt;/gemfire/v1' Default is 'http://localhost:7070/geode-mgmt/v1'; no default value" Note the `Default is` and the `no default value`steps to reproduceexecute `gfsh`execute `start locator`execute `disconnect`type `connect --url`press tab</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.i18n.CliStrings.java</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.connect.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7709" opendate="2020-1-16 00:00:00" fixdate="2020-1-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Wrong name of property in documentation</summary>
      <description>There is a wrong name of some properties in documentation.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
      <file type="M">geode-docs.managing.statistics.setting.up.statistics.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7711" opendate="2020-1-16 00:00:00" fixdate="2020-1-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh command over http failed when command has url encoded patterns in it.</summary>
      <description>when using gfsh connect over http, the following command would fail:create async-event-queue --id=myAEQ --listener=myApp.myListener --listener-param=db_url#host,username#db_user,password#abdfg012%dgadf The issue is related to % in the password. Removing % from password solved the issue.</description>
      <version>1.11.0</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web.src.main.java.org.apache.geode.management.internal.web.controllers.ShellCommandsController.java</file>
      <file type="M">geode-web.src.integrationTest.java.org.apache.geode.management.internal.cli.commands.CommandOverHttpTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7727" opendate="2020-1-18 00:00:00" fixdate="2020-3-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode P2P connection hanging</summary>
      <description>Geode P2P handshake reader stops listening to it's socket once the handshake between 2 peers is established. This seems to be a design choice. The problem is when the connection gets killed (TCP FIN). Since nothing is listening on the socket, nothing will get that FIN package and close the connection. The connection is left hanging (CLOSE-WAIT state). The peers are then unable to establish proper P2P communication later.</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.TCPConduit.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.ConnectionTable.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.Connection.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.DistributedSystemMXBeanWithAlertsDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.tcp.TCPConduitDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7728" opendate="2020-1-22 00:00:00" fixdate="2020-2-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>org.apache.geode.InternalGemFireError: ERROR: Assertion failed</summary>
      <description>When trying to run a simple equi-join query (both fields are indexed) with additional filters on a single region, the execution fails with the following exception:org.apache.geode.InternalGemFireError: ERROR: Assertion failed: ' ' at org.apache.geode.cache.query.internal.Support.assertionFailed(Support.java:76) at org.apache.geode.cache.query.internal.Support.Assert(Support.java:65) at org.apache.geode.cache.query.internal.Support.Assert(Support.java:46) at org.apache.geode.cache.query.internal.AbstractGroupOrRangeJunction.filterEvaluate(AbstractGroupOrRangeJunction.java:150) at org.apache.geode.cache.query.internal.CompiledJunction.filterEvaluate(CompiledJunction.java:190) at org.apache.geode.cache.query.internal.CompiledSelect.evaluate(CompiledSelect.java:538) at org.apache.geode.cache.query.internal.CompiledSelect.evaluate(CompiledSelect.java:53) at org.apache.geode.cache.query.internal.DefaultQuery.executeUsingContext(DefaultQuery.java:432) at org.apache.geode.cache.query.internal.DefaultQuery.execute(DefaultQuery.java:267) at org.apache.geode.cache.query.internal.DefaultQuery.execute(DefaultQuery.java:199)The problem seems to be that, in order to optimise the execution for a more general form of join queries, we fail to find the "optimal" filter on which to operate and, thus, the exception is thrown.The problem is not reproducible whenever one of the fields used for the comparison is not indexed, or when both indexes are passed to the query engine using the HINT keyword.</description>
      <version>None</version>
      <fixedVersion>1.12.0,1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.GroupJunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.CompiledComparison.java</file>
    </fixedFiles>
  </bug>
  <bug id="7729" opendate="2020-1-22 00:00:00" fixdate="2020-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade JNA to 5.5.0</summary>
      <description>Upgrade JNA dependency to 5.5.0.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.shared.NativeCallsJNAImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.shared.NativeCalls.java</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-assembly.src.integrationTest.resources.expected.jars.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7754" opendate="2020-1-31 00:00:00" fixdate="2020-2-31 01:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>Pulse should show gatewaysender&amp;#39;s running state instead of connected state</summary>
      <description>Pulse is showing gateway sender's "connected" state, while ListGatewayCommand in gfsh is showing gatewaySender's "running" state, this poses a discrepancy between the two monitors. Need to make them in sync.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.DistributedSystemBridge.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.beans.DistributedSystemBridgeIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7756" opendate="2020-2-3 00:00:00" fixdate="2020-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Performance Degradation on Clusters with CQs Introduced in GEODE-6989</summary>
      <description>On clusters with running CQs, a performance degradation was introduced by GEODE-6989 for regular cache operations.Every time an entry is updated on the cache, Geode internally (and synchronously) executes the registered CQs on the event entry to determine whether the subscribed clients should be notified or not. Due to the changes introduced through GEODE-6989, these regular cache operations now takes longer than expected (build internal cache key, check internal cache, and  subsequent put if needed), reducing the throughput ~ %10.</description>
      <version>1.11.0</version>
      <fixedVersion>1.12.0,1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-cq.src.main.java.org.apache.geode.cache.query.cq.internal.CqQueryImpl.java</file>
      <file type="M">geode-cq.src.distributedTest.java.org.apache.geode.cache.query.cq.internal.CqSecurityExecutionContextTamperingDistributedTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.MethodDispatchTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.query.internal.AttributeDescriptorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.QueryExecutionContext.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.MethodDispatch.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.AttributeDescriptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="7757" opendate="2020-2-3 00:00:00" fixdate="2020-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>list gateway command should also show the gateway sender&amp;#39;s connected state</summary>
      <description>Pulse shows the gateway sender's connected state, but gfsh list gateways sender command only shows the running/paused/stopping state, and user needs to infer the "connected" state by the information in the "Receiver Location" column. Here is the output sample of list gateways:GatewaySender Id |                Member                 | Remote Cluster Id |  Type  | Status  | Queued Events | Receiver Location---------------- | ------------------------------------- | ----------------- | ------ | ------- | ------------- | -----------------gws2             | 192.168.86.30(server:72557)&lt;v1&gt;:41001 | 2                 | Serial | Running | 0             |  It would be nice for the gfsh command to spell out if the gateway sender is "connected" or not. Maybe the Status column should show those state: "running, not connected", "running and connected" .....</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.ListGatewayCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.StatusGatewaySenderCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ListGatewayCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.i18n.CliStrings.java</file>
    </fixedFiles>
  </bug>
  <bug id="7759" opendate="2020-2-3 00:00:00" fixdate="2020-6-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Print out the Passing token file contents.</summary>
      <description>As a release person on the apache geode project, when I want to release a version, it becomes harder to know the passing tokens without looking at the file contents. So as part of this story, we are printing out the passing token contents for ease of use.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.images.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7761" opendate="2020-2-3 00:00:00" fixdate="2020-4-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>DistributedAckRegionCCEOffHeapDUnitTest &gt; testClearOnNonReplicateWithConcurrentEvents</summary>
      <description>CI Failure in DistributedTestOpenJDK11org.apache.geode.cache30.DistributedAckRegionCCEOffHeapDUnitTest &gt; testClearOnNonReplicateWithConcurrentEvents FAILED org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.geode.cache30.MultiVMRegionTestCase expected:&lt;[3]&gt; but was:&lt;[0]&gt; within 300 seconds. Caused by: org.junit.ComparisonFailure: expected:&lt;[3]&gt; but was:&lt;[0]&gt;Logs:=============== Test Results URI =================http://files.apachegeode-ci.info/builds/apache-develop-main/1.12.0-SNAPSHOT.0237/test-results/distributedTest/1580506766/=========================================Test report artifacts from this job are available at:http://files.apachegeode-ci.info/builds/apache-develop-main/1.12.0-SNAPSHOT.0237/test-artifacts/1580506766/distributedtestfiles-OpenJDK11-1.12.0-SNAPSHOT.0237.tgz</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.DistributedAckRegionCCEDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7763" opendate="2020-2-5 00:00:00" fixdate="2020-3-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Apache Geode 1.11 severely and negatively impacts performance and resource utilization</summary>
      <description>This problem was first observed in Apache Geode 1.11.0. The problem was not present in Apache Geode 1.9.2. This problem is an issue for Apache Geode 1.10 as well!After upgrading Spring Session for Apache Geode (SSDG) 2.3 to Spring Data for Apache Geode (SDG) Neumann/2.3, which is based on Apache Geode 1.11, this problem with SSDG's test suite started occurring. Spring Session for Apache Geode (SSDG) 2.2, which is based on Spring Data for Apache Geode (SDG) Moore/2.2, pulls in Apache Geode 1.9.2. This problem did not occur in SSDG 2.2. with Apache Geode 1.9.2.Out of curiosity, I wondered whether this problem affects (i.e. was actually introduced in) Apache Geode 1.10.0. So, I configured SSDG 2.3 to pull in SDG Moore/2.2 but run with Apache Geode 1.10. The problem occurred with Apache Geode 1.10 as well!The SSDG test class in question, affected by Geode's deficiencies, is the MultiThreadedHighlyConcurrentClientServerSessionOperationsIntegrationTests.The test class was modeled after a customer UC, who were using Spring Session and Apache Geode/Pivotal GemFire as the HTTP Session state management provider, therefore it simulates their highly concurrent environment.The test class has 2 primary parameters: Thread Count and the Workload Size.The "Workload Size" should not be confused with the "Payload Size" of the individual objects passed to the Geode data access operations (i.e. gets, puts, removes). The "Workload Size" merely determines the number of get, put or remove operations performed on the (Session) Region over the duration of the test run. Certain operations are "favored" over others, therefore the number of gets, puts and removes is weighted.The "Payload" in this case is a (HTTP) Session object and the "size" is directly proportional to the number of Session attributes stored in the Session.As you can see from the test class configuration in SSDG 2.2, the Thread Count was set to 180 and the Workload Size (or number of Region operations) was set to 10,000.This had to be significantly adjusted in SSDG 2.3 using Apache Geode 1.11 (and, as it turns out, Apache Geode 1.10 as well), as can be seen in the 2.3.0.M1 release bits source, here.It turns out different combinations of the Thread Count (number of workers, or "concurrent Sessions") and Workload Size ultimately determine whether this test class passes or not.In other words, if I increase the Thread Count, then the Workload Size must decrease, otherwise the test fails! If I increase the Workload Size, then the Thread Count must decrease, otherwise again the test fails!I tried with different combinations of Thread Count and Workload Size until the test passed. More often than not 180 Threads with 3000 Regions operations worked, but was right on the cusp of failing, therefore, I settled on 180 Threads (which nearly matches the customers environment of 200 concurrent client Sessions) and 2000 concurrent Region operations.The point of the test class is to assert the state of the Session is consistent at the end of the test run.However, before this test can even finish, the client, as in the ClientCache instance, starts failing with Exceptions, specifically:java.lang.RuntimeException: Session Access Task Failed at org.springframework.session.data.gemfire.MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.safeFutureGet(MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.java:298) at java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:210) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.IntPipeline.reduce(IntPipeline.java:456) at java.util.stream.IntPipeline.sum(IntPipeline.java:414) at org.springframework.session.data.gemfire.MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.runSessionWorkload(MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.java:313) at org.springframework.session.data.gemfire.MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.concurrentSessionAccessIsCorrect(MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.java:324) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74) at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)Caused by: java.util.concurrent.ExecutionException: org.springframework.dao.DataAccessResourceFailureException: Pool unexpected socket timed out on client connection=Pooled Connection to localhost:60964: Connection[DESTROYED]). Server unreachable: could not connect after 1 attempts; nested exception is org.apache.geode.cache.client.ServerConnectivityException: Pool unexpected socket timed out on client connection=Pooled Connection to localhost:60964: Connection[DESTROYED]). Server unreachable: could not connect after 1 attempts at java.util.concurrent.FutureTask.report(FutureTask.java:122) at java.util.concurrent.FutureTask.get(FutureTask.java:192) at org.springframework.session.data.gemfire.MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.safeFutureGet(MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.java:295) ... 43 moreCaused by: org.springframework.dao.DataAccessResourceFailureException: Pool unexpected socket timed out on client connection=Pooled Connection to localhost:60964: Connection[DESTROYED]). Server unreachable: could not connect after 1 attempts; nested exception is org.apache.geode.cache.client.ServerConnectivityException: Pool unexpected socket timed out on client connection=Pooled Connection to localhost:60964: Connection[DESTROYED]). Server unreachable: could not connect after 1 attempts at org.springframework.data.gemfire.GemfireCacheUtils.convertGemfireAccessException(GemfireCacheUtils.java:235) at org.springframework.data.gemfire.GemfireAccessor.convertGemFireAccessException(GemfireAccessor.java:93) at org.springframework.data.gemfire.GemfireTemplate.put(GemfireTemplate.java:200) at org.springframework.session.data.gemfire.GemFireOperationsSessionRepository.doSave(GemFireOperationsSessionRepository.java:226) at org.springframework.session.data.gemfire.GemFireOperationsSessionRepository.save(GemFireOperationsSessionRepository.java:186) at org.springframework.session.data.gemfire.AbstractGemFireIntegrationTests.save(AbstractGemFireIntegrationTests.java:409) at org.springframework.session.data.gemfire.MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.lambda$newAddSessionAttributeTask$2(MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.java:216) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: org.apache.geode.cache.client.ServerConnectivityException: Pool unexpected socket timed out on client connection=Pooled Connection to localhost:60964: Connection[DESTROYED]). Server unreachable: could not connect after 1 attempts at org.apache.geode.cache.client.internal.OpExecutorImpl.handleException(OpExecutorImpl.java:659) at org.apache.geode.cache.client.internal.OpExecutorImpl.handleException(OpExecutorImpl.java:501) at org.apache.geode.cache.client.internal.OpExecutorImpl.execute(OpExecutorImpl.java:153) at org.apache.geode.cache.client.internal.OpExecutorImpl.execute(OpExecutorImpl.java:108) at org.apache.geode.cache.client.internal.PoolImpl.execute(PoolImpl.java:772) at org.apache.geode.cache.client.internal.PutOp.execute(PutOp.java:89) at org.apache.geode.cache.client.internal.ServerRegionProxy.put(ServerRegionProxy.java:159) at org.apache.geode.internal.cache.LocalRegion.serverPut(LocalRegion.java:3035) at org.apache.geode.internal.cache.LocalRegion.cacheWriteBeforePut(LocalRegion.java:3152) at org.apache.geode.internal.cache.ProxyRegionMap.basicPut(ProxyRegionMap.java:238) at org.apache.geode.internal.cache.LocalRegion.virtualPut(LocalRegion.java:5580) at org.apache.geode.internal.cache.LocalRegionDataView.putEntry(LocalRegionDataView.java:162) at org.apache.geode.internal.cache.LocalRegion.basicPut(LocalRegion.java:5036) at org.apache.geode.internal.cache.LocalRegion.validatedPut(LocalRegion.java:1635) at org.apache.geode.internal.cache.LocalRegion.put(LocalRegion.java:1622) at org.apache.geode.internal.cache.AbstractRegion.put(AbstractRegion.java:442) at org.springframework.data.gemfire.GemfireTemplate.put(GemfireTemplate.java:197) ... 8 moreAttached to this issue are log output files from each of my runs using Apache Geode 1.10 and 1.11.The log files serve 2 purposes: 1) to show the version of Apache Geode used and 2) the errors occurs on the client and server during the run.Any lines in the log output prefixed with "&amp;#91;FORK&amp;#93;" originates from the cache server. The other lines come from the client. There is only a single client and server in this test case.It takes a bit of initial time during the run for the failures to start occurring, which is why this seems like a resource utilization problem.After first, I suspected issues with the client Pool configuration, or CacheServer configuration, adjusting timeouts and so on. I even suspected memory being an issue for the client and server processes, upping each to 2 GB+. However, it turns out none of the changes made a bit of difference. And the truth of the matter is, this (existing) configuration worked seamlessly until I upgraded to Apache Geode 1.10+ (specifically, 1.11).</description>
      <version>1.10.0,1.11.0</version>
      <fixedVersion>1.12.0,1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.CacheClientNotifierTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier.java</file>
    </fixedFiles>
  </bug>
  <bug id="7765" opendate="2020-2-5 00:00:00" fixdate="2020-4-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update dependencies for v1.13</summary>
      <description>Update all the dependencies we can.  See https://github.com/apache/geode/pull/4542</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.distributedTest.java.org.apache.geode.test.dunit.rules.tests.MemberStarterRuleAwaitIntegrationTest.java</file>
      <file type="M">geode-wan.build.gradle</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.GeoCoder.java</file>
      <file type="M">geode-redis.src.distributedTest.java.org.apache.geode.redis.RedisDistDUnitTest.java</file>
      <file type="M">geode-membership.src.integrationTest.java.org.apache.geode.distributed.internal.membership.gms.fd.GMSHealthMonitorJUnitTest.java</file>
      <file type="M">geode-junit.src.test.java.org.apache.geode.test.junit.rules.ExpectedTimeoutRuleTest.java</file>
      <file type="M">geode-junit.src.test.java.org.apache.geode.test.junit.rules.ExecutorServiceRuleGetThreadsTest.java</file>
      <file type="M">geode-junit.src.test.java.org.apache.geode.test.awaitility.GeodeAwaitilityTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.process.ProcessWrapper.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.awaitility.GeodeAwaitility.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.web.http.support.HttpRequesterTest.java</file>
      <file type="M">geode-gfsh.src.integrationTest.java.org.apache.geode.management.internal.cli.util.LogExporterFileIntegrationTest.java</file>
      <file type="M">geode-dunit.src.test.java.org.apache.geode.test.dunit.internal.VMEventNotifierTest.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.dunit.AsyncInvocation.java</file>
      <file type="M">geode-dunit.src.distributedTest.java.org.apache.geode.test.dunit.tests.VMDumpThreadsDistributedTest.java</file>
      <file type="M">geode-dunit.src.distributedTest.java.org.apache.geode.test.dunit.tests.StackTraceDistributedTest.java</file>
      <file type="M">geode-dunit.src.distributedTest.java.org.apache.geode.test.dunit.tests.AsyncInvocationTimeoutDistributedTest.java</file>
      <file type="M">geode-dunit.src.distributedTest.java.org.apache.geode.test.dunit.rules.tests.SharedCountersRuleDistributedTest.java</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">geode-assembly.geode-assembly-test.src.main.java.org.apache.geode.session.tests.TomcatInstall.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.cache.persistence.MissingDiskStoreAcceptanceTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.internal.rest.StandaloneClientManagementAPIAcceptanceTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.expected.jars.txt</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.alerting.internal.api.AlertingServiceDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.ReconnectDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.ReconnectWithClusterConfigurationDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.ResourceManagerWithQueryMonitorDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.ClusterCommunicationsDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.distributed.internal.DistributionAdvisorDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.distributed.LocatorDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.ClientServerReadConflictTransactionDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.ClientServerTransactionFailoverDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.control.RebalanceOperationDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.DeltaPropagationDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.execute.DistributedRegionFunctionExecutionDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.PartitionedRegionSingleHopDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.partitioned.PersistentColocatedPartitionedRegionDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.partitioned.PersistentPartitionedRegionDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.partitioned.PersistentPartitionHangsDuringRestartRegressionTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.persistence.PersistentRecoveryOrderDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.persistence.PersistentRVVRecoveryDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.tier.sockets.RedundancyLevelPart1DUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.tier.sockets.RedundancyLevelPart3DUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.metrics.MeterSubregistryReconnectDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.logging.internal.LoggingWithReconnectDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.DistributedSystemMXBeanWithAlertsDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.DistributedSystemMXBeanWithNotificationsDistributedTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.JMXMBeanReconnectDUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.admin.jmx.internal.DeprecatedAgentLauncherIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.alerting.internal.api.AlertingServiceWithClusterIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.LauncherIntegrationTestCase.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.ServerLauncherRemoteIntegrationTestCase.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.IncrementalBackupIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.PartitionedRegionCreationJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.tier.sockets.ConnectionProxyJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.TXDetectReadConflictJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.logging.MergeLogFilesIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.DistributedSystemMXBeanIntegrationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.control.InternalResourceManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.partitioned.colocation.SingleThreadColocationLoggerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.monitoring.executor.AbstractExecutorGroupJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.util.concurrent.StoppableCountDownLatchTest.java</file>
      <file type="M">geode-cq.src.distributedTest.java.org.apache.geode.internal.cache.PutAllClientServerDistributedTest.java</file>
      <file type="M">geode-cq.src.distributedTest.java.org.apache.geode.internal.cache.tier.sockets.DurableClientTestBase.java</file>
      <file type="M">geode-dunit.src.distributedTest.java.org.apache.geode.test.dunit.rules.tests.DistributedExecutorServiceRuleTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7777" opendate="2020-2-7 00:00:00" fixdate="2020-2-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add 1.13 management rest wiki page</summary>
      <description>each release gets a new wiki page...</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-management.src.test.script.update-management-wiki.sh</file>
    </fixedFiles>
  </bug>
  <bug id="7778" opendate="2020-2-7 00:00:00" fixdate="2020-2-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add PUBLISH, SUBSCRIBE and UNSUBSCRIBE Redis commands</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.resources.org.apache.geode.redis.internal.sanctioned-geode-redis-serializables.txt</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RedisDataType.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RedisConstants.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RedisCommandType.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.GeoCoder.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.AbstractExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.ExecutionHandlerContext.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.Coder.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="7779" opendate="2020-2-7 00:00:00" fixdate="2020-4-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Concourse BumpXYZ does not include {prerelease}</summary>
      <description>After cutting the 1.13.0 release branch, hitting BumpMinor caused the semver to move from 1.12.0-SNAPSHOT.246 -&gt; 1.13.0, which is then sorted in semantic-order to be higher value than 1.13.0-SNAPSHOT.1</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7792" opendate="2020-2-11 00:00:00" fixdate="2020-2-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>configure logging for geode-membership integration tests</summary>
      <description>Integration tests for geode-membership do not have a log4j configuration. The subproject cannot depend on geode-log4j because that pulls in geode-core with its Alert appender and other things.Add a log4j configuration for tests in geode-membership so we can get proper log output from tests to diagnose failures.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-membership.src.integrationTest.resources.log4j2.xml</file>
      <file type="M">geode-membership.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7799" opendate="2020-2-13 00:00:00" fixdate="2020-2-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Rebalance state needs to be distributed to other locators</summary>
      <description>WhyWithin certain environments, users could be connected to a singular locator point of contact which is then unintelligently routed to one of the locators. If I kick off an operation from one Locator, but then check on it using another locator I will get a missing operation message.Acceptance CriteriaOperation in one read by anotherScenario: Given a cluster is up with 2 locators (locater1,locater2) as well as 2 serversAnd a user submits a POST operation to locator1:7070/management/experimental/operations/rebalancesAnd that rebalance is in progressWhen a user submits a get operation to locator2:7070/management/experimental/operations/reblances/{id}Then they would receive the status of the operation started on locator1</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RebalanceOperationController.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceOperationControllerSpringTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceIntegrationTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ClientClusterManagementServiceDUnitTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.internal.ClusterManagementOperationStatusResultTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.client.ClusterManagementServiceBuilderTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.api.ClusterManagementOperationResultTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.runtime.RebalanceRegionResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.runtime.OperationResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.operation.RebalanceOperation.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.CompletableFutureProxy.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClusterManagementOperationStatusResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.api.BaseManagementServiceBuilder.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.RestTemplateClusterManagementServiceTransport.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementServiceTransport.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementOperationResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementOperation.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementListOperationsResult.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.operation.OperationManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.operation.OperationHistoryManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.operation.TaggedWithOperator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.operation.OperationManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.operation.OperationHistoryManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.RegionFactory.java</file>
      <file type="M">geode-core.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RebalanceManagementDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClientClusterManagementServiceDunitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.client.ClusterManagementServiceBuilderDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="780" opendate="2016-1-13 00:00:00" fixdate="2016-1-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GFSH should not require Attach API to start Locators or Servers</summary>
      <description>gfsh&gt;start locator --name=locator1Starting a GemFire Locator in C:\dev\geode\gemfire-assembly\build\install\apache-geode\bin\locator1...An error occurred while attempting to start a Locator in C:\dev\geode\gemfire-assembly\build\install\apache-geode\bin\locator1 on klund-e6420.vmware.com[10334]: The Attach API classes could not be found on the classpath. Please include JDK tools.jar on the classpath or add the JDK tools.jar to the jre/lib/ext directory.The current code uses an alternative implementation for status and stop if Attach API is missing. The start command should not attempt to use statusWithPid since it knows the working directory of the process being launched.The error should only occur when attempting to use --pid with a status or stop command when the Attach API is missing.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.management.internal.cli.commands.LauncherLifecycleCommands.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.process.ProcessUtils.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.process.NativeProcessUtils.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.process.AttachProcessUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="7800" opendate="2020-2-14 00:00:00" fixdate="2020-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add Redis PSUBSCRIBE and PUNSUBSCRIBE commands</summary>
      <description>Similar to SUBSCRIBE and UNSUBSCRIBE, PSUBSCRIBE allows a client to subscribe to a pattern. For example:PSUBSCRIBE sal*sThe subscription pattern is in the form of a glob supporting *, ? and ranges. https://redis.io/commands/psubscribePattern subscriptions must be unsubscribed verbatim. i.e., the above subscription would not be unsubscribed using the pattern s*, but must be unsubscribed using the complete subscribed pattern, namely sal*s.When clients subscribe to overlapping patterns (or channels) they will receive a message for every matched subscription. Matches for a single client are not conflated.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.resources.org.apache.geode.redis.internal.sanctioned-geode-redis-serializables.txt</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.Subscriber.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RedisCommandType.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.PubSubImpl.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.PubSub.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.org.apache.hadoop.fs.GlobPattern.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.pubsub.PublishExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.Client.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.PubSubTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.mocks.MockSubscriber.java</file>
    </fixedFiles>
  </bug>
  <bug id="7801" opendate="2020-2-14 00:00:00" fixdate="2020-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide "Querying with OQL" page - sync with T of C</summary>
      <description>The "Querying with OQL" page (https://geode.apache.org/docs/guide/111/developing/querying_basics/query_basics.html) has two subsidiary pages listed in the left-hand navigation pane, but they're not referenced in the page text itself.Given that the LH-nav is collapsed by default, it's (too) easy for the reader to overlook the subtopics (Advantages of OQL and Writing and Executing a Query in Geode).One solution would be to place links in the Querying with OQL page. Another would be to pull the subtopics into the Querying with OQL page and eliminating the extra level in the nav.A third possibility (perhaps the best) would be to elevate the Writing and Executing subtopic to a more prominent spot in the hierarchy - it seems kinda buried in its current position.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.querying.basics.running.a.query.html.md.erb</file>
      <file type="M">geode-docs.developing.querying.basics.query.basics.html.md.erb</file>
      <file type="M">geode-docs.developing.querying.basics.oql.compared.to.sql.html.md.erb</file>
      <file type="M">geode-docs.developing.querying.basics.chapter.overview.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7802" opendate="2020-2-14 00:00:00" fixdate="2020-1-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - add disclaimer that OQL queries are not pre-validated for nonexistent attributes</summary>
      <description>Community member @deepak khopade requests that we add a disclaimer to the user guide stating that OQL queries are not pre-screened for references to nonexistent attributes. The assertion is that users who have experience with other query models may expect Geode to apply such validation. In the Geode model, attributes and methods are resolved at runtime during query execution - the server does not know what's actually stored in a region until the query is executed.The disclaimer could be added in one of two places:Query Language Restrictions and Unsupported Features (https://geode.apache.org/docs/guide/111/developing/querying_basics/restrictions_and_unsupported_features.html)orQuerying FAQ and Examples (https://geode.apache.org/docs/guide/111/getting_started/querying_quick_reference.html)</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.querying.basics.restrictions.and.unsupported.features.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7813" opendate="2020-2-25 00:00:00" fixdate="2020-2-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add Build-Java-Vendor to gfsh version --full</summary>
      <description>The version info already includes the version of the compiler in Build-Java-Version. As there are now several java compiler vendors and a multitude of ways Geode may get compiled (various pipeline jobs, by a release manager, by users, etc) it makes sense to record the provider of that javac version as well. This is also required to audit that only open-source tools are being used to produce Geode artifacts.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7815" opendate="2020-2-25 00:00:00" fixdate="2020-2-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document setting a GEODE_HOME env variable</summary>
      <description>While internal methods will check the classpath for locating WAR files, we should document that setting a GEODE_HOME environment variable might an easier method for some installations than changing the classpath.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-pulse.src.main.webapp.WEB-INF.pulse-servlet.xml</file>
      <file type="M">geode-pulse.src.main.java.org.apache.geode.tools.pulse.internal.security.DefaultSecurityConfig.java</file>
      <file type="M">geode-pulse.src.integrationTest.java.org.apache.geode.tools.pulse.controllers.PulseControllerJUnitTest.java</file>
      <file type="M">geode-pulse.build.gradle</file>
      <file type="M">geode-docs.rest.apps.setup.config.html.md.erb</file>
      <file type="M">geode-docs.getting.started.setup.classpath.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7897" opendate="2020-3-20 00:00:00" fixdate="2020-3-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Run Redis integration tests against native Redis via Docker</summary>
      <description>Configures relevant integration tests to also run against native Redis via a Docker image. Intended to help find discrepancies between Geode Redis behavior and that of native Redis.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RedisConstants.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.string.IncrExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.RenameExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.Coder.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.StringsIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.SortedSetsIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.SetsIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.SetCommandNegativeCaseIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.RenameTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.PubSubIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.ListsIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.HashesIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.GeoIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.GeoCoderIntegrationTest.java</file>
      <file type="M">geode-redis.build.gradle</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7942" opendate="2020-4-1 00:00:00" fixdate="2020-4-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>document the enable-management-rest-service geode property</summary>
      <description>The enable-management-rest-service geode property needs to be documented. This property was added in geode 1.10.</description>
      <version>1.10.0,1.11.0,1.12.0</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7945" opendate="2020-4-2 00:00:00" fixdate="2020-4-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cluster restart recovery from disk blocked by waiting replies of CreateRegionMessage</summary>
      <description>A cluster restart recovering from disk has unexpected delays in some of the members. The logs show that those delayed members are waiting for replies of CreateRegionMessage, before loading the krf files. And the reason for waiting the replies of CreateRegionMessage is likely because other members are holding some lock while busy loading the krf files. Therefore the replies are delayed. Once those delayed members get the replies of CreateRegionMessage, it starts loading the krf files. If the delayed members contain the latest data, this could block other members waiting for the latest data.Because the cluster members are blocking each other at different stages during the cluster restart recovery process, the whole process is unexpectedly long when the disk store contains large amount of data.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.partitioned.PersistentBucketRecoverer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="7946" opendate="2020-4-3 00:00:00" fixdate="2020-4-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix redis publish/subscribe leaking netty buffers</summary>
      <description>We are not releasing all the buffers we allocate which can result in buffers leaking. This can produce log messages like:[error 2020/04/02 14:32:08.154 GMT &lt;GeodeRedisServer-WorkerThread-2&gt; tid=0xaf] LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.pubsub.SubscribeExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.pubsub.PsubscribeExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.AbstractSubscription.java</file>
    </fixedFiles>
  </bug>
  <bug id="7947" opendate="2020-4-3 00:00:00" fixdate="2020-4-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement tests for EXPIRE-related functionality</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.test.java.org.apache.geode.redis.internal.executor.general.ExpireExecutorJUnitTest.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.ExpireExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.ExpireAtExecutor.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.general.PexpireIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.general.ExpireIntegrationTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.StringsDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.SortedSetsDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.SetsDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.RenameDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.PubSubDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.ListsDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.HashesDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.GeoDockerAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8055" opendate="2020-4-30 00:00:00" fixdate="2020-5-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>can not create index on sub regions</summary>
      <description>When trying to use "create index" command in gfsh to create index on sub regions, we get the following message:"Sub-regions are unsupported"Pre-1.6, we were able to do that.</description>
      <version>1.7.0,1.8.0,1.9.2,1.10.0,1.11.0,1.12.0</version>
      <fixedVersion>1.12.1,1.13.0,1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.management.internal.configuration.ClusterConfigurationIndexWithFromClauseDUnitTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommand.java</file>
      <file type="M">geode-gfsh.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommandDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.CacheConfigTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="8076" opendate="2020-5-5 00:00:00" fixdate="2020-5-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>simplify redis concurrency code</summary>
      <description>Currently when doing a redis set operation, for example sadd, the code has to be careful to deal with other threads concurrently changing the same set.It does this in a number of ways but this could be simplified by having a higher level layer of the code ensure that for a given redis "key" operations will done in sequential order.This can be done safely in a distributed cluster because we now route all operations for a given key to the server that is storing the primary copy of data for that key.I spike was done and we found that this form of locking did not hurt performance. Since it allows simpler code that is less likely to have subtle concurrency issues we plan on merging the work done in the spike into the product.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.test.java.org.apache.geode.redis.internal.RegionProviderJUnitTest.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RegionProvider.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SScanExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SRemExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SRandMemberExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SPopExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SMoveExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SMembersExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SIsMemberExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SetOpExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SetExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SCardExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SAddExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.RedisSet.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.GeodeRedisSetWithFunctions.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.DeltaSet.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.CommandFunction.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
      <file type="M">geode-redis.src.integrationTest.resources.org.apache.geode.codeAnalysis.sanctionedDataSerializables.txt</file>
      <file type="M">geode-redis.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
    </fixedFiles>
  </bug>
  <bug id="8259" opendate="2020-6-16 00:00:00" fixdate="2020-6-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>when client singlehop getAll encountered SerializationException, it should retry</summary>
      <description>In GEOEDE-7090, DSFIDSerializerImpl.invokeFromData() will catch RunTimeException and throw. But convert Exception to be IOException. The idea is to avoid using SerializationException which is in another package. However, if my fromData() failed with IndexOutOfBoundary exception (which is an RTE), it will be thrown directly instead of treating it in handleException(), thus my serialization exception will never get handled. The fix is to merge the catch RunTimeException into catch Exception.</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0,1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.GetAllOp.java</file>
    </fixedFiles>
  </bug>
  <bug id="8419" opendate="2020-8-10 00:00:00" fixdate="2020-8-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SSL/TLS protocol and cipher suite configuration is ignored</summary>
      <description>Configuring ssl-protocols or ssl-ciphers properties, or per-component ssl properties, have no effect. Configuring ssl-protocols may effect the SSLContext selected and limit some of the protocols allowed but does not restrict to just the set specified in the property. The ssl-ciphers property does not limit cipher selection at all.The result is that all ciphers allowed under the match SSLContext are allowed and negotiated. This can result in an unintended cipher being used in SSL/TLS communication.</description>
      <version>1.10.0,1.11.0,1.12.0,1.13.0,1.14.0</version>
      <fixedVersion>1.12.1,1.13.1,1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.SSLUtil.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.NettyRedisServer.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.SSLTest.java</file>
      <file type="M">geode-pulse.geode-pulse-test.src.main.java.org.apache.geode.tools.pulse.tests.rules.ServerRule.java</file>
      <file type="M">geode-protobuf.src.integrationTest.java.org.apache.geode.internal.protocol.protobuf.v1.acceptance.CacheOperationsJUnitTest.java</file>
      <file type="M">geode-protobuf.src.integrationTest.java.org.apache.geode.internal.protocol.protobuf.v1.acceptance.CacheConnectionIntegrationTest.java</file>
      <file type="M">geode-http-service.src.main.java.org.apache.geode.internal.cache.InternalHttpService.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.shell.JmxOperationInvoker.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ConnectCommand.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.tcp.TCPConduitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SSLUtilTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SSLConfigurationFactoryJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SocketCreatorJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgent.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JmxManagerLocatorRequest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JmxManagerAdvisee.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.functions.GetMemberInformationFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ContextAwareSSLRMIClientSocketFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.handlers.ClusterManagementServiceInfoRequestHandler.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.GeodeConnectionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.tcp.Connection.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SSLUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SSLConfigurationFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreatorFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SCClusterSocketCreator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.SSLConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.remote.RemoteTransportConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.remote.DistributionLocatorId.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.LocatorLauncher.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.internal.AdminDistributedSystemImpl.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.SSLConfigJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.net.SSLSocketIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.net.SSLSocketHostNameVerificationIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.net.SocketCreatorFailHandshake.java</file>
    </fixedFiles>
  </bug>
  <bug id="8421" opendate="2020-8-11 00:00:00" fixdate="2020-10-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve clearing of existing GW sender queue</summary>
      <description>It is observed that clearing of GW sender queue, can take some time, due to mechanism which calls clear on all BucketRegions. This is improvement which proposes destroying of partition region, which is much faster.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="8469" opendate="2020-8-30 00:00:00" fixdate="2020-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enforce no-missing-variable-declarations</summary>
      <description>Given I compile the code without exempting no-missing-variable-declarationsThen it should compileNote - was marked as a todo</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.src.test.java.org.apache.geode.test.junit.rules.ExpectedTimeoutRuleTest.java</file>
      <file type="M">dev-tools.dependencies.bump.sh</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.runtime.DeploymentInfoTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.configuration.DeploymentTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.configuration.ClassNameTest.java</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8489" opendate="2020-9-11 00:00:00" fixdate="2020-9-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pulse should keep the 1.8 behavior when doing a "Select *" query</summary>
      <description>After the TypedJson refactor, we see those different behaviors when using DistributedSysteemMBean to do a "select *" query:1. Jackson Json Annotations are taking into effect now. "Select *" won't show those `@JsonIgnore` fields anymore. And "JsonProperty" annotation values are showing up as headers2. null values fields are not showing up.</description>
      <version>1.9.2,1.10.0,1.11.0,1.13.0</version>
      <fixedVersion>1.12.1,1.13.1,1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.json.QueryResultFormatterTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.json.QueryResultFormatter.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.json.AbstractJSONFormatter.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.beans.DistributedSystemMBeanIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8490" opendate="2020-9-11 00:00:00" fixdate="2020-9-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Docker containers are not properly cleaned up after native Redis acceptance tests</summary>
      <description>This CI failure is due to port conflicts with Docker containers that were not cleaned up properly in some native Redis acceptance tests that ran beforehand. Caused by: java.net.BindException: Network is unreachable; port (40404) is not available on localhost. at org.apache.geode.distributed.AbstractLauncher.assertPortAvailable(AbstractLauncher.java:142) at org.apache.geode.distributed.ServerLauncher.start(ServerLauncher.java:794)We created a test rule to properly close and clean up all Docker containers created by the native Redis acceptance tests.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.acceptanceTest.java.session.NativeRedisSessionExpirationAcceptanceTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.connection.AuthIntegrationTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.rules.IgnoreOnWindowsRule.java</file>
      <file type="M">geode-redis.build.gradle</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.connection.AuthNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.connection.PingNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.GlobPatternNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.hash.HashesNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.DelNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.ExistsNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.ExpireAtNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.ExpireNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.KeysNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.PersistNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.PexpireNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.PTTLNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.RenameNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.TTLNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.key.TypeNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.pubsub.PubSubNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SDiffNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SetsNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SInterNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SIsMemberNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SMoveNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SPopNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SRemNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.set.SUnionNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.AppendNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.BitCountNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.BitOpNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.BitPosNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.DecrByNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.DecrNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.GetBitNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.GetNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.GetRangeNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.GetSetNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.IncrByFloatNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.IncrByNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.IncrNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.MGetNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.MSetNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.MSetNXNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.PSetEXNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.SetBitNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.SetExNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.SetNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.SetNXNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.SetRangeNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.string.StrLenNativeRedisAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.session.NativeRedisSessionAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8492" opendate="2020-9-14 00:00:00" fixdate="2020-9-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis "clients" statistic goes negative</summary>
      <description>When running a long running app, we noticed that our "clients" statistic was negative. It should always be greater than or equal to 0. It seems like the call to decrement the number of clients was being invoked multiple times for each client.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RedisStats.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.netty.ExecutionHandlerContext.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.GeodeRedisServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="8493" opendate="2020-9-14 00:00:00" fixdate="2020-9-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>idle clients can cause server stuck thread warnings</summary>
      <description>Idle connection threads may produce warning messages like: {{&amp;#91;vm1&amp;#93; &amp;#91;warn 2020/09/02 14:31:36.580 PDT &lt;ThreadsMonitor&gt; tid=0x1c&amp;#93; Thread &lt;87&gt; (0x57) that was executed at &lt;02 Sep 2020 14:29:12 PDT&gt; has been stuck for &lt;144.113 seconds&gt; and number of thread monitor iteration &lt;2&gt; &amp;#91;vm1&amp;#93; Thread Name &lt;Pooled Waiting Message Processor 2&gt; state &lt;WAITING&gt;&amp;#91;vm1&amp;#93; Waiting on &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@25b1a95e&gt;&amp;#91;vm1&amp;#93; Executor Group &lt;PooledExecutorWithDMStats&gt;&amp;#91;vm1&amp;#93; Monitored metric &lt;ResourceManagerStats.numThreadsStuck&gt;&amp;#91;vm1&amp;#93; Thread stack:&amp;#91;vm1&amp;#93; sun.misc.Unsafe.park(Native Method)&amp;#91;vm1&amp;#93; java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)&amp;#91;vm1&amp;#93; java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)&amp;#91;vm1&amp;#93; java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)&amp;#91;vm1&amp;#93; org.apache.geode.redis.internal.netty.ExecutionHandlerContext.takeCommandFromQueue(ExecutionHandlerContext.java:139)&amp;#91;vm1&amp;#93; org.apache.geode.redis.internal.netty.ExecutionHandlerContext.processCommandQueue(ExecutionHandlerContext.java:125)&amp;#91;vm1&amp;#93; org.apache.geode.redis.internal.netty.ExecutionHandlerContext$$Lambda$320/28815321.run(Unknown Source)&amp;#91;vm1&amp;#93; java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)}}if the thread (client) becomes idle for some time. These messages will probably worry users. We should be able to safely switch to a having the ExecutionHandlerContext simply run its own thread to process the command Q.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.GeodeRedisServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="8547" opendate="2020-9-29 00:00:00" fixdate="2020-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Command "show missing-disk-stores" not working, when all servers are down</summary>
      <description>If cluster with 2 locators and 2 servers was ungracefully shutdown it can happen that locators that are able to start up are not having most recent data to bring up Cluster Configuration Service.If we excute command "show missing-disk-stores" it will not work, since all servers are down,so we are stuck in this situation.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ShowMissingDiskStoreCommand.java</file>
      <file type="M">geode-gfsh.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.ShowMissingDiskStoreCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8549" opendate="2020-9-29 00:00:00" fixdate="2020-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove use of junit EnvironmentVariables rule</summary>
      <description>The use of this rule causes build messages such as: &gt; Task :geode-redis:acceptanceTestWARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by org.junit.contrib.java.lang.system.EnvironmentVariables (file:/home/geode/.gradle/caches/modules-2/files-2.1/com.github.stefanbirkner/system-rules/1.19.0/d541c9a1cff0dda32e2436c74562e2e4aa6c88cd/system-rules-1.19.0.jar) to field java.util.Collections$UnmodifiableMap.mWARNING: Please consider reporting this to the maintainers of org.junit.contrib.java.lang.system.EnvironmentVariablesWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future releaseWe don't really need this unless we have a real concrete need to disable the Ryuk container.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.commonTest.java.org.apache.geode.NativeRedisTestRule.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.internal.executor.connection.AuthNativeRedisAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8600" opendate="2020-10-11 00:00:00" fixdate="2020-10-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Faulty statistics for parallel GW senders</summary>
      <description>When using getEventQueueSize method of GatewaySenderStats class, we receive negative value. This occurres for parallel GW sender, when GW sender is stoped with events in queue. After  GW sender is re-started GW, and events are unqueued, getEventQueueSize shows negative value.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.WANTestBase.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelWANStatsDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="8681" opendate="2020-11-2 00:00:00" fixdate="2020-11-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>peer-to-peer message loss due to sending connection closing with TLS enabled</summary>
      <description>We have observed message loss when TLS is enabled and a distributed lock is released right after sending a message that doesn't require acknowledgement if the sending socket is immediately closed. The closing of sockets immediately after sending a message is frequently seen in function execution threads or server-side application threads that use this pattern: try { DistributedSystem.setThreadsSocketPolicy(false); acquireDistributedLock(lockName); (perform one or more cache operations) } finally { distLockService.unlock(lockName); DistributedSystem.releaseThreadsSockets(); // closes the socket }The fault seems to be in NioSSLEngine.unwrap(), which throws an SSLException() if it finds the SSLEngine is closed even though there is valid data in its decrypt buffer. It shouldn't throw an exception in that case.</description>
      <version>1.10.0,1.11.0,1.12.0,1.13.0</version>
      <fixedVersion>1.12.1,1.13.1,1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.NioSslEngineTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.NioSslEngine.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.ClusterCommunicationsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8682" opendate="2020-11-3 00:00:00" fixdate="2020-11-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>update jetty to recommended version</summary>
      <description>update jetty to 9.4.33.v20201020</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.session.tests.GenericAppServerInstall.java</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8758" opendate="2020-12-2 00:00:00" fixdate="2020-12-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Downgrade testcontainers from 1.15.0 to 1.14.3</summary>
      <description>There appears to be a problem with the latest version, causing acceptance tests to hang. Possibly this: https://github.com/testcontainers/testcontainers-java/issues/3531</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
</bugrepository>
