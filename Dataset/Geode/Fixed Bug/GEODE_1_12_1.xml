<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="7938" opendate="2020-4-1 00:00:00" fixdate="2020-4-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>dev rest api should allow &amp;#39;.&amp;#39; and &amp;#39;/&amp;#39; characters in region keys</summary>
      <description>The dev rest api has multiple endpoints that can take region entry keys either as path variables or as query parameters. If the key contains a "/" then it can cause problems with parsing the URL. The '.' character also causes problems.The operations and endpoints that do not allow '.' and '/' in region keys are:GET, PUT, and DELETE on /v1/{region}/{keys}POST on /v1/{region}?key={key}A solution should be found that does not break backwards compatibility but that also allows these characters to be in the specified region key(s).</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.support.UpdateOp.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.PdxBasedCrudController.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.CommonCrudController.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.AbstractBaseController.java</file>
      <file type="M">geode-web-api.src.integrationTest.java.org.apache.geode.rest.internal.web.controllers.RestAccessControllerTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7939" opendate="2020-4-1 00:00:00" fixdate="2020-4-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>membership heartbeat messages aren&amp;#39;t designated high-priority</summary>
      <description>I noticed that membership heartbeat request/response messages aren't designated as "high priority". There's no reason that these messages need to be dispatched in order.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-membership.src.main.java.org.apache.geode.distributed.internal.membership.gms.messages.HeartbeatRequestMessage.java</file>
      <file type="M">geode-membership.src.main.java.org.apache.geode.distributed.internal.membership.gms.messages.HeartbeatMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="794" opendate="2016-1-19 00:00:00" fixdate="2016-2-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unable to match iterators when update in progress</summary>
      <description>When an update in progress occurs, run time iterators will possibly not be found. This is due to getReceiverNameFromPath not accounting for all the CompiledValue types that override getReceiver()The fix would involve adding CompiledOperation to the instance of checks.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.cache.query.internal.index.CompactRangeIndexJUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.cache.query.internal.index.CompactRangeIndex.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.cache.query.internal.index.AbstractIndex.java</file>
    </fixedFiles>
  </bug>
  <bug id="7940" opendate="2020-4-1 00:00:00" fixdate="2020-4-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>A parallel GatewaySender stops sending events if another GatewaySender that was attached to the same region is destroyed</summary>
      <description>The attached test reproduces this issue. It has a readme that describes how to run it.It starts 3 distributed systems named ln, ny and tk.ny and tk each have a gateway receiver and a region defined.Use gfsh in ln to:1. Create sender to ny 2. Create region with sender to ny 3. Start doing puts from a client (verify updates are happening in ny) 4. Create sender to tk 5. Alter region add sender to tk (verify updates are happening in tk) 6. Stop sender to ny 7. Alter region remove sender to ny 8. Destroy sender to nyUpdates should stop to ny but not tk, but updates to both stop.The ln log contains no exceptions. The stats show events being received and queued by the sender to tk. The eventQueueSize is 0, though.If step 8 is not done, updates continue flowing to tk.If the ln server is restarted, updates start flowing to tk again.</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderOperationsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.BucketAdvisorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketAdvisor.java</file>
    </fixedFiles>
  </bug>
  <bug id="7941" opendate="2020-4-1 00:00:00" fixdate="2020-4-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>upgrade Shiro to 1.5.2</summary>
      <description>our current Shiro version (1.4.1) is below the recommended version.  Now that Geode 1.12.0 has been released, now is a good time to bump whatever we can.</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7978" opendate="2020-4-9 00:00:00" fixdate="2020-4-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve tests for Redis Module SREM Command</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SAddExecutor.java</file>
      <file type="M">geode-redis.src.test.java.org.apache.geode.redis.internal.executor.set.SetExecutorJUnitTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.SetsIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.GeoIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7979" opendate="2020-4-10 00:00:00" fixdate="2020-4-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement a test class for the PERSIST Redis API command</summary>
      <description>The Redis PERSIST command removes the existing timeout on a key (https://redis.io/commands/persist).  The PERSIST command was previously implemented, but not tested. This PR adds tests for this command.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.PersistExecutor.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.general.ExpireIntegrationTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.RenameDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.PexpireDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.ExpireDockerAcceptanceTest.java</file>
      <file type="M">geode-redis.src.acceptanceTest.java.org.apache.geode.redis.ExpireAtDockerAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7980" opendate="2020-4-10 00:00:00" fixdate="2020-4-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect member count in rebalance output when rebalancing colocated regions</summary>
      <description>When colocated regions are present during rebalance, incorrect member counts are reported in the rebalance results: [vm0] [info 2020/04/10 11:28:50.895 PDT &lt;RebalanceCommand1&gt; tid=0x56] Rebalanced partition regions /childRegion [vm0] Total bytes in all redundant bucket copies created during this rebalance = 0 [vm0] Total time (in milliseconds) spent creating redundant bucket copies during this rebalance = 0 [vm0] Total number of redundant copies created during this rebalance = 0 [vm0] Total bytes in buckets moved during this rebalance = 0 [vm0] Total time (in milliseconds) spent moving buckets during this rebalance = 0 [vm0] Total number of buckets moved during this rebalance = 0 [vm0] Total time (in milliseconds) spent switching the primary state of buckets during this rebalance = 0 [vm0] Total primaries transferred during this rebalance = 0 [vm0] Total time (in milliseconds) for this rebalance = 0 [vm0] Total number of members in system on which rebalance is executed = 0[vm0] [info 2020/04/10 11:28:50.896 PDT &lt;RebalanceCommand1&gt; tid=0x56] Rebalanced partition regions /parentRegion [vm0] Total bytes in all redundant bucket copies created during this rebalance = 0 [vm0] Total time (in milliseconds) spent creating redundant bucket copies during this rebalance = 0 [vm0] Total number of redundant copies created during this rebalance = 0 [vm0] Total bytes in buckets moved during this rebalance = 18426 [vm0] Total time (in milliseconds) spent moving buckets during this rebalance = 2715 [vm0] Total number of buckets moved during this rebalance = 132 [vm0] Total time (in milliseconds) spent switching the primary state of buckets during this rebalance = 0 [vm0] Total primaries transferred during this rebalance = 0 [vm0] Total time (in milliseconds) for this rebalance = 5506 [vm0] Total number of members in system on which rebalance is executed = 4  A test to reproduce the issue is provided below.public class RebalanceMembersColocationTest { public static final String PARENT_REGION_NAME = "parentRegion"; public static final String CHILD_REGION_NAME = "childRegion"; @Rule public ClusterStartupRule cluster = new ClusterStartupRule(); @Rule public GfshCommandRule gfsh = new GfshCommandRule(); @Test public void testRebalanceResultOutputMemberCountWIthColocatedRegions() throws Exception { MemberVM locator = cluster.startLocatorVM(0); MemberVM server1 = cluster.startServerVM(1, locator.getPort()); MemberVM server2 = cluster.startServerVM(2, locator.getPort()); server1.invoke(() -&gt; { Region&lt;Object, Object&gt; parentRegion = Objects.requireNonNull(ClusterStartupRule.getCache()) .createRegionFactory(RegionShortcut.PARTITION).create(PARENT_REGION_NAME); IntStream.range(0, 500).forEach(i -&gt; parentRegion.put("key" + i, "value" + 1)); PartitionAttributesImpl attributes = new PartitionAttributesImpl(); attributes.setColocatedWith(PARENT_REGION_NAME); Region&lt;Object, Object&gt; childRegion = Objects.requireNonNull(ClusterStartupRule.getCache()) .createRegionFactory(RegionShortcut.PARTITION).setPartitionAttributes(attributes) .create(CHILD_REGION_NAME); IntStream.range(0, 500).forEach(i -&gt; childRegion.put("key" + i, "value" + 1)); }); server2.invoke(() -&gt; { Objects.requireNonNull(ClusterStartupRule.getCache()) .createRegionFactory(RegionShortcut.PARTITION).create(PARENT_REGION_NAME); PartitionAttributesImpl attributes = new PartitionAttributesImpl(); attributes.setColocatedWith(PARENT_REGION_NAME); Objects.requireNonNull(ClusterStartupRule.getCache()) .createRegionFactory(RegionShortcut.PARTITION).setPartitionAttributes(attributes) .create(CHILD_REGION_NAME); }); locator.waitUntilRegionIsReadyOnExactlyThisManyServers("/" + PARENT_REGION_NAME, 2); locator.waitUntilRegionIsReadyOnExactlyThisManyServers("/" + CHILD_REGION_NAME, 2); gfsh.connectAndVerify(locator); Map&lt;String, List&lt;String&gt;&gt; rebalanceResult = gfsh.executeAndAssertThat("rebalance") .statusIsSuccess().hasTableSection().getActual().getContent(); assertThat(rebalanceResult.get("Value").get(9)).isEqualTo("2"); }}</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.control.RebalanceResultsImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="7981" opendate="2020-4-10 00:00:00" fixdate="2020-4-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Change default redis region type to PARTITION_REDUNDANT</summary>
      <description>The current default for the redis API region type is PARTITION, which doesn't have any redundant copies. Since Geode can make the redis data highly available with a PARTITION_REDUNDANT region type, we should make that the default region type for ease of use.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.RedisServerIntegrationTest.java</file>
      <file type="M">geode-docs.tools.modules.redis.adapter.html.md.erb</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="7984" opendate="2020-4-14 00:00:00" fixdate="2020-4-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Consolidate POM publication scripts</summary>
      <description>There is a lot of repeated scripting between publishing jar, war, and pom artifacts. DRY it up.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.publish-war.gradle</file>
      <file type="M">gradle.publish-java.gradle</file>
      <file type="M">gradle.publish-common.gradle</file>
      <file type="M">boms.geode-all-bom.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="7985" opendate="2020-4-14 00:00:00" fixdate="2020-4-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>roll benchmark baseline to 1.12 release</summary>
      <description>current pipeline is still using 1.10.0 as baseline for benchmarks.  because we've made some improvements since then, we won't be catching any regressions against those gains</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">dev-tools.release.promote.rc.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
    </fixedFiles>
  </bug>
  <bug id="8409" opendate="2020-8-5 00:00:00" fixdate="2020-8-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SUNIONSTORE, SINTERSTORE, and SDIFFSTORE should delete the target key even if target exists and is not a set</summary>
      <description>This sequence: {{SET setres xxxSUNIONSTORE setres foo111 bar222}}(foo111 and bar222 do not exist)setres should be deleted and we should get a response of(integer) 0Instead we get(error) WRONGTYPE Operation against a key holding the wrong kind of value</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.data.NullRedisSet.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.set.SUnionIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.set.SInterIntegrationTest.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.set.SDiffIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8410" opendate="2020-8-5 00:00:00" fixdate="2020-8-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove offensive wording from documentation</summary>
      <description>Offensive wording appears in our documentation.  We should rewrite to eliminate the offensive wording.Here are some examples and possible substitutions:abort becomes stop/cancel/stop prematurelywhitelist and blacklist become allowlist(noun), allow(v) and denylist(noun), deny(v) or blockblackout becomes restriction(noun), restrict(v)master and slave become primary or main and secondary or workerwhitehat and blackhat become ethical and unethicalkill becomes stop or halt </description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.glossary.html.md.erb</file>
      <file type="M">geode-docs.reference.topics.client-cache.html.md.erb</file>
      <file type="M">geode-docs.reference.topics.cache.xml.html.md.erb</file>
      <file type="M">geode-docs.reference.statistics.list.html.md.erb</file>
      <file type="M">geode-docs.reference.archive.transactions.JTA.transactions.html.md.erb</file>
      <file type="M">geode-docs.managing.logging.logging.categories.html.md.erb</file>
      <file type="M">geode-docs.managing.disk.storage.backup.restore.disk.store.html.md.erb</file>
      <file type="M">geode-docs.developing.outside.data.sources.chapter.overview.html.md.erb</file>
      <file type="M">geode-docs.developing.events.list.of.event.handlers.and.events.html.md.erb</file>
      <file type="M">geode-docs.developing.events.how.client.server.distribution.works.html.md.erb</file>
      <file type="M">geode-docs.configuring.running.starting.up.shutting.down.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="8435" opendate="2020-8-18 00:00:00" fixdate="2020-8-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>restore gfsh ability to connect if serialization versions match regardless of product version</summary>
      <description>This used to work but was broken recently by changes for GEODE-8331.  Although this does not impact Geode releases, it causes quite a headache for developers that don't typically pass a product version in their gradle build command.</description>
      <version>1.12.1,1.13.0,1.14.0</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.ConnectCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ConnectCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="8915" opendate="2021-2-3 00:00:00" fixdate="2021-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode pipelines need to be modified to support concourse 6.x</summary>
      <description>In order to upgrade to concourse version 6 we need to change the pipelines. This issues will cover all support branches and develop.</description>
      <version>1.12.1,1.13.2,1.14.0</version>
      <fixedVersion>1.12.1,1.13.2,1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.mass-test-run.jinja.template.yml</file>
      <file type="M">ci.pipelines.reaper.jinja.template.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.meta.jinja.template.yml</file>
      <file type="M">ci.pipelines.images.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="8916" opendate="2021-2-3 00:00:00" fixdate="2021-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The gfsh export stack traces command should include the locators</summary>
      <description>The gfsh export stack traces command should include the locators, but only includes the servers.Here is an excerpt from a slack conversation showing the behavior:Shelley Hughes-Godfrey 6:48 PMI have a question about gfsh export stack-traces ..."list members" shows me servers and locators ...gfsh&gt;list membersMember Count : 3 Name | Id------------------------- | ----------------------------------------------------------------------------gemfire-cluster-server-0 | xx.xx.x.xxx(gemfire-cluster-server-0:1)&lt;v1&gt;:41000gemfire-cluster-locator-0 | xx.xx.x.xxx(gemfire-cluster-locator-0:1:locator)&lt;ec&gt;&lt;v0&gt;:41000 &amp;#91;Coordinator&amp;#93;gemfire-cluster-server-1 | xx.xx.x.xxx(gemfire-cluster-server-1:1)&lt;v2&gt;:41000But, if I don't specify members on the export stack-traces command, I just get the stacks for the servers.gfsh&gt;export stack-tracesstack-trace(s) exported to file: /path/stacktrace_1612316330340On host : ...Specifying a locator returns "No Members found"gfsh&gt;export stack-traces --member=gemfire-cluster-locator-0No Members FoundAlso, it looks like copy-paste was done from export logs =&gt; export stack-traces (for --members and --groups).</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.export.html.md.erb</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.ExportStackTraceCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ExportStackTraceCommand.java</file>
      <file type="M">geode-gfsh.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.ExportStackTraceCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8917" opendate="2021-2-3 00:00:00" fixdate="2021-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Revise docs to match current gfsh export stack-traces behavior</summary>
      <description>Our docs for gfsh export stack-traces do not match the current behavior. Update the docs.If we don't specify members on the export stack-traces command, we only get the traces for the servers.gfsh&gt;export stack-traces stack-trace(s) exported to file: /data/stacktrace_1612316330340 On host : gemfire-cluster-locator-0.gemfire-cluster-locator.gemfire-system.svc.cluster.localgfsh&gt;export stack-tracesstack-trace(s) exported to file: /path/stacktrace_1612316330340On host : ...Specifying a locator returns "No Members found"gfsh&gt;export stack-traces --member=gemfire-cluster-locator-0No Members FoundAlso, it looks like copy-paste was done from export logs =&gt; export stack-traces (for --members and --groups).</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.export.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="8918" opendate="2021-2-4 00:00:00" fixdate="2021-3-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode replication event forwarding does not honor GW sender state</summary>
      <description>With 3+ geo-red systems Geode replication has the forwarding feature which means that receiving cluster will forward the event it just got to all clusters it is connected to that have not yet received the event.This is possible because the originating cluster is setting metadata in the replication event like this:GatewaySenderEventCallbackArgument [originalCallbackArg=null;originatingSenderId=1;recipientGatewayReceivers= {3, 2}] Site receiving this event thus knows which is the originating site and which sites should have received this event. All others will have this event forwarded to. All this is legacy Geode behavior. However, originating site does not care if GW sender to a destination is stopped or not - only the fact GW sender is created and attached to a region is enough. This means if e.g. GW sender from Site1 to Site 3 is stopped (and has been stopped for a while - so this has nothing to do with timing) at the moment an event hits the replication it is only going to be sent to Site 2 but with the same metadata. Hence Site 2 will not forward to Site 3 (assuming it has a connection to it).</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderOperationsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.AbstractRegionTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.AbstractRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="8923" opendate="2021-2-6 00:00:00" fixdate="2021-2-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bump shiro to recommended version</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.2,1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8924" opendate="2021-2-6 00:00:00" fixdate="2021-3-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add VM restart tests for Redis and Spring sessions</summary>
      <description>Adding tests similar to some of our closed-source tests.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.distributedTest.java.org.apache.geode.redis.session.SessionDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8926" opendate="2021-2-8 00:00:00" fixdate="2021-4-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQ events can be missed while executing with initial results simultaneously with transactions</summary>
      <description>In this case, the event is not in either the initial results or received in the CqListener.A test that shows the behavior is: 2 servers with: a root PR a colocated child PRIn a client, asynchronously: start a transaction that: does N puts into the root PR does 1 put into the child PR commit the transactionIn the client:create N CQs with initial results with: 'select * from /childPR'When the test succeeds, all the CQs either get the 1 event in their initial results or in their CqListener.When the test fails, one or more CQs don't see the event either way.</description>
      <version>None</version>
      <fixedVersion>1.12.2,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.TXStateTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.FilterProfileJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionQueryEvaluatorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXState.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXEntryState.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TxCallbackEventFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.BaseCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionQueryEvaluator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.FilterProfile.java</file>
    </fixedFiles>
  </bug>
  <bug id="8947" opendate="2021-2-14 00:00:00" fixdate="2021-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Performance degradations due to GEODE-8930</summary>
      <description>Following the changes introduced by GEODE-8930, performance degradations were seen in situations involving P2P puts with replicated regions.</description>
      <version>1.12.1,1.13.2,1.14.0,1.15.0</version>
      <fixedVersion>1.12.1,1.13.2,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tx.RemoteOperationMessageTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tx.RemoteOperationMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="8974" opendate="2021-2-25 00:00:00" fixdate="2021-2-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bump apache-httpclient to recommended version</summary>
      <description>4.5.13 is already on 1.14 and develop, but should be back ported to 1.13 and 1.12</description>
      <version>1.12.1,1.13.1</version>
      <fixedVersion>1.12.2,1.13.3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8981" opendate="2021-3-1 00:00:00" fixdate="2021-3-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update micrometer version to 1.6.3</summary>
      <description>Currently, geode 1.12 uses micrometer version 1.2.1 which is much older than the latest release of the micrometer version. Version 1.2.1 of the micrometer release is also out of support (https://github.com/micrometer-metrics/micrometer/releases/tag/v1.2.1). Bumping this version to 1.6.3 which is the most stable release gives us to stay on the LTS support cycle of micrometer. https://micrometer.io/docs/support</description>
      <version>1.12.0,1.12.1</version>
      <fixedVersion>1.12.2,1.13.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8989" opendate="2021-3-2 00:00:00" fixdate="2021-3-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bump spring-security to recommended version</summary>
      <description>update develop, 1.14 from 5.4.2 to 5.4.5update 1.13 from 5.3.2 to 5.3.8update 1.12 from 5.2.4 to 5.2.9</description>
      <version>1.12.1,1.13.1,1.14.0,1.15.0</version>
      <fixedVersion>1.12.2,1.13.2,1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="9010" opendate="2021-3-6 00:00:00" fixdate="2021-3-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bump jetty to recommended version on support branches</summary>
      <description>develop is good but 1.12, 1.13, and 1.14 should be brought up to same level</description>
      <version>1.12.1,1.13.1,1.14.0</version>
      <fixedVersion>1.12.2,1.13.2,1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.expected.jars.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.session.tests.GenericAppServerInstall.java</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="9017" opendate="2021-3-9 00:00:00" fixdate="2021-3-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reload key store and trust store upon change</summary>
      <description>Link to RFC(The below text is copied from the RFC document.)ProblemCurrently, in order to rotate certificates each member of the cluster needs to be restarted to load new certs and trust. It would be preferable if certificates can be rotated without having to restart members.SolutionWhen starting up a cluster member we currently read the TLS configuration which, when TLS is enabled has key and trust store files defined. In case those files are defined they are read, and the information inside them is loaded into the key and trust manager objects that are loaded into the SSLContext.This solution will introduce wrapper objects for the key and trust managers and file/directory watcher(s) that can detect changes to the key and trust store files. When key and trust store files are changed this will trigger a reload into key and trust managers and through the wrapper objects these new key and trust managers will be injected into the SSLContext so that the context can start using the new key and trust managers in process.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.ssl.CertificateRotationTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.cache.ssl.CertStores.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SSLUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreator.java</file>
    </fixedFiles>
  </bug>
  <bug id="9023" opendate="2021-3-11 00:00:00" fixdate="2021-3-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add sharding support to redis region</summary>
      <description>This ability allows for the future mapping of cluster slots to geode buckets which is preemptive to enabling redis clustering support.</description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RegionProvider.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.data.ByteArrayWrapper.java</file>
      <file type="M">geode-redis.build.gradle</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
