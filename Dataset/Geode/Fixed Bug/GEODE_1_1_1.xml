<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="2775" opendate="2017-4-12 00:00:00" fixdate="2017-5-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pulse is not using certificate to connect to JMX when ssl is turned for jmx connection</summary>
      <description>Steps to reproduce:1) start a locator with a SecurityManager and with this property: ssl-enabled-components=jmx2) start a browser and tries to login to pulse.Actual result: not able to log in using valid username/password</description>
      <version>1.1.1</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-pulse.src.main.java.org.apache.geode.tools.pulse.internal.PulseAppListener.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgent.java</file>
    </fixedFiles>
  </bug>
  <bug id="2776" opendate="2017-4-12 00:00:00" fixdate="2017-5-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The version tag on client event is not updated when an entry is added to server using load operation.</summary>
      <description>When client does a get() which results in adding an entry by calling loader on server side, the client event returned back is not updated with the version tag that is created with the new entry on server. This results in client having a different version tag than the server side entry. If client has registered event, and is concurrently updating the entry (from get() call and an register-event from server), it could result in data consistency between client and server.Scenario 1:On Server invalidate happens, and the event is added to client queue.Client does get()On Server, the get() triggers load + put on server. And the response is sent back.Client gets the result from get() (which is newer) and applies to its cache.Client gets invalid event (older than get), and it applies the event to the cache (this is supposed to be conflated, but due to this bug its not conflated).At the end server has valid entry in the cache but client has invalid entry.On Server: INVALID (First), Get(From Client, LOAD+PUT) (later)On Client: GET(), PUT using Get Response(), INVALID (old)Scenario 2:Client does get()On Server, the get() triggers load + put on server. And the response is sent back.On Server invalidate happens, and the event is added to client queue.Client gets invalid event, and it applies the event to the cache.Client gets the result from get() (which is older than invalidate) and applies to its cache (this is supposed to be conflated, but due to this bug its not conflated).At the end server has invalid entry in the cache but client has valid entry (old value).On Server: Get(From Client, LOAD+PUT), INVALID (later)On Client: GET() (new), INVALID (old), PUT using Get Response().</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DistributedRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="2778" opendate="2017-4-13 00:00:00" fixdate="2017-5-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>gfsh help now uses log4j log levels: update user guide</summary>
      <description>Update the user guide to reflect this change.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.configuring.gfsh.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.start.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.export.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.change.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.alter.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="278" opendate="2015-8-25 00:00:00" fixdate="2015-9-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Inconsistent firing of callbacks on TXHost and Remote members</summary>
      <description>On the TXHost, at commit time, we first apply all the tx changes to the cache and then proceed to fire callbacks (listeners, CQ, wan etc). On the remote members however, the callbacks are fired inline (i.e. while the entries are being applied to the cache). This leads to the callbacks only seeing partial transaction being applied.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.internal.cache.ClientServerTransactionDUnitTest.java</file>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.internal.cache.RemoteTransactionDUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.TXCommitMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="2787" opendate="2017-4-14 00:00:00" fixdate="2017-4-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>state flush did not wait for notifyGateway</summary>
      <description>When distribution happened, it calls startOperation() to increase a count, then call an endOperation() to decrease the count. state flush will wait for this count to become 0. But notifyGateway() is called after distribute(). So there's race that stateflush finished but notifyGateway has not done yet. The fix is to move the endOperation() after callbacks.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.Bug45934DUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegionDataView.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DistributedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DistributedCacheOperation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.AbstractUpdateOperation.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.GIIDeltaDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.StateFlushOperation.java</file>
    </fixedFiles>
  </bug>
  <bug id="279" opendate="2015-8-25 00:00:00" fixdate="2015-8-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Hang may be caused by repeatedly creating and destroying a Partiitioned Region</summary>
      <description>If a partitioned region is concurrently created and destroyed while operations on it are in progress it may result in a hang. The hang will log this severe message: &amp;#91;severe ...&amp;#93; While pulling a message com.gemstone.gemfire.cache.RegionDestroyedException: Region ... is destroyed</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.partitioned.PartitionMessage.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.DistributedCacheOperation.java</file>
    </fixedFiles>
  </bug>
  <bug id="2795" opendate="2017-4-18 00:00:00" fixdate="2017-4-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Nightly build failure: CreateAlterDestroyRegionCommandsDUnitTest</summary>
      <description>It looks like the nightly build is failing due to polluted DUnit vms. (FastClassPathScanner uses the Path api instead of the File api, and while File accepts modified values of System.getProperty("user.dir"), Path does not).:geode-core:distributedTestorg.apache.geode.management.internal.cli.commands.CreateAlterDestroyRegionCommandsDUnitTest &gt; testAlterRegionResetCacheListeners FAILED java.lang.AssertionError: Suspicious strings were written to the log during this run. Fix the strings or use IgnoredException.addIgnoredException to ignore. ----------------------------------------------------------------------- Found suspect string in log4j at line 908 [error 2017/04/18 10:12:26.647 UTC &lt;Function Execution Processor1&gt; tid=0x5d9] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:191) at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376) at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:442) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 945 [error 2017/04/18 10:12:26.671 UTC &lt;Function Execution Processor1&gt; tid=0x5b1] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:333) at org.apache.geode.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:303) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 989 [error 2017/04/18 10:12:26.865 UTC &lt;Function Execution Processor1&gt; tid=0x5d9] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:191) at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376) at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:442) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 1022 [error 2017/04/18 10:12:26.866 UTC &lt;Function Execution Processor1&gt; tid=0x5b1] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:333) at org.apache.geode.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:303) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 1066 [error 2017/04/18 10:12:26.973 UTC &lt;Function Execution Processor1&gt; tid=0x5b1] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:333) at org.apache.geode.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:303) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 1098 [error 2017/04/18 10:12:26.975 UTC &lt;Function Execution Processor1&gt; tid=0x5d9] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:191) at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376) at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:442) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 1143 [error 2017/04/18 10:12:27.076 UTC &lt;Function Execution Processor1&gt; tid=0x5d9] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:191) at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376) at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:442) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 1176 [error 2017/04/18 10:12:27.076 UTC &lt;Function Execution Processor1&gt; tid=0x5b1] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:333) at org.apache.geode.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:303) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 1220 [error 2017/04/18 10:12:27.169 UTC &lt;Function Execution Processor1&gt; tid=0x5d9] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:191) at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376) at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:442) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 1253 [error 2017/04/18 10:12:27.169 UTC &lt;Function Execution Processor1&gt; tid=0x5b1] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:333) at org.apache.geode.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:303) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 moreorg.apache.geode.management.internal.cli.commands.CreateAlterDestroyRegionCommandsDUnitTest &gt; testCreateRegionWithPartitionResolver FAILED java.lang.AssertionError: Suspicious strings were written to the log during this run. Fix the strings or use IgnoredException.addIgnoredException to ignore. ----------------------------------------------------------------------- Found suspect string in log4j at line 606 [error 2017/04/18 10:12:45.568 UTC &lt;Function Execution Processor1&gt; tid=0x811] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:191) at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376) at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:442) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/server-1 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more ----------------------------------------------------------------------- Found suspect string in log4j at line 639 [error 2017/04/18 10:12:45.569 UTC &lt;Function Execution Processor1&gt; tid=0x7f8] Could not deploy JAR file java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 java.lang.RuntimeException: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1115) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1143) at io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan(FastClasspathScanner.java:1166) at org.apache.geode.internal.DeployedJar.findFunctionsInThisJar(DeployedJar.java:328) at org.apache.geode.internal.DeployedJar.loadClassesAndRegisterFunctions(DeployedJar.java:175) at org.apache.geode.internal.JarDeployer.registerNewVersions(JarDeployer.java:477) at org.apache.geode.internal.JarDeployer.deploy(JarDeployer.java:516) at org.apache.geode.management.internal.cli.functions.DeployFunction.execute(DeployFunction.java:68) at org.apache.geode.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:333) at org.apache.geode.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:303) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:621) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1067) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:217) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:61) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ... 1 more Caused by: java.nio.file.NoSuchFileException: /tmp/junit3985345267510453893/locator-0 at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:876) at io.github.lukehutch.fastclasspathscanner.scanner.Scanner.call(Scanner.java:215) ... 5 more</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.test.dunit.rules.MemberVM.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.test.dunit.rules.LocatorServerStartupRule.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.JMXMBeanDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.ClusterConfigTestBase.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.DeployCommandRedeployDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.ConnectToLocatorSSLDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.ClassPathLoaderIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="2804" opendate="2017-4-20 00:00:00" fixdate="2017-7-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow a locator host to be taken off line and replaced with a different machine having the same host name</summary>
      <description>It is not unlikely that in a long-running system a machine hosting a locator will break down and need to be replace, or that a virtual machine hosting a locator will be stopped and restarted. In either case the machine may have a different IP address.Clients and servers currently cache the IP address of a locator and should be changed to re-resolve the host name if the address stops being usable.Servers currently cannot be started if they are given a host name that can not be resolved. They should be changed to allow this and start up if they are able to contact one or more of the other locators in their "locators" setting.</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.dependency-versions.properties</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.misc.WanAutoDiscoveryDUnitTest.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.internal.cache.wan.AbstractRemoteGatewaySender.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.cache.client.internal.locator.wan.LocatorMembershipListenerImpl.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.cache.client.internal.locator.wan.LocatorDiscovery.java</file>
      <file type="M">geode-core.src.test.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.StartupMessageDataJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeaveJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.DistributionConfigJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.client.internal.AutoConnectionSourceDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PoolFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.ClusterConfigurationLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.remote.RemoteTransportConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.remote.DistributionLocatorId.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.locator.GMSLocator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.GMSUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalDistributedSystem.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.AbstractDistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.PoolImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.internal.DistributionLocatorImpl.java</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">geode-assembly.src.test.resources.expected.jars.txt</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.client.internal.AutoConnectionSourceImplJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JmxManagerLocatorRequest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.utils.ClusterConfigurationStatusRetriever.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.LauncherLifecycleCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.tcpserver.TcpClient.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.AutoConnectionSourceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="2806" opendate="2017-4-20 00:00:00" fixdate="2017-4-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>when batch is dispatched, if the bucket is not primary, we should still destroy the event from queue</summary>
      <description>This is one of the root causes for data mismatch. When AEQ dispatched a batch, when it tried to destroy the events from queue, the bucket might be no longer primary. There's no need to let the new primary to re-dispatch the batch.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="2809" opendate="2017-4-21 00:00:00" fixdate="2017-4-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode docs: Clarify SSL setup for client</summary>
      <description>The page managing/security/implementing_ssl.html contains an example of setting ssl properties for a client. It would be helpful to clarify which properties refer to client-local entities (e.g. path to keystore) and which are local reflections of server settings (e.g. whether locators and servers are ssl-enabled).</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.security.implementing.ssl.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="2811" opendate="2017-4-21 00:00:00" fixdate="2017-4-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Thread leak when offheap memory is configured</summary>
      <description>If you are using offheap memory and keep creating and close the cache over and over then you may run out of threads.Each time the cache is initialized it creates a thread pool to handle offheap LRU eviction. The thread pool should be closed when the cache is closed but is not.The can lead to an exception like this:java.lang.OutOfMemoryError: unable to create new native threadThe threads will be cleaned up if the garbage collector has a major enough collection to force java object finalization but that may never happen since offheap is being used.</description>
      <version>1.0.0-incubating,1.1.0,1.1.1</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.GemFireCacheImplTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.EvictionTestBase.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionEvictorTask.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.lru.HeapEvictor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="2815" opendate="2017-4-24 00:00:00" fixdate="2017-5-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect Error Message in REST API docs for {region}/{key} HTTP.GET command</summary>
      <description>According to the docs at http://gemfire.docs.pivotal.io/geode/rest_apps/get_region_key_data.html error responses HTTP 400 and HTTP 404 appear to be very similar, 400 - BAD REQUEST - Returned if the supplied key is not found in the region. 404 - NOT FOUND - Returned if key does not exist for the region.The source code at PdxBasedCrudController.java:210 &amp; 213 show that 404 actually means "Region does not exist", thus the documentation appears to be incorrect. Other commands are correct in the docs showing 404 means region does not exist.</description>
      <version>1.1.1,1.2.0</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.rest.apps.get.region.key.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.for.multiple.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="2816" opendate="2017-4-24 00:00:00" fixdate="2017-5-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redundancy recovery must also kick in when redundancy recovery is set to 0</summary>
      <description>Issue:In methods scheduleRedundancyRecovery and initPRInternals redundancy recovery is initiated only when redundancy is set to a value greater than zero.This leads to issues where a bucket is hosted in multiple datastores when the redundancy is set to 0 as redundancy recovery never removes the extra buckets.Solution:remove the checks where the redundancy recovery is initiated only when the redundancy is set to a value greater than 0.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PRHARedundancyProvider.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="2817" opendate="2017-4-24 00:00:00" fixdate="2017-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Have the function author determine what permissions the function execution requires</summary>
      <description>Currently to execute a function, you will need "data:write" permission, but it really depends on what the function is doing. So we should either:1) externalize the authorize* api so that function author can use it in the function.execute code to check authorization.2) add a function api to tell the framework what permission this function needs to execute, so that the framework will check the permission before executing the function.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.BaseCommandQuery.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.cli.LuceneIndexCommands.java</file>
      <file type="M">geode-cq.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.MonitorCQ.java</file>
      <file type="M">geode-cq.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GetDurableCQs.java</file>
      <file type="M">geode-cq.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GetCQStats.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.UnregisterInterestTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.RequestTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.RemoveAllTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterestTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterestListTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterestList66Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterestList61Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterest61Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.PutTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Put65Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Put61Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.KeySetTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.InvalidateTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.GetAllWithCallbackTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.GetAllTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.GetAll70Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.GetAll651Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Get70Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.DestroyTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.DestroyRegionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Destroy65Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.CreateRegionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ContainsKeyTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ContainsKey66Test.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.RemoveCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.QueryCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.PutCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.LocateEntryCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ImportDataCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.GetCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ExportDataCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.AlterRegionCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.security.SecurityService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.UnregisterInterestList.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.UnregisterInterest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Size.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Request.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.RemoveAll.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterestList66.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterestList61.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterestList.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterest61.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.RegisterInterest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.PutAll80.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.PutAll70.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.PutAll.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put61.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.KeySet.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Invalidate.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GetAllWithCallback.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GetAll70.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GetAll651.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GetAll.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Get70.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.DestroyRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Destroy65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Destroy.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.CreateRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ContainsKey66.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ContainsKey.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ClearRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.execute.Function.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.AbstractExecution.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction66.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction61.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction66.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunctionSingleHop.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.security.IntegratedSecurityService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.CliUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateRegionCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ExecuteFunctionCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.UserFunctionExecution.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.GfshParseResult.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.i18n.CliStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.result.ResultBuilder.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.security.ResourcePermission.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.OplogFlushTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.OverflowOplogFlushTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction65Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction66Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunctionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.security.IntegratedSecurityServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.security.SecurityServiceFactoryShiroIntegrationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.CliUtilDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateRegionCommandTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.GfshParserParsingTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.CacheServerMBeanAuthorizationJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.CacheServerMBeanWithShiroIniIntegrationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.DataCommandsSecurityTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.DiskStoreMXBeanSecurityJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.GatewayReceiverMBeanSecurityTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.GatewaySenderMBeanSecurityTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.LockServiceMBeanAuthorizationJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.ManagerMBeanAuthorizationJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.MemberMBeanSecurityJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.SecurityServiceWithShiroIniIntegrationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.TestCommand.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.security.ClientExecuteFunctionAuthDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.security.ClientExecuteRegionFunctionAuthDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.test.dunit.rules.GfshShellConnectionRule.java</file>
      <file type="M">gradle.dependency-versions.properties</file>
      <file type="M">geode-docs.developing.function.exec.function.execution.html.md.erb</file>
      <file type="M">geode-docs.developing.function.exec.how.function.execution.works.html.md.erb</file>
      <file type="M">geode-docs.managing.security.implementing.authorization.html.md.erb</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.execute.FunctionContext.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.auth.GMSAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="2818" opendate="2017-4-24 00:00:00" fixdate="2017-9-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add alias to any command&amp;#39;s options that involves "group", "member", "jar"</summary>
      <description>Or anything that would have confusion about if we are going to use singular or plural at all.1) add alias for those options2) make sure it parameter type is an array type, some method only accepts a string and split it inside the command.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.DataCommandsController.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.management.internal.configuration.ClusterConfigurationIndexWithFromClauseDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.management.internal.configuration.ClusterConfigurationDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandStatusDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandPauseResumeDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandListDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandGatewaySenderStopDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandGatewaySenderStartDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandGatewayReceiverStopDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandGatewayReceiverStartDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandCreateGatewayReceiverDUnitTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.wancommand.WanCommandCreateDestroyGatewaySenderDUnitTest.java</file>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.configuration.LuceneClusterConfigurationDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.web.controllers.WanCommandsControllerJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.ClusterConfigDistributionDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.shell.GfshMultilineCommandTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ShowStackTraceDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ShowMetricsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.QueueCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.MiscellaneousCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.MemberCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ListAndDescribeRegionDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.IndexCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.GemfireDataCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.DiskStoreCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateAlterDestroyRegionCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ConfigCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.WanCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.RegionCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.QueueCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.MiscellaneousCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.MemberCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.IndexCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.FunctionCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.ExportLogController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.DurableClientCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.DiskStoreCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.DeployCommandsController.java</file>
      <file type="M">geode-docs.configuring.cluster.config.deploying.application.jars.html.md.erb</file>
      <file type="M">geode-docs.configuring.cluster.config.gfsh.config.troubleshooting.html.md.erb</file>
      <file type="M">geode-docs.configuring.cluster.config.persisting.configurations.html.md.erb</file>
      <file type="M">geode-docs.configuring.cluster.config.using.member.groups.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.alter.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.change.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.close.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.compact.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.create.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.deploy.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.destroy.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.execute.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.export.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.gc.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.list.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.netstat.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.pause.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.resume.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.show.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.start.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.status.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.stop.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.undeploy.html.md.erb</file>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.test.dunit.rules.gfsh.GfshRule.java</file>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.tools.pulse.PulseSecurityWithSSLTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.LauncherLifecycleCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.GfshParser.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ExportLogsIntegrationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.GfshParserAutoCompletionTest.java</file>
      <file type="M">geode-web.src.test.java.org.apache.geode.management.internal.security.LogNoPasswordTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ConfigCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DeployCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.DeployFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.UndeployFunction.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.DeployCommandsDUnitTest.java</file>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.management.internal.configuration.ClusterConfigurationServiceEndToEndDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateAlterDestroyRegionCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DataCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DiskStoreCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DurableClientCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ExportLogsCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.FunctionCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.IndexCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.MemberCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.MiscellaneousCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.QueueCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.RegionCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.WanCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.i18n.CliStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.ConfigCommandsController.java</file>
    </fixedFiles>
  </bug>
  <bug id="2819" opendate="2017-4-24 00:00:00" fixdate="2017-6-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>HTTP status code 414 is not documented</summary>
      <description>Whilst consuming the REST API to do a "put all", we built a URI that is too long and thus got a 414 HTTP status code. The documentation that we are using (https://geode.apache.org/docs/guide/11/rest_apps/put_multiple_values_for_keys.html) does not specify what constitutes "too long" and does not include 414 in the Error Codes table at the bottom of the page. The former would be nice; the latter seems necessary.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.rest.apps.put.multiple.values.for.keys.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="2821" opendate="2017-4-24 00:00:00" fixdate="2017-8-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode User Guide: Add running heads with logo</summary>
      <description>In the Geode User Guide, add running heads with the Geode logo as in the Client Guide.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-book.config.yml</file>
    </fixedFiles>
  </bug>
  <bug id="2824" opendate="2017-4-25 00:00:00" fixdate="2017-5-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>FunctionException: No target node found when executing hasNext on Lucene result</summary>
      <description>The stack trace below is thrown during a race condition when a node is closing and calling hasNext on a Lucene result.It looks there was a CacheClosedException, but this execution was unable to find a target node to retry on. This execution then threw a FunctionException.We have code to unwrap CacheClosedExceptions from function exceptions, however this was just an ordinary function exception. The underlying cause is that the cache is closing at this time.We should probably wrap all function exceptions with either a LuceneQueryException or equivalent as a user would probably not expect a FunctionException when calling Lucene methods.The stack trace:at org.apache.geode.internal.cache.PartitionedRegion.executeOnMultipleNodes(PartitionedRegion.java:3459) at org.apache.geode.internal.cache.PartitionedRegion.executeFunction(PartitionedRegion.java:3367) at org.apache.geode.internal.cache.execute.PartitionedRegionFunctionExecutor.executeFunction(PartitionedRegionFunctionExecutor.java:228) at org.apache.geode.internal.cache.execute.AbstractExecution.execute(AbstractExecution.java:376) at org.apache.geode.internal.cache.partitioned.PRFunctionStreamingResultCollector.getResult(PRFunctionStreamingResultCollector.java:178) at org.apache.geode.cache.lucene.internal.PageableLuceneQueryResultsImpl.getValues(PageableLuceneQueryResultsImpl.java:112) at org.apache.geode.cache.lucene.internal.PageableLuceneQueryResultsImpl.getHitEntries(PageableLuceneQueryResultsImpl.java:91) at org.apache.geode.cache.lucene.internal.PageableLuceneQueryResultsImpl.advancePage(PageableLuceneQueryResultsImpl.java:139) at org.apache.geode.cache.lucene.internal.PageableLuceneQueryResultsImpl.hasNext(PageableLuceneQueryResultsImpl.java:148)</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.execute.FunctionExecutionNodePruner.java</file>
    </fixedFiles>
  </bug>
  <bug id="2828" opendate="2017-4-26 00:00:00" fixdate="2017-5-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>AEQ needs to be created before the user region</summary>
      <description>Issue:Events are lost as the region is being created, because the AEQ gets created after the user region is created, and the indexes are not being created via AEQ.Solution:1. AEQ being created before the user region.2. Processing of lucene events are being halted by a countdown latch and starts processing after the user region is created.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.RawLuceneRepositoryManagerJUnitTest.java</file>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.PartitionedRepositoryManagerJUnitTest.java</file>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.LuceneIndexForPartitionedRegionTest.java</file>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.LuceneIndexFactorySpy.java</file>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.LuceneEventListenerJUnitTest.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneServiceImpl.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneRegionListener.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneRawIndex.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneIndexImpl.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneIndexForPartitionedRegion.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneEventListener.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.LuceneBucketListener.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.AbstractPartitionedRepositoryManager.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.offheap.OffHeapRegionBase.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.LonerDistributionManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="2830" opendate="2017-4-26 00:00:00" fixdate="2017-5-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Required permission for executing a function should be DATA:WRITE</summary>
      <description>The required permission for executing a function as listed in the gfsh command table (2nd table) is wrong in the docs:http://gemfire.docs.pivotal.io/geode/managing/security/implementing_authorization.htmlIt is listed as DATA:MANAGE in the gfsh command table, but should be DATA:WRITE.The correct permission is listed in the client operation table above the gfsh table.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.security.implementing.authorization.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="2837" opendate="2017-4-27 00:00:00" fixdate="2017-5-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Start server fails if specified `--dir` does not exist</summary>
      <description>When you execute gfsh&gt; start server --name=server1, the default working directory will be ./server1, and gfsh will create that directory if necessary. However, gfsh&gt; start server --name=server1 --dir=foo will fail if the directory ./foo does not exist. For consistency ease of use, we should instead have gfsh attempt to create the specified directory if necessary. start locator may or may not have the same deficiency.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.i18n.CliStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.LauncherLifecycleCommands.java</file>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.management.internal.cli.commands.LauncherLifecycleCommandsIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="2840" opendate="2017-4-28 00:00:00" fixdate="2017-4-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add a dunit test to test concurrent deploy scenario</summary>
      <description>as summary</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.test.dunit.rules.LocatorServerStartupRule.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.JarDeployer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployedJar.java</file>
    </fixedFiles>
  </bug>
  <bug id="2842" opendate="2017-4-28 00:00:00" fixdate="2017-6-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove unnecessary @CliOption arguments</summary>
      <description>The @CliOption annotation specifies default values for some of its fields (like mandatory and unspecifiedDefaultValue). Yet, we often explicitly set those fields to the default value. For example, @CliOption(key = CliStrings.START_LOCATOR__MEMBER_NAME, mandatory = false, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.START_LOCATOR__MEMBER_NAME__HELP) String memberName could simply read @CliOption(key = CliStrings.START_LOCATOR__MEMBER_NAME, help = CliStrings.START_LOCATOR__MEMBER_NAME__HELP) String memberName Removing these redundant/unnecessary arguments will make the code a lot more readable.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.QueryAccessController.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.PdxBasedCrudController.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.FunctionAccessController.java</file>
      <file type="M">geode-web-api.src.main.java.org.apache.geode.rest.internal.web.controllers.CommonCrudController.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.CommandManagerJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.domain.Link.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.MiscellaneousCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ShellCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.MemberCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ExportLogsCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="2843" opendate="2017-4-28 00:00:00" fixdate="2017-5-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - example should specify &lt;client-cache&gt;</summary>
      <description>Excerpt from John Blum's response to a user's question:See the example here: http://geode.apache.org/docs/guide/11/reference/topics/client-cache.html#cc-pdxUnfortunately, the example is WRONG, as it is using the "peer" cache element tag (&lt;cache&gt; instead of &lt;client-cache&gt;), but this reference (&amp;#91;5&amp;#93;) is from client-cache section...</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.client-cache.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="2847" opendate="2017-4-28 00:00:00" fixdate="2017-5-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Retried bulk operation from client could not get applied version tag from the server and cause data inconsistency</summary>
      <description>Currently when bulk operation initiated from client failed due server failure, it will retry to another server with same event ids. However, the retried bulk operations may not get the version tags of the operations already finished on the server. This leads to originating client cache failed to apply these operations but servers and other clients would get those entry operations and cause data inconsistency.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.DistributedRegionJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.AbstractDistributedRegionJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientProxyMembershipID.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.partitioned.RemoveAllPRMessage.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.partitioned.PutAllPRMessage.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.EventTracker.java</file>
    </fixedFiles>
  </bug>
  <bug id="2888" opendate="2017-5-5 00:00:00" fixdate="2017-10-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>user guide: REST API Region Endpoints use &amp;#39;gemfire-api&amp;#39; in their names</summary>
      <description>The name 'gemfire-api' should be replaced by 'geode' in the Region Endpoints section of the manual. See http://geode.apache.org/docs/guide/11/rest_apps/rest_regions.html and its subsections.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.rest.apps.troubleshooting.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.regions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.queries.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.prereqs.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.functions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.examples.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.rest.admin.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.update.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.update.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.update.cas.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.replace.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.put.multiple.values.for.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.if.absent.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.execute.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.execute.functions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.post.create.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.ping.service.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.head.region.size.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.servers.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.key.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.for.multiple.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.region.data.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.regions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.queries.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.functions.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.get.execute.adhoc.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.develop.rest.apps.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.named.query.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.data.for.multiple.keys.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.data.for.key.html.md.erb</file>
      <file type="M">geode-docs.rest.apps.delete.all.data.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="2889" opendate="2017-5-5 00:00:00" fixdate="2017-5-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Generic session module should touch sessions rather than recreate the native session</summary>
      <description>The session module for generic application servers is doing some magic to try to recreate native sessions if they have been idle for too long. This can cause failures if the container expires a session concurrently, because the expiration can happen after we have checked if the session is valid, but before we can read the session creation time./* * This is a massively gross hack. Currently, there is no way to actually update the last * accessed time for a session, so what we do here is once we're into X% of the session's * TTL we grab a new session from the container. * * (inactive * 1000) * (pct / 100) ==&gt; (inactive * 10 * pct) */ if (session.getLastAccessedTime() - session.getCreationTime() &gt; (session.getMaxInactiveInterval() * 10 * percentInactiveTimeTriggerRebuild)) { HttpSession nativeSession = super.getSession(); session.failoverSession(nativeSession); }Instead of this, we should just call getSession on the container and have it update the last accessed time of the native session.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">extensions.geode-modules-session.src.main.java.org.apache.geode.modules.session.filter.SessionCachingFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="3006" opendate="2017-5-30 00:00:00" fixdate="2017-6-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>busy login/logout message in the logs when gfsh connects via http</summary>
      <description>the ping request is constantly login and logout resulting in busy log messages in the logs.</description>
      <version>None</version>
      <fixedVersion>1.2.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.shell.AbstractHttpOperationInvoker.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.security.IntegratedSecurityService.java</file>
    </fixedFiles>
  </bug>
  <bug id="3047" opendate="2017-6-6 00:00:00" fixdate="2017-8-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI failure: PartitionedRegionSingleHopDUnitTest.testClientMetadataForPersistentPrs (ConflictingPersistentDataException)</summary>
      <description>org.apache.geode.internal.cache.PartitionedRegionSingleHopDUnitTest &gt; testClientMetadataForPersistentPrs FAILED java.lang.AssertionError: Suspicious strings were written to the log during this run. Fix the strings or use IgnoredException.addIgnoredException to ignore. ----------------------------------------------------------------------- Found suspect string in log4j at line 11823 &amp;#91;error 2017/06/05 16:15:06.807 UTC &lt;Recovery thread for bucket _B__CUSTOMER_0&gt; tid=0xe9&amp;#93; A DiskAccessException has occurred while writing to the disk for region /_PR/_B_SHIPMENT_0. The cache will be closed. org.apache.geode.cache.persistence.ConflictingPersistentDataException: Region /_PR/_B_SHIPMENT_0 refusing to initialize from member 172.17.0.3(177)&lt;v8&gt;:32773 with persistent data /172.17.0.3:/tmp/gemfire-build/geode/geode-core/build/distributedTest305/dunit/vm1/diskDir/disk1 created at timestamp 1496679288068 version 0 diskStoreId bd6add692799471a-af82daaafb9c36e8 name null which was offline when the local data from /172.17.0.3:/tmp/gemfire-build/geode/geode-core/build/distributedTest305/dunit/vm2/diskDir/disk2 created at timestamp 1496679291626 version 0 diskStoreId 5a4a04c19efe4961-90fba2925786d398 name null was last online at org.apache.geode.internal.cache.persistence.PersistenceAdvisorImpl.checkMyStateOnMembers(PersistenceAdvisorImpl.java:757) at org.apache.geode.internal.cache.persistence.PersistenceAdvisorImpl.getInitialImageAdvice(PersistenceAdvisorImpl.java:818) at org.apache.geode.internal.cache.persistence.CreatePersistentRegionProcessor.getInitialImageAdvice(CreatePersistentRegionProcessor.java:52) at org.apache.geode.internal.cache.DistributedRegion.getInitialImageAndRecovery(DistributedRegion.java:1144) at org.apache.geode.internal.cache.DistributedRegion.initialize(DistributedRegion.java:1023) at org.apache.geode.internal.cache.BucketRegion.initialize(BucketRegion.java:253) at org.apache.geode.internal.cache.LocalRegion.createSubregion(LocalRegion.java:962) at org.apache.geode.internal.cache.PartitionedRegionDataStore.createBucketRegion(PartitionedRegionDataStore.java:726) at org.apache.geode.internal.cache.PartitionedRegionDataStore.grabFreeBucket(PartitionedRegionDataStore.java:414) at org.apache.geode.internal.cache.PartitionedRegionDataStore.grabFreeBucketRecursively(PartitionedRegionDataStore.java:272) at org.apache.geode.internal.cache.PartitionedRegionDataStore.grabFreeBucketRecursively(PartitionedRegionDataStore.java:289) at org.apache.geode.internal.cache.PartitionedRegionDataStore.grabBucket(PartitionedRegionDataStore.java:2815) at org.apache.geode.internal.cache.ProxyBucketRegion.recoverFromDisk(ProxyBucketRegion.java:423) at org.apache.geode.internal.cache.ProxyBucketRegion.recoverFromDiskRecursively(ProxyBucketRegion.java:389) at org.apache.geode.internal.cache.PRHARedundancyProvider$4.run2(PRHARedundancyProvider.java:1736) at org.apache.geode.internal.cache.partitioned.RecoveryRunnable.run(RecoveryRunnable.java:61) at org.apache.geode.internal.cache.PRHARedundancyProvider$4.run(PRHARedundancyProvider.java:1728) at java.lang.Thread.run(Thread.java:748)</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketPersistenceAdvisor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3049" opendate="2017-6-7 00:00:00" fixdate="2017-7-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log warning when all redundant copies of a partitioned region are lost</summary>
      <description>Currently, a warning is logged when any bucket in a partitioned region goes below its target redundant copies. However, when the last copy is lost, there is no logging to indicate this. A warning should be added when at least one bucket has lost all redundant copies.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.partitioned.RegionAdvisor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionStats.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketAdvisor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3052" opendate="2017-6-8 00:00:00" fixdate="2017-7-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Restarting 2 locators within 1s of each other causes potential locator split brain</summary>
      <description>Using the artifacts from GEODE-3003, it is possible to cause a locator split brain upon locator startup. This seems to only happen when the locators start within 1s of each other, i.e &lt;1s.</description>
      <version>1.1.1</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.LocatorUDPSecurityDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.LocatorDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.membership.gms.messenger.GMSEncryptJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeaveTestHelper.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.NetView.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.messenger.JGroupsMessenger.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.messenger.GMSEncrypt.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.locator.FindCoordinatorResponse.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.interfaces.Locator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.GMSUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.locator.GMSLocator.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeaveJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="3055" opendate="2017-6-8 00:00:00" fixdate="2017-8-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>data mismatch caused by rebalance. waitUntilFlashed return false</summary>
      <description>/export/buglogs_bvt/xzhou/lucene/concParRegHAPersist-0601-171739lucene/concParRegHAPersist.confA=accessorB=dataStoreaccessorHosts=1accessorThreadsPerVM=5accessorVMsPerHost=1dataStoreHosts=6dataStoreThreadsPerVM=5dataStoreVMsPerHost=1numVMsToStop=2redundantCopies=0no local.confIn dataStoregemfire5_7483/system.log, thread tid=0xdf, putAll Object_1106617:22:27.135 tid=0xdf] generated tag {v1; rv13 shadowKey=293917:22:27.136 _partitionedRegionPARALLELGATEWAYSENDER_QUEUE_1 bucket : null // brq is not ready yetis enqueued to the tempQueue17:22:27.272 tid=0xdf] generated tag {v3; rv15 shadowKey=327817:22:33.111 Subregion created: /_PR/_BAsyncEventQueueindex#partitionedRegionPARALLELGATEWAYSENDER_QUEUE_1vm_3_dataStore3_r02-s28_28143.log:17:22:33.120 Put successfully in the queue shadowKey= 293917:22:33.156 tid=0x7fe started query17:22:33.176 Peeked shadowKey= 2939So the root cause is: the event is still in tempQueue before it's processed, the query happened. WaitUntilFlush should wait until tempQueue is also flushed.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="3056" opendate="2017-6-8 00:00:00" fixdate="2017-6-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Setting an unkown partition-resolver in gfsh throws: null is an invalid Partition Resolver.</summary>
      <description>Example:In this case org.apache.geode.cache.util.Foo does not existgfsh&gt;create region --name=region3 --type=PARTITION --partition-resolver=org.apache.geode.cache.util.FooErrors with: null is an invalid Partition Resolver.null should be "org.apache.geode.cache.util.Foo"</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateAlterDestroyRegionCommands.java</file>
    </fixedFiles>
  </bug>
  <bug id="3063" opendate="2017-6-9 00:00:00" fixdate="2017-12-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve docs on default string-based partition resolver</summary>
      <description>The new default partition resolver atorg.apache.geode.cache.util.StringPrefixPartitionResolverneeds more detailed documentation. An example of a string specifying a key in a region operation when this partition resolver is used. What happens if the string specifying a key doesn't have a '|' delimiter. An example of using this partition resolver to colocate two regions.</description>
      <version>None</version>
      <fixedVersion>1.4.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.create.html.md.erb</file>
      <file type="M">geode-docs.images.svg.custom.partitioned.svg</file>
      <file type="M">geode-docs.developing.partitioned.regions.using.custom.partition.resolvers.html.md.erb</file>
      <file type="M">geode-docs.developing.partitioned.regions.overview.custom.partitioning.and.data.colocation.html.md.erb</file>
      <file type="M">geode-docs.developing.partitioned.regions.custom.partitioning.and.data.colocation.html.md.erb</file>
      <file type="M">geode-docs.developing.partitioned.regions.colocating.partitioned.region.data.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="3179" opendate="2017-7-10 00:00:00" fixdate="2017-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The verifyBundledJarsHaveNotChanged test is failing due to slf4j-jdk</summary>
      <description>Test is failing with:Errorjava.lang.AssertionError: The bundled jars have changed. Please make sureyou update the licence and noticeas described inhttps://cwiki.apache.org/confluence/display/GEODE/License+Guide+for+ContributorsWhen fixed, copy geode-assembly/build/test/bundled_jars.txtto src/test/resources/expected_jars.txtRemoved Jars--------------Added Jars--------------slf4j-jdkStacktracejava.lang.AssertionError: The bundled jars have changed. Please make sureyou update the licence and noticeas described inhttps://cwiki.apache.org/confluence/display/GEODE/License+Guide+for+ContributorsWhen fixed, copy geode-assembly/build/test/bundled_jars.txtto src/test/resources/expected_jars.txtRemoved Jars--------------Added Jars--------------slf4j-jdkat org.junit.Assert.fail(Assert.java:88)at org.junit.Assert.assertTrue(Assert.java:41)atorg.apache.geode.BundledJarsJUnitTest.verifyBundledJarsHaveNotChanged(BundledJarsJUnitTest.java:81)Likely due to Cargo session testing added in GEODE-2901.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.session.tests.ContainerInstall.java</file>
    </fixedFiles>
  </bug>
  <bug id="3194" opendate="2017-7-12 00:00:00" fixdate="2017-7-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cleanup disk store on failed recovery</summary>
      <description>When recovering from persistent disk stores, it is possible to have the process fail exceptionally (for example, a failure deserializing the data from the disk store). Currently, however, this is not handled in a way that cleans up the partially setup disk store, but should be modified to do so.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.DiskStoreFactoryJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DiskStoreFactoryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="3198" opendate="2017-7-12 00:00:00" fixdate="2017-7-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do not prevent bucket creation if local-max-memory is exceeded</summary>
      <description>In creating a new bucket, if local-max-memory is exceeded on all members, the bucket cannot be created until a member goes below that memory threshold (which may be never, in which case the attempt to create the bucket loops forever). Currently, if all members have indicated they should not make the bucket, the request is again made, but with a "force" flag set to true. This allows overriding the fact that the member believes it already hosts as many buckets as it should for balance, but does not override the local-max-memory check. We should therefore have the force flag also override the memory threshold check, thus allowing bucket creation to proceed, but still attempting to honor not adding it to a member already at or above its target memory limit.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionLocalMaxMemoryDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionDataStoreJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionDataStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="3636" opendate="2017-9-15 00:00:00" fixdate="2017-9-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GatewaySender stop can hang with SSL enabled</summary>
      <description>SSLSockets throw the following exception if shutdownOutput() invoked:java.lang.UnsupportedOperationException: The method shutdownOutput() is not supported in SSLSocketGatewaySender code tries to interrupt the AckReaderThread in the middle of a socket read by calling Connection.destroy. Unfortunately, that throws and then swallows this UnsupportedOperationException and doesn't close the socket when SSL is enabled.</description>
      <version>1.1.0,1.1.1,1.2.0</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.test.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderOperationsDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ConnectionImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="3685" opendate="2017-9-22 00:00:00" fixdate="2017-10-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>MBean wrappers are not always applied correctly</summary>
      <description>Under certain conditions, MBean wrappers are not applied correctly.</description>
      <version>1.1.0,1.1.1,1.2.0,1.2.1</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.test.java.org.apache.geode.management.internal.cli.commands.StopServerAcceptanceTest.java</file>
      <file type="M">geode-web.src.test.java.org.apache.geode.management.internal.web.shell.HttpOperationInvokerSecurityTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.rules.gfsh.GfshRule.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.rules.gfsh.GfshExecution.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.shell.HttpOperationInvoker.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.http.support.SimpleHttpRequester.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.ShellCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.AbstractMultiPartCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.web.controllers.AbstractCommandsController.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgent.java</file>
    </fixedFiles>
  </bug>
  <bug id="3701" opendate="2017-9-25 00:00:00" fixdate="2017-10-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve docs on hash index performance</summary>
      <description>Stronger language is warranted for hash indexes.In a simple test, there was an order of magnitude difference in load and GII performance between the two types of indexes.Range:Client: Loaded 2,000,000 entries in 20,487 msServer 1 Size: 1,272,322,680 bytesServer 2: GIIed in 12,523 msServer 2 Size: 1,272,088,544 bytesHash:Client: Loaded 2,000,000 entries in 257,016 msServer 1 Size: 1,228,010,280 bytesServer 2: GIIed in 218,983 msServer 2 Size: 1,228,161,664 bytesSo, the difference in size was ~45MB, but the difference in time was an order of magnitude.Better wording suggested for file developing/query_index/creating_hash_indexes.html:Using hash index will degrade put performance and recovery time substantially. If memory is not a concern, it is recommended that you use range index.</description>
      <version>None</version>
      <fixedVersion>1.3.0,1.4.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.index.creating.hash.indexes.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="3702" opendate="2017-9-25 00:00:00" fixdate="2017-9-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>New framework for concurrency testing</summary>
      <description>From the mailing list discussion:I'd like to propose two things:1) We introduce a framework for writing unit tests of code that issupposed to be thread safe. This framework should let a developereasily write a test with multiple things going on in parallel. Theframework can then take that code and try to run it with differentthread interleavings.Here's an example of what this could look like:@RunWith(ConcurrentTestRunner.class)public class AtomicIntegerTest { @Test public void parallelIncrementReturns2(ParallelExecutor executor) throws ExecutionException, InterruptedException { AtomicInteger atomicInteger = new AtomicInteger(); executor.inParallel(() -&gt; atomicInteger.incrementAndGet()); executor.inParallel(() -&gt; atomicInteger.incrementAndGet()); executor.execute(); assertEquals(2, atomicInteger.get()); }2) We implement this framework initially using Java Pathfinder, butallow for other methods of testing the code to be plugged in forexample just running the test in the loop. Java pathfinder is coolbecause it can run the code with different interleavings but it doeshave some serious limitations.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">settings.gradle</file>
      <file type="M">gradle.rat.gradle</file>
      <file type="M">geode-core.src.test.resources.org.apache.geode.codeAnalysis.sanctionedDataSerializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.FilterProfile.java</file>
      <file type="M">geode-core.build.gradle</file>
      <file type="M">build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="3703" opendate="2017-9-25 00:00:00" fixdate="2017-10-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>rename JAR resource to DEPLOY</summary>
      <description>We currently have a JAR resource introduced with finer grained security (not released yet). Since the idea behind this resource is to control who has authorization to deploy jar files to the geode cluster, I think a better name for this resource would be DEPLOY.</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.security.implementing.authorization.html.md.erb</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.security.TestCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.security.ResourcePermission.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.UndeployCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DestroyFunctionCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DeployCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateAsyncEventQueueCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="3704" opendate="2017-9-26 00:00:00" fixdate="2017-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI Failure: CommandOverHttpDUnitTest fails</summary>
      <description>org.apache.geode.management.internal.cli.commands.CommandOverHttpDUnitTest &gt; org.apache.geode.management.internal.cli.commands.FunctionCommandsDUnitTest.testExecuteFunctionOnRegionWithCustomResultCollector@org.apache.geode.management.internal.cli.commands.CommandOverHttpDUnitTest FAILED java.lang.AssertionError at org.junit.Assert.fail(Assert.java:86) at org.junit.Assert.assertTrue(Assert.java:41) at org.junit.Assert.assertTrue(Assert.java:52) at org.apache.geode.management.internal.cli.commands.FunctionCommandsDUnitTest.testExecuteFunctionOnRegionWithCustomResultCollector(FunctionCommandsDUnitTest.java:200)org.apache.geode.management.internal.cli.commands.CommandOverHttpDUnitTest &gt; org.apache.geode.management.internal.cli.commands.FunctionCommandsDUnitTest.testExecuteFunctionOnMembersWithArgsAndCustomResultCollector@org.apache.geode.management.internal.cli.commands.CommandOverHttpDUnitTest FAILED java.lang.AssertionError at org.junit.Assert.fail(Assert.java:86) at org.junit.Assert.assertTrue(Assert.java:41) at org.junit.Assert.assertTrue(Assert.java:52) at org.apache.geode.management.internal.cli.commands.FunctionCommandsDUnitTest.testExecuteFunctionOnMembersWithArgsAndCustomResultCollector(FunctionCommandsDUnitTest.java:423)org.apache.geode.management.internal.cli.commands.CommandOverHttpDUnitTest &gt; org.apache.geode.management.internal.cli.commands.FunctionCommandsDUnitTest.testExecuteFunctionOnMembersWithArgs@org.apache.geode.management.internal.cli.commands.CommandOverHttpDUnitTest FAILED java.lang.AssertionError at org.junit.Assert.fail(Assert.java:86) at org.junit.Assert.assertTrue(Assert.java:41) at org.junit.Assert.assertTrue(Assert.java:52) at org.apache.geode.management.internal.cli.commands.FunctionCommandsDUnitTest.testExecuteFunctionOnMembersWithArgs(FunctionCommandsDUnitTest.java:385)</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ExecuteFunctionCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="3705" opendate="2017-9-26 00:00:00" fixdate="2017-10-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refactor Authentication request to be processed as a "normal" protobuf message</summary>
      <description>Refactor authentication and Authorization for the new protocol to process the AuthenticationRequest as a "normal" protobuf message.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.acceptance.LocatorConnectionDUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.ProtobufTestExecutionContext.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.ProtobufStreamProcessorTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.ProtobufShiroAuthenticatorJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.RemoveRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.PutRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.PutAllRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionNamesRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetAvailableServersOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.operations.GetAllRequestOperationHandlerJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.protobuf.EncodingTypeToSerializationTypeTranslatorJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.ProtobufProtocolServiceJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.AuthorizationIntegrationTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.AuthenticationIntegrationTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalLocator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.tcpserver.TcpServer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.AcceptorImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientProtocolProcessor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientProtocolService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientProtocolServiceLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.GenericProtocolServerConnection.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ServerConnectionFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.TcpServerFactory.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientProtocolMessageHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.cache.tier.sockets.MessageExecutionContext.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.operations.OperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.ProtobufCachePipeline.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.ProtobufLocatorPipeline.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.ProtobufProtocolService.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.EncodingTypeTranslator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.Failure.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.OperationContext.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetAllRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetAvailableServersOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionNamesRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetRegionRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.GetRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.PutAllRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.PutRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.operations.RemoveRequestOperationHandler.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.ProtobufOpsProcessor.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.ProtobufSerializationService.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.ProtobufStreamProcessor.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.ProtocolErrorCode.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.registry.OperationContextRegistry.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.Result.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.Authenticator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.Authorizer.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.InvalidConfigAuthenticator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.NoOpAuthenticator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.NoOpAuthorizer.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.ProtobufShiroAuthenticator.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.security.ProtobufShiroAuthorizer.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.statistics.NoOpStatistics.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.statistics.ProtobufClientStatistics.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.statistics.ProtobufClientStatisticsImpl.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.Success.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.utilities.ProtobufResponseUtilities.java</file>
      <file type="M">geode-protobuf.src.main.java.org.apache.geode.internal.protocol.protobuf.utilities.ProtobufUtilities.java</file>
      <file type="M">geode-protobuf.src.main.proto.clientProtocol.proto</file>
      <file type="M">geode-protobuf.src.main.resources.META-INF.services.org.apache.geode.internal.cache.tier.sockets.ClientProtocolService</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.cache.tier.sockets.GenericProtocolServerConnectionTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.acceptance.CacheConnectionJUnitTest.java</file>
      <file type="M">geode-protobuf.src.test.java.org.apache.geode.internal.protocol.acceptance.CacheOperationsJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="3707" opendate="2017-9-26 00:00:00" fixdate="2017-9-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Join queries with two join conditions return duplicate results when executed with indexes</summary>
      <description>Acceptance: the test below must return the same number of resultsCustomer.javapublic static class Customer implements Serializable { public int pkid; public int id; public int joinId; public String name; public Map&lt;String, Customer&gt; nested = new HashMap&lt;String, Customer&gt;(); public Customer(int pkid, int id) { this.pkid = pkid; this.id = id; this.joinId = id; this.name = "name" + pkid; } public Customer(int pkid, int id, int joinId) { this.pkid = pkid; this.id = id; this.joinId = joinId; this.name = "name" + pkid; } public String toString() { return "Customer pkid = " + pkid + ", id: " + id + " name:" + name; } }Test.java@Testpublic void testJoinTwoRegions(/*String queryString, int resultSize*/) throws Exception { Cache cache = getCache(); Region region1 = cache.createRegionFactory().setDataPolicy(DataPolicy.REPLICATE).create("region1"); Region region2 = cache.createRegionFactory().setDataPolicy(DataPolicy.REPLICATE).create("region2"); for (int i = 1; i &lt; 11; i++) { region1.put(i, new EquiJoinIntegrationTest.Customer(i, i, i)); if(i == 1 || i == 4 || i == 7 || i == 10){ region2.put(i, new EquiJoinIntegrationTest.Customer(1, 1, 1)); }else { region2.put(i, new EquiJoinIntegrationTest.Customer(i % 5, i, i % 3)); } String queryString = "&lt;trace&gt;select STA.id as STACID, STA.pkid as STAacctNum, STC.id as STCCID, STC.pkid as STCacctNum from /region1 STA, /region2 STC where STA.pkid = 1 AND STA.joinId = STC.joinId or STA.id = STC.id"; int resultSize = 1; QueryService queryService = cache.getQueryService(); SelectResults results = (SelectResults) queryService.newQuery(queryString).execute(); int resultSizeWithoutIndex = results.size(); queryService.createIndex("pkidregion1", "p.pkid", "/region1 p"); queryService.createIndex("pkidregion2", "p.pkid", "/region2 p"); queryService.createIndex("indexIDRegion2","p.id", "/region2 p"); queryService.createIndex("indexIDRegion1","p.id", "/region1 p"); queryService.createIndex("joinIdregion1", "p.joinId", "/region1 p"); queryService.createIndex("joinIdregion2", "p.joinId", "/region2 p"); queryService.createIndex("nameIndex", "p.name", "/region2 p"); results = (SelectResults) queryService.newQuery(queryString).execute(); int resultSizeWithIndex = results.size(); assertEquals(resultSizeWithIndex, resultSizeWithoutIndex);}</description>
      <version>None</version>
      <fixedVersion>1.3.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.DerivedInfo.java</file>
    </fixedFiles>
  </bug>
  <bug id="41" opendate="2015-5-27 00:00:00" fixdate="2015-6-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Dummy feature for gitflow validation</summary>
      <description>Dummy feature for gitflow validation</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">COMPILING.txt</file>
    </fixedFiles>
  </bug>
  <bug id="5029" opendate="2018-4-6 00:00:00" fixdate="2018-4-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve docs for query timeout and low memory due to a query</summary>
      <description>The section labeled "Monitoring Queries for Low Memory" can use a bit of improvement. Separate the section into 2 sections: Queries and low memory Query timeout Make the prose clear that this is not just about monitoring, but about action that is taken (exceptions thrown) for queries.</description>
      <version>None</version>
      <fixedVersion>1.6.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.additional.advanced.querying.html.md.erb</file>
      <file type="M">geode-docs.developing.querying.basics.monitor.queries.for.low.memory.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="503" opendate="2015-10-27 00:00:00" fixdate="2015-12-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode can leak SSL keystore password via the log file</summary>
      <description>KeyStore password can be leaked via the log file, as this may get printed and is unintended. This could cause a security issue for some users by leaking information that could allow access to the keystore holding the SSL certificate used to validate connections between members.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.AbstractConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="5032" opendate="2018-4-9 00:00:00" fixdate="2018-12-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Massage Configuration Objects for Better Intuition.</summary>
      <description>For instance, various port fields are declared as Strings where an Integer makes more sense. This is true for many "count" fields as well.These may be best resolved via a JAXB bindings file and regenerating the POJOs from scratch. Additionally if all the minor adjustments that have been already made (removing the xsd:choice and manually enforcing it, having each item implement CacheElement and have a getId() method) can also be resolved via a bindings file, then the POJOs could be removed from the git tree and generated during the build step, if desired.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.functions.ListJndiBindingFunctionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.functions.DestroyJndiBindingFunctionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.DestroyIndexCommandsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommandTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.config.JAXBServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.CacheConfigDAODUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.DeclarableTypeTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.GatewayReceiverFunctionArgs.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.CreateAsyncEventQueueFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ExportImportClusterConfigurationCommands.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DestroyIndexCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DescribeJndiBindingCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateGatewayReceiverCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateAsyncEventQueueCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.SerializationRegistrationType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.PoolType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.JndiBindingsType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.DiskDirsType.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.CacheConfigTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.ConfigurePDXCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.StringType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.ServerType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.RegionAttributesType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.PdxType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.ParameterType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.InitializerType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.FunctionServiceType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.ExpirationAttributesType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.DeclarableType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.ClassWithParametersType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheWriterType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheTransactionManagerType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheLoaderType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheConfig.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
