<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="10032" opendate="2022-2-9 00:00:00" fixdate="2022-2-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redis Command Registry Needs to Include Data Structure</summary>
      <description>Not all Redis commands are associated with a data structure.  For the commands that are, we need to know which data structure that command is associated with.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-for-redis.src.main.java.org.apache.geode.redis.internal.RedisConstants.java</file>
      <file type="M">geode-for-redis.src.main.java.org.apache.geode.redis.internal.commands.RedisCommandType.java</file>
      <file type="M">geode-for-redis.src.main.java.org.apache.geode.redis.internal.commands.executor.server.COMMANDCommandExecutor.java</file>
      <file type="M">geode-for-redis.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
      <file type="M">geode-for-redis.src.integrationTest.java.org.apache.geode.redis.internal.commands.executor.server.CommandIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="10034" opendate="2022-2-9 00:00:00" fixdate="2022-2-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Organize Geode For Redis Stats By Data Structure</summary>
      <description>The Geode for Redis Stats should be organized by Data Structure.  For the stats not associated with a data structure, the stats should continue to be exposed under"GeodeForRedisStats". Acceptance CriteriaAll stats, associated with a command specific to a data structure, should be exposed under that data structure (e.g. Strings, Sets, SortedSets, Hashes, Lists). All tests should pass. </description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-for-redis.src.main.java.org.apache.geode.redis.internal.statistics.GeodeRedisStats.java</file>
      <file type="M">geode-for-redis.src.main.java.org.apache.geode.redis.internal.GeodeRedisServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="1006" opendate="2016-2-26 00:00:00" fixdate="2016-2-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>View Creator thread blocked by JGroups FlowControl when alerting</summary>
      <description>An alert message may be issued during view formation. If an out-of-process alert listener has been receiving a lot of UDP messages it is possible for the thread forming the new (the View Creator thread) to become blocked in JGroups FlowControl. This keeps the new view from being transmitted to other members and from being installed locally, essentially deadlocking the thread.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.messenger.JGroupsMessengerJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.logging.log4j.AlertAppender.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.gms.messenger.JGroupsMessenger.java</file>
    </fixedFiles>
  </bug>
  <bug id="10079" opendate="2022-2-23 00:00:00" fixdate="2022-3-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI scripts no longer supply docker images for pre-1.15 PR precheck tasks</summary>
      <description>The CI scripts no longer supply docker images when they run PR precheck tasks that use the `-PdunitDockerImage` property.For PRs with base branches prior to `support/1.15`, the `distributedTest` and `upgradeTest` precheck tasks must run each test class in a separate docker container. When `dunitDockerImage` is not defined, these tasks instead run tests concurrently outside of docker. This results in swarms of failures, as the concurrently executing tests all attempt to bind to the same ports.Examples: https://concourse.apachegeode-ci.info/builds/27926695 https://concourse.apachegeode-ci.info/builds/27632643 https://concourse.apachegeode-ci.info/builds/28861132</description>
      <version>1.12.9,1.13.8,1.14.4</version>
      <fixedVersion>1.12.10,1.13.9,1.14.5,1.15.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="10103" opendate="2022-3-5 00:00:00" fixdate="2022-3-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Rebalance with no setting for include-region doesn&amp;#39;t work for subregions</summary>
      <description>Executing a command like this produces no output for the rebalance command even though a region exists to rebalance: gfsh -e "connect --locator=localhost[23456]" -e "rebalance"Output:./rebalance.sh (1) Executing - connect --locator=localhost[23456]Connecting to Locator at [host=localhost, port=23456] ..Connecting to Manager at [host=192.168.1.5, port=1099] ..Successfully connected to: [host=192.168.1.5, port=1099]You are connected to a cluster of version: 1.16.0-build.0(2) Executing - rebalanceRunning from gfsh directly does:gfsh&gt;rebalancegfsh&gt;</description>
      <version>None</version>
      <fixedVersion>1.12.10,1.13.9,1.14.5,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.RebalanceCommand.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.operation.RestoreRedundancyPerformerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.operation.RebalanceOperationPerformerTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.operation.RebalanceOperationPerformer.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.RebalanceManagementDunitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="10297" opendate="2022-5-11 00:00:00" fixdate="2022-5-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SSL protocol ordering can result in loss of newer protocol support.</summary>
      <description>If ssl-protocols is listed with a older protocol version ahead of a newer the SSLContext used will support at most that weaker protocol.For example ssl-protocols=TLSV1.2,TLSv1.3,TLSv1.1 will use the TLSv1.2 SSLContext, which will not support, and silently ignore, the TLSv1.3 configuration. The effective enabled protocols list will be TLSV1.2,TLSv1.1.</description>
      <version>1.12.9,1.13.8,1.14.4,1.15.0,1.16.0</version>
      <fixedVersion>1.15.0,1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.SSLUtilTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SSLUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreator.java</file>
    </fixedFiles>
  </bug>
  <bug id="1040" opendate="2016-3-2 00:00:00" fixdate="2016-3-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add a DUnit for JTA rollback</summary>
      <description>Current ClientServer transaction test does not test JTA rollback.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.com.gemstone.gemfire.internal.cache.ClientServerTransactionDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="10401" opendate="2022-7-27 00:00:00" fixdate="2022-7-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Oplog recovery takes too long due to fault in fastutil library</summary>
      <description>As we already know, the .drf file delete operations only contain OplogEntryID. During recovery, the server reads (byte by byte) each OplogEntryID and stores it in a HashSet to use later when recovering .crf files. There are two types of HashSets: IntOpenHashSet and LongOpenHashSet. The OplogEntryID of type integer will be stored in IntOpenHashSet, and long integer in LongOpenHashSet, probably due to memory optimization and performance factors. OplogEntryID starts with a zero and increments throughout time.We have observed in logs that between exception (There is a large number of deleted entries) and the previous log have passed more than 4 minutes (sometimes even more).{"timestamp":"2022-06-14T21:41:43.772+08:00","severity":"info","message":"Recovering oplog#271 /opt/dbservice/data/datastore/BACKUPdataDiskStore_271.drf for disk store dataDiskStore.","metadata":{"timestamp":"2022-06-14T21:46:02.152+08:00","severity":"warning","message":"There is a large number of deleted entries within the disk-store, please execute an offlinecompaction.","metadata":When the above exception occurs, that means that the limit of 805306401 entries in IntOpenHashSet has been reached. In that case, the server rolls to the new IntOpenHashSet, where an exception and the delay could happen again.The problem is that due to the fault in FastUtil dependency (IntOpenHashSet and LongOpenHashSet), the unnecessary rehashing happens multiple times before the max size is reached. The rehashing starts from 805306368 onwards for each new entry until the max size. This rehashing adds several minutes to .drf Oplog recovery, but does nothing as max is already reached.</description>
      <version>None</version>
      <fixedVersion>1.15.1,1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DiskStoreImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="10417" opendate="2022-9-6 00:00:00" fixdate="2022-9-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix NullPointerException when getting events from the gw sender queue to complete transactions</summary>
      <description>When the WAN group-transaction-events feature is enabled in a parallel gateway sender, it is possible to get a NullPointerException when retrieving events from the queue to complete a transaction if the event in the queue is null.If this situation is reached then the gateway sender dispatcher will not dispatch queue events anymore and therefore the WAN replication will not progress.</description>
      <version>1.13.8,1.14.4,1.15.0</version>
      <fixedVersion>1.15.1,1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.serial.SerialGatewaySenderQueueJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.BucketRegionQueueJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketRegionQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="10420" opendate="2022-9-12 00:00:00" fixdate="2022-9-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Handle WAN event when interrupted</summary>
      <description>It is possible that an event of which a gateway sender is to be notified is lost if during the process the thread is interrupted. </description>
      <version>None</version>
      <fixedVersion>1.15.1,1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.AbstractGatewaySenderTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.AbstractGatewaySender.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.EntryEventImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="7963" opendate="2020-4-7 00:00:00" fixdate="2020-5-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Total bucket and total primary bucket count per server is incorrect</summary>
      <description>If we have more buckets per region than default value is_, show metrics_ command per server has wrong stats for totalBucketCount and totalPrimaryCount. Number of buckets is good if _show metric_s is executed region by region per server.It looks like it doesn't take last updated results when print output.After last bucket are created it increase these two values but in output we have a value before that increase.To reproduce an issue: Run locator and 4 servers. create partition persistent region with total-num-buckets more than default value do query (query --query="select * from /region1") Repeat steps 2. and 3. to create and query more regions see result of show metrics per server and region by region per server</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PRHARedundancyProvider.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="7964" opendate="2020-4-7 00:00:00" fixdate="2020-4-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade mockito dependency from 2.23.0 to 3.3.3</summary>
      <description>Upgrade mockito dependency from 2.23.0 to 3.3.3</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.pooling.ConnectionManager.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.functions.RegionAlterFunctionTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.functions.AlterQueryServiceFunctionTest.java</file>
      <file type="M">geode-dunit.src.test.java.org.apache.geode.test.dunit.internal.VMEventNotifierTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.FederatingManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.beans.ManagementListenerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.io.CompositeOutputStreamJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunctionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction66Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.ExecuteFunction65Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.partitioned.colocation.SingleThreadColocationLoggerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionRedundancyTrackerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.InternalCacheBuilderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.backup.BackupOperationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.ServerLauncherTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.client.internal.pooling.AvailableConnectionManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.client.internal.OpExecutorImplJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.alerting.internal.ClusterAlertMessagingTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.QueueConnectionImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.pooling.PooledConnection.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.pooling.ConnectionManagerImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.pooling.AvailableConnectionManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ConnectionImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.Connection.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.process.ControlFileWatchdogIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.ha.HARegionQueueIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.CacheDistributionAdvisorConcurrentTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.client.internal.QueueManagerJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.client.internal.pooling.ConnectionManagerJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.client.internal.pooling.AvailableConnectionManagerConcurrentTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.DistributedSystemMXBeanWithAlertsDistributedTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.JdbcWriterTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.JdbcAsyncWriterTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.xml.JdbcConnectorServiceXmlParserTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.xml.ElementTypeTest.java</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7965" opendate="2020-4-7 00:00:00" fixdate="2020-4-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Modify Redis SADD command to use region.compute</summary>
      <description>Geode implementation of this command has been modified to use the region.compute command to improve reliability.  This is stage one of an experiment to test out an effort to improve both reliability and performance by a series of changes.    </description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SAddExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.ExecutionHandlerContext.java</file>
      <file type="M">geode-redis.src.integrationTest.java.org.apache.geode.redis.SetsIntegrationTest.java</file>
      <file type="M">geode-redis.src.distributedTest.java.org.apache.geode.redis.RedisDistDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7966" opendate="2020-4-7 00:00:00" fixdate="2020-4-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - properties list - reformat oversized table</summary>
      <description>On the properties page, https://geode.apache.org/docs/guide/112/reference/topics/gemfire_properties.html, the table exceeds the column width, leading to readability issues.</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7967" opendate="2020-4-7 00:00:00" fixdate="2020-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - gfsh start locator - reformat oversize table</summary>
      <description>On the gfsh start locator reference page,https://geode.apache.org/docs/guide/112/tools_modules/gfsh/command-pages/start.html#topic_591260CF25D64562A0EDD7260D2AC6D4the table exceeds the column width, leading to readability issues.</description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.start.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7968" opendate="2020-4-7 00:00:00" fixdate="2020-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - Region shortcuts quick-ref - reformat oversize table</summary>
      <description>On the Region Shortcuts Quick Reference page, https://geode.apache.org/docs/guide/112/reference/topics/region_shortcuts_table.html, the table exceeds the column width, leading to readability issues.</description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.region.shortcuts.table.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7969" opendate="2020-4-8 00:00:00" fixdate="2020-4-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bump netty to 4.1.48</summary>
      <description>as part of GEODE-7798: Fix flakiness in PubSubTest, the netty version was increased on develop; this version should be the minimum used on support branches as well.</description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="9973" opendate="2022-1-18 00:00:00" fixdate="2022-1-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Documentation: socket-lease-time is not used to return sockets to a pool but to close them</summary>
      <description>The "Making sure you have enough sockets" Geode documentation section says the following about socket-lease-time (check underlined sentence): Peer-to-peer. For peer-to-peer threads that do not share sockets, you can use the socket-lease-time to make sure that no socket sits idle for too long. When a socket that belongs to an individual thread remains unused for this time period, the system automatically returns it to the pool. The next time the thread needs a socket, it creates a new socket. Actually, the system automatically closes the connection in the situation described instead of returning it to any pool.</description>
      <version>1.12.9,1.13.8,1.14.4,1.15.0</version>
      <fixedVersion>1.12.9,1.13.8,1.14.4,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.monitor.tune.socket.communication.have.enough.sockets.html.md.erb</file>
    </fixedFiles>
  </bug>
</bugrepository>
