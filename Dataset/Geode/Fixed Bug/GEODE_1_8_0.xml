<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="5443" opendate="2018-7-17 00:00:00" fixdate="2018-7-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Stop the UITests pipeline from automatically running.</summary>
      <description>The UI Tests are flaky, so we don't want to automatically run it anymore. We want to manually run it.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.base.yml</file>
      <file type="M">ci.pipelines.geode-build.test-stubs.ui.yml</file>
      <file type="M">ci.pipelines.geode-build.base.yml</file>
    </fixedFiles>
  </bug>
  <bug id="5445" opendate="2018-7-18 00:00:00" fixdate="2018-7-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow Jetty webapps to discover resources when symlinks are used</summary>
      <description>When running in a symlinked directory, Jetty does not find resources (on Windows at least).</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JettyHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="5461" opendate="2018-7-20 00:00:00" fixdate="2018-7-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Docs: Specifying the security-manager property</summary>
      <description>When specified, the `security-manager` property needs to be applied consistently across a cluster. Docs should say something like: “set security-manager only on locators, not on servers, and do so before starting the locators, not after they’re running.“</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.security.enable.security.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="5463" opendate="2018-7-20 00:00:00" fixdate="2018-8-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The generated diskstore restore script is incorrect on Windows</summary>
      <description>The auto-generated restore.bat script is incorrect on Windows as there are slight differences in the implementations of ScriptGenerator between Windows and Unix.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.BackupWriterFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.WindowsBackupInspector.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.UnixBackupInspector.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.BackupInspectorIntegrationTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.WindowsScriptGenerator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.UnixScriptGenerator.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.UnixScriptGeneratorTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.BackupIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5467" opendate="2018-7-23 00:00:00" fixdate="2018-7-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>MemberStaterRule.withJMXManager selects port before binding</summary>
      <description>Integration test #143 on develop fails with:org.apache.geode.management.internal.cli.commands.ConnectCommandWithSecurityTest &gt; classMethod FAILED org.apache.geode.management.ManagementException: java.rmi.server.ExportException: Port already in use: 21592; nested exception is: java.net.BindException: Failed to create server socket on null&amp;#91;21,592&amp;#93;Caused by: java.rmi.server.ExportException: Port already in use: 21592; nested exception is: java.net.BindException: Failed to create server socket on null&amp;#91;21,592&amp;#93;Caused by: java.net.BindException: Failed to create server socket on null&amp;#91;21,592&amp;#93;Caused by: java.net.BindException: Address already in use (Bind failed) Digging into this a bit, I found that the test is trying to start up the jmx manager using a port which was randomly chosen via AvailablePortHelper.getRandomAvailableTCPPort() during setup.  Unfortunately there was at least one other call to getRandomAvailableTCPPort after this (prior to where we're trying to bind the socket for the jmx manager), which creates the possibility that we'll have multiple services trying to bind the same port.The port is selected in the MemberStaterRule.withJMXManager call, which happens prior to the crash seen above, which has the following stack:{{org.apache.geode.management.ManagementException: java.rmi.server.ExportException: Port already in use: 21592; nested exception is: java.net.BindException: Failed to create server socket on null&amp;#91;21,592&amp;#93; at org.apache.geode.management.internal.ManagementAgent.startAgent(ManagementAgent.java:161) at org.apache.geode.management.internal.SystemManagementService.startManager(SystemManagementService.java:435) at org.apache.geode.management.internal.beans.ManagementAdapter.handleCacheCreation(ManagementAdapter.java:173) at org.apache.geode.management.internal.beans.ManagementListener.handleEvent(ManagementListener.java:118) at org.apache.geode.distributed.internal.InternalDistributedSystem.notifyResourceEventListeners(InternalDistributedSystem.java:2201) at org.apache.geode.distributed.internal.InternalDistributedSystem.handleResourceEvent(InternalDistributedSystem.java:590) at org.apache.geode.internal.cache.GemFireCacheImpl.initialize(GemFireCacheImpl.java:1217) at org.apache.geode.internal.cache.GemFireCacheImpl.basicCreate(GemFireCacheImpl.java:792) at org.apache.geode.internal.cache.GemFireCacheImpl.create(GemFireCacheImpl.java:778) at org.apache.geode.cache.CacheFactory.create(CacheFactory.java:177) at org.apache.geode.cache.CacheFactory.create(CacheFactory.java:224) at org.apache.geode.distributed.internal.InternalLocator.startCache(InternalLocator.java:662) at org.apache.geode.distributed.internal.InternalLocator.startDistributedSystem(InternalLocator.java:649) at org.apache.geode.distributed.internal.InternalLocator.startLocator(InternalLocator.java:311) at org.apache.geode.distributed.Locator.startLocator(Locator.java:253) at org.apache.geode.distributed.Locator.startLocatorAndDS(Locator.java:140) at org.apache.geode.test.junit.rules.LocatorStarterRule.startLocator(LocatorStarterRule.java:80) at org.apache.geode.test.junit.rules.LocatorStarterRule.before(LocatorStarterRule.java:59) at org.apache.geode.test.junit.rules.serializable.SerializableExternalResource.access$000(SerializableExternalResource.java:24) at org.apache.geode.test.junit.rules.serializable.SerializableExternalResource$1.evaluate(SerializableExternalResource.java:35) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) at com.sun.proxy.$Proxy1.processTestClass(Unknown Source) at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:109) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) at java.lang.Thread.run(Thread.java:748)Caused by: java.rmi.server.ExportException: Port already in use: 21592; nested exception is: java.net.BindException: Failed to create server socket on null&amp;#91;21,592&amp;#93; at sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:346) at sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:254) at sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:411) at sun.rmi.transport.LiveRef.exportObject(LiveRef.java:147) at sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:236) at sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:213) at sun.rmi.registry.RegistryImpl.&lt;init&gt;(RegistryImpl.java:173) at sun.rmi.registry.RegistryImpl.&lt;init&gt;(RegistryImpl.java:144) at java.rmi.registry.LocateRegistry.createRegistry(LocateRegistry.java:239) at org.apache.geode.management.internal.ManagementAgent.configureAndStart(ManagementAgent.java:452) at org.apache.geode.management.internal.ManagementAgent.startAgent(ManagementAgent.java:159) ... 51 moreCaused by: java.net.BindException: Failed to create server socket on null&amp;#91;21,592&amp;#93; at org.apache.geode.internal.net.SocketCreator.createServerSocket(SocketCreator.java:752) at org.apache.geode.internal.net.SocketCreator.createServerSocket(SocketCreator.java:709) at org.apache.geode.management.internal.ManagementAgent$GemFireRMIServerSocketFactory.createServerSocket(ManagementAgent.java:611) at sun.rmi.transport.tcp.TCPEndpoint.newServerSocket(TCPEndpoint.java:666) at sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:335) ... 61 moreCaused by: java.net.BindException: Address already in use (Bind failed) at java.net.PlainSocketImpl.socketBind(Native Method) at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:387) at java.net.ServerSocket.bind(ServerSocket.java:375) at org.apache.geode.internal.net.SocketCreator.createServerSocket(SocketCreator.java:748) ... 65 more}}</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.test.junit.rules.MemberStarterRule.java</file>
    </fixedFiles>
  </bug>
  <bug id="5468" opendate="2018-7-23 00:00:00" fixdate="2018-8-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make line separators platform independent</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.GfshParserParsingTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.GfshParserAutoCompletionTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.commands.HistoryCommandIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5477" opendate="2018-7-25 00:00:00" fixdate="2018-8-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gradle distributedTest target fails in parallel</summary>
      <description>Invoking `./gradlew distributedTest --parallel` fails in Tomcat tests, due to a class not being on the classpath. An archive is being created before its dependencies have been created.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">extensions.geode-modules-assembly.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="5478" opendate="2018-7-25 00:00:00" fixdate="2018-7-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The lowRedundancyBucketCount statistic is not maintained properly when multiple members are stopped and restarted</summary>
      <description>The lowRedundancyBucketCount statistic is not maintained properly when multiple members are stopped and restartedA test where multiple members are stopped simultaneously so that all copies of a bucket are offlineshows the numBucketsWithoutRedundancy metric not set properly:Initially:(2) Executing - show metrics --categories=partition --region=/rewardsCategory | Metric | Value--------- | --------------------------- | ------partition | putLocalRate | 0.0 | putRemoteRate | 0.0 | putRemoteLatency | 0 | putRemoteAvgLatency | 0 | bucketCount | 226 | primaryBucketCount | 113 | numBucketsWithoutRedundancy | 0 | totalBucketSize | 200000 | averageBucketSize | 221(3) Executing - show metrics --categories=partition --region=/customerCategory | Metric | Value--------- | --------------------------- | -----partition | putLocalRate | 0.0 | putRemoteRate | 0.0 | putRemoteLatency | 0 | putRemoteAvgLatency | 0 | bucketCount | 226 | primaryBucketCount | 113 | numBucketsWithoutRedundancy | 0 | totalBucketSize | 20000 | averageBucketSize | 22After stopping 2 members (of 4):(2) Executing - show metrics --categories=partition --region=/rewardsCategory | Metric | Value--------- | --------------------------- | -----partition | putLocalRate | 0.0 | putRemoteRate | 0.0 | putRemoteLatency | 0 | putRemoteAvgLatency | 0 | bucketCount | 112 | primaryBucketCount | 73 | numBucketsWithoutRedundancy | 57 | totalBucketSize | 99107 | averageBucketSize | 442(3) Executing - show metrics --categories=partition --region=/customerCategory | Metric | Value--------- | --------------------------- | -----partition | putLocalRate | 0.0 | putRemoteRate | 0.0 | putRemoteLatency | 0 | putRemoteAvgLatency | 0 | bucketCount | 112 | primaryBucketCount | 76 | numBucketsWithoutRedundancy | 57 | totalBucketSize | 9915 | averageBucketSize | 44After restarting both members, numBucketsWithoutRedundancy &gt; 0:(2) Executing - show metrics --categories=partition --region=/rewardsCategory | Metric | Value--------- | --------------------------- | ------partition | putLocalRate | 0.0 | putRemoteRate | 0.0 | putRemoteLatency | 0 | putRemoteAvgLatency | 0 | bucketCount | 226 | primaryBucketCount | 113 | numBucketsWithoutRedundancy | 0 | totalBucketSize | 200000 | averageBucketSize | 221(3) Executing - show metrics --categories=partition --region=/customerCategory | Metric | Value--------- | --------------------------- | -----partition | putLocalRate | 0.0 | putRemoteRate | 0.0 | putRemoteLatency | 0 | putRemoteAvgLatency | 0 | bucketCount | 226 | primaryBucketCount | 113 | numBucketsWithoutRedundancy | 21 | totalBucketSize | 20000 | averageBucketSize | 22All the buckets and data are recovered, but the numBucketsWithoutRedundancy is not 0.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.BucketRedundancyTrackerTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketRedundancyTracker.java</file>
    </fixedFiles>
  </bug>
  <bug id="5481" opendate="2018-7-26 00:00:00" fixdate="2018-8-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SUPERFLAKY test ClientAuthenticationDUnitTest &gt; testCredentialsForNotifications</summary>
      <description>org.apache.geode.security.ClientAuthenticationDUnitTest &gt; testCredentialsForNotifications&amp;#91;1&amp;#93; FAILED org.apache.geode.test.dunit.RMIException: While invoking org.apache.geode.security.ClientAuthenticationTestCase$$Lambda$76/541487140.run in VM 3 running on Host a41992eb774d with 4 VMs with version 100 at org.apache.geode.test.dunit.VM.invoke(VM.java:443) at org.apache.geode.test.dunit.VM.invoke(VM.java:412) at org.apache.geode.test.dunit.VM.invoke(VM.java:355) at org.apache.geode.security.ClientAuthenticationTestCase.doTestCredentialsForNotifications(ClientAuthenticationTestCase.java:647) at org.apache.geode.security.ClientAuthenticationDUnitTest.testCredentialsForNotifications(ClientAuthenticationDUnitTest.java:99) Caused by: java.lang.AssertionError: Event never occurred after 7000 ms: nullSee failed: https://concourse.apachegeode-ci.info/teams/main/pipelines/develop/jobs/DistributedTest/builds/152#L5b59cf6d:8141See passed: https://concourse.apachegeode-ci.info/teams/main/pipelines/develop/jobs/DistributedTest/builds/151#L5b4cf768:9211</description>
      <version>1.8.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.security.SecurityTestUtils.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.security.ClientAuthorizationTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="5489" opendate="2018-7-27 00:00:00" fixdate="2018-7-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>createVersionPropertiesFile task should run only on changes to .git/index</summary>
      <description>Updating this file too often triggers other tasks unnecessarily.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="5490" opendate="2018-7-27 00:00:00" fixdate="2018-5-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move backwards compatibility tests to updateTest source set and split up</summary>
      <description>Improve distributed test runs by moving and splitting up backwards compatibility tests. Make each test its own test class to improve parallel execution.</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-cq.src.distributedTest.java.org.apache.geode.internal.cache.tier.sockets.ClientServerMiscBCDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.TxCommitMessageBackwardCompatibilityDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.session.tests.TomcatSessionBackwardsCompatibilityTest.java</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">ci.pipelines.metrics.yml</file>
    </fixedFiles>
  </bug>
  <bug id="5493" opendate="2018-7-27 00:00:00" fixdate="2018-8-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Client Statistics fail to publish on clusters with security enabled</summary>
      <description>In a cluster with security enabled and a pool with a small statistics interval (like 1000ms), errors are logged for "Failed to publish" the statistics, and "got oldStats null" for attempting to retrieve the previous statistics during publication.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-cq.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DescribeClientCommandDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.ClientStatsManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.ConfigurationProperties.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.ServerRegionProxy.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.PutOp.java</file>
    </fixedFiles>
  </bug>
  <bug id="5497" opendate="2018-7-30 00:00:00" fixdate="2018-8-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Generated restore.sh script fails when incremental backups are restored</summary>
      <description>Add a test which validates the generated restore,sh script for incremental backups.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.UnixScriptGeneratorTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.BackupInspectorIntegrationTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.UnixScriptGenerator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.FileSystemBackupWriter.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.BackupWriter.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.BackupIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5499" opendate="2018-7-30 00:00:00" fixdate="2018-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SUPERFLAKY: DistributedNoAckRegionOffHeapDUnitTest.testTXRmtMirror</summary>
      <description>This test is failing fairly frequently in CIorg.apache.geode.cache30.DistributedNoAckRegionOffHeapDUnitTest: 6 failures (98.101% success rate) | .testTXRmtMirror: 6 failures (98.101% success rate) | | Failed build 315 at https://concourse.apachegeode-ci.info/teams/staging/pipelines/mhansonp-pipelinework/jobs/DistributedTest/builds/315 | | Failed build 296 at https://concourse.apachegeode-ci.info/teams/staging/pipelines/mhansonp-pipelinework/jobs/DistributedTest/builds/296 | | Failed build 233 at https://concourse.apachegeode-ci.info/teams/staging/pipelines/mhansonp-pipelinework/jobs/DistributedTest/builds/233 | | Failed build 123 at https://concourse.apachegeode-ci.info/teams/staging/pipelines/mhansonp-pipelinework/jobs/DistributedTest/builds/123 | | Failed build 84 at https://concourse.apachegeode-ci.info/teams/staging/pipelines/mhansonp-pipelinework/jobs/DistributedTest/builds/84 | | Failed build 51 at https://concourse.apachegeode-ci.info/teams/staging/pipelines/mhansonp-pipelinework/jobs/DistributedTest/builds/51</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache30.MultiVMRegionTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="5502" opendate="2018-7-31 00:00:00" fixdate="2018-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cluster configuration can contain member-specific gateway receiver definitions which cause members to fail to start during rolling</summary>
      <description>In versions before 1.4.0, cluster configuration could contain multiple member-specific gateway receiver definitions like:&lt;cache&gt;  &lt;gateway-receiver hostname-for-senders="123.12.12.12"/&gt;  &lt;gateway-receiver hostname-for-senders="123.12.12.11"/&gt;&lt;/cache&gt;Starting in 1.4.0, multiple receivers are no longer allowed, so a configuration like this causes the member to throw an exception and fail to start.These member-specific receivers should be removed before sending the cluster configuration to new members to avoid attempting to create multiple receivers in a single member.Note: In this case, the member will start with no receivers.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.upgradeTest.java.org.apache.geode.cache.wan.WANRollingUpgradeDUnitTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.dunit.standalone.VersionManager.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceService.java</file>
    </fixedFiles>
  </bug>
  <bug id="5503" opendate="2018-7-31 00:00:00" fixdate="2018-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reduce CI overhead on pull request to decrease feedback time.</summary>
      <description>Reorganize and reduce overhead in the CI pull request pipeline to give faster feedback.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.base.yml</file>
      <file type="M">ci.scripts.prepopulate.build.sh</file>
      <file type="M">ci.pipelines.pull-request.base.yml</file>
      <file type="M">ci.pipelines.geode-build.test-template.yml</file>
      <file type="M">ci.scripts.execute.tests.sh</file>
      <file type="M">ci.pipelines.pull-request.pr-template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="5505" opendate="2018-7-31 00:00:00" fixdate="2018-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cache listener not invoked on a retried destroy() operation</summary>
      <description>If a server fails while a client is performing a destroy() operation it's possible for other servers to have recovered consistency using a distributed synchronization operation before the client is able to retry the operation. If this happens we accept the destroy() operation in the other servers but we're not invoking cache listeners.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.RRSynchronizationDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.PRBucketSynchronizationDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.map.RegionMapDestroyTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.i18n.LocalizedStrings.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put65.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put61.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.map.RegionMapDestroy.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DistributedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionAdvisor.java</file>
    </fixedFiles>
  </bug>
  <bug id="5509" opendate="2018-7-31 00:00:00" fixdate="2018-9-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Replace the docs Transactions section</summary>
      <description>Our documentation section on Transactions is lengthy. It contains a lot of material that is irrelevant for users of Geode. In its attempt at being complete, users cannot find what they need.I propose moving the entire section into another place within the docs to keep as reference material for anyone who needs to search for and find details. At the same time, I will replace the current Transactions section with something much more concise and opinionated. This new section is to target the best/right way to implement transactions.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.troubleshooting.diagnosing.system.probs.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.working.with.transactions.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.turning.off.jta.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.transaction.event.management.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.transaction.coding.examples.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.transactional.and.nontransactional.ops.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.run.a.cache.transaction.with.external.db.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.run.a.cache.transaction.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.monitor.troubleshoot.transactions.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.JTA.transactions.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.how.cache.transactions.work.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.data.location.cache.transactions.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.client.server.transactions.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.chapter.overview.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.cache.transaction.performance.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.cache.transactions.by.region.type.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.cache.transactions.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.cache.plugins.with.jta.html.md.erb</file>
      <file type="M">geode-docs.developing.transactions.about.transactions.html.md.erb</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="5511" opendate="2018-7-31 00:00:00" fixdate="2018-1-31 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>CI users should be able to see what commands are being run</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.rsync.code.down.sh</file>
      <file type="M">ci.scripts.execute.tests.sh</file>
      <file type="M">ci.scripts.build.sh</file>
    </fixedFiles>
  </bug>
  <bug id="5512" opendate="2018-7-31 00:00:00" fixdate="2018-8-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do not test for OS process stats on Windows</summary>
      <description>We don't gather OS level stats on Windows and tests which check those fail when run on Windows.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.test.dunit.standalone.ProcessManager.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.statistics.GemFireStatSamplerIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5541" opendate="2018-8-8 00:00:00" fixdate="2018-1-8 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>A create followed by a destroy of the same key in a transaction invokes cache listener on remote node</summary>
      <description>A create followed by a destroy of the same key in a transaction is treated as a no op on the near side (transaction host), and no destroy event is invoked on the transaction host. The destroy operation is distributed to remote nodes (far side). The intend is to make sure a normal region can destroy the key if it exists (far side). Currently a destroy event is invoked for this no op on remote node even though the node does not have the key.</description>
      <version>1.1.0,1.2.0,1.3.0,1.4.0,1.5.0,1.6.0,1.8.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.LocalRegionTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.RegionCommitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXEntryState.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.partitioned.PersistentPartitionedRegionWithTransactionDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="574" opendate="2015-11-18 00:00:00" fixdate="2015-5-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gfsh option --ciphers=any does not work the same as without the option</summary>
      <description>When using SSL, I can configure particular ciphers to be used. Usually this is done on the server. When a client connects, it will typically present all the ciphers it supports and the server will then negotiate the common cipher to use. Gfsh also allows a specific set of ciphers to be used. The documentation states that the default is "any". However the option --ciphers=any fails the connection whereas without the option a connection is made.I have a setup where I'm starting a Geode cluster with the following properties:mcast-port=0cluster-ssl-enabled=trueserver-ssl-enabled=truejmx-manager-ssl-enabled=truecluster-ssl-keystore-type=jkscluster-ssl-keystore=/Users/jdeppe/debug/ssl/trusted.jkscluster-ssl-keystore-password=changeitcluster-ssl-truststore=/Users/jdeppe/debug/ssl/trusted.jkscluster-ssl-truststore-password=changeitcluster-ssl-ciphers=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256cluster-ssl-protocols=TLSv1.2server-ssl-keystore-type=jksserver-ssl-keystore=/Users/jdeppe/debug/ssl/trusted.jksserver-ssl-keystore-password=changeitserver-ssl-truststore=/Users/jdeppe/debug/ssl/trusted.jksserver-ssl-truststore-password=changeitserver-ssl-ciphers=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256server-ssl-protocols=TLSv1.2jmx-manager-ssl-keystore-type=jksjmx-manager-ssl-keystore=/Users/jdeppe/debug/ssl/trusted.jksjmx-manager-ssl-keystore-password=changeitjmx-manager-ssl-truststore=/Users/jdeppe/debug/ssl/trusted.jksjmx-manager-ssl-truststore-password=changeitjmx-manager-ssl-ciphers=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256jmx-manager-ssl-protocols=TLSv1.2The keystore was created with the following command:keytool -genkey -alias self -keypass changeit -storepass changeit -keystore test.jks -keyalg EC -keysize 256 -dname "CN=Trusted"The start script is as follows:#!/usr/bin/env bashset -xset -eGFSH=/Users/jdeppe/gemfire/82/bin/gfshexport JAVA_HOME=`/usr/libexec/java_home -v 1.8`pkill -9 -f ServerLauncher || truepkill -9 -f LocatorLauncher || truerm -rf locator1/*rm -rf server1/*$GFSH start locator \ --name=locator1 \ --properties-file=/Users/jdeppe/debug/ssl/conf/gemfire.properties \ --port=19991$GFSH start server \ --name=server1 \ --locators=localhost[19991] \ --properties-file=/Users/jdeppe/debug/ssl/conf/gemfire.propertiesIf I run gfsh as follows it is able to connect:$GFSH -e "connect --protocols=TLSv1.2 --locator=localhost[19991] --use-ssl --key-store=$PWD/trusted.jks --trust-store=$PWD/trusted.jks --key-store-password=changeit --trust-store-password=changeit" -e "list members"However, if I add the option --ciphers=any to the command above it is not able to connect.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M3</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.management.internal.cli.shell.JmxOperationInvoker.java</file>
    </fixedFiles>
  </bug>
  <bug id="5747" opendate="2018-9-17 00:00:00" fixdate="2018-10-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gateway sender can shut down in response to a network problem</summary>
      <description>If a socket connection is reset while querying for locators, it causes a SocketException and eventually the gateway sender event processor is stopped. This is not desirable as we would like to continue trying to connect to available locators since the reset socket is likely due to an intermittent network issue.This is a matter of incorrectly handling this type of error in this context. We should refactor the handling logic so we do not stop processing, and rather continue to try connecting to locators.</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.InternalDataSerializerJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.InternalDataSerializer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.tcpserver.TcpServer.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.tcpserver.TcpServerJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5911" opendate="2018-10-22 00:00:00" fixdate="2018-10-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve SSL warning to indicate specific to GEODE; reference related property</summary>
      <description>We currently log this warning in the system log if ssl-endpoint-identification-enabled Your SSL configuration disables hostname validation. Future releases will mandate hostname validation.This can be mis-interpreted as a JVM warning, so updating the message to show it is Apache GEODE related ... and include the property to enable hostname validation.</description>
      <version>1.8.0</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreator.java</file>
    </fixedFiles>
  </bug>
  <bug id="5912" opendate="2018-10-23 00:00:00" fixdate="2018-10-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>checkMembershipPortRange needs to ensure membership port range is 1024-65535</summary>
      <description>The checkMembershipPortRange function uses the default port range values to validate new configuration. This is no longer correct since the defaults have been modified to prevent overlap between various default ports.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.AbstractDistributionConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="5926" opendate="2018-10-24 00:00:00" fixdate="2018-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>use jinja to reduce duplicated code in metrics pipeline</summary>
      <description>the current pipeline code has been duplicated 18 times for each job.  using a jinja loop this could be reduced by 18x.  also it is pointing to the wrong pipeline, should be apache-develop-main instead of develop</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.metrics.jinja.template.yml</file>
      <file type="M">ci.pipelines.meta.jinja.template.yml</file>
      <file type="M">ci.pipelines.meta.deploy.meta.sh</file>
      <file type="M">ci.bin.concourse.job.performance.py</file>
    </fixedFiles>
  </bug>
  <bug id="5927" opendate="2018-10-24 00:00:00" fixdate="2018-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add a way for create jndi-binding --type=POOLED to pass vendor specific attributes to the pool provider</summary>
      <description>The new create jndi-binding --type=POOLED does not provide a way to configure the pool.The pool can now be implemented by a user implemented class so we can not know in advance the different configuration options it may have. So we want to provide a way that the gfsh create jndi-binding command can pass key:value string pairs to the pool implementation. </description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.datasource.DataSourceFactoryTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.datasource.DataSourceFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.datasource.PooledDataSourceFactory.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.CreatePooledJndiBindingDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5929" opendate="2018-10-24 00:00:00" fixdate="2018-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>concourse workers do not need java</summary>
      <description>all java is done in heavy-lifters now, so we can use an even lighter weight alpine base image</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.images.alpine-tools.Dockerfile</file>
    </fixedFiles>
  </bug>
  <bug id="5930" opendate="2018-10-24 00:00:00" fixdate="2018-10-24 01:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>clean up dangling outputs in concourse</summary>
      <description>due to a typo, every job is needlessly showing a "concourse metadata" output</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="5931" opendate="2018-10-24 00:00:00" fixdate="2018-11-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make dependencies explicit in geode-pulse</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-pulse.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-pulse.geode-pulse-test.build.gradle</file>
      <file type="M">geode-pulse.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="5934" opendate="2018-10-25 00:00:00" fixdate="2018-11-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>fix examples pipeline</summary>
      <description>looks like this pipeline got missed in the refactoring</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="5935" opendate="2018-10-25 00:00:00" fixdate="2018-10-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>jdbc connector xml mapping should be at the region level instead of cache level</summary>
      <description>The jdbc connector xsd defines the jdbc mapping at the cache level.It should instead have it at the region level since each jdbc mapping if for a specific region. </description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.xml.JdbcServiceConfigurationTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.xml.JdbcConnectorServiceXmlParserTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.xml.ElementTypeTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlToPdxInstanceCreatorTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlHandlerTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.RegionMappingTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.configuration.ConnectorServiceTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommandFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.AlterMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.AlterMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.main.resources.org.apache.geode.internal.sanctioned-geode-connectors-serializables.txt</file>
      <file type="M">geode-connectors.src.main.resources.META-INF.schemas.geode.apache.org.schema.jdbc.jdbc-1.0.xsd</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.JdbcServiceConfiguration.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.JdbcConnectorServiceXmlParser.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.xml.ElementType.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlToPdxInstanceCreator.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlHandler.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceImpl.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.JdbcConnectorService.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.AlterMappingFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.AlterMappingCommand.java</file>
      <file type="M">geode-connectors.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
      <file type="M">geode-connectors.src.integrationTest.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommandIntegrationTest.java</file>
      <file type="M">geode-connectors.src.integrationTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandIntegrationTest.java</file>
      <file type="M">geode-connectors.src.integrationTest.java.org.apache.geode.connectors.jdbc.internal.cli.AlterMappingCommandIntegrationTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.ListMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.JdbcClusterConfigDistributedTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DestroyMappingCommandDunitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.AlterMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcDistributedTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.internal.TestConfigService.java</file>
    </fixedFiles>
  </bug>
  <bug id="5936" opendate="2018-10-25 00:00:00" fixdate="2018-10-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document that Geode works with OpenJDK</summary>
      <description>Document that Geode works with OpenJDK, same versions as the Java SDK.</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.getting.started.system.requirements.host.machine.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="5937" opendate="2018-10-25 00:00:00" fixdate="2018-12-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make dependencies explicit in geode-protobuf</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-protobuf.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-protobuf.geode-protobuf-test.build.gradle</file>
      <file type="M">geode-protobuf.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="5938" opendate="2018-10-25 00:00:00" fixdate="2018-12-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make dependencies explicit in cq and rebalancer modules</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-rebalancer.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-rebalancer.build.gradle</file>
      <file type="M">geode-cq.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-cq.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="5947" opendate="2018-10-26 00:00:00" fixdate="2018-12-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make dependencies explicit in connectors and experimental-driver modules</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-experimental-driver.build.gradle</file>
      <file type="M">geode-connectors.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-connectors.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="5950" opendate="2018-10-29 00:00:00" fixdate="2018-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>update latest Java 11 in images automatically</summary>
      <description>change images to ensure latest Java 11 is downloaded, not a hardcoded version add a weekly trigger to images that use a mechanism other than docker tags to obtain Java</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.images.jinja.template.yml</file>
      <file type="M">ci.images.google-geode-builder.scripts.setup.sh</file>
    </fixedFiles>
  </bug>
  <bug id="5951" opendate="2018-10-29 00:00:00" fixdate="2018-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>introduce `create data-source` as a new gfsh command</summary>
      <description>The create jndi-binding command has lots of options and even creates something that is not a JDBC data source.It would be helpful to jdbc connector users to have a simpler command that focuses on creating a jdbc data source. </description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.UsernamePasswordInterceptorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommandTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.UsernamePasswordInterceptor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CommandAvailabilityIndicator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.JndiBindingsType.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunctionTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="5952" opendate="2018-10-29 00:00:00" fixdate="2018-1-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Sub-regions created by gfsh do not produce correct cluster configuration</summary>
      <description>When using gfsh to create subregions as follows:create region --name="A" --type=REPLICATEcreate region --name="A/B" --type=REPLICATEThen the resulting cluster configuration cache.xml contains the following:&lt;region name="A"&gt; &lt;region-attributes data-policy="replicate" scope="distributed-ack"/&gt; &lt;/region&gt;&lt;region name="B"&gt; &lt;region-attributes data-policy="replicate" scope="distributed-ack"/&gt; &lt;/region&gt;</description>
      <version>None</version>
      <fixedVersion>1.8.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.RegionCreateFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.CreateRegionCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.Region.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.CreateRegionCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6261" opendate="2019-1-9 00:00:00" fixdate="2019-1-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>When a remove does not find the entry with expected value in a transaction, it should not cleanup existing entries in the txState</summary>
      <description>Currently if a remove operation find the entry with different value in a transaction, it clears the entries not yet modified in the transaction. This would break the repeatable read.</description>
      <version>1.7.0,1.8.0</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.TXStateTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXState.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.TXJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6270" opendate="2019-1-14 00:00:00" fixdate="2019-1-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Correctly set up user-provided client cache regions for session modules</summary>
      <description>When a user provides their own client cache region, we need to make sure that additional constructs, such as expiration listeners, are set up as appropriate.Specifically, if a user provides a PROXY client cache region it needs to have the SessionExpirationCacheListener attached and it also needs to register interest on all keys. The former could be done in the provided xml, but the latter cannot.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.session.tests.TomcatClientServerTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.session.tests.CargoTestBase.java</file>
      <file type="M">geode-assembly.geode-assembly-test.src.main.java.org.apache.geode.session.tests.ServerContainer.java</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">extensions.geode-modules.src.main.java.org.apache.geode.modules.session.catalina.ClientServerSessionCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="6271" opendate="2019-1-14 00:00:00" fixdate="2019-1-14 01:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Unknown pdx type error occurs when a single client is connected to two separate clusters</summary>
      <description>If A client is connected through two different pools to two different geode clusters The clusters are not connected by WAN The same pdx serialized class is used in both clusters and the client puts into one or more clustersThen it is possible that the client put will result in a value in one of the clusters that will fail deserialization with "java.lang.IllegalStateException: Unknown pdx type." This is because the client will use a type id that is generated in one cluster but is not known to the other cluster.I've attached a test case that replicates this scenario. The client used to have some logic that copied PDX types from one cluster to another in some cases. That logic was removed with cf0b378429b643513366ce90226e4f6472056c7b. However, other cases were still not copying the type. In the attached test case, one of the tests will pass if the changes from cf0b3784 are reverted, but the others still fail.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.pdx.PdxMultiClusterClientServerDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.ClientTypeRegistration.java</file>
    </fixedFiles>
  </bug>
  <bug id="6272" opendate="2019-1-14 00:00:00" fixdate="2019-1-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>the JDBC connector should use PDX instances instead of JSON for composite keys</summary>
      <description>As a GemFire user with composite keysI want to to replace JSON with PDX for these keysso that I can support any order for the keys and have minimal memory impact.Acceptance Criteria:Given a jdbc-mapping uses a composite keyWhen I do CRUD operations on data in the regionThen I must specify the key as a "stable" PDX instance that contains fields that match those specified by --id.Given an existing cache with a jdbc-mapping that uses a composite keyWhen I want to specify a composite key for a CRUD operationThen I have a method on the cache to create a "stable" PDX instance.Given an existing cache with a jdbc-mapping that uses a composite keyWhen I want to specify a composite key for a CRUD operationThen I have a method on the cache to create a "stable" PDX instance and the order of fields in the composite key doesn't matter.Given an existing cache with pdx-read-serialized is set to falseWhen I do an operation that triggers deserialization of a "stable" PDX instanceThen the "stable" PDX instance will be deserialized as the same "stable" PDX instance.Given a "stable" PDX instanceWhen I call its getObject methodThen it will return the same "stable" PDX instance. </description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.PdxInstanceFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.PdxInstance.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.PdxType.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.PdxInstanceImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.PdxInstanceFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.PdxInstanceEnum.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.InternalPdxInstance.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.FieldNotFoundInPdxVersion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.EnumInfo.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.RuntimeIterator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.PathUtils.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.CompiledOperation.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.query.internal.AttributeDescriptor.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.pdx.PdxInstanceFactoryJUnitTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.SqlHandlerTest.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.SqlHandler.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.PostgresJdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcWriterIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcLoaderIntegrationTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcDistributedTest.java</file>
      <file type="M">geode-connectors.src.acceptanceTest.java.org.apache.geode.connectors.jdbc.JdbcAsyncWriterIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6273" opendate="2019-1-14 00:00:00" fixdate="2019-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add server group support for JDBC mapping</summary>
      <description>As a Geode user, I want to specify which server group holds the region, so that I can add the JDBC mapping to that region.Given a Geode region exists on a server group, when I run create jdbc-mapping for that regionThen I can specify the server group with an option on the command line, so that the jdbc-mapping is successfully recognized and completed.Given create jdbc-mapping has a server group option defined, when I run describe jdbc-mapping, then I can see the server group option definition.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.CommandResultAssert.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.CliUtil.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.util.internal.DescribeMappingResultTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.org.apache.geode.connectors.util.DescribeMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingFunctionTest.java</file>
      <file type="M">geode-connectors.src.test.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandTest.java</file>
      <file type="M">geode-connectors.src.main.resources.org.apache.geode.internal.sanctioned-geode-connectors-serializables.txt</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.util.internal.MappingConstants.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.util.internal.DescribeMappingResult.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingFunction.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommand.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.java</file>
      <file type="M">geode-connectors.src.integrationTest.resources.org.apache.geode.codeAnalysis.sanctionedDataSerializables.txt</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.DescribeMappingCommandDUnitTest.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6275" opendate="2019-1-15 00:00:00" fixdate="2019-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Benchmarks CI job silently fails</summary>
      <description>The benchmark task in CI silently fails when it fails to build geode or get resources. The benchmark job should go red when it fails to build geode or fails to get resources from Maven.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.properties</file>
      <file type="M">ci.scripts.run.benchmarks.sh</file>
    </fixedFiles>
  </bug>
  <bug id="6276" opendate="2019-1-15 00:00:00" fixdate="2019-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Benchmark CI should fetch versions and build develop</summary>
      <description>The benchmark ci job should build all non-release branches and fetch geode releases. This avoids the cost of rebuilding released versions of Geode and illiminates the challenge of the build parameters diverging between old versions and develop.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.run.benchmarks.sh</file>
      <file type="M">ci.scripts.cleanup.benchmarks.sh</file>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="634" opendate="2015-12-7 00:00:00" fixdate="2015-1-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI failure: DistributedMemberDUnitTest.testRolesInAllVMs</summary>
      <description>git rev 9283282c64076c5f8e599f3d47895f3c48e205e8 build #814java.lang.AssertionError: Suspicious strings were written to the log during this run.Fix the strings or use DistributedTestCase.addExpectedException to ignore.-----------------------------------------------------------------------Found suspect string in log4j at line 52&amp;#91;error 2015/12/06 17:29:56.294 PST &lt;TransferQueueBundler,cc6-co6-8087&gt; tid=0x6d&amp;#93; JGRP000029: cc6-co6&lt;v15&gt;:1025: failed sending message to cc6-co6&lt;v16&gt;:1026 (80 bytes): java.io.IOException: Bad file descriptor, headers: UNICAST3: ACK, seqno=1, conn_id=1, ts=4, 1000: &amp;#91;cluster_name=AG&amp;#93;</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.gms.messenger.Transport.java</file>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.NetViewJUnitTest.java</file>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.mgr.GMSMembershipManagerJUnitTest.java</file>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.messenger.JGroupsMessengerJUnitTest.java</file>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.messenger.GMSQuorumCheckerJUnitTest.java</file>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.membership.GMSJoinLeaveJUnitTest.java</file>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.distributed.internal.membership.gms.fd.GMSHealthMonitorJUnitTest.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.NetView.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.gms.messenger.JGroupsMessenger.java</file>
    </fixedFiles>
  </bug>
  <bug id="6340" opendate="2019-1-30 00:00:00" fixdate="2019-2-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add arbitrary key=value metadata to benchmark runs.</summary>
      <description>User should be able to add arbitrary key=value pair metadata to a benchmark run. The key=value pairs should be stored in the benchmark output in a known location.Example (not required implementation):./gradlew benchmark -Phosts=... -PoutputDir=... -Pmetadata=k1=v1,k2=v2output/.../metadata.json:{ "k1":"v1", "k2":"v2"}Acceptance: Command line option for providing key=value pairs. File containing the key=value pairs. Arguments can be provide through all helper scripts.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.run.benchmarks.sh</file>
    </fixedFiles>
  </bug>
  <bug id="6544" opendate="2019-3-20 00:00:00" fixdate="2019-3-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Can&amp;#39;t log back in Pulse after an unauthorized login attempt</summary>
      <description>Steps to reproduce:1) start a locator with security manager2) try login using a username/password that can be authenticated, but not authorized to view the clusterDatail.html (no data.read privilege)3) user gets a 403, which is correct, but then user can not get back to the login page to enter correct credentials.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-pulse.src.main.webapp.WEB-INF.spring-security.xml</file>
      <file type="M">geode-pulse.src.main.java.org.apache.geode.tools.pulse.internal.data.Repository.java</file>
      <file type="M">geode-pulse.geode-pulse-test.src.main.resources.pulse-auth.json</file>
      <file type="M">geode-pulse.geode-pulse-test.src.main.java.org.apache.geode.tools.pulse.tests.rules.WebDriverRule.java</file>
      <file type="M">geode-pulse.geode-pulse-test.src.main.java.org.apache.geode.tools.pulse.tests.PulseTestLocators.java</file>
    </fixedFiles>
  </bug>
  <bug id="655" opendate="2015-12-10 00:00:00" fixdate="2015-1-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode web page sentence should be better worded</summary>
      <description>The first sentence on the http://geode.incubator.apache.org/ web page means something different than intended. The sentence says"Solving low latency data management problems at very high concurrency since 2002."Low latency modifies data management problems. Because of this, the sentence implies that the problems being solved are ones that exhibit low latency. This is the opposite of what is intended.Here is a better wording for that sentence:Providing low latency, high concurrency data management solutions since 2002.Pull request to make this change will follow.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-site.website.content.index.html</file>
    </fixedFiles>
  </bug>
  <bug id="6552" opendate="2019-3-21 00:00:00" fixdate="2019-3-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Spelling error in getMaxThreads Javadoc</summary>
      <description>"Maxium" should be "maximum" in the API documentation for getMaxThreads.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.CacheServerBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.server.CacheServer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.SystemMemberCacheServer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.admin.SystemMemberBridgeServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="6556" opendate="2019-3-21 00:00:00" fixdate="2019-9-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode User Guide: Correct gfsh create region param explanations</summary>
      <description>On the reference page for the `gfsh create region` command, some region-wide parameters are incorrectly described as applying to the regions themselves, when they actually apply to all entries within the region. The params whose descriptions need correcting are: region-idle-time-expiration and region-idle-time-expiration-action region-time-to-live-expiration and region-time-to-live-expiration-action</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.create.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="6559" opendate="2019-3-22 00:00:00" fixdate="2019-3-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>PdxInstance.getObject() is using class from older jar in case of Reconnect</summary>
      <description>Given a function as below:public void execute(FunctionContext context) { RegionFunctionContext rctx = (RegionFunctionContext)context; Region&lt;Object, Object&gt; dataSet = rctx.getDataSet(); Object o = ((PdxInstance)context.getArguments()).getObject(); LogService.getLogger().warn(o.getClass() + " loaded from " + getClassLoaderJar(o.getClass())); printCallerStack("Function execution called from"); LogService.getLogger().warn("Thread context classloader is " + Thread.currentThread().getContextClassLoader()); LogService.getLogger().error(this); LogService.getLogger().warn(Student.class + " loaded from " + getClassLoaderJar(Student.class)); LogService.getLogger().warn(o.getClass() + " args class parent is " + o.getClass().getClassLoader().getParent()); LogService.getLogger().warn(o.getClass() + " loaded from " + getClassLoaderJar(o.getClass())); LogService.getLogger().warn(this.getClass() + " loaded from " + getClassLoaderJar(this.getClass())); Student args = (Student) o; LogService.getLogger().warn("args = " + args); Integer first = 1; Integer second = 2; LogService.getLogger().info("Function returning result " + this.getClass() + " loaded from " + this.getClass().getClassLoader()); rctx.getResultSender().lastResult(first * second); }It works fine in case of normal operations and jar --deploy , but in case of auto-reconnect, the below line Object o = ((PdxInstance)context.getArguments()).getObject();Loads the class from older jar[warning 2019/03/14 14:23:43.420 IST server2 &lt;Function Execution Processor1&gt; tid=0x11f] class com.pivotal.support.hot.deploy.Student loaded from [file:/Users/rajiv/kumar/gemfire/deployJarTest/server2/deploy.v1.jar]Mostly due to the caching in the InternalDeserializer.Whereas the below Student args = (Student) o;Loads the class from the latest jar, for each reconnect attempt the jar is downloaded from the locators and the version is increased[warning 2019/03/14 14:23:43.426 IST server2 &lt;Function Execution Processor1&gt; tid=0x11f] class com.pivotal.support.hot.deploy.Student loaded from [file:/Users/rajiv/kumar/gemfire/deployJarTest/server2/deploy.v3.jar]This is causing ClassCastExcetpion[warning 2019/03/14 14:23:43.426 IST server2 &lt;Function Execution Processor1&gt; tid=0x11f] Exception on server while executing function : com.pivotal.support.hot.deploy.Multiply@3e484c00java.lang.ClassCastException: com.pivotal.support.hot.deploy.Student cannot be cast to com.pivotal.support.hot.deploy.Student at com.pivotal.support.hot.deploy.Multiply.execute(Multiply.java:43) at org.apache.geode.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:332) at org.apache.geode.internal.cache.execute.AbstractExecution$1.run(AbstractExecution.java:274) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.geode.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:665) at org.apache.geode.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1111) at java.lang.Thread.run(Thread.java:745)</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.compiler.JarBuilder.java</file>
      <file type="M">geode-junit.src.integrationTest.java.org.apache.geode.test.compiler.JarBuilderTest.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.ServerStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.MemberStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.management.internal.configuration.ClusterConfigTestBase.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.pdx.internal.PeerTypeRegistration.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.messages.ConfigurationResponse.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.JarDeployer.java</file>
    </fixedFiles>
  </bug>
  <bug id="6560" opendate="2019-3-25 00:00:00" fixdate="2019-4-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode Management REST API should create regions within groups</summary>
      <description>There is no code (or test) that supports `ClusterManagementService.create(config, group)`. WhyNeed to be able to create Geode components (ex. regions) associated with a specific group like `gfsh` can do today.Scenario: Given that I have servers started with different groups (ex. `group-1` and `group-2`)When I have a `ClusterManagementService` instance and a `RegionConfig` instance and call `cms.create(config, "group-1")`Then the region is only created on the server associated with `group-1` and the relevant cluster config is available to any new servers joining which are a part of `group-1`</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementSecurityIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ClientClusterManagementServiceDunitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6561" opendate="2019-3-26 00:00:00" fixdate="2019-6-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unable to reconnect when regions are configured with cluster config</summary>
      <description> Given that I have a region configured with cluster config and a server restarts, the following exception is likely to be thrown and the server will not be able to reconnect:[vm2] java.lang.IllegalStateException: Cannot set idle timeout when statistics are disabled.[vm2] at org.apache.geode.internal.cache.AbstractRegion.setEntryIdleTimeout(AbstractRegion.java:1227)[vm2] at org.apache.geode.internal.cache.xmlcache.RegionCreation.setMutableAttributes(RegionCreation.java:194)[vm2] at org.apache.geode.internal.cache.xmlcache.RegionCreation.createRoot(RegionCreation.java:241)[vm2] at org.apache.geode.internal.cache.xmlcache.CacheCreation.initializeRegions(CacheCreation.java:635)[vm2] at org.apache.geode.internal.cache.xmlcache.CacheCreation.create(CacheCreation.java:577)[vm2] at org.apache.geode.internal.cache.xmlcache.CacheXmlParser.create(CacheXmlParser.java:337)[vm2] at org.apache.geode.internal.cache.GemFireCacheImpl.loadCacheXml(GemFireCacheImpl.java:4272)[vm2] at org.apache.geode.internal.cache.GemFireCacheImpl.initializeDeclarativeCache(GemFireCacheImpl.java:1388)[vm2] at org.apache.geode.internal.cache.GemFireCacheImpl.initialize(GemFireCacheImpl.java:1208)[vm2] at org.apache.geode.internal.cache.InternalCacheBuilder.create(InternalCacheBuilder.java:207)[vm2] at org.apache.geode.distributed.internal.InternalDistributedSystem.reconnect(InternalDistributedSystem.java:2730)[vm2] at org.apache.geode.distributed.internal.InternalDistributedSystem.tryReconnect(InternalDistributedSystem.java:2496)[vm2] at org.apache.geode.distributed.internal.InternalDistributedSystem.disconnect(InternalDistributedSystem.java:1312)[vm2] at org.apache.geode.distributed.internal.ClusterDistributionManager$DMListener.membershipFailure(ClusterDistributionManager.java:3424)[vm2] at org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager.uncleanShutdown(GMSMembershipManager.java:1554)[vm2] at org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager.lambda$forceDisconnect$3(GMSMembershipManager.java:2586)[vm2] at java.lang.Thread.run(Thread.java:748)As part of the reconnect, the original cache xml is saved at the beginning of the process. Reconnect goes through regular cache initialization which includes retrieving the cluster config from the locator and then applying the saved cache xml. In the above example, the cluster config looks like this:[vm2] &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;[vm2] &lt;cache xmlns="http://geode.apache.org/schema/cache" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" xsi:schemaLocation="http://geode.apache.org/schema/cache http://geode.apache.org/schema/cache/cache-1.0.xsd"&gt;[vm2] &lt;pdx ignore-unread-fields="false" persistent="false" read-serialized="true"&gt;[vm2] &lt;pdx-serializer&gt;[vm2] &lt;class-name&gt;org.apache.geode.pdx.ReflectionBasedAutoSerializer&lt;/class-name&gt;[vm2] &lt;parameter name="classes"&gt;[vm2] &lt;string&gt;ClusterConfigServerRestartWithJarDeployFunction.*&lt;/string&gt;[vm2] &lt;/parameter&gt;[vm2] &lt;/pdx-serializer&gt;[vm2] &lt;/pdx&gt;[vm2] &lt;region name="FOO" refid="REPLICATE"&gt;[vm2] &lt;region-attributes data-policy="replicate" scope="distributed-ack"/&gt;[vm2] &lt;/region&gt;[vm2] &lt;/cache&gt; And the saved cache.xml like this:[vm2] [info 2019/03/26 06:24:52.841 PDT &lt;ReconnectThread&gt; tid=0x4f] Initializing cache using generated description from old cache:[vm2] &lt;?xml version="1.0" encoding="UTF-8"?&gt;[vm2] &lt;cache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://geode.apache.org/schema/cache" xsi:schemaLocation="http://geode.apache.org/schema/cache http://geode.apache.org/schema/cache/cache-1.0.xsd" version="1.0" lock-lease="120" lock-timeout="60" search-timeout="300" is-server="true" copy-on-read="false"&gt;[vm2] &lt;cache-transaction-manager/&gt;[vm2] &lt;cache-server port="55328" maximum-time-between-pings="60000" notify-by-subscription="true" socket-buffer-size="32768" max-connections="800" max-threads="0" maximum-message-count="230000" message-time-to-live="180" bind-address="" load-poll-interval="5000" tcp-no-delay="true"&gt;[vm2] &lt;custom-load-probe&gt;[vm2] &lt;class-name&gt;org.apache.geode.cache.server.internal.ConnectionCountProbe&lt;/class-name&gt;[vm2] &lt;/custom-load-probe&gt;[vm2] &lt;/cache-server&gt;[vm2] &lt;pdx read-serialized="true" ignore-unread-fields="false" persistent="false"&gt;[vm2] &lt;pdx-serializer&gt;[vm2] &lt;class-name&gt;org.apache.geode.pdx.ReflectionBasedAutoSerializer&lt;/class-name&gt;[vm2] &lt;parameter name="classes"&gt;[vm2] &lt;string&gt;ClusterConfigServerRestartWithJarDeployFunction.*&lt;/string&gt;[vm2] &lt;/parameter&gt;[vm2] &lt;/pdx-serializer&gt;[vm2] &lt;/pdx&gt;[vm2] &lt;region name="FOO"&gt;[vm2] &lt;region-attributes scope="distributed-ack" early-ack="false" multicast-enabled="false" publisher="false" enable-async-conflation="false" enable-subscription-conflation="false" data-policy="replicate" initial-capacity="16" load-factor="0.75" concurrency-level="16" concurrency-checks-enabled="true" statistics-enabled="false" ignore-jta="false" is-lock-grantor="false" pool-name="" disk-synchronous="true" cloning-enabled="false" gateway-sender-ids="" async-event-queue-ids="" off-heap="false"&gt;[vm2] &lt;region-time-to-live&gt;[vm2] &lt;expiration-attributes timeout="0" action="invalidate"/&gt;[vm2] &lt;/region-time-to-live&gt;[vm2] &lt;region-idle-time&gt;[vm2] &lt;expiration-attributes timeout="0" action="invalidate"/&gt;[vm2] &lt;/region-idle-time&gt;[vm2] &lt;entry-time-to-live&gt;[vm2] &lt;expiration-attributes timeout="0" action="invalidate"/&gt;[vm2] &lt;/entry-time-to-live&gt;[vm2] &lt;entry-idle-time&gt;[vm2] &lt;expiration-attributes timeout="0" action="invalidate"/&gt;[vm2] &lt;/entry-idle-time&gt;[vm2] &lt;disk-write-attributes&gt;[vm2] &lt;synchronous-writes/&gt;[vm2] &lt;/disk-write-attributes&gt;[vm2] &lt;disk-dirs&gt;[vm2] &lt;disk-dir&gt;/Users/jdeppe/workspace/gemfire-develop/open/dunit/vm2/.&lt;/disk-dir&gt;[vm2] &lt;/disk-dirs&gt;[vm2] &lt;subscription-attributes interest-policy="cache-content"/&gt;[vm2] &lt;/region-attributes&gt;[vm2] &lt;/region&gt;[vm2] &lt;function-service/&gt;[vm2] &lt;resource-manager critical-heap-percentage="0" eviction-heap-percentage="0" critical-off-heap-percentage="0" eviction-off-heap-percentage="0"/&gt;[vm2] &lt;/cache&gt;After the cluster config is applied, the FOO region exists. However the application of the saved cache xml results in the system attempting to apply the attributes to the already existing FOO region which then causes the exception. </description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.ServerStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.MemberStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.MBeanServerConnectionRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.LocatorStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.dunit.rules.MemberVM.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.distributed.internal.membership.gms.MembershipManagerHelper.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.JMXMBeanReconnectDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.configuration.ClusterConfigServerRestartWithJarDeployDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.RegionChangesPersistThroughClusterConfigurationDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6569" opendate="2019-3-28 00:00:00" fixdate="2019-3-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>geode-all-bom should not make a jar</summary>
      <description>We need to disable creation and publishing of artifacts on the geode-all-bom subproject.</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-protobuf-messages.build.gradle</file>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.build.gradle</file>
      <file type="M">boms.geode-all-bom.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="6570" opendate="2019-3-28 00:00:00" fixdate="2019-3-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>processing of cached join request delays view installation</summary>
      <description>In a test that kills and restarts locators one of the restarting locators times out trying to join the distributed system.  Logs show that another locator was becoming the membership coordinator and was delayed in sending out a membership view when it processed a different join request for a member that was already in the distributed system.locator A gets join request from node 1 and sends a PREPAREnode 1 sets its identity's view ID using the PREPAREd viewlocator A is killednode 1 sends a join request to locator B.  Its identity has a view ID set.node 2 sends a join request to locator B and gets a PREPARElocator B processes node 1's join request and assigns a new view ID to itlocator B processes node 2's join request and assigns a new view ID to itlocator B sends the PREPARE with these two new nodes.  It also has node 1's original IDlocator B times out waiting for a response from node 1 with the new view ID and declares it crashed.  It sends out a new PREPARE w/o that address.node 2 gives up waitinglocator B gets no response from node 2 and declares it crashed, sends out a new PREPARE without node 2 and succeeds.Here are log snippets showing the problem.  Process 616 has a JoinRequest queued when this locator becomes coordinator.  The JoinRequest ID has v46 already in it, showing that a PREPARE has already been sent with this member in it.The locator then creates a new View that has process 616's ID in it twice - once with v46 and once with v60locatorgemfire_2_2_29835/system.log: [fine 2019/03/27 22:22:22.817 PDT locatorgemfire_2_2_host2_29835 &lt;Geode Membership View Creator&gt; tid=0xba] processing request JoinRequestMessage(rs-GEM-2463-1622a0i32xlarge-hydra-client-17(peergemfire_2_1_host2_616:616)&lt;ec&gt;&lt;v46&gt;:41004) failureDetectionPort:43747locatorgemfire_2_2_29835/system.log: [fine 2019/03/27 22:22:22.817 PDT locatorgemfire_2_2_host2_29835 &lt;Geode Membership View Creator&gt; tid=0xba] processing request JoinRequestMessage(rs-GEM-2463-1622a0i32xlarge-hydra-client-17(locatorgemfire_2_3_host2_746:746:locator)&lt;ec&gt;:41002) failureDetectionPort:52188locatorgemfire_2_2_29835/system.log: [info 2019/03/27 22:22:22.818 PDT locatorgemfire_2_2_host2_29835 &lt;Geode Membership View Creator&gt; tid=0xba] preparing new view View[rs-GEM-2463-1622a0i32xlarge-hydra-client-17(locatorgemfire_2_2_host2_29835:29835:locator)&lt;ec&gt;&lt;v24&gt;:41001|60] members: [rs-GEM-2463-1622a0i32xlarge-hydra-client-17(locatorgemfire_2_2_host2_29835:29835:locator)&lt;ec&gt;&lt;v24&gt;:41001, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(peergemfire_2_2_host2_30052:30052)&lt;ec&gt;&lt;v25&gt;:41007{lead}, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(locatorgemfire_2_4_host2_31300:31300:locator)&lt;ec&gt;&lt;v29&gt;:41003, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(locatorgemfire_2_1_host2_31671:31671:locator)&lt;ec&gt;&lt;v41&gt;:41000, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(peergemfire_2_2_host2_31856:31856)&lt;ec&gt;&lt;v42&gt;:41006, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(peergemfire_2_1_host2_32560:32560)&lt;ec&gt;&lt;v44&gt;:41005, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(peergemfire_2_1_host2_616:616)&lt;ec&gt;&lt;v46&gt;:41004, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(peergemfire_2_1_host2_616:616)&lt;ec&gt;&lt;v60&gt;:41004, rs-GEM-2463-1622a0i32xlarge-hydra-client-17(locatorgemfire_2_3_host2_746:746:locator)&lt;ec&gt;&lt;v60&gt;:41002]</description>
      <version>None</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeaveJUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6574" opendate="2019-3-29 00:00:00" fixdate="2019-6-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cluster Management Service should be able to query and list member details</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.geode-management-servlet.xml</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.cli.domain.ClassName.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.RestfulEndpoint.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.CacheElement.java</file>
      <file type="M">geode-management.build.gradle</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.RegionConfigTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.RegionConfigMutator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationMutator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.GetMemberInformationFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.DataCommandFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.converters.ConfigPropertyConverter.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalLocator.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.configuration.mutators.RegionConfigMutatorIntegrationTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.api.ClusterManagementServiceRetrievalDUnitTest.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.management.internal.cli.converters.PoolPropertyConverter.java</file>
      <file type="M">geode-common.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-common.build.gradle</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementSecurityIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.MemberManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.ClientClusterManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.BaseLocatorContextLoader.java</file>
      <file type="M">geode-web-management.build.gradle</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.dunit.rules.ClusterStartupRule.java</file>
    </fixedFiles>
  </bug>
  <bug id="6577" opendate="2019-3-29 00:00:00" fixdate="2019-4-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Performance Improvement: init object in constructor</summary>
      <description>Initialize inexpensive object in the constructor for GemfireCacheImpl instead of in a hot code path, while holding a lock. This will result in a noticeable performance gain.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.GemFireCacheImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="6578" opendate="2019-3-29 00:00:00" fixdate="2019-4-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move mock extension classes closer to the tests</summary>
      <description>Move the mock extension classes form the shared test framework to the test source set. They are not shared across source sets so don't need to be in the framework.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.src.main.resources.META-INF.services.org.springframework.shell.core.CommandMarker</file>
      <file type="M">geode-junit.src.main.resources.META-INF.services.org.apache.geode.internal.cache.xmlcache.XmlParser</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.management.internal.cli.commands.CommandAvailabilityIndicatorTestHelper.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.MockRegionExtensionXmlGenerator.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.MockRegionExtension.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.MockExtensionXmlParser.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.MockExtensionCommands.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.MockCacheExtensionXmlGenerator.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.MockCacheExtension.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.DestroyMockRegionExtensionFunction.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.DestroyMockCacheExtensionFunction.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.CreateMockRegionExtensionFunction.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.CreateMockCacheExtensionFunction.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.AlterMockRegionExtensionFunction.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.AlterMockCacheExtensionFunction.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.AbstractMockExtensionXmlGenerator.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.internal.cache.extension.mock.AbstractMockExtension.java</file>
    </fixedFiles>
  </bug>
  <bug id="6579" opendate="2019-3-30 00:00:00" fixdate="2019-4-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Creating a String during deserialization could be optimized</summary>
      <description>When creating a string during deserialization from data that we know is in the ASCII character set (each character can be represented by one byte) we currently read all the bytes into a temporary byte array and then create a String instance by giving it that byte array. The String constructor has to create its own char array and then copy all the bytes into it. After that the byte array is garbage.We could instead directly create a char array, fill it by reading each byte from the DataInput into it and then using reflection to directly set this char array as the value field of the String instance we just created (as an empty String). This prevents an extra copy of the data and reduces garbage creation.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.InternalDataSerializer.java</file>
    </fixedFiles>
  </bug>
  <bug id="6583" opendate="2019-4-1 00:00:00" fixdate="2019-5-1 01:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>Integrate phi-accrual failure detection into Geode</summary>
      <description>Akka has a history-based failure detector that records heartbeat history and is forgiving of pauses to a certain extent.  This has been incorporated into hazelcast as an alternative failure detector &amp; we should investigate doing the same.The Akka detector was written in Scala.  There is a Java port here: https://github.com/komamitsu/phi-accural-failure-detector</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.fd.GMSHealthMonitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="6585" opendate="2019-4-1 00:00:00" fixdate="2019-9-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>tuning advice for subscription-ack-interval has multiple problems</summary>
      <description>On this page:https://gemfire.docs.pivotal.io/97/geode/developing/events/limit_server_subscription_queue_size.htmlthe first paragraph undersubscription-ack-intervalhas some inconsistencies:Optional: Increase the frequency of queue synchronization. This only applies to configurations where server redundancy is used for high availability. Increase the client’s pool configuration, subscription-ack-interval. The client periodically sends a batch acknowledgment of messages to the server, rather than acknowledging each message individually. A lower setting speeds message delivery and generally reduces traffic between the server and client. A higher setting helps contain server queue size.Third sentence: “Increase…subscription-ack-interval“—this seems backward to me. It certainly disagrees with the first sentence since the interval is inversely proportional to the frequency.Fifth sentence: “…and generally reduces traffic…“—is that true? I doubt it.Last sentence: “A higher setting helps contain server queue size.“—again backward.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.events.limit.server.subscription.queue.size.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="6653" opendate="2019-4-15 00:00:00" fixdate="2019-5-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Gfsh command output trimed</summary>
      <description>While executing query on entry with a large key, gfsh automatically trims the columns width so it can fit in available width of the terminal.gfsh&gt;query --query="select * from /example-region"Result : trueLimit  : 100Rows   : 1Result------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut ali.. In a documentation state following:gfsh commands such as query produce output with wide columns that may become misaligned and require manual reformatting to view the output. If the output cannot fit in the available width of the terminal, gfsh automatically trims the columns widths to fit. You can disable this behavior by setting the gfsh environment variable GFSH.TRIMSCRWIDTH to false.But this is wrong described. Only way to disable this behavior is setting gfsh environment variable APP_RESULT_VIEWER to an arbitrary value except 'external' as it enables viewing of the output using UNIX less command.  </description>
      <version>1.7.0,1.8.0,1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.configuring.gfsh.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="6654" opendate="2019-4-15 00:00:00" fixdate="2019-6-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Stats documentation issues</summary>
      <description>Hi,There is no information in documentation (https://geode.apache.org/docs/guide/18/reference/statistics_list.html) about the following statistics: Region Entry Eviction - Heap based eviction (HeapLRUStatistics) Thread stats (VMThreadStats) Client-to-Server communication (ClientSendStats) Disk Store stats (DiskStoreStatistics) There are also these errors in statistics names (doc not aligned with code): "Locator (LocatorStatistics)" should be "Locator (LocatorStats)" "Region Entry Eviction – Size-based (LRUStatistics)" should be "Region Entry Eviction – Size-based (MemLRUStatistics)" "Continuous Querying (CQStatistics)" should be "Continuous Querying (CqQueryStats)" "Gateway Queue (GatewayStatistics)" should be "Gateway Sender statistics (GatewaySenderStatistics)" "Function Execution (FunctionServiceStatistics)" should be "Function Execution (FunctionStatistics)" Also, I cannot find references in the code about the "Delta Propagation (DeltaPropagationStatistics)" described in the documentation</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.statistics.list.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="666" opendate="2015-12-14 00:00:00" fixdate="2015-12-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update awaitility dependency from 1.6.5 to 1.7.0</summary>
      <description>com.jayway.awaitility:awaitility releases are now up to 1.7.0. We should update our dependency from 1.6.5 to 1.7.0.Awaitility is used in IntegrationTests and DistributedTests for awaiting and asserting on asynchronous conditions.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.dependency-versions.properties</file>
    </fixedFiles>
  </bug>
  <bug id="6669" opendate="2019-4-18 00:00:00" fixdate="2019-6-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow create data source command to specify driver jar for jdbc connector</summary>
      <description>In order to load a jdbc driver at runtime, we need to be able to deploy it to the cluster. It would be most convenient for users if this could be done automatically when they create their data source. We can do this by adding a --driver-jar option to the create data source command which will load a drivers from a path provided.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.xmlcache.CacheXmlParser.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.jndi.JNDIInvoker.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.datasource.DataSourceFactory.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunctionTest.java</file>
      <file type="M">geode-connectors.src.main.java.org.apache.geode.connectors.jdbc.internal.cli.CreateDataSourceCommand.java</file>
      <file type="M">geode-connectors.src.distributedTest.java.org.apache.geode.connectors.jdbc.internal.cli.CreateDataSourceCommandDUnitTest.java</file>
      <file type="M">geode-connectors.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="667" opendate="2015-12-14 00:00:00" fixdate="2015-12-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update system-rules dependency from 1.12.1 to 1.15.0</summary>
      <description>com.github.stefanbirkner:system-rules releases are now up to 1.15.0. We should update our dependency from 1.12.1 to 1.15.0.System-Rules is a library of JUnit Rules used in UnitTests, IntegrationTests and DistributedTests for controlling System properties, stdout, stderr, etc.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.dependency-versions.properties</file>
    </fixedFiles>
  </bug>
  <bug id="6724" opendate="2019-4-30 00:00:00" fixdate="2019-5-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>split brain formed on concurrent locator startup</summary>
      <description>In a test with network-partition-detection disabled four locators were spun up in parallel and they formed two different clusters. Two servers were started and they joined different clusters, ending up with different data. Consistency checks at the end of the test caught the problem.locatorgemfire_1_2_17088/system.log: [info 2019/04/25 22:00:08.732 PDT &lt;vm_1_thr_1_locator_1_2_host1_17088&gt; tid=0x14] findCoordinator chose rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_2_host1_17088:17088:locator)&lt;ec&gt;:41001 out of these possible coordinators: [rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_2_host1_17088:17088:locator)&lt;ec&gt;:41001]locatorgemfire_1_2_17088/system.log: [info 2019/04/25 22:00:08.733 PDT &lt;vm_1_thr_1_locator_1_2_host1_17088&gt; tid=0x14] Discovery state after looking for membership coordinator is SearchState(locatorsContacted=2; findInViewResponses=0; alreadyTried=[]; registrants=[rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_2_host1_17088:17088:locator)&lt;ec&gt;:41001]; possibleCoordinator=rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_2_host1_17088:17088:locator)&lt;ec&gt;:41001; viewId=-1; hasContactedAJoinedLocator=false; view=null; responses=[])locatorgemfire_1_2_17088/system.log: [info 2019/04/25 22:00:08.733 PDT &lt;vm_1_thr_1_locator_1_2_host1_17088&gt; tid=0x14] found possible coordinator rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_2_host1_17088:17088:locator)&lt;ec&gt;:41001locatorgemfire_1_2_17088/system.log: [info 2019/04/25 22:00:08.733 PDT &lt;vm_1_thr_1_locator_1_2_host1_17088&gt; tid=0x14] This member is becoming the membership coordinator with address rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_2_host1_17088:17088:locator)&lt;ec&gt;:41001locatorgemfire_1_4_17106/system.log: [info 2019/04/25 22:00:08.762 PDT &lt;vm_3_thr_3_locator_1_4_host1_17106&gt; tid=0x14] findCoordinator chose rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_4_host1_17106:17106:locator)&lt;ec&gt;:41000 out of these possible coordinators: [rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_4_host1_17106:17106:locator)&lt;ec&gt;:41000]locatorgemfire_1_4_17106/system.log: [info 2019/04/25 22:00:08.763 PDT &lt;vm_3_thr_3_locator_1_4_host1_17106&gt; tid=0x14] Discovery state after looking for membership coordinator is SearchState(locatorsContacted=3; findInViewResponses=0; alreadyTried=[]; registrants=[rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_2_host1_17088:17088:locator)&lt;ec&gt;:41001, rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_4_host1_17106:17106:locator)&lt;ec&gt;:41000, rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_3_host1_17100:17100:locator)&lt;ec&gt;:41002]; possibleCoordinator=rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_4_host1_17106:17106:locator)&lt;ec&gt;:41000; viewId=-1; hasContactedAJoinedLocator=false; view=null; responses=[])locatorgemfire_1_4_17106/system.log: [info 2019/04/25 22:00:08.763 PDT &lt;vm_3_thr_3_locator_1_4_host1_17106&gt; tid=0x14] found possible coordinator rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_4_host1_17106:17106:locator)&lt;ec&gt;:41000locatorgemfire_1_4_17106/system.log: [info 2019/04/25 22:00:08.763 PDT &lt;vm_3_thr_3_locator_1_4_host1_17106&gt; tid=0x14] This member is becoming the membership coordinator with address rs-FullRegression26040030a0i3large-hydra-client-53(locatorgemfire_1_4_host1_17106:17106:locator)&lt;ec&gt;:41000</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.membership.GMSJoinLeave.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.membership.gms.GMSUtil.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.distributed.LocatorDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6728" opendate="2019-5-1 00:00:00" fixdate="2019-6-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Generify ClusterManagementService.list</summary>
      <description>By introducing generics we will be able to unsure better type safety for return values.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.cache.configuration.CacheElementJsonMappingTest.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.ClusterManagementResultAssert.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.ClusterManagementResultTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.MemberManagementServiceDunitTest.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.MemberManagementServiceDUnitTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.MemberConfig.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementResult.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationManager.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListRegionManagementDunitTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.resources.ManagementClientTestCreateRegion.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.internal.rest.StandaloneClientManagementAPIAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6730" opendate="2019-5-1 00:00:00" fixdate="2019-6-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>checkSameSenderIdsAvailableOnAllNodes performance could be improved</summary>
      <description>While working on GEODE-6689 I realized that for every write operation on a distributed region we call checkSameSenderIdsAvailableOnAllNodes. This method ends up (after GEODE-6689 is fixed) iterating over all the advisors profiles twice. For each profile it calls set equals.So for larger clusters, this method will need to do more work (one profile for each cluster member).Also if you have gateway senders or async queue ids then you take another performance hit because you end up calling HashSet.equals which iterates over one of the sets checking that each item is in the other.The sad thing is that we do this work on every write operation. We should be only doing it when the profile information (in this case gatewaySenderIds and asyncEventQueueIds) changes. The advisor has this knowledge. Just be aware that the advisor does not store a profile for the local member (you can call DistributionAdvisee.getProfile but be aware that the current implementations of that method create a new profile each time it is called). Also you probably will still need to do the check on each write operation but that check could be as simple as checking a boolean on the advisor that it maintains if its gateways and asyncEventQueues are equal. I think the current lazy check may be because as you add a gateway or asyncEventQueue at runtime you can only do it one member at a time so while it is being added your cluster will have a window of time that it is inconsistent. But as long as you don't do a write operation in that window then you should not get any errors.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.misc.WanValidationsDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.InternalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.DistributedRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.CacheDistributionAdvisor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.BucketRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.AbstractRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionAdvisor.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.internal.cache.wan.asyncqueue.AsyncEventQueueStatsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6734" opendate="2019-5-2 00:00:00" fixdate="2019-9-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create Image pipeline red due to bad Java url in script</summary>
      <description>build-google-geode-builder job is broken. Update the Docker/Packer to fix</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.net.NioPlainEngineTest.java</file>
      <file type="M">ci.pipelines.meta.deploy.meta.sh</file>
      <file type="M">ci.images.google-geode-builder.scripts.setup.sh</file>
      <file type="M">ci.images.google-geode-builder.packer.json</file>
    </fixedFiles>
  </bug>
  <bug id="6741" opendate="2019-5-6 00:00:00" fixdate="2019-5-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Off-heap value may be referenced when draining client registration queue</summary>
      <description>If the value of the event added to a client's temporary registration queue is off-heap, then it is possible that when draining the queue the event has already been released which results in an IllegalStateException.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.ClientRegistrationEventQueueManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.CacheClientNotifierTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.ClientRegistrationEventQueueManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="6743" opendate="2019-5-6 00:00:00" fixdate="2019-5-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove GFJsonObject and GFJsonArray classes</summary>
      <description>Since org.json has now been removed, the usage of these classes can now also be replaced with Jackson code as necessary.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.src.main.java.org.apache.geode.pdx.TestObjectForJSONFormatter.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.pdx.JSONFormatVerifyUtility.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.json.QueryResultFormatterTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.json.GfJsonObjectTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.json.GfJsonArrayTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.DataCommandJsonJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.LocatorStateTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.AbstractLauncherServiceStateTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.util.JsonUtil.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.json.QueryResultFormatter.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.json.GfJsonObject.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.json.GfJsonException.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.json.GfJsonArray.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.DataQueryEngine.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.ServerLauncher.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.LocatorLauncher.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.AbstractLauncher.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.pdx.JSONFormatterJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.cli.json.QueryResultFormatterPdxIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.DataQueryEngineIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.QueryResultFormatterQueryIntegrationTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.pdx.JSONPdxClientServerDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.QueryDataDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DestroyAsyncEventQueueCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6744" opendate="2019-5-7 00:00:00" fixdate="2019-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cluster Management service rest API should be able to list index</summary>
      <description>Using the v2 CMS api, user should be able to list the existing index managed by the current cluster configuration.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.MemberManagementController.java</file>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.MemberManagementServiceDUnitTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.cache.configuration.CacheElementJsonMappingTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.RuntimeRegionConfig.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementResult.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.cache.configuration.RegionConfig.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.RegionConfigTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.CacheConfigTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
    </fixedFiles>
  </bug>
  <bug id="6745" opendate="2019-5-7 00:00:00" fixdate="2019-5-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add status to list members output for REST v2</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.distributedTest.java.org.apache.geode.management.client.MemberManagementServiceDUnitTest.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.PlainLocatorContextLoader.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.LocatorWithSecurityManagerContextLoader.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.LocatorWebContext.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.LocatorCleanupEventListener.java</file>
      <file type="M">geode-web-management.src.commonTest.java.org.apache.geode.management.internal.rest.BaseLocatorContextLoader.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.cache.configuration.CacheElementJsonMappingTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-core-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.GetMemberInformationFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.domain.CacheServerInfo.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.MemberManagementServiceDunitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.domain.MemberInformation.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.MemberManagementServiceRestIntegrationTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.MemberConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.MemberConfigManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="6746" opendate="2019-5-7 00:00:00" fixdate="2019-5-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Hostname validation disabled log should be shown once.</summary>
      <description>On repeated connect method call the "hostname validation disabled due to SSL configuration" log is shown multiple times.Show this log once and also as at info level.[warning 2019/03/15 14:35:20.686 EDT vcld014096 &lt;WAN Locator Discovery Thread4&gt; tid=0x73] Your SSL configuration disables hostname validation. ssl-endpoint-identification-enabled should be set to true when SSL is enabled. Please refer to the Apache GEODE SSL Documentation for SSL Property: ssl‑endpoint‑identification‑enabled </description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreator.java</file>
    </fixedFiles>
  </bug>
  <bug id="6824" opendate="2019-5-31 00:00:00" fixdate="2019-6-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI Failure: BackupIntegrationTest</summary>
      <description>On Windows 2016, this test fails with errors like this:org.apache.geode.internal.cache.backup.BackupIntegrationTest &gt; testIncrementalBackupAndRecover FAILED java.lang.AssertionError: Restore scripts [] expected:&lt;1&gt; but was:&lt;0&gt; at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.failNotEquals(Assert.java:834) at org.junit.Assert.assertEquals(Assert.java:645) at org.apache.geode.internal.cache.backup.BackupIntegrationTest.restoreBackup(BackupIntegrationTest.java:443) at org.apache.geode.internal.cache.backup.BackupIntegrationTest.testIncrementalBackupAndRecover(BackupIntegrationTest.java:235)The logs contain more indicators of what's going wrong:[warn 2019/05/31 10:08:47.953 GMT &lt;BackupServiceThread1&gt; tid=0xf5] Unable to delete temporary directory created during backup, C:\Users\geode\AppData\Local\Temp\backup_15592973278755095066745076642151java.io.IOException: Unable to delete file: C:\Users\geode\AppData\Local\Temp\junit2122524286779777274\disk_Dir2\backupTemp_1559297327875\BACKUPdiskStore_2.crf at org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:2400) at org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:1721) at org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1617) at org.apache.geode.internal.cache.backup.TemporaryBackupFiles.deleteDirectory(TemporaryBackupFiles.java:133) at org.apache.geode.internal.cache.backup.TemporaryBackupFiles.cleanupFiles(TemporaryBackupFiles.java:126) at org.apache.geode.internal.cache.backup.BackupTask.cleanup(BackupTask.java:183) at org.apache.geode.internal.cache.backup.BackupTask.doBackup(BackupTask.java:125) at org.apache.geode.internal.cache.backup.BackupTask.backup(BackupTask.java:82) at org.apache.geode.internal.cache.backup.BackupService.lambda$prepareBackup$0(BackupService.java:62) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Way under the covers, during a backup, we create hard links from the original file to a backup file (if hard linking fails then there is a fallback to simply copy the file).My guess is that the semantics of hard links may have changed between Windows versions (which is why we're suddenly seeing this on Windows 2016).</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.backup.BackupFileCopier.java</file>
    </fixedFiles>
  </bug>
  <bug id="6827" opendate="2019-6-4 00:00:00" fixdate="2019-7-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Benchmark CI: Make Windows jobs not gating for benchmarks</summary>
      <description>In Geode CI, the Benchmark job is blocked by the successful completion of the Windows tests. Since Benchmark runs on linux and the Windows tests still frequently fail with timing issues, it does not make sense for these tests to be gating to Benchmark runs. When they are gating, we do not get frequent runs of the benchmark task.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.shared.jinja.variables.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="6954" opendate="2019-7-10 00:00:00" fixdate="2019-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GatewaySenderMXBean wrongly reports state</summary>
      <description>After creating gateways senders and receivers between two geode clusters replications is established. After restart gateway receiver, list gateways command shows that everything is connected and replication works.But when checking gateway sender state over JMX with GatewaySenderMXBean and checking isConnected() I got false, but should be true as it is connected.Steps to reproduce issue: create two sites (geode-examples/wan) check GW sender stats with jconsole (Connected = true) stop GW receiver on the remote site (Connected = false) put some entry (it will be in the queue waiting for connection) start GW receiver on the remote site (Connected = false) replication is established, the event is processed to the remote site (Connected = false, should be true)</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.management.WANManagementDUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.beans.GatewaySenderMBeanBridge.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.serial.ConcurrentSerialGatewaySenderEventProcessor.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.parallel.ConcurrentParallelGatewaySenderEventProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="7242" opendate="2019-9-24 00:00:00" fixdate="2019-9-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect documentation for AVG and SUM aggregate functions</summary>
      <description>The documentation for OQL Aggregate Functions states that AVG and SUM always return either a Float or Double, but the actual return type can be any of Integer, Long, Float or Double.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.developing.query.select.aggregates.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="7255" opendate="2019-9-30 00:00:00" fixdate="2019-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Need to pick up CVE-2019-16942</summary>
      <description>There is a CVE out on Jackson versions before 2.10.0... We need to upgrade to 2.10.0 to get a fix.see CVE-2019-16942</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7414" opendate="2019-11-7 00:00:00" fixdate="2019-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SSL ClientHello server_name extension</summary>
      <description>We propose to add the server_name extension to the ClientHello message. The extension would hold the distributed system ID of the site where the connection originated from.This will be used to determine internal geode communication, and communication between geode sites.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.reference.topics.gemfire.properties.html.md.erb</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.DistributionConfigJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SSLConfigurationFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.SocketCreator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfigImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.DistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.AbstractDistributionConfig.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.ConfigurationProperties.java</file>
      <file type="M">gradle.japicmp.gradle</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.build.gradle</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.net.SSLParameterExtension.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.admin.SSLConfig.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.net.SSLSocketParameterExtensionIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7417" opendate="2019-11-7 00:00:00" fixdate="2019-11-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI checks do not trigger on geode-book changes</summary>
      <description>due to new branch protection rules, it is now impossible to submit geode-book changes as the required checks will never firewe should remove the exclusion so checks can run</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7421" opendate="2019-11-7 00:00:00" fixdate="2019-3-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can deploy jar by REST API for Management</summary>
      <description>WHAT 1. can deploy jar file by REST API 2. from feature point , it will cover current 'gfsh deploy' 3. if two files have same file name, the later wins 4. can recognize version pattern. "filename-version&amp;#91;-label&amp;#93;.jar" . filename=&amp;#91;a-zA-Z/-&amp;#93;+, not single "", not end with "" version=&amp;#91;0-9/.&amp;#93;*, not single ".", not end with "." label=&amp;#91;a-zA-Z0-9&amp;#93;*such as: &lt;commons-beanutils-1.9.3.jar&gt; is a later version of &lt;commons-beanutils-1.9.2.jar&gt;, will deploy. &lt;commons-beanutils-1.9.3.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.3-RELEASE.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.1.jar&gt; is an earlier version of &lt;commons-beanutils-1.9.2.jar&gt;, will block it. 5. if there is a version part in the file name, we will deploy them without append "#1" part to the file name 6. can accept "group"</description>
      <version>None</version>
      <fixedVersion>1.13.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RebalanceIntegrationTest.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.configuration.DeploymentTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.EntityInfo.java</file>
      <file type="M">geode-junit.src.main.java.org.apache.geode.test.junit.assertions.ClusterManagementListResultAssert.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.web.http.support.HttpRequesterTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.ExportClusterConfigurationCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.web.shell.HttpOperationInvoker.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.web.http.support.HttpRequester.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.functions.DeployFunction.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.realizers.DeploymentRealizerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.mutators.DeploymentManagerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.domain.ConfigurationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.api.LocatorClusterManagementServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceDeployedJarTest.java</file>
      <file type="M">geode-core.src.main.resources.org.apache.geode.internal.sanctioned-geode-management-serializables.txt</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.functions.CacheRealizationFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.DeploymentRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.ConfigurationRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.DeploymentManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.ConfigurationManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.domain.Configuration.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployedJar.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.DeployedJarTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.codeAnalysis.AnalyzeManagementSerializablesJUnitTest.java</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListIndexOnPartitionRegionTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.DeployToMultiGroupDUnitTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.DeploymentManagementDUnitTest.java</file>
      <file type="M">geode-web-management.src.main.webapp.WEB-INF.management-servlet.xml</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.security.RestSecurityConfiguration.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.DeploymentManagementController.java</file>
      <file type="M">geode-management.src.test.java.org.apache.geode.management.internal.ClientClusterManagementServiceTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.internal.ClientClusterManagementService.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.Deployment.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.configuration.AbstractConfiguration.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.RestTemplateClusterManagementServiceTransport.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.CommandType.java</file>
    </fixedFiles>
  </bug>
  <bug id="7424" opendate="2019-11-8 00:00:00" fixdate="2019-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can create index in RESTAPI for Management</summary>
      <description>WHAT 1. endpoint: &amp;#91;POST&amp;#93; `management/v1/indexes` 1. parameter: "name(indexID)", "expression", "region", "type", "group" 1. expected result: create index by specified parameters 1. type: default is "range" 1. region is required 1. name(indexID) is required 1. expression is required 1. "hash" type is not supported. Note1. request body```JSON{ "name": "Foo6name3", "expression": "name3", "regionPath": "/Foo6", “group”：“”， “type”：“” range|key }```</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.IndexValidatorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.IndexValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.IndexConfigManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.api.LocatorClusterManagementService.java</file>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="7425" opendate="2019-11-8 00:00:00" fixdate="2019-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can delete index in RESTAPI for Management</summary>
      <description>WHAT 1. endpoint: &amp;#91;DELETE&amp;#93; `management/v1/indexes` 1. parameter: "name", "region", "group" 1. expected result: delete index as specified parameters</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.controllers.RegionManagementController.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementIntegrationTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.RegionManagementControllerSpringTest.java</file>
      <file type="M">geode-web-management.src.integrationTest.java.org.apache.geode.management.internal.rest.ClusterManagementSecurityRestIntegrationTest.java</file>
      <file type="M">geode-management.src.main.java.org.apache.geode.management.api.ClusterManagementRealizationResult.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.validators.IndexValidatorTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.realizers.IndexRealizerTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.mutators.IndexConfigManagerTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.validators.IndexValidator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.realizers.IndexRealizer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.mutators.IndexConfigManager.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ListIndexManagementDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7428" opendate="2019-11-8 00:00:00" fixdate="2019-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>adjustment: set the log-lvl of REST API of Management from info to debug</summary>
      <description>WHY 1. too many logs in the log file, that is a customer concern 2. broker team call RESTAPI for Management for healthcheck per 10 seconds. it will produce too many logs. WHAT 1. change every log which is produced by RESTAPI for management to be DEBUG.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-web-management.src.main.java.org.apache.geode.management.internal.rest.ManagementLoggingFilter.java</file>
      <file type="M">geode-assembly.src.integrationTest.java.org.apache.geode.management.internal.rest.controllers.ClusterManagementRestLoggingTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.rest.ManagementRequestLoggingDistributedTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7431" opendate="2019-11-9 00:00:00" fixdate="2019-11-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>benchmarks may fail due to infrastructure quota</summary>
      <description>For example, https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/Benchmark/builds/677 failed because there were already 3 benchmarks jobs running at the timeSince the quota is 40 and each benchmark uses 12, we should restrict max_in_flight to 3 for this job</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="7432" opendate="2019-11-11 00:00:00" fixdate="2019-11-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix spelling error in Aggregate Function Tests</summary>
      <description>Some of the aggregate function tests define/use the method parametrizedSetUp, it should be parameterizedSetUp instead.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.SumIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.MinIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.MaxIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.CountIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.cache.query.internal.aggregate.AvgIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7436" opendate="2019-11-11 00:00:00" fixdate="2019-2-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ability: can recognize version part when deploy function jar in GFSH</summary>
      <description>WHAT 1. recognize version part of file name, for the file to be deployed 1. can recognize version pattern. "filename-version&amp;#91;label&amp;#93;.jar" . filename=&amp;#91;a-zA-Z/-&amp;#93;+, not single "", not end with "" version=&amp;#91;0-9/.&amp;#93;*, not single ".", not end with "." label=&amp;#91;-/.&amp;#93;{1}&amp;#91;a-zA-Z0-9&amp;#93;*such as: &lt;commons-beanutils-1.9.3.jar&gt; is a later version of &lt;commons-beanutils-1.9.2.jar&gt;, will deploy. &lt;commons-beanutils-1.9.3.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins &lt;commons-beanutils-1.9.3-RELEASE.jar&gt; is a same version of &lt;commons-beanutils-1.9.3-SNAPSHOT.jar&gt;, the later wins</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.ClusterConfigurationLoaderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceJunitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.JarDeployerFileTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.DeployedJarTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DeploySemanticVersionJarDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.configuration.domain.ConfigurationTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.cli.commands.ExportClusterConfigurationCommandTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.ClassPathLoaderTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceServiceTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.domain.Configuration.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.UndeployFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.ListDeployedFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.functions.DeployFunction.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.cli.commands.DeployCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.JarDeployer.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployJarChildFirstClassLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.DeployedJar.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.ClassPathLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.ClusterConfigurationLoader.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.distributed.internal.InternalConfigurationPersistenceService.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.JarDeployerIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.JarDeployerDeadlockTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.DeployedJarJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.ClassPathLoaderJUnitTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.ClassPathLoaderIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.ClassPathLoaderDeployTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.internal.cache.backup.IncrementalBackupIntegrationTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DeployWithGroupsDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.DeployCommandRedeployDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="7583" opendate="2019-12-16 00:00:00" fixdate="2019-2-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>"status locator --name/--dir" is not working properly when locator ssl is enabled</summary>
      <description>in 1.8: 1. start a locator with ssl enabled2. "status locator --dir" or "status locator --name" would trigger such error messages in the locator log:&amp;#91;info 2019/12/16 08:57:39.958 PST locator &lt;locator request thread 1&gt; tid=0x23&amp;#93; Exception in processing request from 10.118.20.75javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection? at sun.security.ssl.InputRecord.handleUnknownRecord(InputRecord.java:710) at sun.security.ssl.InputRecord.read(InputRecord.java:527) at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:975) at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1367) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1395) at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1379) at org.apache.geode.internal.net.SocketCreator.handshakeIfSocketIsSSL(SocketCreator.java:981) at org.apache.geode.distributed.internal.tcpserver.TcpServer.lambda$processRequest$0(TcpServer.java:346) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)In develop branch: the gfsh output would be a strange ClassCastException. It's definitely broken on develop</description>
      <version>1.8.0,1.9.0,1.10.0,1.11.0</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.MemberStarterRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.LocatorLauncherStartupRule.java</file>
      <file type="M">geode-dunit.src.main.java.org.apache.geode.test.junit.rules.GfshCommandRule.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.distributed.LocatorLauncherStatusTest.java</file>
      <file type="M">geode-assembly.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.StatusLocatorCommandDunitTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.OfflineGfshCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.lifecycle.StatusLocatorCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ConnectCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.configuration.utils.ClusterConfigurationStatusRetriever.java</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.status.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="8055" opendate="2020-4-30 00:00:00" fixdate="2020-5-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>can not create index on sub regions</summary>
      <description>When trying to use "create index" command in gfsh to create index on sub regions, we get the following message:"Sub-regions are unsupported"Pre-1.6, we were able to do that.</description>
      <version>1.7.0,1.8.0,1.9.2,1.10.0,1.11.0,1.12.0</version>
      <fixedVersion>1.12.1,1.13.0,1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.management.internal.configuration.ClusterConfigurationIndexWithFromClauseDUnitTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommand.java</file>
      <file type="M">geode-gfsh.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.CreateIndexCommandDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.cache.configuration.CacheConfigTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.configuration.CacheConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="8076" opendate="2020-5-5 00:00:00" fixdate="2020-5-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>simplify redis concurrency code</summary>
      <description>Currently when doing a redis set operation, for example sadd, the code has to be careful to deal with other threads concurrently changing the same set.It does this in a number of ways but this could be simplified by having a higher level layer of the code ensure that for a given redis "key" operations will done in sequential order.This can be done safely in a distributed cluster because we now route all operations for a given key to the server that is storing the primary copy of data for that key.I spike was done and we found that this form of locking did not hurt performance. Since it allows simpler code that is less likely to have subtle concurrency issues we plan on merging the work done in the spike into the product.</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.test.java.org.apache.geode.redis.internal.RegionProviderJUnitTest.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.RegionProvider.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SScanExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SRemExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SRandMemberExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SPopExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SMoveExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SMembersExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SIsMemberExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SetOpExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SetExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SCardExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.SAddExecutor.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.RedisSet.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.GeodeRedisSetWithFunctions.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.set.DeltaSet.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.internal.executor.CommandFunction.java</file>
      <file type="M">geode-redis.src.main.java.org.apache.geode.redis.GeodeRedisServer.java</file>
      <file type="M">geode-redis.src.integrationTest.resources.org.apache.geode.codeAnalysis.sanctionedDataSerializables.txt</file>
      <file type="M">geode-redis.src.integrationTest.resources.org.apache.geode.codeAnalysis.excludedClasses.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
