<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="GEODE">
  <bug id="8915" opendate="2021-2-3 00:00:00" fixdate="2021-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode pipelines need to be modified to support concourse 6.x</summary>
      <description>In order to upgrade to concourse version 6 we need to change the pipelines. This issues will cover all support branches and develop.</description>
      <version>1.12.1,1.13.2,1.14.0</version>
      <fixedVersion>1.12.1,1.13.2,1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.pipelines.mass-test-run.jinja.template.yml</file>
      <file type="M">ci.pipelines.reaper.jinja.template.yml</file>
      <file type="M">ci.pipelines.pull-request.jinja.template.yml</file>
      <file type="M">ci.pipelines.meta.jinja.template.yml</file>
      <file type="M">ci.pipelines.images.jinja.template.yml</file>
      <file type="M">ci.pipelines.geode-build.jinja.template.yml</file>
      <file type="M">ci.pipelines.examples.jinja.template.yml</file>
    </fixedFiles>
  </bug>
  <bug id="8916" opendate="2021-2-3 00:00:00" fixdate="2021-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The gfsh export stack traces command should include the locators</summary>
      <description>The gfsh export stack traces command should include the locators, but only includes the servers.Here is an excerpt from a slack conversation showing the behavior:Shelley Hughes-Godfrey 6:48 PMI have a question about gfsh export stack-traces ..."list members" shows me servers and locators ...gfsh&gt;list membersMember Count : 3 Name | Id------------------------- | ----------------------------------------------------------------------------gemfire-cluster-server-0 | xx.xx.x.xxx(gemfire-cluster-server-0:1)&lt;v1&gt;:41000gemfire-cluster-locator-0 | xx.xx.x.xxx(gemfire-cluster-locator-0:1:locator)&lt;ec&gt;&lt;v0&gt;:41000 &amp;#91;Coordinator&amp;#93;gemfire-cluster-server-1 | xx.xx.x.xxx(gemfire-cluster-server-1:1)&lt;v2&gt;:41000But, if I don't specify members on the export stack-traces command, I just get the stacks for the servers.gfsh&gt;export stack-tracesstack-trace(s) exported to file: /path/stacktrace_1612316330340On host : ...Specifying a locator returns "No Members found"gfsh&gt;export stack-traces --member=gemfire-cluster-locator-0No Members FoundAlso, it looks like copy-paste was done from export logs =&gt; export stack-traces (for --members and --groups).</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.export.html.md.erb</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.ExportStackTraceCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.ExportStackTraceCommand.java</file>
      <file type="M">geode-gfsh.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.ExportStackTraceCommandDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8917" opendate="2021-2-3 00:00:00" fixdate="2021-2-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Revise docs to match current gfsh export stack-traces behavior</summary>
      <description>Our docs for gfsh export stack-traces do not match the current behavior. Update the docs.If we don't specify members on the export stack-traces command, we only get the traces for the servers.gfsh&gt;export stack-traces stack-trace(s) exported to file: /data/stacktrace_1612316330340 On host : gemfire-cluster-locator-0.gemfire-cluster-locator.gemfire-system.svc.cluster.localgfsh&gt;export stack-tracesstack-trace(s) exported to file: /path/stacktrace_1612316330340On host : ...Specifying a locator returns "No Members found"gfsh&gt;export stack-traces --member=gemfire-cluster-locator-0No Members FoundAlso, it looks like copy-paste was done from export logs =&gt; export stack-traces (for --members and --groups).</description>
      <version>None</version>
      <fixedVersion>1.14.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.export.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="8918" opendate="2021-2-4 00:00:00" fixdate="2021-3-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode replication event forwarding does not honor GW sender state</summary>
      <description>With 3+ geo-red systems Geode replication has the forwarding feature which means that receiving cluster will forward the event it just got to all clusters it is connected to that have not yet received the event.This is possible because the originating cluster is setting metadata in the replication event like this:GatewaySenderEventCallbackArgument [originalCallbackArg=null;originatingSenderId=1;recipientGatewayReceivers= {3, 2}] Site receiving this event thus knows which is the originating site and which sites should have received this event. All others will have this event forwarded to. All this is legacy Geode behavior. However, originating site does not care if GW sender to a destination is stopped or not - only the fact GW sender is created and attached to a region is enough. This means if e.g. GW sender from Site1 to Site 3 is stopped (and has been stopped for a while - so this has nothing to do with timing) at the moment an event hits the replication it is only going to be sent to Site 2 but with the same metadata. Hence Site 2 will not forward to Site 3 (assuming it has a connection to it).</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelGatewaySenderOperationsDUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.AbstractRegionTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.AbstractRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="8923" opendate="2021-2-6 00:00:00" fixdate="2021-2-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bump shiro to recommended version</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.12.1,1.13.2,1.14.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-assembly.src.integrationTest.resources.dependency.classpath.txt</file>
      <file type="M">geode-assembly.src.integrationTest.resources.assembly.content.txt</file>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8924" opendate="2021-2-6 00:00:00" fixdate="2021-3-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add VM restart tests for Redis and Spring sessions</summary>
      <description>Adding tests similar to some of our closed-source tests.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-redis.src.distributedTest.java.org.apache.geode.redis.session.SessionDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="8926" opendate="2021-2-8 00:00:00" fixdate="2021-4-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQ events can be missed while executing with initial results simultaneously with transactions</summary>
      <description>In this case, the event is not in either the initial results or received in the CqListener.A test that shows the behavior is: 2 servers with: a root PR a colocated child PRIn a client, asynchronously: start a transaction that: does N puts into the root PR does 1 put into the child PR commit the transactionIn the client:create N CQs with initial results with: 'select * from /childPR'When the test succeeds, all the CQs either get the 1 event in their initial results or in their CqListener.When the test fails, one or more CQs don't see the event either way.</description>
      <version>None</version>
      <fixedVersion>1.12.2,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.TXStateTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.FilterProfileJUnitTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.PartitionedRegionQueryEvaluatorTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXState.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TXEntryState.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.TxCallbackEventFactoryImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.BaseCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.PartitionedRegionQueryEvaluator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.FilterProfile.java</file>
    </fixedFiles>
  </bug>
  <bug id="8947" opendate="2021-2-14 00:00:00" fixdate="2021-2-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Performance degradations due to GEODE-8930</summary>
      <description>Following the changes introduced by GEODE-8930, performance degradations were seen in situations involving P2P puts with replicated regions.</description>
      <version>1.12.1,1.13.2,1.14.0,1.15.0</version>
      <fixedVersion>1.12.1,1.13.2,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tx.RemoteOperationMessageTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tx.RemoteOperationMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="9064" opendate="2021-3-24 00:00:00" fixdate="2021-4-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Configure serialization filtering for JMX/RMI by default on Java 11</summary>
      <description>The Geode JMX layer should configure the “jmx.remote.rmi.server.serial.filter.pattern” system property on Java 11 to accept only JDK classes identified as open-types for JMX. If the user or another library has already set this system property, then Geode will log a statement and leave it alone.</description>
      <version>1.12.2,1.13.2</version>
      <fixedVersion>1.12.3,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-junit.build.gradle</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.SystemManagementServiceTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.management.internal.JmxRmiOpenTypesSerialFilterTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.SystemManagementService.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgentFactory.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.ManagementAgent.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JmxRmiSerialFilter.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.JmxRmiOpenTypesSerialFilter.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.ServerManagerConfiguresJmxSerialFilterIntegrationTest.java</file>
      <file type="M">geode-core.src.integrationTest.java.org.apache.geode.management.internal.LocatorManagerConfiguresJmxSerialFilterIntegrationTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.ServerManagerConfiguresJmxSerialFilterAcceptanceTest.java</file>
      <file type="M">geode-assembly.src.acceptanceTest.java.org.apache.geode.management.LocatorManagerConfiguresJmxSerialFilterAcceptanceTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="9148" opendate="2021-4-13 00:00:00" fixdate="2021-12-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>expiration may be rescheduled when it is not needed</summary>
      <description>Geode expiration is configured with timeouts whose units are seconds. But the internal implementation uses milliseconds. I noticed recently that for whatever reason, the Timer was firing scheduled events a few milliseconds early. This caused the expiration code to reschedule it for just a few milliseconds and then do all the expiration checking again. It has also been noticed that last-access-time expiration may find a timestamp on another member that is just a few milliseconds away from expiration. Once again this causes a reschedule.It seems like if the millisecond time is within 500 millis of expiring then we could go ahead and expire without rescheduling. </description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.ExpiryTaskTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionTTLExpiryTask.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.RegionIdleExpiryTask.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.ExpiryTask.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.EntryExpiryTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="915" opendate="2016-2-4 00:00:00" fixdate="2016-4-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>invalidate event when entry does not exist or already invalid</summary>
      <description>When a Region invalidate finds that the entry does not exist or is already invalid it does not invoke afterInvalidate on the CacheListener. Some users have requested that afterInvalidate be invoked even in these cases.What was done to for them was a system property named "gemfire.FORCE_INVALIDATE_EVENT" was added. If it was set to "true" then afterInvalidate was invoked even if the entry did not exist or was already invalid. In both these cases the oldValue on the EntryEvent passed to afterInvalidate was set to null.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.test.java.com.gemstone.gemfire.cache30.CacheListenerTestCase.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.LocalRegion.java</file>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.AbstractRegionMap.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.cache.ProxyRegionMap.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.cache.EntryEventImpl.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.cache.AbstractRegionMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="9158" opendate="2021-4-16 00:00:00" fixdate="2021-4-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement CLUSTER NODES / SLOTS / INFO Command</summary>
      <description>Implement the CLUSTER NODES command as compatible with Redis.Implement the CLUSTER SLOTS command as compatible with Redis.Implement the CLUSTER INFO command as compatible with Redis.Consult the RFC for reference:https://cwiki.apache.org/confluence/display/GEODE/Geode+Compatibility+with+Redis+data+sharding+and+cluster+changesAcceptance CriteriaNew DUnit tests are created to assert that the behavior is correct.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-apis-compatible-with-redis.src.test.java.org.apache.geode.redis.internal.SupportedCommandsJUnitTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.resources.org.apache.geode.redis.internal.sanctioned-geode-apis-compatible-with-redis-serializables.txt</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.RedisConstants.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.RedisCommandType.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.netty.NettyRedisServer.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.netty.ExecutionHandlerContext.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.GeodeRedisServer.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.commonTest.java.org.apache.geode.test.dunit.rules.NativeRedisClusterTestRule.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.commonTest.java.org.apache.geode.test.dunit.rules.ClusterNode.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.acceptanceTest.java.org.apache.geode.redis.NativeRedisClusterTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.build.gradle</file>
    </fixedFiles>
  </bug>
  <bug id="9197" opendate="2021-4-26 00:00:00" fixdate="2021-4-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>StressNewTest should not attempt to run against deleted files</summary>
      <description>This run was a revert which deleted a newly added test. However, StressNewTest still detected a change and wanted to run against it: https://concourse.apachegeode-ci.info/builds/29861</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ci.scripts.repeat-new-tests.sh</file>
    </fixedFiles>
  </bug>
  <bug id="9198" opendate="2021-4-27 00:00:00" fixdate="2021-5-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Keystore/truststore file watcher does not follow symbolic links</summary>
      <description>GEODE-9017 introduced a file watching key/trust manager to automatically reload the key and trust store upon change. However, the file watcher was configured to not follow symbolic links. Some environments such as Kubernetes use symbolic links to mount files inside a container file system. In cases like this (where the key and trust store are represented using symbolic links) the file watcher should follow these links and reload the key and trust store when the underlying target file changes.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.net.filewatch.PollingFileWatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="9199" opendate="2021-4-27 00:00:00" fixdate="2021-5-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Restructure String Dunit tests to work with compatible with Redis cluster mode</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.distributedTest.java.org.apache.geode.redis.internal.executor.string.StringsDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="9202" opendate="2021-4-27 00:00:00" fixdate="2021-6-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement PUBSUB CHANNELS Subcommand</summary>
      <description>Implement the CHANNELS subcommand of the PUBSUB command. Acceptance CriteriaThe CHANNELS subcommand is correctly implemented and unit tests are developed to ensure that the command lists the currently active channels. An active channel is a Pub/Sub channel with one or more subscribers (not including clients subscribed to patterns).If no pattern is specified, all the channels are listed, otherwise if pattern is specified only channels matching the specified glob-style pattern are listed.Return valueArray reply: a list of active channels, optionally matching the specified pattern.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.test.java.org.apache.geode.redis.internal.SupportedCommandsJUnitTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.test.java.org.apache.geode.redis.internal.pubsub.SubscriptionsJUnitTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.RedisConstants.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.RedisCommandType.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.Subscriptions.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSub.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.RedisCommandArgumentsTestHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="9203" opendate="2021-4-27 00:00:00" fixdate="2021-6-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement NUMSUB Subcommand</summary>
      <description>Implement the NUMSUB subcommand. Acceptance CriteriaThe NUMSUB subcommand has been implemented along with unit tests to assert that the subcommand correctly returns the number of subscribers (not counting clients subscribed to patterns) for the specified channels.Return valueArray reply: a list of channels and number of subscribers for every channel. The format is channel, count, channel, count, ..., so the list is flat. The order in which the channels are listed is the same as the order of the channels specified in the command call.Note that it is valid to call this command without channels. In this case it will just return an empty list. </description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.Subscriptions.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSub.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.netty.StringBytesGlossary.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.executor.pubsub.PubSubExecutor.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.pubsub.AbstractSubCommandsIntegrationTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.pubsub.AbstractPubSubIntegrationTest.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.acceptanceTest.resources.0001-configure-redis-tests.patch</file>
    </fixedFiles>
  </bug>
  <bug id="9205" opendate="2021-4-28 00:00:00" fixdate="2021-7-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement NUMPAT Subcommand</summary>
      <description>Implement the NUMPAT subcommand. Acceptance CriteriaThe NUMPAT subcommand has been implemented and unit tests have been developed that assert that the command correctly returns the number of subscriptions to patterns (that are performed using the PSUBSCRIBE command). Note that this is not just the count of clients subscribed to patterns but the total number of patterns all the clients are subscribed to.Return valueInteger reply: the number of patterns all the clients are subscribed to.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.Subscriptions.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSubImpl.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.pubsub.PubSub.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.netty.StringBytesGlossary.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.main.java.org.apache.geode.redis.internal.executor.pubsub.PubSubExecutor.java</file>
      <file type="M">geode-apis-compatible-with-redis.src.integrationTest.java.org.apache.geode.redis.internal.executor.pubsub.AbstractSubCommandsIntegrationTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="9216" opendate="2021-4-29 00:00:00" fixdate="2021-4-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>User Guide - "gemfire.enableTcpKeepAlive" should be "gemfire.setTcpKeepAlive"</summary>
      <description>This keep alive parameter was documented as "gemfire.enableTcpKeepAlive". But actually this parameter `gemfire.setTcpKeepAlive`.https://geode.apache.org/docs/guide/113/managing/monitor_tune/socket_tcp_keepalive.htmlThis bug has been in place since Geode 1.0 – Fix should include back-ports to at least some of the recent versions.Citation above may be the only occurrence. Fix should include searching for other occurrences.</description>
      <version>1.13.2</version>
      <fixedVersion>1.12.2,1.13.2,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.monitor.tune.socket.tcp.keepalive.html.md.erb</file>
      <file type="M">geode-docs.managing.logging.setting.up.logging.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="9227" opendate="2021-4-30 00:00:00" fixdate="2021-5-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI Failure: distributed tests running longer now after the package changes</summary>
      <description>Test artifacts can be found here: https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/DistributedTestOpenJDK8/builds/181.3</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-lucene.src.test.java.org.apache.geode.cache.lucene.internal.cli.LuceneIndexCommandsJUnitTest.java</file>
      <file type="M">geode-lucene.src.main.resources.META-INF.services.org.springframework.shell.core.CommandMarker</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.cli.LuceneSearchIndexCommand.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.cli.LuceneListIndexCommand.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.cli.LuceneDestroyIndexCommand.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.cli.LuceneDescribeIndexCommand.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.cli.LuceneCreateIndexCommand.java</file>
      <file type="M">geode-lucene.src.main.java.org.apache.geode.cache.lucene.internal.cli.LuceneCommandBase.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.CommandManager.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.util.ClasspathScanLoadHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="9295" opendate="2021-5-20 00:00:00" fixdate="2021-5-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>entry idle expiration threads may hang</summary>
      <description>GEODE-7921 in 1.13 introduced this issue. When processing a message used by entry idle expiration to find out when an entry was last accessed on any member of the cluster it now checks for a null cache, region, and entry. If any of them are null the message simply returns. The problem is that the expiration thread that sent this message waits forever for a reply. So unless the member that found a null leaves the cluster, the expiration thread will be hung waiting for a reply that will never be sent.The fix for this is easy. We just need to send a reply of zero when we find a null.</description>
      <version>1.13.0,1.13.1,1.13.2,1.13.3,1.14.0,1.15.0</version>
      <fixedVersion>1.12.4,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.LatestLastAccessTimeMessageTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LatestLastAccessTimeMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="9315" opendate="2021-5-26 00:00:00" fixdate="2021-5-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bump spring-security to recommended version</summary>
      <description>new 5.3.9 is available.  Only Geode 1.13 uses this minor, so this change is not applicable to any other Geode branches.</description>
      <version>1.13.2</version>
      <fixedVersion>1.13.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="9316" opendate="2021-5-26 00:00:00" fixdate="2021-6-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>user guide typo repairs</summary>
      <description>Some small fixes grouped together for convenience. https://geode.apache.org/docs/guide/113/managing/monitor_tune/system_member_performance_distributed_system_member.htmlAdd a space in bullet-list item beginning "statistic-sampling-enabled." https://geode.apache.org/docs/guide/113/managing/management/management_and_monitoring_features.htmlSecond bullet item, change "programs no longer require access" to "programs do not require access".</description>
      <version>None</version>
      <fixedVersion>1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-docs.managing.monitor.tune.system.member.performance.distributed.system.member.html.md.erb</file>
      <file type="M">geode-docs.managing.management.management.and.monitoring.features.html.md.erb</file>
    </fixedFiles>
  </bug>
  <bug id="9339" opendate="2021-6-2 00:00:00" fixdate="2021-6-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bump json-smart to recommended version</summary>
      <description>json-smart 2.3 should be updated to 2.3.1(fyi json-smart is used by json-path, not directly by Geode)</description>
      <version>1.12.2,1.13.2,1.14.0,1.15.0</version>
      <fixedVersion>1.12.3,1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">buildSrc.src.main.groovy.org.apache.geode.gradle.plugins.DependencyConstraints.groovy</file>
      <file type="M">boms.geode-all-bom.src.test.resources.expected-pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="934" opendate="2016-2-8 00:00:00" fixdate="2016-3-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CI failure: DurableClientSimpleDUnitTest.testReadyForEventsNotCalledImplicitlyWithCacheXML</summary>
      <description>Error Messagecom.gemstone.gemfire.test.dunit.RMIException: While invoking com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest$66.run in VM 2 running on Host japan.gemstone.com with 4 VMsStacktracecom.gemstone.gemfire.test.dunit.RMIException: While invoking com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest$66.run in VM 2 running on Host japan.gemstone.com with 4 VMs at com.gemstone.gemfire.test.dunit.VM.invoke(VM.java:370) at com.gemstone.gemfire.test.dunit.VM.invoke(VM.java:313) at com.gemstone.gemfire.test.dunit.VM.invoke(VM.java:267) at com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest.testReadyForEventsNotCalledImplicitlyWithCacheXML(DurableClientSimpleDUnitTest.java:1322) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at junit.framework.TestCase.runTest(TestCase.java:176) at junit.framework.TestCase.runBare(TestCase.java:141) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:252) at junit.framework.TestSuite.run(TestSuite.java:247) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64) at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360) at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54) at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745)Caused by: junit.framework.AssertionFailedError: expected:&lt;10&gt; but was:&lt;20&gt; at junit.framework.Assert.fail(Assert.java:57) at junit.framework.Assert.failNotEquals(Assert.java:329) at junit.framework.Assert.assertEquals(Assert.java:78) at junit.framework.Assert.assertEquals(Assert.java:234) at junit.framework.Assert.assertEquals(Assert.java:241) at junit.framework.TestCase.assertEquals(TestCase.java:409) at com.gemstone.gemfire.internal.cache.tier.sockets.DurableClientSimpleDUnitTest$66.run2(DurableClientSimpleDUnitTest.java:1334) at com.gemstone.gemfire.cache30.CacheSerializableRunnable.run(CacheSerializableRunnable.java:57) at sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at hydra.MethExecutor.executeObject(MethExecutor.java:267) at com.gemstone.gemfire.test.dunit.standalone.RemoteDUnitVM.executeMethodOnObject(RemoteDUnitVM.java:84) at sun.reflect.GeneratedMethodAccessor162.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:323) at sun.rmi.transport.Transport$1.run(Transport.java:200) at sun.rmi.transport.Transport$1.run(Transport.java:197) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:196) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$95(TCPTransport.java:683) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) ... 3 more</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating.M2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gemfire-core.src.main.java.com.gemstone.gemfire.internal.cache.tier.sockets.CacheClientProxy.java</file>
      <file type="M">geode-core.src.main.java.com.gemstone.gemfire.internal.cache.tier.sockets.CacheClientProxy.java</file>
    </fixedFiles>
  </bug>
  <bug id="9346" opendate="2021-6-3 00:00:00" fixdate="2021-7-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>When client received incorrect byte array of PdxType due to broken socket, it should be retried</summary>
      <description>Client's query for PdxType will get a byte array in response message. The byte array is the same at the server, but different query from different client might receive wrong byte array and end up with PdxSerializationException in scalability test with server HA. This could caused by socket broken and bytes are not flushed. We expected such broken socket scenario and prepared some retry lock. However, our retry logic did not consider above scenario, i.e. the message header is correct, but the embedded byte array for PdxType is wrong. The solution is to retry in this case.</description>
      <version>1.12.2,1.13.2,1.14.0,1.15.0</version>
      <fixedVersion>1.12.4,1.13.4,1.14.0,1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-core.src.main.java.org.apache.geode.cache.client.internal.QueryOp.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.PDXQueryTestBase.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.PdxQueryDUnitTest.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache.query.dunit.PdxLocalQueryDUnitTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="9369" opendate="2021-6-10 00:00:00" fixdate="2021-11-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Command to copy region entries from a WAN site to another.</summary>
      <description>As described in RFC: https://cwiki.apache.org/confluence/display/GEODE/Geode+Command+to+replicate+region+data+from+one+site+to+another+connected+via+WANit is proposed to implement a command that copies the entries of a region in a WAN site to the same region in another WAN site by using WAN replication.  </description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.management.internal.cli.commands.WanCopyRegionCommandDUnitTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.functions.WanCopyRegionFunctionTest.java</file>
      <file type="M">geode-gfsh.src.test.java.org.apache.geode.management.internal.cli.commands.WanCopyRegionCommandTest.java</file>
      <file type="M">geode-gfsh.src.main.resources.org.apache.geode.gfsh.internal.management.sanctioned-geode-gfsh-serializables.txt</file>
      <file type="M">geode-gfsh.src.main.resources.META-INF.services.org.springframework.shell.core.CommandMarker</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.functions.WanCopyRegionFunction.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.WanCopyRegionCommand.java</file>
      <file type="M">geode-gfsh.src.main.java.org.apache.geode.management.internal.cli.commands.CommandAvailabilityIndicator.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.management.internal.i18n.CliStrings.java</file>
      <file type="M">geode-wan.src.test.resources.expected-pom.xml</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.management.internal.cli.functions.WanCopyRegionFunctionTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.management.internal.cli.functions.WanCopyRegionFunctionDelegateTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.cache.wan.internal.WanCopyRegionFunctionServiceTest.java</file>
      <file type="M">geode-wan.src.test.java.org.apache.geode.cache.wan.internal.cli.commands.WanCopyRegionCommandTest.java</file>
      <file type="M">geode-wan.src.main.resources.org.apache.geode.cache.wan.internal.sanctioned-geode-wan-serializables.txt</file>
      <file type="M">geode-wan.src.main.resources.META-INF.services.org.springframework.shell.core.CommandMarker</file>
      <file type="M">geode-wan.src.main.resources.META-INF.services.org.apache.geode.internal.cache.CacheService</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.management.internal.cli.functions.WanCopyRegionFunctionDelegate.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.management.internal.cli.functions.WanCopyRegionFunction.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.cache.wan.internal.WanCopyRegionFunctionServiceAlreadyRunningException.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.cache.wan.internal.WanCopyRegionFunctionService.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.cache.wan.internal.GatewaySenderEventRemoteDispatcher.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.cache.wan.internal.cli.commands.WanCopyRegionCommand.java</file>
      <file type="M">geode-wan.src.main.java.org.apache.geode.cache.wan.internal.client.locator.GatewaySenderBatchOp.java</file>
      <file type="M">geode-wan.src.integrationTest.java.org.apache.geode.cache.wan.internal.cli.commands.WanCommandAutoCompletionIntegrationTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.WANTestBase.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.internal.cache.wan.parallel.ParallelWANPropagationClientServerDUnitTest.java</file>
      <file type="M">geode-wan.src.distributedTest.java.org.apache.geode.cache.wan.internal.cli.commands.WanCopyRegionCommandDUnitTest.java</file>
      <file type="M">geode-wan.build.gradle</file>
      <file type="M">geode-gfsh.src.integrationTest.java.org.apache.geode.management.internal.cli.GfshParserAutoCompletionIntegrationTest.java</file>
      <file type="M">geode-docs.tools.modules.gfsh.quick.ref.commands.by.area.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.gfsh.command.index.html.md.erb</file>
      <file type="M">geode-docs.tools.modules.gfsh.command-pages.wan.copy.region.html.md.erb</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.wan.GatewaySenderEventImplTest.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.tier.sockets.command.Put70Test.java</file>
      <file type="M">geode-core.src.test.java.org.apache.geode.internal.cache.EnumListenerEventJUnitTest.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.GatewaySenderEventImpl.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.GatewaySenderEventDispatcher.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.wan.GatewaySenderEventCallbackDispatcher.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.Put70.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.command.GatewayReceiverCommand.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.tier.sockets.CacheServerStats.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.LocalRegion.java</file>
      <file type="M">geode-core.src.main.java.org.apache.geode.internal.cache.EnumListenerEvent.java</file>
      <file type="M">geode-core.src.distributedTest.java.org.apache.geode.cache30.DistributedAckRegionCCEDUnitTest.java</file>
      <file type="M">geode-book.master.middleman.source.subnavs.geode-subnav.erb</file>
    </fixedFiles>
  </bug>
  <bug id="9371" opendate="2021-6-10 00:00:00" fixdate="2021-6-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Change stress-new-tasks jobs from required to non-required</summary>
      <description>Change stress-new-tasks jobs from required to non-required.</description>
      <version>None</version>
      <fixedVersion>1.13.3,1.14.0,1.15.0</fixedVersion>
      <type>Wish</type>
    </buginformation>
    <fixedFiles>
      <file type="M">.asf.yaml</file>
    </fixedFiles>
  </bug>
</bugrepository>
