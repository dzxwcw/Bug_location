<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="HBASE">
  <bug id="23283" opendate="2019-11-13 00:00:00" fixdate="2019-11-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide clear and consistent logging about the period of enabled chores</summary>
      <description>Similar to HBASE-23038, we should always log info about our enabled chores. Right now wether or not we get some information is up to particular Chore constructors and by and large we don't get any log messages when things can get started, even if the period is something impossibly long (e.g. 3000 days).When we go to schedule the chore here: if (chore.getPeriod() &lt;= 0) { LOG.info("The period is {} seconds, {} is disabled", chore.getPeriod(), chore.getName()); return false; }we should add an else clause that says it's enabled. It looks like we could then just call chore.toString to get the proper details about the chore and its period.</description>
      <version>3.0.0-alpha-1,2.3.0,1.7.0</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0,1.6.0,2.1.8,2.2.3</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.ChoreService.java</file>
    </fixedFiles>
  </bug>
  <bug id="23938" opendate="2020-3-5 00:00:00" fixdate="2020-5-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Replicate slow/large RPC calls to HDFS</summary>
      <description>We should provide capability to replicate complete slow and large RPC logs to HDFS or create new system table in addition to Ring Buffer. This way we don't lose any of slow logs and operator can retrieve all the slow/large logs. Replicating logs to HDFS / creating new system table should be configurable.</description>
      <version>3.0.0-alpha-1,2.3.0,1.7.0</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.slowlog.TestSlowLogRecorder.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.slowlog.SlowLogRecorder.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.slowlog.RpcLogDetails.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.slowlog.LogEventHandler.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.ipc.RpcServer.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.HConstants.java</file>
    </fixedFiles>
  </bug>
  <bug id="24194" opendate="2020-4-15 00:00:00" fixdate="2020-4-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refactor BufferedEncodedSeeker anonymous classes to named inner class</summary>
      <description>BufferedEncodedSeeker has multiple anonymous inner sub-classes with huge code. Better to refactor them to named inner classes.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0,1.7.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.io.encoding.PrefixKeyDeltaEncoder.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.io.encoding.FastDiffDeltaEncoder.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.io.encoding.DiffKeyDeltaEncoder.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.io.encoding.CopyKeyDataBlockEncoder.java</file>
    </fixedFiles>
  </bug>
  <bug id="24198" opendate="2020-4-16 00:00:00" fixdate="2020-4-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Skip hadoop2 check for master branch</summary>
      <description>Now we will run hadoop2 check on jdk8 and hadoop3 check on jdk11, since the support of hadoop2 has been dropped, let's make jdk8 check also on hadoop3.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">dev-support.Jenkinsfile</file>
      <file type="M">dev-support.hbase-personality.sh</file>
    </fixedFiles>
  </bug>
  <bug id="24199" opendate="2020-4-16 00:00:00" fixdate="2020-5-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Procedure related metrics is not consumed in the JMX metric</summary>
      <description>We have ProcedureMetrics and that is being tracked for every procedure that we create for all the ops in the system. But when we check the UI, the UI does not display those information at all. It may be useful to know atleast in the case of ServerCrashProcedure exactly to know how much it has taken for the procedure to complete. Similarly other procedures also can be added to the UI. Currently checked in master code - but think it will apply to other branches also.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0,2.2.5</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.TestMasterMetrics.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.TestClusterRestartFailover.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.TestAssignmentManagerMetrics.java</file>
      <file type="M">hbase-hadoop-compat.src.main.java.org.apache.hadoop.hbase.master.MetricsMasterSourceImpl.java</file>
      <file type="M">hbase-hadoop-compat.src.main.java.org.apache.hadoop.hbase.master.MetricsMasterProcSourceImpl.java</file>
      <file type="M">hbase-hadoop-compat.src.main.java.org.apache.hadoop.hbase.master.MetricsAssignmentManagerSourceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="2448" opendate="2010-4-14 00:00:00" fixdate="2010-4-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Scanner threads are interrupted without acquiring lock properly</summary>
      <description>There are a few places where scanner threads are interrupted with .interrupt() instead of .interruptIfAlive(). This means that if they're in the midst of the checkFileSystem operation, it'll end up catching the interruption there, determine that the filesystem is down, and shut down the whole server. Other nasties can also result.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.hadoop.hbase.util.Sleeper.java</file>
      <file type="M">core.src.main.java.org.apache.hadoop.hbase.master.RegionManager.java</file>
      <file type="M">core.src.main.java.org.apache.hadoop.hbase.master.ProcessRegionOpen.java</file>
      <file type="M">core.src.main.java.org.apache.hadoop.hbase.master.ModifyTableMeta.java</file>
      <file type="M">core.src.main.java.org.apache.hadoop.hbase.master.BaseScanner.java</file>
      <file type="M">core.src.main.java.org.apache.hadoop.hbase.Chore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="24567" opendate="2020-6-15 00:00:00" fixdate="2020-6-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create release should url-encode all characters when building git uri</summary>
      <description>The release tool doesn't url encode all characters provided for ASF_USERNAME, ASF_PASSWORD.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">dev-support.create-release.release-util.sh</file>
    </fixedFiles>
  </bug>
  <bug id="24603" opendate="2020-6-21 00:00:00" fixdate="2020-6-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Zookeeper sync() call is async</summary>
      <description>Here is the method that does a sync() of lagging followers with leader in the quorum. We rely on this to see a consistent snapshot of ZK data from multiple clients. However the problem is that the underlying sync() call is actually asynchronous since we are passing a 'null' call back. See the ZK API doc for details. The end-result is that sync() doesn't guarantee that it has happened by the time it returns. /** * Forces a synchronization of this ZooKeeper client connection. * &lt;p&gt; * Executing this method before running other methods will ensure that the * subsequent operations are up-to-date and consistent as of the time that * the sync is complete. * &lt;p&gt; * This is used for compareAndSwap type operations where we need to read the * data of an existing node and delete or transition that node, utilizing the * previously read version and data. We want to ensure that the version read * is up-to-date from when we begin the operation. */ public void sync(String path) throws KeeperException { this.recoverableZooKeeper.sync(path, null, null); }We rely on this heavily (at least in the older branches that do ZK based region assignment). In branch-1 we saw weird "BadVersionException" exceptions in RITs because of the inconsistent view of the ZK snapshot. It could manifest differently in other branches. Either way, this is something we need to fix.</description>
      <version>3.0.0-alpha-1,2.3.0,1.7.0</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0,1.7.0,2.1.10,2.2.6</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-zookeeper.src.main.java.org.apache.hadoop.hbase.zookeeper.ZKWatcher.java</file>
      <file type="M">hbase-zookeeper.src.main.java.org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.ZKVisibilityLabelWatcher.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.backup.example.HFileArchiveManager.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.util.Threads.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.HConstants.java</file>
    </fixedFiles>
  </bug>
  <bug id="24604" opendate="2020-6-21 00:00:00" fixdate="2020-6-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove the stable-1 notice on our download page</summary>
      <description>We have already removed it from our dist release directory.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.site.xdoc.downloads.xml</file>
    </fixedFiles>
  </bug>
  <bug id="2523" opendate="2010-5-7 00:00:00" fixdate="2010-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add check for licenses before rolling an RC, add to how-to-release doc. and check for inlining a tool that does this for us</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.assembly.bin.xml</file>
      <file type="M">pom.xml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2565" opendate="2010-5-18 00:00:00" fixdate="2010-5-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove contrib module from hbase</summary>
      <description>Stargate has been moved up into core. All that is left in contrib is an old version of replication that is busy being moved into contrib. This issue is about removing the contrib module from hbase altogether. We'll still have the core module. Whether core is removed is still being discussed.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.assembly.bin.xml</file>
      <file type="M">pom.xml</file>
      <file type="M">contrib.pom.xml</file>
      <file type="M">contrib.mdc.replication.src.test.java.org.apache.hadoop.hbase.replication.TestReplication.java</file>
      <file type="M">contrib.mdc.replication.src.test.java.org.apache.hadoop.hbase.regionserver.replication.TestReplicationSink.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.replication.ReplicationZookeeperHelper.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.replication.ReplicationConnectionManager.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.regionserver.wal.replication.ReplicationHLog.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.regionserver.replication.ReplicationSource.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.regionserver.replication.ReplicationSink.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.regionserver.replication.ReplicationRegionServer.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.regionserver.replication.ReplicationRegion.java</file>
      <file type="M">contrib.mdc.replication.src.main.java.org.apache.hadoop.hbase.ipc.ReplicationRegionInterface.java</file>
      <file type="M">contrib.mdc.replication.src.main.javadoc.org.apache.hadoop.hbase.replication.package.html</file>
      <file type="M">contrib.mdc.replication.pom.xml</file>
      <file type="M">contrib.mdc.replication.bin.copy.tables.desc.rb</file>
      <file type="M">contrib.mdc.replication.bin.add.peer.rb</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
