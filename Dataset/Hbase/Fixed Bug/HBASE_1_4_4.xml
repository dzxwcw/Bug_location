<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="HBASE">
  <bug id="20401" opendate="2018-4-12 00:00:00" fixdate="2018-3-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make `MAX_WAIT` and `waitIfNotFinished` in CleanerContext configurable</summary>
      <description>When backporting HBASE-18309 in HBASE-20352, the deleteFiles calls CleanerContext.java#getResult with a waitIfNotFinished timeout to wait for notification (notify) from the fs.delete file thread. there might be two situation need to tune the MAX_WAIT in CleanerContext or waitIfNotFinished when LogClearner call getResult. fs.delete never complete (strange but possible), then we need to wait for a max of 60 seconds. here, 60 seconds might be too long getResult is waiting in the period of 500 milliseconds, but the fs.delete has completed and setFromClear is set but yet notify(). one might want to tune this 500 milliseconds to 200 or less .</description>
      <version>3.0.0-alpha-1,1.5.0,2.0.0-beta-1,1.4.4,2.0.0</version>
      <fixedVersion>3.0.0-alpha-1,1.3.3,1.4.6,2.2.0,2.1.1,2.0.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.configuration.adoc</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.cleaner.TestLogsCleaner.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.cleaner.TestHFileCleaner.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.cleaner.LogCleaner.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.cleaner.HFileCleaner.java</file>
    </fixedFiles>
  </bug>
  <bug id="20406" opendate="2018-4-13 00:00:00" fixdate="2018-4-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>HBase Thrift HTTP - Shouldn&amp;#39;t handle TRACE/OPTIONS methods</summary>
      <description>HBASE-10473 introduced a utility HttpServerUtil.constrainHttpMethods to prevent Jetty from answering on TRACE and OPTIONS methods. This should be added to Thrift in HTTP mode as well.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.1.0,1.5.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-thrift.src.test.java.org.apache.hadoop.hbase.thrift.TestThriftHttpServer.java</file>
      <file type="M">hbase-thrift.src.main.java.org.apache.hadoop.hbase.thrift.ThriftServerRunner.java</file>
      <file type="M">hbase-http.src.test.java.org.apache.hadoop.hbase.http.TestHttpServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="20547" opendate="2018-5-9 00:00:00" fixdate="2018-5-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Restore from backup will fail if done from a different file system</summary>
      <description>In recent tests, restore from s3a:// to local hdfs:// fails with "not supported file system". This is due to a bug in a code that creates instance of a file system being restored from.Credits: tedyu@apache.org, Gaurav Sharma</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-backup.src.main.java.org.apache.hadoop.hbase.backup.util.BackupUtils.java</file>
      <file type="M">hbase-backup.src.main.java.org.apache.hadoop.hbase.backup.impl.IncrementalTableBackupClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="20548" opendate="2018-5-9 00:00:00" fixdate="2018-5-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Master fails to startup on large clusters, refreshing block distribution</summary>
      <description>On our large clusters with, master has failed to startup within specified time and aborted itself since it was initializing HDFS block distribution. Enable table also takes time for larger tables for the same reason. My proposal is to refresh HDFS block distribution at the end of master initialization and not at retainAssignment()'s createCluster(). This would address HBASE-16570's intention, but avoid the problems we ran into.cc aoxiang tedyu</description>
      <version>1.4.4</version>
      <fixedVersion>3.0.0-alpha-1,2.1.0,1.3.3,2.0.1,1.4.5</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.LoadBalancer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer.java</file>
      <file type="M">hbase-rsgroup.src.main.java.org.apache.hadoop.hbase.rsgroup.RSGroupBasedLoadBalancer.java</file>
    </fixedFiles>
  </bug>
  <bug id="20550" opendate="2018-5-9 00:00:00" fixdate="2018-8-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document about MasterProcWAL</summary>
      <description>Lack of contents about MasterProcWAL even it has been present since 1.x release. I just did a small write-up and appreciate if experts could review it.One thing I'm missing is: how to troubleshoot a case once the WAL file gets increased in size abruptly.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.architecture.adoc</file>
    </fixedFiles>
  </bug>
  <bug id="20566" opendate="2018-5-10 00:00:00" fixdate="2018-5-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Creating a system table after enabling rsgroup feature puts region into RIT</summary>
      <description>Steps to reproduce Enable rsgroup feature Enable quota feature which created hbase::quota table quota table region will be marked as RIT since the rsgroup for the table is not known2018-05-10 14:33:32,392 INFO [ProcedureExecutorThread-0] zookeeper.ZKTableStateManager: Moving table hbase:quota state from null to ENABLING2018-05-10 14:33:32,397 WARN [ProcedureExecutorThread-0] rsgroup.RSGroupBasedLoadBalancer: Group for table hbase:quota is null2018-05-10 14:33:32,398 WARN [ProcedureExecutorThread-0] master.RegionStates: Failed to open/close 89490cd5e00ea8948af413a1df65091a on null, set to FAILED_OPEN2018-05-10 14:33:32,398 INFO [ProcedureExecutorThread-0] master.RegionStates: Transition {89490cd5e00ea8948af413a1df65091a state=OFFLINE, ts=1525977212397, server=null} to {89490cd5e00ea8948af413a1df65091a state=FAILED_OPEN, ts=1525977212398, server=null}2018-05-10 14:33:32,398 INFO [ProcedureExecutorThread-0] zookeeper.ZKTableStateManager: Moving table hbase:quota state from ENABLING to ENABLED Reason for this issue:  system table creation doesn't move the table to the appropriate rs group to which system namespace is assigned to. Need to execute logic similar to what is done in the RSGroupAdminEndpoint for post table creation for user table creation.Work Around Assigning the system table to default rsgroup (or to the rsgroup to which the system namespace has been assigned). Manually assigning the region in RIT from the system table  </description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-rsgroup.src.test.java.org.apache.hadoop.hbase.rsgroup.TestRSGroups.java</file>
      <file type="M">hbase-rsgroup.src.main.java.org.apache.hadoop.hbase.rsgroup.RSGroupInfoManagerImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="20567" opendate="2018-5-11 00:00:00" fixdate="2018-5-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pass both old and new descriptors to pre/post hooks of modify operations for table and namespace</summary>
      <description>In postModify* hooks like postModifyX(..., Descriptor newDesc), there's no way of getting the old descriptor which was there before modification happened.Having both old and new descriptors will make the hooks more useful.We felt the need when we wanted to audit certain events but there was no way of deducing them by just seeing 'after-state' of modification.To keep the method signatures consistent, i have modified both pre and post hooks with new arguments which are well named and commented.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.1.0,2.0.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.procedure.ModifyTableProcedure.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.MasterCoprocessorHost.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.coprocessor.MasterObserver.java</file>
    </fixedFiles>
  </bug>
  <bug id="20648" opendate="2018-5-25 00:00:00" fixdate="2018-8-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>HBASE-19364 "Truncate_preserve fails with table when replica region &gt; 1" for master branch</summary>
      <description>It seems like the issue mentioned in HBASE-19364 exists in master branch.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.1.0,2.0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.procedure.TestTruncateTableProcedure.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.procedure.TruncateTableProcedure.java</file>
    </fixedFiles>
  </bug>
  <bug id="20649" opendate="2018-5-25 00:00:00" fixdate="2018-8-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Validate HFiles do not have PREFIX_TREE DataBlockEncoding</summary>
      <description>HBASE-20592 adds a tool to check column families on the cluster do not have PREFIX_TREE encoding.Since it is possible that DataBlockEncoding was already changed but HFiles are not rewritten yet we would need a tool that can verify the content of hfiles in the cluster.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.2.0,2.1.1,2.0.2</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.ops.mgt.adoc</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.tool.PreUpgradeValidator.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.tool.DataBlockEncodingValidator.java</file>
    </fixedFiles>
  </bug>
  <bug id="20785" opendate="2018-6-25 00:00:00" fixdate="2018-6-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE getting metrics in PE testing scans</summary>
      <description>Comparing scans using PE. In branch-1 at least, I was getting an NPE when we tried to use a null metrics instance. Seems transient around startup. One-liner patch coming.</description>
      <version>1.4.4</version>
      <fixedVersion>3.0.0-alpha-1,2.1.0,1.3.3,1.4.6,2.0.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-mapreduce.src.test.java.org.apache.hadoop.hbase.PerformanceEvaluation.java</file>
    </fixedFiles>
  </bug>
  <bug id="21465" opendate="2018-11-11 00:00:00" fixdate="2018-11-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Retry on reportRegionStateTransition can lead to unexpected errors</summary>
      <description>It is possible that the reportRegionStateTransition method is succeeded at master side, but before returning the the region server, the rpc connection is broken, or the master restarts. So next when the region server try again,we will find that the state for the region and the TRSP is not correct, and can lead to a RS abort or something even worse.We should be able to determine whether a reportRegionStateTransition call is just a retry and has already been succeeded, and just ignore it.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.2.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.assignment.TestAssignmentManagerBase.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.assignment.TransitRegionStateProcedure.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.assignment.TestReportRegionStateTransitionRetry.java</file>
    </fixedFiles>
  </bug>
  <bug id="23829" opendate="2020-2-11 00:00:00" fixdate="2020-4-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Get `-PrunSmallTests` passing on JDK11</summary>
      <description>Start with the small tests, shaking out issues identified by the harness. So far it seems like -Dhadoop.profile=3.0 and -Dhadoop-three.version=3.3.0-SNAPSHOT maybe be required.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">hbase-shaded.hbase-shaded-with-hadoop-check-invariants.pom.xml</file>
      <file type="M">hbase-shaded.hbase-shaded-check-invariants.pom.xml</file>
      <file type="M">hbase-http.src.test.java.org.apache.hadoop.hbase.http.log.TestLogLevel.java</file>
      <file type="M">hbase-hadoop2-compat.pom.xml</file>
      <file type="M">hbase-common.src.test.java.org.apache.hadoop.hbase.util.TestFutureUtils.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
