<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="HBASE">
  <bug id="11692" opendate="2014-8-6 00:00:00" fixdate="2014-10-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document how and why to do a manual region split</summary>
      <description>---------- Forwarded message ----------From: Liu, Ming (HPIT-GADSC) &lt;ming.liu2@hp.com&gt;Date: Tue, Aug 5, 2014 at 11:28 PMSubject: Why hbase need manual split?To: "user@hbase.apache.org" &lt;user@hbase.apache.org&gt;Hi, all,As I understand, HBase will automatically split a region when the region is too big.So in what scenario, user needs to do a manual split? Could someone kindly give me some examples that user need to do the region split explicitly via HBase Shell or Java API?Thanks very much.Regards,Ming</description>
      <version>None</version>
      <fixedVersion>0.99.1</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.performance.xml</file>
      <file type="M">src.main.docbkx.ops.mgt.xml</file>
      <file type="M">src.main.docbkx.configuration.xml</file>
      <file type="M">src.main.docbkx.book.xml</file>
    </fixedFiles>
  </bug>
  <bug id="11949" opendate="2014-9-11 00:00:00" fixdate="2014-9-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Setting hfile.block.cache.size=0 doesn&amp;#39;t actually disable blockcache</summary>
      <description>stack noticed this one over on HBASE-11845. The provided patched worked as intended on 0.98, but not on branch-1 or master.Marking as minor because we highly encourage users not to do this anyway (it's just a convenience for tools).</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.CacheConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="1195" opendate="2009-2-11 00:00:00" fixdate="2009-4-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>If HBase directory exists but version file is inexistent, still proceed with bootstrapping</summary>
      <description>On the dev list I suggested we change the way we manage the empty HBase directory case. Stack answered:Yes. In fact, its probably safe-to-do now we've left far behind thepre-history versions of hbase where there was no hbase.version file in thehbase.rootdir. If absent, lets proceed and just write it rather than treatit as a non-migrated instance</description>
      <version>None</version>
      <fixedVersion>0.20.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.util.FSUtils.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11951" opendate="2014-9-12 00:00:00" fixdate="2014-9-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Create script to update and publish the website, update docs accordingly</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.developer.xml</file>
    </fixedFiles>
  </bug>
  <bug id="12091" opendate="2014-9-25 00:00:00" fixdate="2014-11-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Optionally ignore edits for dropped tables for replication.</summary>
      <description>We just ran into a scenario where we dropped a table from both the source and the sink, but the source still has outstanding edits that now it could not get rid of. Now all replication is backed up behind these unreplicatable edits.We should have an option to ignore edits for tables dropped at the source.</description>
      <version>None</version>
      <fixedVersion>1.4.0,2.0.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.replication.ReplicationEndpoint.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.replication.regionserver.ReplicationSourceManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.replication.regionserver.ReplicationSink.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.replication.regionserver.HBaseInterClusterReplicationEndpoint.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.protobuf.ReplicationProtbufUtil.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.HConstants.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.protobuf.ProtobufUtil.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.client.RetriesExhaustedWithDetailsException.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
