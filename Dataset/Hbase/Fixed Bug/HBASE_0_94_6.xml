<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="HBASE">
  <bug id="1018" opendate="2008-11-22 00:00:00" fixdate="2008-11-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Regionservers should report detailed health to master; master should flag troubled regionservers in UI</summary>
      <description>Regionservers should report detailed health to master. The master should flag troubled regionservers in the UI.The concern at the moment is primarily heap. Regionservers should report used, committed, and max heap metrics in the periodic report. The master should flag in the regionserver list on /master.jsp those regionservers where available heap is below a configurable threshold.</description>
      <version>None</version>
      <fixedVersion>0.19.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.TestToString.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ipc.HBaseRPCProtocolVersion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HServerLoad.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10871" opendate="2014-3-31 00:00:00" fixdate="2014-6-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Indefinite OPEN/CLOSE wait on busy RegionServers</summary>
      <description>We observed a case where, when a specific RS got bombarded by a large amount of regular requests, spiking and filling up its RPC queue, the balancer's invoked unassigns and assigns for regions that dealt with this server entered into an indefinite retry loop.The regions specifically began waiting in PENDING_CLOSE/PENDING_OPEN states indefinitely cause of the HBase Client RPC from the ServerManager at the master was running into SocketTimeouts. This caused a region unavailability in the server for the affected regions. The timeout monitor retry default of 30m in 0.94's AM compounded the waiting gap further a bit more (this is now 10m in 0.95+'s new AM, and has further retries before we get there, which is good).Wonder if there's a way to improve this situation generally. PENDING_OPENs may be easy to handle - we can switch them out and move them elsewhere. PENDING_CLOSEs may be a bit more tricky, but there must perhaps at least be a way to "give up" permanently on a movement plan, and letting things be for a while hoping for the RS to recover itself on its own (such that clients also have a chance of getting things to work in the meantime)?</description>
      <version>0.94.6</version>
      <fixedVersion>0.99.0,0.94.21,0.98.4</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="10873" opendate="2014-3-31 00:00:00" fixdate="2014-4-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Control number of regions assigned to backup masters</summary>
      <description>By default, a backup master is treated just like another regionserver. So it can host as many regions as other regionserver does. When the backup master becomes the active one, region balancer needs to move those user regions on this master to other region servers. To minimize the impact, it's better not to assign too many regions on backup masters. It may not be good to leave the backup masters idle and not host any region either.We should make this adjustable so that users can control how many regions to assign to each backup master.</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.balancer.TestStochasticLoadBalancer.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.balancer.TestDefaultLoadBalancer.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.balancer.TestBaseLoadBalancer.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.balancer.BalancerTestBase.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.balancer.SimpleLoadBalancer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.balancer.FavoredNodeLoadBalancer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.balancer.ClusterLoadState.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer.java</file>
      <file type="M">hbase-common.src.main.resources.hbase-default.xml</file>
    </fixedFiles>
  </bug>
  <bug id="4210" opendate="2011-8-17 00:00:00" fixdate="2011-2-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow coprocessor to interact with batches per region sent from a client</summary>
      <description>Currently the coprocessor write hooks - {pre|post}{Put|Delete} - are strictly one row|cell operations.It might be a good idea to allow a coprocessor to deal with batches of puts and deletes as they arrive from the client.</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.98.0,0.94.6,0.95.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestMiniBatchOperationInProgress.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.MiniBatchOperationInProgress.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.coprocessor.TestRegionObserverInterface.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.coprocessor.RegionObserver.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.coprocessor.BaseRegionObserver.java</file>
    </fixedFiles>
  </bug>
  <bug id="6134" opendate="2012-5-30 00:00:00" fixdate="2012-6-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improvement for split-worker to speed up distributed log splitting</summary>
      <description>First，we do the test between local-master-splitting and distributed-log-splittingEnvironment：34 hlog files, 5 regionservers,(after kill one, only 4 rs do ths splitting work), 400 regions in one hlog filelocal-master-split:60s+distributed-log-splitting:165s+In fact, in our production environment, distributed-log-splitting also took 60s with 30 regionservers for 34 hlog files (regionserver may be in high load)We found split-worker split one log file took about 20s(30ms~50ms per writer.close(); 10ms per create writers )I think we could do the improvement for this:Parallelizing the create and close writers in threadsIn the patch, change the logic for distributed-log-splitting same as the local-master-splitting and parallelizing the close in threads.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.TestDistributedLogSplitting.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.wal.HLogSplitter.java</file>
    </fixedFiles>
  </bug>
  <bug id="6135" opendate="2012-5-30 00:00:00" fixdate="2012-6-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Style the Web UI to use Twitter&amp;#39;s Bootstrap.</summary>
      <description>Our web ui has lagged a little bit behind. While it's not a huge deal, it is one of the first things that new people see. As such styling it a little bit better would put a good foot forward.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.jamon.org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.jamon</file>
      <file type="M">hbase-server.src.main.resources.hbase-webapps.master.tablesDetailed.jsp</file>
      <file type="M">hbase-server.src.main.resources.hbase-webapps.master.table.jsp</file>
      <file type="M">hbase-server.src.main.jamon.org.apache.hadoop.hbase.tmpl.regionserver.RSStatusTmpl.jamon</file>
      <file type="M">hbase-server.src.main.jamon.org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.jamon</file>
      <file type="M">hbase-server.src.main.jamon.org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl.jamon</file>
      <file type="M">hbase-server.src.main.jamon.org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl.jamon</file>
    </fixedFiles>
  </bug>
  <bug id="6583" opendate="2012-8-14 00:00:00" fixdate="2012-10-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enhance Hbase load test tool to automatically create column families if not present</summary>
      <description>The load test tool currently disables the table and applies any changes to the cf descriptor if any, but does not create the cf if not present.</description>
      <version>None</version>
      <fixedVersion>0.94.3,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.util.LoadTestTool.java</file>
    </fixedFiles>
  </bug>
  <bug id="6643" opendate="2012-8-23 00:00:00" fixdate="2012-8-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Accept encoded region name in compacting/spliting region from shell</summary>
      <description>Sometimes, the region name has binary characters. When compacting/splitting it from shell, the region name is not recognized. If we can support encoded region name, it will make things easier.</description>
      <version>None</version>
      <fixedVersion>0.94.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.client.TestAdmin.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.client.HBaseAdmin.java</file>
    </fixedFiles>
  </bug>
  <bug id="6945" opendate="2012-10-4 00:00:00" fixdate="2012-4-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Compilation errors when using non-Sun JDKs to build HBase-0.94</summary>
      <description>When using IBM Java 7 to build HBase-0.94.1, the following comilation error is seen. &amp;#91;INFO&amp;#93; -------------------------------------------------------------&amp;#91;ERROR&amp;#93; COMPILATION ERROR : &amp;#91;INFO&amp;#93; -------------------------------------------------------------&amp;#91;ERROR&amp;#93; /home/hadoop/hbase-0.94/src/test/java/org/apache/hadoop/hbase/ResourceChecker.java:&amp;#91;23,25&amp;#93; error: package com.sun.management does not exist&amp;#91;ERROR&amp;#93; /home/hadoop/hbase-0.94/src/test/java/org/apache/hadoop/hbase/ResourceChecker.java:&amp;#91;46,25&amp;#93; error: cannot find symbol&amp;#91;ERROR&amp;#93; symbol: class UnixOperatingSystemMXBean location: class ResourceAnalyzer/home/hadoop/hbase-0.94/src/test/java/org/apache/hadoop/hbase/ResourceChecker.java:&amp;#91;75,29&amp;#93; error: cannot find symbol&amp;#91;ERROR&amp;#93; symbol: class UnixOperatingSystemMXBean location: class ResourceAnalyzer/home/hadoop/hbase-0.94/src/test/java/org/apache/hadoop/hbase/ResourceChecker.java:&amp;#91;76,23&amp;#93; error: cannot find symbol&amp;#91;INFO&amp;#93; 4 errors &amp;#91;INFO&amp;#93; -------------------------------------------------------------&amp;#91;INFO&amp;#93; ------------------------------------------------------------------------&amp;#91;INFO&amp;#93; BUILD FAILURE&amp;#91;INFO&amp;#93; ------------------------------------------------------------------------ I have a patch available which should work for all JDKs including Sun. I am in the process of testing this patch. Preliminary tests indicate the build is working fine with this patch. I will post this patch when I am done testing.</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.98.0,0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-common.src.test.java.org.apache.hadoop.hbase.ResourceCheckerJUnitListener.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.util.OSMXBean.java</file>
    </fixedFiles>
  </bug>
  <bug id="7151" opendate="2012-11-12 00:00:00" fixdate="2012-11-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Better log message for Per-CF compactions</summary>
      <description>A coworker pointed out that in HBASE-4913 it would be nice to include the column family in the log message for a per-CF compaction.</description>
      <version>None</version>
      <fixedVersion>0.94.3,0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="7507" opendate="2013-1-7 00:00:00" fixdate="2013-2-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make memstore flush be able to retry after exception</summary>
      <description>We will abort regionserver if memstore flush throws exception.I thinks we could do retry to make regionserver more stable because file system may be not ok in a transient time. e.g. Switching namenode in the NamenodeHA environmentHRegion#internalFlushcache(){...try {...}catch(Throwable t){DroppedSnapshotException dse = new DroppedSnapshotException("region: " + Bytes.toStringBinary(getRegionName()));dse.initCause(t);throw dse;}...}MemStoreFlusher#flushRegion(){...region.flushcache();... try {}catch(DroppedSnapshotException ex){server.abort("Replay of HLog required. Forcing server shutdown", ex);}...}</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.HConstants.java</file>
    </fixedFiles>
  </bug>
  <bug id="7669" opendate="2013-1-25 00:00:00" fixdate="2013-1-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ROOT region wouldn&amp;#39;t be handled by PRI-IPC-Handler</summary>
      <description>RPC reuqest about ROOT region should be handled by PRI-IPC-Handler, just the same as META region</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.94.5,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestPriorityRpc.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="7671" opendate="2013-1-25 00:00:00" fixdate="2013-2-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Flushing memstore again after last failure could cause data loss</summary>
      <description>See the following logs first:2013-01-23 18:58:38,801 INFO org.apache.hadoop.hbase.regionserver.Store: Flushed , sequenceid=9746535080, memsize=101.8m, into tmp file hdfs://dw77.kgb.sqa.cm4:9900/hbase-test3/writetest1/8dc14e35b4d7c0e481e0bb30849cff7d/.tmp/bebeeecc56364b6c8126cf1dc6782a252013-01-23 18:58:41,982 WARN org.apache.hadoop.hbase.regionserver.MemStore: Snapshot called again without clearing previous. Doing nothing. Another ongoing flush or did we fail last attempt?2013-01-23 18:58:43,274 INFO org.apache.hadoop.hbase.regionserver.Store: Flushed , sequenceid=9746599334, memsize=101.8m, into tmp file hdfs://dw77.kgb.sqa.cm4:9900/hbase-test3/writetest1/8dc14e35b4d7c0e481e0bb30849cff7d/.tmp/4eede32dc469480bb3d469aaff332313The first time memstore flush is failed when commitFile()(Logged the first edit above), then trigger server abort, but another flush is coming immediately(could caused by move/split,Logged the third edit above) and successful.For the same memstore's snapshot, we get different sequenceid, it causes data loss when replaying log editsSee details from the unit test case in the patch</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.wal.TestWALReplay.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="7712" opendate="2013-1-29 00:00:00" fixdate="2013-1-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pass ScanType into preCompact()</summary>
      <description>See related discussion:http://search-hadoop.com/m/a7BYc2RITZ22/Getting+the+scan+type+at+preCompact&amp;subj=Re+Getting+the+scan+type+at+preCompact</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.security.access.TestAccessController.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.coprocessor.TestRegionObserverInterface.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.coprocessor.TestCoprocessorInterface.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessController.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.Compactor.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.coprocessor.RegionObserver.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.coprocessor.BaseRegionObserver.java</file>
    </fixedFiles>
  </bug>
  <bug id="7723" opendate="2013-1-30 00:00:00" fixdate="2013-3-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove NameNode URI from ZK splitlogs</summary>
      <description>When moving to HDFS HA or removing HA we end up changing the NN namespace. This can cause the HMaster not to start up fully due to trying to split phantom HLogs pointing to the wrong FS - java.lang.IllegalArgumentException: Wrong FS: error messages. The HLogs in question might not even be on HDFS anymore. You have to go in a manually clear out the ZK splitlogs directory to get HBase to properly boot up.</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.98.0,0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.FSUtils.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.SplitLogWorker.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.SplitLogManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="7763" opendate="2013-2-4 00:00:00" fixdate="2013-2-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Compactions not sorting based on size anymore.</summary>
      <description>Currently compaction selection is not sorting based on size. This causes selection to choose larger files to re-write than are needed when bulk loads are involved.</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestStoreFile.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.StoreFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="7768" opendate="2013-2-5 00:00:00" fixdate="2013-2-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>zkcluster in local mode not seeing configurations in hbase-{site|default}.xml</summary>
      <description>in case of local mode we are creating mini zk cluster with default constructor if (LocalHBaseCluster.isLocal(conf)) { final MiniZooKeeperCluster zooKeeperCluster = new MiniZooKeeperCluster(); public MiniZooKeeperCluster() { this(new Configuration()); }which is not reading any configurations in hbase-site|default.xmlI think we can pass configuration object to MiniZooKeeperCluster</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.PerformanceEvaluation.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.HMasterCommandLine.java</file>
    </fixedFiles>
  </bug>
  <bug id="7829" opendate="2013-2-12 00:00:00" fixdate="2013-2-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>zookeeper kerberos conf keytab and principal parameters interchanged</summary>
      <description></description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.zookeeper.ZKUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="7833" opendate="2013-2-13 00:00:00" fixdate="2013-2-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>0.94 does not compile with Hadoop-0.20.205 and 0.22.0</summary>
      <description>0.94 is supposed to work with 0.20.205 and 0.22 if I am not wrong. We should document this.</description>
      <version>None</version>
      <fixedVersion>0.94.6</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.docbkx.configuration.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7834" opendate="2013-2-13 00:00:00" fixdate="2013-2-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document Hadoop version support matrix in the book</summary>
      <description>Lets do a support matrix in the book for HBase versions x Hadoop versions, and some cleanup in the Hadoop section.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.docbkx.configuration.xml</file>
    </fixedFiles>
  </bug>
  <bug id="7869" opendate="2013-2-18 00:00:00" fixdate="2013-2-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide way to not start LogSyncer thread</summary>
      <description>In our usecase we want all the Mutations on all the tables to be immediately written and synced to WAL. We dont want the LogSyncer thread to be running in such a case.In minbatch operation we write entries to WAL and we use postWALWrite and write some more WAL entries(Only write no sync). We want all these written data to be synced as one unit (at the sync step in doMiniBatchOperation) But if the LogSyncer thread is running in the system it can come and do the sync at any point in time which we dont want in our case.</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.98.0,0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.wal.FSHLog.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="7913" opendate="2013-2-23 00:00:00" fixdate="2013-2-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Secure Rest server should login before getting an instance of Rest servlet</summary>
      <description>Fails with exceptionavax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt)] at com.sun.security.sasl.gsskerb.GssKrb5Client.evaluateChallenge(GssKrb5Client.java:194) at org.apache.hadoop.hbase.security.HBaseSaslRpcClient.saslConnect(HBaseSaslRpcClient.java:139) at org.apache.hadoop.hbase.ipc.SecureClient$SecureConnection.setupSaslConnection(SecureClient.java:194) at org.apache.hadoop.hbase.ipc.SecureClient$SecureConnection.access$500(SecureClient.java:92) at org.apache.hadoop.hbase.ipc.SecureClient$SecureConnection$2.run(SecureClient.java:302) at org.apache.hadoop.hbase.ipc.SecureClient$SecureConnection$2.run(SecureClient.java:299) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:396) at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1178) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.hadoop.hbase.util.Methods.call(Methods.java:37) at org.apache.hadoop.hbase.security.User.call(User.java:590) at org.apache.hadoop.hbase.security.User.access$700(User.java:51) at org.apache.hadoop.hbase.security.User$SecureHadoopUser.runAs(User.java:444) at org.apache.hadoop.hbase.ipc.SecureClient$SecureConnection.setupIOstreams(SecureClient.java:298) at org.apache.hadoop.hbase.ipc.HBaseClient.getConnection(HBaseClient.java:1124) at org.apache.hadoop.hbase.ipc.HBaseClient.call(HBaseClient.java:974) at org.apache.hadoop.hbase.ipc.SecureRpcEngine$Invoker.invoke(SecureRpcEngine.java:104) at $Proxy5.getProtocolVersion(Unknown Source) at org.apache.hadoop.hbase.ipc.SecureRpcEngine.getProxy(SecureRpcEngine.java:146) at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.getMaster(HConnectionManager.java:711) at org.apache.hadoop.hbase.client.HBaseAdmin.&lt;init&gt;(HBaseAdmin.java:116) at org.apache.hadoop.hbase.rest.RESTServlet.&lt;init&gt;(RESTServlet.java:74) at org.apache.hadoop.hbase.rest.RESTServlet.getInstance(RESTServlet.java:57) at org.apache.hadoop.hbase.rest.Main.main(Main.java:81)Caused by: GSSException: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt) at sun.security.jgss.krb5.Krb5InitCredential.getInstance(Krb5InitCredential.java:130) at sun.security.jgss.krb5.Krb5MechFactory.getCredentialElement(Krb5MechFactory.java:106) at sun.security.jgss.krb5.Krb5MechFactory.getMechanismContext(Krb5MechFactory.java:172) at sun.security.jgss.GSSManagerImpl.getMechanismContext(GSSManagerImpl.java:209) at sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:195) at sun.security.jgss.GSSContextImpl.initSecContext(GSSContextImpl.java:162) at com.sun.security.sasl.gsskerb.GssKrb5Client.evaluateChallenge(GssKrb5Client.java:175)</description>
      <version>0.94.6,0.95.0</version>
      <fixedVersion>0.94.6,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.RESTServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="8008" opendate="2013-3-5 00:00:00" fixdate="2013-3-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix DirFilter usage to be consistent</summary>
      <description>Currently the DirFilter automatically filters out HConstants.HBASE_NON_USER_TABLE_DIRS, which is not needed in most cases. We should switch the usage so people actually using a directory filter and then have a special filter when looking for tables specifically.</description>
      <version>None</version>
      <fixedVersion>0.98.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.FSUtils.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="8060" opendate="2013-3-10 00:00:00" fixdate="2013-6-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>"Num compacting KVs" diverges from "num compacted KVs" over time</summary>
      <description>I have been running what amounts to an ingestion test for a day or so. This is an all-in-one cluster launched with './bin/hbase master start' from sources. In the RS stats on the master UI, the "num compacting KVs" has diverged from "num compacted KVs" even though compaction has been completed from perspective of selection, no compaction tasks are running on the RS. I think this could be confusing &amp;#8211; is compaction happening or not?Or maybe I'm misunderstanding what this is supposed to show?</description>
      <version>0.94.6,0.95.0,0.95.2</version>
      <fixedVersion>0.98.0,0.95.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.compactions.Compactor.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.compactions.CompactionProgress.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.HalfStoreFileReader.java</file>
    </fixedFiles>
  </bug>
  <bug id="8141" opendate="2013-3-18 00:00:00" fixdate="2013-3-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove accidental uses of org.mortbay.log.Log</summary>
      <description>Remove accidental uses of org.mortbay.log.Log. Eclipse autocomplete is probably the culprit.</description>
      <version>0.94.6,0.95.0,0.95.2</version>
      <fixedVersion>0.94.6,0.95.0,0.95.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.ipc.TestDelayedRpc.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.TestHFileSeek.java</file>
      <file type="M">hbase-prefix-tree.src.test.java.org.apache.hadoop.hbase.codec.prefixtree.builder.TestTreeDepth.java</file>
    </fixedFiles>
  </bug>
  <bug id="8208" opendate="2013-3-28 00:00:00" fixdate="2013-4-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In some situations data is not replicated to slaves when deferredLogSync is enabled</summary>
      <description>This is a subtle issue. When deferredLogSync is enabled, there are chances we could flush data before syncing all HLog entries. Assuming we just flush the internal cache and the server dies with some unsynced hlog entries. Data is not lost at the source cluster while replication is based on WAL files and some changes we flushed at the source won't be replicated the slave clusters. Although enabling deferredLogSync with tolerances of data loss, it breaks the replication assumption that whatever persisted in the source should be replicated to its slave clusters. In short, the slave cluster could end up with double losses: the data loss in the source and some data stored in source cluster may not be replicated to slaves either.The fix of the issue isn't hard. Basically we can invoke sync during each flush when replication is enabled for a region server. Since sync returns immediately when nothing to sync so there should be no performance impact.Please let me know what you think!Thanks,-Jeffrey</description>
      <version>0.98.0,0.94.6,0.95.0</version>
      <fixedVersion>0.98.0,0.94.7,0.95.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.wal.FSHLog.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="8247" opendate="2013-4-2 00:00:00" fixdate="2013-4-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>inconsistent date format in different logs makes it painful to manipulate them</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.resources.log4j.properties</file>
      <file type="M">conf.log4j.properties</file>
    </fixedFiles>
  </bug>
  <bug id="8260" opendate="2013-4-3 00:00:00" fixdate="2013-4-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>create generic integration test for trunk and 94 that is more deterministic, can be run for longer and is less aggressive</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.98.0,0.94.7,0.95.2</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-it.src.test.java.org.apache.hadoop.hbase.IntegrationTestDataIngestWithChaosMonkey.java</file>
      <file type="M">hbase-it.src.test.java.org.apache.hadoop.hbase.util.ChaosMonkey.java</file>
      <file type="M">hbase-it.src.test.java.org.apache.hadoop.hbase.IntegrationTestDataIngestSlowDeterministic.java</file>
    </fixedFiles>
  </bug>
  <bug id="8262" opendate="2013-4-3 00:00:00" fixdate="2013-4-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add testcase to verify HBASE-7876&amp;#39;s empty region split semantics change</summary>
      <description>HBASE-7678 change the semantics of splits and removed a test case but didn't not add one to verify behavior. We'll add one here.</description>
      <version>0.98.0,0.94.6,0.95.0,0.95.2</version>
      <fixedVersion>0.98.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.FSUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="8269" opendate="2013-4-4 00:00:00" fixdate="2013-12-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix data locallity documentation.</summary>
      <description>Documetation regarding data locality and the way hadoop write the replicas need to be updated/corrected.http://mail-archives.apache.org/mod_mbox/hbase-user/201304.mbox/browser</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.book.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8604" opendate="2013-5-23 00:00:00" fixdate="2013-3-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>improve reporting of incorrect peer address in replication</summary>
      <description>I was running some replication code that incorrectly advertised the peer address for replication. HBase complained that the format of the record was NOT what it was expecting but it didn't include what it saw in the exception message. Including that string would help cutting down the time it takes to debug issues like that.</description>
      <version>0.94.6</version>
      <fixedVersion>0.96.2,0.98.1,0.99.0,0.94.18</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.zookeeper.ZKUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="8606" opendate="2013-5-23 00:00:00" fixdate="2013-5-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Meta scanner is not closed</summary>
      <description>In my meta region server log file, I see lots of error messages complaining about meta region scanner lease expired.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.client.MetaScanner.java</file>
    </fixedFiles>
  </bug>
  <bug id="8608" opendate="2013-5-24 00:00:00" fixdate="2013-6-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do an edit of logs.. we log too much.</summary>
      <description>Since we enabled blooms, there is a bunch of bloom spew.... We also do a bunch of logging around new file open....</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.FSUtils.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.CompoundBloomFilterWriter.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.wal.ProtobufLogWriter.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.wal.FSHLog.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.StoreFile.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.DefaultStoreFlusher.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.TableLockManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.HFileWriterV2.java</file>
    </fixedFiles>
  </bug>
  <bug id="8696" opendate="2013-6-5 00:00:00" fixdate="2013-6-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fixup for logs that show when running hbase-it tests.</summary>
      <description>I've been staring at logs trying to figure why hbase-it tests fail.Here are some more log cleanups that come of my frustration trying to read our emissions.</description>
      <version>None</version>
      <fixedVersion>0.95.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.InfoServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.compactions.CompactionConfiguration.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.RegionStates.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.HMasterCommandLine.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.handler.OpenedRegionHandler.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.CatalogJanitor.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapreduce.HFileOutputFormat.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.ipc.RpcServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.backup.HFileArchiver.java</file>
      <file type="M">hbase-it.src.test.java.org.apache.hadoop.hbase.IngestIntegrationTestBase.java</file>
      <file type="M">hbase-it.src.test.java.org.apache.hadoop.hbase.HBaseClusterManager.java</file>
      <file type="M">hbase-common.src.test.java.org.apache.hadoop.hbase.ClassFinder.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.master.RegionState.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.HRegionInfo.java</file>
      <file type="M">bin.start-hbase.sh</file>
    </fixedFiles>
  </bug>
  <bug id="8944" opendate="2013-7-13 00:00:00" fixdate="2013-7-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document workaround for MiniDFSCluster exceptions when running tests</summary>
      <description>The HBaseTestingUtility appears to have an unhandled NullPointerException in certain environments. It works on Apache HBase 0.94.6.1 on Mac OSX but not in certain Linux environments such as CentOS. In Java:HBaseTestingUtility testingUtility = new HBaseTestingUtility();testingUtility.startMiniCluster(1); // blows up on CentOS Linux but not Mac OSXCreates this exception:ERROR in (create-table) (MiniDFSCluster.java:426)Uncaught exception, not in assertion.expected: nil actual: java.lang.NullPointerException: null at org.apache.hadoop.hdfs.MiniDFSCluster.startDataNodes (MiniDFSCluster.java:426) org.apache.hadoop.hdfs.MiniDFSCluster.&lt;init&gt; (MiniDFSCluster.java:284) org.apache.hadoop.hbase.HBaseTestingUtility.startMiniDFSCluster (HBaseTestingUtility.java:444) org.apache.hadoop.hbase.HBaseTestingUtility.startMiniCluster (HBaseTestingUtility.java:612) org.apache.hadoop.hbase.HBaseTestingUtility.startMiniCluster (HBaseTestingUtility.java:568) org.apache.hadoop.hbase.HBaseTestingUtility.startMiniCluster (HBaseTestingUtility.java:555)I also created a stack overflow ticket here, with more info:http://stackoverflow.com/questions/17625938/hbase-minidfscluster-java-fails-in-certain-environmentsSteps to reproduce:1. Download a copy of CentOS2. Install Java3. Fire up a minicluster as part of the HBaseTestingUtility</description>
      <version>0.94.6,0.94.6.1</version>
      <fixedVersion>0.98.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.troubleshooting.xml</file>
    </fixedFiles>
  </bug>
  <bug id="8946" opendate="2013-7-14 00:00:00" fixdate="2013-7-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add a new function to Thrift 2 to open scanner, get results and close scanner</summary>
      <description>We found, very often we open a scanner , get x number of rows , then close the scanner immediately. The attached patch , add a new function getScannerResults that does just that. Using getScannerResults function reduce number of calls to thrift server. Also since the scanner gets closed immediately, it is less prone to cause memory leak.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.2,0.94.11</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.thrift2.TestThriftHBaseServiceHandler.java</file>
      <file type="M">hbase-server.src.main.resources.org.apache.hadoop.hbase.thrift2.hbase.thrift</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.ThriftHBaseServiceHandler.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.THBaseService.java</file>
    </fixedFiles>
  </bug>
  <bug id="8947" opendate="2013-7-15 00:00:00" fixdate="2013-7-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Thrift 2 : Replace "bool writeToWAL" with "TDurability durability"</summary>
      <description>Introduce new enum TDurability to expose more options for Write To Wal.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.2,0.94.11</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.thrift2.TestThriftHBaseServiceHandler.java</file>
      <file type="M">hbase-server.src.main.resources.org.apache.hadoop.hbase.thrift2.hbase.thrift</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.ThriftUtilities.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TPut.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TIncrement.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TDelete.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
