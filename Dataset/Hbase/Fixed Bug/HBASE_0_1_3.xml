<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="HBASE">
  <bug id="7190" opendate="2012-11-19 00:00:00" fixdate="2012-11-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add an option to hbck to check only meta and assignment</summary>
      <description>Currently, hbck loads region info from HDFS for each run. It may take some time if there are many regions.We need an option to not check HDFS, i.e. just checking meta and assignment.</description>
      <version>None</version>
      <fixedVersion>0.94.4,0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.util.TestHBaseFsck.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.HBaseFsck.java</file>
    </fixedFiles>
  </bug>
  <bug id="742" opendate="2008-7-11 00:00:00" fixdate="2008-7-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Column length limit is not enforced</summary>
      <description>HColumnDescriptor provides for a limit on column value length but it is not enforced in 0.1.3 or 0.2.0 other than in the REST and Thrift APIs. (I thought it was enforced in some earlier revision but cannot find it).Enforcement on the client side would be less complicated than doing it on the server side.</description>
      <version>0.1.3,0.2.0</version>
      <fixedVersion>0.2.0,0.1.4</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HTable.java</file>
      <file type="M">src.test.org.apache.hadoop.hbase.client.TestBatchUpdate.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="745" opendate="2008-7-15 00:00:00" fixdate="2008-8-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>scaling of one regionserver, improving memory and cpu usage</summary>
      <description>after weeks testing hbase 0.1.3 and hadoop(0.16.4, 0.17.1), i found there are many works to do, before a particular regionserver can handle data about 100G, or even more. i'd share my opions here with stack, and other developers.first, the easiest way improving scalability of regionserver is upgrading hardware, use 64bit os and 8G memory for the regionserver process, and speed up disk io. besides hardware, following are software bottlenecks i found in regionserver:1. as data increasing, compaction was eating cpu(with io) times, the total compaction time is basicly linear relative to whole data size, even worse, sometimes square relavtive to that size.2. memory usage are depends on opened mapfiles3. network connection are depends on opened mapfiles, see HADOOP-2341 and HBASE-24.</description>
      <version>0.1.3,0.2.0</version>
      <fixedVersion>0.2.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.util.TestMetaUtils.java</file>
      <file type="M">src.test.org.apache.hadoop.hbase.regionserver.TestCompaction.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.CompactSplitThread.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="748" opendate="2008-7-16 00:00:00" fixdate="2008-10-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add an efficient way to batch update many rows</summary>
      <description>HBASE-747 introduced a simple way to batch update many rows. The goal of this issue is to have an enhanced version that will send many rows in a single RPC to each region server. To do this, the client code will have to figure which rows goes to which server, group them accordingly and then send them.</description>
      <version>0.1.3,0.2.0</version>
      <fixedVersion>0.19.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.PerformanceEvaluation.java</file>
      <file type="M">src.test.org.apache.hadoop.hbase.client.TestBatchUpdate.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ipc.HRegionInterface.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.HbaseObjectWritable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.BatchUpdate.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HTable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HConnectionManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HConnection.java</file>
      <file type="M">conf.hbase-default.xml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="7480" opendate="2013-1-2 00:00:00" fixdate="2013-1-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Explicit message for not allowed snapshot on meta tables</summary>
      <description>taking a snapshot of ROOT or .META. now results in something like this:Illegal first character &lt;46&gt; at 0. User-space table names can only start with 'word characters': i.e. [a-zA-Z_0-9]changing the message in something more human readable to inform that meta table are not supported</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.client.TestSnapshotFromClient.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="7484" opendate="2013-1-3 00:00:00" fixdate="2013-1-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix Restore with schema changes</summary>
      <description>The restore code in the offline branch doesn't handle the schema change.I think that I've lost it during the various rebase, the Handler restore the schema, but the restoreRegion() method in the helper handle just the "same schema" case.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.HBaseTestingUtility.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClient.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.snapshot.RestoreSnapshotHelper.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
