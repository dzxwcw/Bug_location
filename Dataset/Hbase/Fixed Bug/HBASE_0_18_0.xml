<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="HBASE">
  <bug id="1142" opendate="2009-1-20 00:00:00" fixdate="2009-2-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cleanup thrift server; remove Text and profuse DEBUG messaging</summary>
      <description>Ambiguous issue name.. sorry.The thrift server has loads of getText(..) calls. Which is a local function that checks for utf8 compliance, we don't need them anywhere, because we don't use Text anymore.There is probably other things we missed last time we updated the api, that we should also clean up while we're at it. Open to suggestions.</description>
      <version>0.18.0,0.18.1,0.19.0,0.19.1</version>
      <fixedVersion>0.19.1</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.thrift.ThriftUtilities.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.thrift.ThriftServer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="65" opendate="2008-1-13 00:00:00" fixdate="2008-1-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Thrift Server should have an option to bind to ip address</summary>
      <description>The Thrift server can be bound to a port by calling./bin/hbase thrift --port PORTAs in all other server in hadoop everything is option to bind to a set ip address this will help with security issuesexample ./bin/hbase rest --bind 0.0.0.0As of now thrift is on all ip's on the server making it a security risk. so it would be nice to have the option to bind to a ip so we can limit access to the server.</description>
      <version>0.18.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="834" opendate="2008-8-15 00:00:00" fixdate="2008-8-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>&amp;#39;Major&amp;#39; compactions and upper bound on files we compact at any one time</summary>
      <description>From Billy in HBASE-64, which we closed because it got pulled all over the place:Currently we do compaction on a region when the hbase.hstore.compactionThreshold is reached - default 3I thank we should configure a max number of mapfiles to compact at one time simulator to doing a minor compaction in bigtable. This keep compaction's form getting tied up in one region to long letting other regions get way to many memcache flushes making compaction take longer and longer for each regionIf we did that when a regions updates start to slack off the max number will eventuly include all mapfiles causeing a major compaction on that region. Unlike big table this would leave the master out of the process and letting the region server handle the major compaction when it has time.When doing a minor compaction on a few files I thank we should compact the newest mapfiles first leave the larger/older ones for when we have low updates to a region.</description>
      <version>0.2.1,0.18.0</version>
      <fixedVersion>0.2.1,0.18.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">conf.hbase-default.xml</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.HBase.rb</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="836" opendate="2008-8-16 00:00:00" fixdate="2008-9-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update thrift examples to work with changed IDL (HBASE-697)</summary>
      <description>Examples are now out of date since HBASE-697 went in.</description>
      <version>0.2.1,0.18.0</version>
      <fixedVersion>0.18.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.examples.thrift.DemoClient.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="840" opendate="2008-8-19 00:00:00" fixdate="2008-8-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>More options on the row query in REST interface</summary>
      <description>The prior implementation only supports the exact column name(col_family:label), but we need more such as get a col family, query the version.</description>
      <version>0.18.0</version>
      <fixedVersion>0.18.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.TestCompare.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.rest.RowHandler.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.rest.GenericHandler.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.Memcache.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HStoreKey.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HConstants.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="842" opendate="2008-8-25 00:00:00" fixdate="2008-8-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove methods that have Text as a parameter and were deprecated in 0.2.1</summary>
      <description>HBASE-799 deprecated methods that take Text as a parameter in hbase-0.2.1For this release, those same methods should be removed.</description>
      <version>0.18.0</version>
      <fixedVersion>0.18.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.util.TestMergeTool.java</file>
      <file type="M">src.test.org.apache.hadoop.hbase.TestSerialization.java</file>
      <file type="M">src.test.org.apache.hadoop.hbase.TestScannerAPI.java</file>
      <file type="M">src.test.org.apache.hadoop.hbase.regionserver.TestLogRolling.java</file>
      <file type="M">src.test.org.apache.hadoop.hbase.regionserver.TestGet.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.Bytes.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.RegionManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.BatchUpdate.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HMsg.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HColumnDescriptor.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.transactional.TransactionalTable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.Scanner.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HTable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HBaseAdmin.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="8420" opendate="2013-4-24 00:00:00" fixdate="2013-5-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Port HBASE-6874 Implement prefetching for scanners from 0.89-fb</summary>
      <description>This should help scanner performance. We should have it in trunk.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestRegionServerMetrics.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.protobuf.TestProtobufUtil.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.coprocessor.TestRowProcessorEndpoint.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.client.TestScannersFromClientSide.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">hbase-protocol.src.main.protobuf.Client.proto</file>
      <file type="M">hbase-protocol.src.main.java.org.apache.hadoop.hbase.protobuf.generated.ClientProtos.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.util.Threads.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.protobuf.ProtobufUtil.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.client.ScannerCallable.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.client.Scan.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.client.ClientScanner.java</file>
    </fixedFiles>
  </bug>
  <bug id="8611" opendate="2013-5-24 00:00:00" fixdate="2013-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve test coverage in pkg org.apache.hadoop.hbase.mapred</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>0.98.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapred.Driver.java</file>
    </fixedFiles>
  </bug>
  <bug id="8680" opendate="2013-6-3 00:00:00" fixdate="2013-6-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>distributedLogReplay performance regression</summary>
      <description>The JIRA is to check in changes to address performance issues found during my performance testing as following:1) When WALEdits belongs to a region which split/merged later, replay incurs extra waitUntilRegionOnline RPC call2) Using a single shared connection for replaying achieves better performance. Everytime creating a new connection, it incurs 4+ seconds to establish a connection to ZK.3) other small modifications to mitigate excessive logging</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestSplitLogWorker.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.wal.HLogSplitter.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.SplitLogWorker.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.RegionStates.java</file>
    </fixedFiles>
  </bug>
  <bug id="871" opendate="2008-9-4 00:00:00" fixdate="2008-9-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Major compaction periodicity should be specifyable at the column family level, not cluster wide</summary>
      <description>jon gray has a table of ten rows and a couple of columns that is constantly being updated. Has max versions of 2. This table is growing fast because all versions written are kept until a major compaction. The way this table is being used is different than that of others. Would be good if he could have major compactions run more often than the default once a day.</description>
      <version>0.2.1,0.18.0</version>
      <fixedVersion>0.2.1,0.18.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStoreFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="876" opendate="2008-9-7 00:00:00" fixdate="2008-1-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>There are a large number of Java warnings in HBase</summary>
      <description>There are a large number of Java warnings in the current HBase code base including: exceptions that do not define serialVersionUID classes that use the raw type WritableComparable instead of WritableComparable&lt;T&gt; classes or interfaces that declare public members that are not a part of the public API. In this case they should be moved to a place where their visibility needs not be public. Additionally, there are a number of classes that declare public members that need not be. Make them protected or private or default as needed methods that have unnecessary else clauses potential null pointer access inner classes that are public that should be default or protected (e.g. RegionHistoryInformation) assignment to an input parameter</description>
      <version>0.18.0</version>
      <fixedVersion>0.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.TableInputFormat.java</file>
      <file type="M">src.java.org.onelab.filter.RetouchedBloomFilter.java</file>
      <file type="M">src.java.org.onelab.filter.Key.java</file>
      <file type="M">src.java.org.onelab.filter.DynamicBloomFilter.java</file>
      <file type="M">src.java.org.onelab.filter.CountingBloomFilter.java</file>
      <file type="M">src.java.org.onelab.filter.BloomFilter.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.SoftValueSortedMap.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.SoftValueMap.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.SoftValue.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.Pair.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.MurmurHash.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.MetaUtils.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.JenkinsHash.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.util.Bytes.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.transactional.TransactionalRegion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.transactional.TransactionalHLogManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.tableindexed.IndexedRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.NoSuchColumnFamilyException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.metrics.RegionServerMetrics.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.Memcache.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.LogFlusher.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HLogKey.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HLog.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.metrics.file.TimeStampingFileContext.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.TableDelete.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.RootScanner.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.NotAllMetaRegionsOnlineException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ModifyTableMeta.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.metrics.MasterMetrics.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ColumnOperation.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.TableSplit.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.TableOutputFormat.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.TableMap.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.TableInputFormatBase.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ColumnNameParseException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.DoNotRetryIOException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.DroppedSnapshotException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HColumnDescriptor.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HConstants.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HRegionInfo.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HRegionLocation.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HServerAddress.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HServerInfo.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HServerLoad.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HStoreKey.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.LeaseException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.RegionHistorian.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.RemoteExceptionHandler.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ValueOverMaxLengthException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HBaseAdmin.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HConnectionManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.MetaScanner.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.ScannerTimeoutException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.tableindexed.IndexedTable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.tableindexed.IndexedTableAdmin.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.tableindexed.IndexSpecification.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.transactional.CommitUnsuccessfulException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.transactional.UnknownTransactionException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.UnmodifyableHColumnDescriptor.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.UnmodifyableHTableDescriptor.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.filter.ColumnValueFilter.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.filter.PageRowFilter.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.filter.PrefixRowFilter.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.filter.RegExpRowFilter.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.filter.StopRowFilter.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.BlockFSInputStream.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.BloomFilterMapFile.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.HalfMapFileReader.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.HBaseMapFile.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.HbaseMapWritable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.HbaseObjectWritable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.ImmutableBytesWritable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.io.RowResult.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ipc.HBaseRpcMetrics.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.GroupingTableMap.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.HRegionPartitioner.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.IdentityTableMap.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.IdentityTableReduce.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.IndexConfiguration.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.IndexOutputFormat.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.IndexTableReduce.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.LuceneDocumentWrapper.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.mapred.RowCounter.java</file>
    </fixedFiles>
  </bug>
  <bug id="877" opendate="2008-9-8 00:00:00" fixdate="2008-9-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>HCM is unable to find table with multiple regions which contains binary</summary>
      <description>HCM can not find the table with exception:org.apache.hadoop.hbase.TableNotFoundException: items at org.apache.hadoop.hbase.client.HConnectionManager$TableServers.locateRegionInMeta(HConnectionManager.java:508) at org.apache.hadoop.hbase.client.HConnectionManager$TableServers.locateRegion(HConnectionManager.java:460) at org.apache.hadoop.hbase.client.HConnectionManager$TableServers.locateRegion(HConnectionManager.java:420) at org.apache.hadoop.hbase.client.HTable.&lt;init&gt;(HTable.java:130) at HBaseRef.&lt;init&gt;(HBaseRef.java:29) at Import.&lt;init&gt;(Import.java:20) at Import.main(Import.java:26)I have a fix already for this. But the problem re-appeared after some time. I have no recreated it yet, but will post results in the morning.</description>
      <version>0.2.1,0.18.0</version>
      <fixedVersion>0.2.1,0.18.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.regionserver.TestHStoreFile.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.Memcache.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStoreFile.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.BeforeThisStoreKey.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HTableDescriptor.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HStoreKey.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HMerge.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="8770" opendate="2013-6-19 00:00:00" fixdate="2013-3-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>deletes and puts with the same ts should be resolved according to mvcc/seqNum</summary>
      <description>This came up during HBASE-8721. Puts with the same ts are resolved by seqNum. It's not clear why deletes with the same ts as a put should always mask the put, rather than also being resolve by seqNum.What do you think?</description>
      <version>None</version>
      <fixedVersion>2.0.0</fixedVersion>
      <type>Brainstorming</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.datamodel.adoc</file>
    </fixedFiles>
  </bug>
  <bug id="8826" opendate="2013-6-28 00:00:00" fixdate="2013-7-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ensure HBASE-8695 is covered in Thrift 2</summary>
      <description>HBASE-8695 is about using the config file, make sure Thrift 2 is doing the same.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.2,0.94.10</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.ThriftServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="883" opendate="2008-9-12 00:00:00" fixdate="2008-11-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Secondary Indexes</summary>
      <description>I'm working on a secondary index impl. The basic idea is to maintain a separate table per index.</description>
      <version>None</version>
      <fixedVersion>0.19.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.PerformanceEvaluation.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.transactional.TransactionalRegion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.UnmodifyableHTableDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.test.org.apache.hadoop.hbase.client.tableindexed.TestIndexedTable.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.tableindexed.package.html</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.tableindexed.IndexSpecification.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.tableindexed.IndexNotFoundException.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.tableindexed.IndexedTableAdmin.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HTableDescriptor.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HStoreKey.java</file>
    </fixedFiles>
  </bug>
  <bug id="8832" opendate="2013-6-28 00:00:00" fixdate="2013-7-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ensure HBASE-4658 is supported by Thrift 2</summary>
      <description>HBASE-4658 adds support for "attributes" for certain operations. Make sure Thrift 2 supports them where ever available in the native API.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.2,0.94.10</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.thrift2.TestThriftHBaseServiceHandler.java</file>
      <file type="M">hbase-server.src.main.resources.org.apache.hadoop.hbase.thrift2.hbase.thrift</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.ThriftUtilities.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TScan.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TPut.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TIncrement.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.THBaseService.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TGet.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.thrift2.generated.TDelete.java</file>
    </fixedFiles>
  </bug>
  <bug id="891" opendate="2008-9-19 00:00:00" fixdate="2008-9-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>HRS.validateValuesLength throws IOE, gets caught in the retries</summary>
      <description>When HRS.validateValuesLength throws a IOE, it gets caught in the retries because it does not use a DoNotRetryIOException.</description>
      <version>0.2.1,0.18.0</version>
      <fixedVersion>0.2.2,0.18.1,0.19.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="912" opendate="2008-10-3 00:00:00" fixdate="2008-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>PE is broken when other tables exist</summary>
      <description>The iteration in checkTable is broken. for (int i = 0; i &lt; extantTables.length; i++) { if (extantTables[0].equals(tableDescriptor)) { LOG.warn("Table " + tableDescriptor + " already exists"); tableExists = true; break; } }</description>
      <version>0.18.0</version>
      <fixedVersion>0.18.1,0.19.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.PerformanceEvaluation.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="918" opendate="2008-10-10 00:00:00" fixdate="2008-10-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Region balancing during startup makes cluster unstable</summary>
      <description>During cluster startup, region balancing makes cluster unstable. Disable balancing until all regions are assigned.</description>
      <version>0.18.0</version>
      <fixedVersion>0.18.1,0.19.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.RegionHistorian.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.RegionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="921" opendate="2008-10-11 00:00:00" fixdate="2008-12-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>region close and open processed out of order; makes for disagreement between master and regionserver on region state</summary>
      <description>Master assigns region X successfully. It then decides to close it because it wants it opened elsewhere as part of region rebalancing. Both the open and close operations are reported back to the master. Both have operation processing components that are added to the todo list to be processed in another thread outside of the master's main loop.The close operation does the bulk of its work inline with the master main processing loop. Its todo component does some work if the region is offlined but otherwise nothing of consequence whereas the open in its todo does the important meta catalog table update with the new location information.Its been fairly common here on our cluster where the master todo queue is occupied processing the shutdown of a regionserver. It takes a long time to process the shutdown of a regionserver when thousands of regions This latter delays the processing of the open and close todos. In effect the open is running after the close. The region goes into limbo. Only a restart of the 'hosting' regionserver 'fixes' this state.This is a particular case of the general HBASE-543 issue. Its happening alot here on our cluster so will hack up a fix for this and get it into TRUNK and backport it to 0.18.1.Jim Firby here had a good idea for conditions like this. Clients should be able to say "I've asked for a regions location 10 times now and Mr. Master, you've given me the same response ten times in a row and each time, the answer was wrong. Revisit any notion that said region is at said location". Mr. Master would then go off and do something drastic like close and reassign the region.</description>
      <version>0.18.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.ProcessRegionClose.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="936" opendate="2008-10-18 00:00:00" fixdate="2008-10-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>REST Interface: enable to get numbers of rows from scanner interface</summary>
      <description>The scanner request will return one row for each request defaultly. But due to reduce the network bandwidth also the usability of the api, it should allow return multiple rows at once.</description>
      <version>0.18.0</version>
      <fixedVersion>0.19.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.rest.ScannerHandler.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.rest.GenericHandler.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.Scanner.java</file>
    </fixedFiles>
  </bug>
  <bug id="938" opendate="2008-10-20 00:00:00" fixdate="2008-11-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>major compaction period is not checked periodically</summary>
      <description>The major compaction period, hbase.hregion.majorcompaction, is not checked periodically. Currently, we only request major compaction when the region is open or split at which point we check whether the major compaction period is due.</description>
      <version>0.18.0,0.18.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.util.Threads.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.MemcacheFlusher.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStoreFile.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.CompactSplitThread.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">conf.hbase-env.sh</file>
    </fixedFiles>
  </bug>
  <bug id="9380" opendate="2013-8-29 00:00:00" fixdate="2013-8-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>StoreFile.Reader is not being closed on memstore flush</summary>
      <description>We are not closing the StoreFile.Reader upon memstore flush.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.96.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="9480" opendate="2013-9-9 00:00:00" fixdate="2013-9-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Regions are unexpectedly made offline in certain failure conditions</summary>
      <description>Came across this issue (HBASE-9338 test):1. Client issues a request to move a region from ServerA to ServerB2. ServerA is compacting that region and doesn't close region immediately. In fact, it takes a while to complete the request.3. The master in the meantime, sends another close request.4. ServerA sends it a NotServingRegionException5. Master handles the exception, deletes the znode, and invokes regionOffline for the said region.6. ServerA fails to operate on ZK in the CloseRegionHandler since the node is deleted.The region is permanently offline.There are potentially other situations where when a RegionServer is offline and the client asks for a region move off from that server, the master makes the region offline.</description>
      <version>None</version>
      <fixedVersion>0.98.0,0.96.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.TestAssignmentManagerOnCluster.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.HBaseTestingUtility.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.handler.OpenRegionHandler.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.RegionStates.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.master.RegionState.java</file>
    </fixedFiles>
  </bug>
  <bug id="994" opendate="2008-11-11 00:00:00" fixdate="2008-11-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>IPC interfaces with different versions can cause problems</summary>
      <description>This morning we ran into a situation in which some 0.2.x region servers started up and joined a 0.18.1 cluster. This 'sort of' worked in that the hrs could communicate with the master, but clients could not communicate with the 0.2 region servers because the api version changed (the master wouldn't have liked it if it had deployed root or meta there).Suggestion is that we have a single api version that gets bumped when any of the interfaces changes.</description>
      <version>0.2.1,0.18.0,0.18.1,0.19.0</version>
      <fixedVersion>0.19.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.transactional.TransactionalRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ipc.TransactionalRegionInterface.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ipc.HRegionInterface.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ipc.HMasterRegionInterface.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.ipc.HMasterInterface.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HConnectionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
