<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="HBASE">
  <bug id="20163" opendate="2018-3-9 00:00:00" fixdate="2018-4-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Forbid major compaction when standby cluster replay the remote wals</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.MockRegionServerServices.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.MockRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.RegionServerServices.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
    </fixedFiles>
  </bug>
  <bug id="20164" opendate="2018-3-9 00:00:00" fixdate="2018-3-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>failed hadoopcheck should add footer link</summary>
      <description>thought for sure this already had an issue, busbey, but I can't find it.</description>
      <version>None</version>
      <fixedVersion>1.3.2,1.4.3,2.0.0,1.2.7</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">dev-support.hbase-personality.sh</file>
    </fixedFiles>
  </bug>
  <bug id="20165" opendate="2018-3-9 00:00:00" fixdate="2018-3-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Shell command to make a normal peer to be a serial replication peer</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>2.1.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-shell.src.test.ruby.hbase.replication.admin.test.rb</file>
      <file type="M">hbase-shell.src.main.ruby.shell.commands.list.peers.rb</file>
      <file type="M">hbase-shell.src.main.ruby.shell.rb</file>
      <file type="M">hbase-shell.src.main.ruby.hbase.replication.admin.rb</file>
    </fixedFiles>
  </bug>
  <bug id="2017" opendate="2009-11-30 00:00:00" fixdate="2009-11-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Set configurable max value size check to 10MB</summary>
      <description>Make the user think about whether storing larger values than 10MB is a good idea.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.hbase-default.xml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="20204" opendate="2018-3-14 00:00:00" fixdate="2018-5-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add locking to RefreshFileConnections in BucketCache</summary>
      <description>This is a follow-up to HBASE-20141 where anoop.hbase suggested adding locking for refreshing channels.I have also seen this become an issue when a RS has to abort and it locks on trying to flush out the remaining data to the cache (since cache on write was turned on).</description>
      <version>1.4.3,2.0.0</version>
      <fixedVersion>3.0.0-alpha-1,2.1.0,1.4.5</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.bucket.TestFileIOEngine.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.bucket.FileIOEngine.java</file>
    </fixedFiles>
  </bug>
  <bug id="20207" opendate="2018-3-15 00:00:00" fixdate="2018-5-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update doc on the steps to revert RegionServer groups feature</summary>
      <description>Reverting the rsgroup feature from a hbase cluster involves additional steps on top of removing the changes to hbase-site.xml. Documenting it will help cluster admins to be aware of them when rsgroup feature is being enabled.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.ops.mgt.adoc</file>
    </fixedFiles>
  </bug>
  <bug id="20434" opendate="2018-4-17 00:00:00" fixdate="2018-4-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Also remove remote wals when peer is in DA state</summary>
      <description>Consider we have two clusters in A and S state, and then we transit A to DA. And later we want to transit DA to A, since the remote cluster is in S, we should be able to do it. But there are some remote wals on the HDFS for the cluster in S state, so we need to remove them first before transiting the cluster in DA state to A.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.replication.regionserver.TestReplicationSourceManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.wal.SyncReplicationWALProvider.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.wal.AbstractFSWALProvider.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.replication.regionserver.ReplicationSourceManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.replication.regionserver.ReplicationSource.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.replication.TransitPeerSyncReplicationStateProcedure.java</file>
      <file type="M">hbase-replication.src.main.java.org.apache.hadoop.hbase.replication.ReplicationUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="20447" opendate="2018-4-18 00:00:00" fixdate="2018-5-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Only fail cacheBlock if block collisions aren&amp;#39;t related to next block metadata</summary>
      <description>This is the issue I was originally having here: http://mail-archives.apache.org/mod_mbox/hbase-dev/201802.mbox/%3CCAN+qs_Pav=md_Aoj4Xji+KCNETubg2XOu2nTxV1g6m8-5VN-GA@mail.gmail.com%3E When we pread, we don't force the read to read all of the next block header.However, when we get into a race condition where two opener threads try tocache the same block and one thread read all of the next block header and the other one didn't, it will fail the open process. This is especially importantin a splitting case where it will potentially fail the split process.Instead, in the caches, we should only fail if the required blocks are different. </description>
      <version>1.4.3,2.0.0</version>
      <fixedVersion>3.0.0-alpha-1,2.1.0,1.4.5</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.TestLruBlockCache.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.TestHFileBlock.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.TestCachedBlockQueue.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.TestCacheConfig.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.CacheTestUtils.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.io.hfile.bucket.TestBucketCache.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.LruBlockCache.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.HFileBlock.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.Cacheable.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.java</file>
      <file type="M">hbase-external-blockcache.src.main.java.org.apache.hadoop.hbase.io.hfile.MemcachedBlockCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="20459" opendate="2018-4-19 00:00:00" fixdate="2018-4-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Majority of scan CPU time in HBase-1 spent in size estimation</summary>
      <description>See attached screenshot. Will look into a fix later.</description>
      <version>1.4.3</version>
      <fixedVersion>1.4.4,2.0.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.util.ClassSize.java</file>
    </fixedFiles>
  </bug>
  <bug id="20467" opendate="2018-4-20 00:00:00" fixdate="2018-3-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Precommit personality should only run checkstyle once if we&amp;#39;re going to run it at the root.</summary>
      <description>shows up v egregiously on HBASE-20332, but I've seen in a few places where we'll do checkstyle at top level as well on individual modules.eg.:+1 checkstyle 0m 25s hbase-common: The patch generated 0 new + 88 unchanged - 1 fixed = 88 total (was 89)+1 checkstyle 0m 12s The patch hbase-hadoop2-compat passed checkstyle+1 checkstyle 0m 30s The patch hbase-client passed checkstyle+1 checkstyle 0m 11s The patch hbase-replication passed checkstyle+1 checkstyle 1m 15s The patch hbase-server passed checkstyle+1 checkstyle 0m 17s The patch hbase-mapreduce passed checkstyle+1 checkstyle 0m 8s The patch hbase-testing-util passed checkstyle+1 checkstyle 0m 28s The patch hbase-thrift passed checkstyle+1 checkstyle 0m 11s The patch hbase-rsgroup passed checkstyle+1 checkstyle 0m 10s The patch hbase-shell passed checkstyle+1 checkstyle 0m 12s The patch hbase-endpoint passed checkstyle+1 checkstyle 0m 14s The patch hbase-backup passed checkstyle+1 checkstyle 0m 21s The patch hbase-it passed checkstyle+1 checkstyle 0m 14s The patch hbase-examples passed checkstyle+1 checkstyle 0m 16s The patch hbase-rest passed checkstyle+1 checkstyle 0m 9s The patch hbase-external-blockcache passed checkstyle+1 checkstyle 0m 10s The patch hbase-shaded passed checkstyle+1 checkstyle 0m 8s The patch hbase-shaded-mapreduce passed checkstyle+1 checkstyle 0m 8s The patch hbase-shaded-check-invariants passed checkstyle+1 checkstyle 0m 9s The patch hbase-shaded-with-hadoop-check-invariants passed checkstyle+1 checkstyle 2m 38s root: The patch generated 0 new + 429 unchanged - 1 fixed = 429 total (was 430)we should use the same shortcut we do with other modules when root is present</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">dev-support.hbase-personality.sh</file>
    </fixedFiles>
  </bug>
  <bug id="20469" opendate="2018-4-20 00:00:00" fixdate="2018-8-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Directory used for sidelining old recovered edits files should be made configurable</summary>
      <description> Currently the directory used for sidelining of old recovered edit files is hardcoded to be "/tmp"Path tmp = new Path("/tmp"); See L484 WALSplittter.javaInstead, we can use some configurable directory in the following manner: String tmpDirName = conf.get(HConstants.TEMPORARY_FS_DIRECTORY_KEY,         HConstants.DEFAULT_TEMPORARY_HDFS_DIRECTORY); ..Path tmp = new Path(tmpDirName);  </description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,1.3.3,2.2.0,2.1.1,1.4.7</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.wal.TestWALSplit.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.wal.WALSplitter.java</file>
    </fixedFiles>
  </bug>
  <bug id="21465" opendate="2018-11-11 00:00:00" fixdate="2018-11-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Retry on reportRegionStateTransition can lead to unexpected errors</summary>
      <description>It is possible that the reportRegionStateTransition method is succeeded at master side, but before returning the the region server, the rpc connection is broken, or the master restarts. So next when the region server try again,we will find that the state for the region and the TRSP is not correct, and can lead to a RS abort or something even worse.We should be able to determine whether a reportRegionStateTransition call is just a retry and has already been succeeded, and just ignore it.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.2.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.assignment.TestAssignmentManagerBase.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.assignment.TransitRegionStateProcedure.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.master.assignment.TestReportRegionStateTransitionRetry.java</file>
    </fixedFiles>
  </bug>
  <bug id="23829" opendate="2020-2-11 00:00:00" fixdate="2020-4-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Get `-PrunSmallTests` passing on JDK11</summary>
      <description>Start with the small tests, shaking out issues identified by the harness. So far it seems like -Dhadoop.profile=3.0 and -Dhadoop-three.version=3.3.0-SNAPSHOT maybe be required.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">hbase-shaded.hbase-shaded-with-hadoop-check-invariants.pom.xml</file>
      <file type="M">hbase-shaded.hbase-shaded-check-invariants.pom.xml</file>
      <file type="M">hbase-http.src.test.java.org.apache.hadoop.hbase.http.log.TestLogLevel.java</file>
      <file type="M">hbase-hadoop2-compat.pom.xml</file>
      <file type="M">hbase-common.src.test.java.org.apache.hadoop.hbase.util.TestFutureUtils.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
