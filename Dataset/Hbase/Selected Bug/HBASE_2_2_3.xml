<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="HBASE">
  
  <bug fixdate="2019-2-16 01:00:00" id="21730" opendate="2019-1-16 00:00:00" resolution="Resolved">
    <buginformation>
      <summary>Update HBase-book with the procedure based WAL splitting</summary>
      <description/>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.architecture.adoc</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  
  <bug fixdate="2020-1-18 01:00:00" id="23707" opendate="2020-1-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add IntelliJ check style plugin configuration</summary>
      <description>IntelliJ defines project configuration across a number of files, specifically so that some configurations can be committed with the source repository. The checkstyle plugin configuration is one such config file; add it.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0,1.6.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2020-2-25 01:00:00" id="23890" opendate="2020-2-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update the rsgroup section in our ref guide</summary>
      <description/>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.upgrading.adoc</file>
      <file type="M">src.main.asciidoc..chapters.ops.mgt.adoc</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2020-6-16 01:00:00" id="23997" opendate="2020-3-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Consider JDK11 in our support matrix</summary>
      <description>Let's figure out how we present our JDK11 story to eager users and operators.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.configuration.adoc</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2020-4-7 01:00:00" id="24134" opendate="2020-4-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Down forked JVM heap size from 2800m to 2200m for jdk8 and jdk11</summary>
      <description>Docker container we run tests in is hardcoded 20G. Our fork count is 0.25C currently. The jenkins machines are 16CPUs. 0.25C means 4CPUs so 4 forks running at any one time. Our current forked JVM heap size is 2800m if jdk8 or 3200m if jdk11. If we want to move our fork count to 0.5C, then that means 8 forks possibly running at once: i.e. 8 * 2800 = 22.4G... i.e. too big for the container. This issue is about running w/ smaller forked jvm heap size. If 2200m then, its 19.6G which is cutting it close but might allow us sqeeze through (mvn takes 4G!). Lets see.</description>
      <version>None</version>
      <fixedVersion>3.0.0-alpha-1,2.3.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.client.TestMultiRespectsLimits.java</file>
      <file type="M">dev-support.docker.Dockerfile</file>
    </fixedFiles>
  </bug>
  
  
</bugrepository>