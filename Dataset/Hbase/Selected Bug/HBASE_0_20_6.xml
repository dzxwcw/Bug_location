<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="HBASE">
  
  <bug fixdate="2010-10-13 01:00:00" id="2917" opendate="2010-8-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reseek directly to next row</summary>
      <description>When done with the current row, reseek directly to the next row rather than spending time reading more keys of current row which are not required.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2010-9-1 01:00:00" id="2944" opendate="2010-9-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cannot alter bloomfilter setting for a column family from hbase shell</summary>
      <description>hbase(main):002:0&gt; create 't1', 'cf'create 't1', 'cf'0 row(s) in 1.1320 secondshbase(main):003:0&gt; disable 't1'disable 't1'0 row(s) in 1.0810 secondshbase(main):004:0&gt; alter 't1', {NAME =&gt; 'cf', BLOOMFILTER =&gt; 'ROW'}alter 't1', {NAME =&gt; 'cf', BLOOMFILTER =&gt; 'ROW'}ERROR: no constructor with arguments matching [class org.jruby.java.proxies.ArrayJavaProxy, class org.jruby.RubyFixnum, class org.jruby.RubyString, class org.jruby.RubyBoolean, class org.jruby.RubyBoolean, class org.jruby.RubyFixnum, class org.jruby.RubyFixnum, class org.jruby.RubyBoolean, class org.jruby.RubyFixnum] on object #&lt;Java::OrgApacheHadoopHbase::HColumnDescriptor:0x1e4218cb&gt;</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.ruby.hbase.admin.rb</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2010-9-20 01:00:00" id="3017" opendate="2010-9-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>More log pruning</summary>
      <description>This issue covers some tightening up of log messages; as is all of the zk noise tends to overwhelm.For example, zkwatcher logs a generic "This event happened in zk with path X and event type Y" but just after, there will be a log from the handler of this zk event with this subsequent log more descriptive. This change would make zkwatcher log at INFO by default rather than DEBUG cutting down on logging content (re-enabling DEBUG is easy to do if needed).</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.java.org.apache.hadoop.hbase.zookeeper.ZKAssign.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.MasterFileSystem.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">conf.log4j.properties</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.main.resources.hbase-webapps.master.master.jsp</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.regionserver.SplitTransaction.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-9-20 01:00:00" id="3018" opendate="2010-9-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bulk assignment on startup runs serially through the cluster servers assigning in bulk to one at a time</summary>
      <description>Multi-thread the bulk startup assignment of regions.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2010-9-22 01:00:00" id="3026" opendate="2010-9-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fixup of "missing" daughters on split is too aggressive</summary>
      <description>There is a bug in how we check for whether the daughters mentioned in parent region are present in .META. The check is done when we are processing a server shutdown. We're making the mistake of checking for presence of the daughter in the list of regions that used to live on the crashed server BUT fact of the matter is is that the daughter could just as well be rebalanced to another server.The upshot is that we are inserting into .META. and trying to assign regions that are already assigned.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.handler.ServerShutdownHandler.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2010-10-14 01:00:00" id="3111" opendate="2010-10-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>TestTableMapReduce broken up on hudson</summary>
      <description>So, test has failed for various reasons since fixed over last week or so. It is currently failing when the reducer starts up. Its failing because its not picking up the zk servers location; its using stale config.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.java.org.apache.hadoop.hbase.zookeeper.ZKUtil.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.mapreduce.TableOutputFormat.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.mapreduce.TableInputFormatBase.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.mapreduce.TableInputFormat.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.mapreduce.IdentityTableReducer.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-10-14 01:00:00" id="3113" opendate="2010-10-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Don&amp;#39;t reassign regions if cluster is being shutdown</summary>
      <description>On stop of a cluster, handling a close message, we'll go ahead and reassign regions as per normal though the cluster up flag is false. This is what cause the TestRegionRebalancing test to fail up on hudson just now, #1546.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.regionserver.RegionServerClosedException.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.ServerManager.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.ipc.HRegionInterface.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-5-16 01:00:00" id="3117" opendate="2010-10-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update Thrift to 0.5 version</summary>
      <description>Thrift 0.5 has been released already and we want to upgrade to at least 0.3 but 0.5 has a lot of improvements so that would be the best.Unfortunately the Java lib has changed so that we'll have to regenerate the current Thrift interface and fix the implementation (byte[] -&gt; ByteBuffer).They also have problems getting Thrift into a Maven repository so we'll need to do our current workaround again unfortunately and upload it to a repository. That would be Ryan's I think?I'll upload an updated thrift jar and a patch for the old Thrift code.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2010-11-27 01:00:00" id="3161" opendate="2010-10-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide option for Stargate to only serve GET requests</summary>
      <description>Provide option for Stargate to only serve GET requests. Hbase health check can utilize this option.</description>
      <version>0.20.6</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.java.org.apache.hadoop.hbase.rest.TestSchemaResource.java</file>
      <file type="M">src.test.java.org.apache.hadoop.hbase.rest.TestScannerResource.java</file>
      <file type="M">src.test.java.org.apache.hadoop.hbase.rest.TestRowResource.java</file>
      <file type="M">src.main.resources.hbase-default.xml</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.rest.SchemaResource.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.rest.ScannerResource.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.rest.ScannerInstanceResource.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.rest.RowResource.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.rest.RESTServlet.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.rest.Main.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.rest.Constants.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2010-11-5 01:00:00" id="3204" opendate="2010-11-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reenable deferred log flush</summary>
      <description>Deferred log flush was disabled a few months ago, reenable it and make it false by default.</description>
      <version>None</version>
      <fixedVersion>0.90.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.java.org.apache.hadoop.hbase.regionserver.wal.HLog.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.HTableDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-11-23 01:00:00" id="3273" opendate="2010-11-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Set the ZK default timeout to 3 minutes</summary>
      <description>Following HBASE-3272, Stack suggested that we up the ZK timeout and proposed that we set it to 3 minutes (he said that last part in person). This should cover most of the big GC pauses out there.</description>
      <version>None</version>
      <fixedVersion>0.90.0,0.92.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.resources.hbase-default.xml</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.zookeeper.ZKUtil.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.zookeeper.HQuorumPeer.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.HMasterCommandLine.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">src.docbkx.book.xml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2010-1-3 01:00:00" id="3305" opendate="2010-12-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow round-robin distribution for table created with multiple regions</summary>
      <description>We can distribute the initial regions created for a new table in round-robin fashion.</description>
      <version>0.20.6</version>
      <fixedVersion>0.90.1,0.92.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.java.org.apache.hadoop.hbase.client.TestAdmin.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.LoadBalancer.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-1-18 01:00:00" id="3373" opendate="2010-12-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow regions to be load-balanced by table</summary>
      <description>From our experience, cluster can be well balanced and yet, one table's regions may be badly concentrated on few region servers.For example, one table has 839 regions (380 regions at time of table creation) out of which 202 are on one server.It would be desirable for load balancer to distribute regions for specified tables evenly across the cluster. Each of such tables has number of regions many times the cluster size.</description>
      <version>0.20.6</version>
      <fixedVersion>0.94.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.java.org.apache.hadoop.hbase.TestRegionRebalancing.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.HMaster.java</file>
      <file type="M">src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-3-19 01:00:00" id="3374" opendate="2010-12-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Our jruby jar has *GPL jars in it; fix</summary>
      <description>The latest JRuby's complete jar bundles *GPL jars (JNA and JFFI among others). It looks like the functionality we depend on &amp;#8211; the shell in particular &amp;#8211; makes use of these dirty jars so they are hard to strip. They came in because we (I!) just updated our JRuby w/o checking in on what updates contained. JRuby has been doing this for a while now (1.1.x added the first LGPL). You have to go all the ways back to the original HBase checkin, HBASE-487, of JRuby &amp;#8211; 1.0.3 &amp;#8211; to get a JRuby w/o *GPL jars.Plan is to try and revert our JRuby all the ways down to 1.0.3 before shipping 0.90.0. Thats what this issue is about.We should also look into moving off JRuby in the medium to long-term. Its kinda awkward sticking on an old version that is no longer supported. I'll open an issue for that.</description>
      <version>None</version>
      <fixedVersion>0.92.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.java.org.apache.hadoop.hbase.client.TestShell.java</file>
      <file type="M">src.main.ruby.shell.commands.list.rb</file>
      <file type="M">src.main.ruby.shell.commands.balance.switch.rb</file>
      <file type="M">src.main.ruby.hbase.table.rb</file>
      <file type="M">src.main.ruby.hbase.replication.admin.rb</file>
      <file type="M">src.main.ruby.hbase.hbase.rb</file>
      <file type="M">src.main.ruby.hbase.admin.rb</file>
      <file type="M">src.main.ruby.hbase.rb</file>
      <file type="M">pom.xml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>