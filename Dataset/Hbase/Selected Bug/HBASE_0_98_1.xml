<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="HBASE">
  
  
  <bug fixdate="2008-12-24 01:00:00" id="1027" opendate="2008-11-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make global flusher check work with percentages rather than hard code memory sizes.</summary>
      <description>Currently defaults are 512M for upperbound and 256 for the lowerbound. Comes of HBASE-1023.</description>
      <version>None</version>
      <fixedVersion>0.19.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.TestGlobalMemcacheLimit.java</file>
      <file type="M">conf.hbase-default.xml</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.MemcacheFlusher.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-4-25 01:00:00" id="10823" opendate="2014-3-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Resolve LATEST_TIMESTAMP to current server time before scanning for ACLs</summary>
      <description>Storing values with timestamps in the future is probably bad practice and can lead to surprises. If cells with timestamps in the future have ACLs, permissions from those ACLs will incorrectly be considered for authorizing the pending mutation. For sure that will be surprising.We should be able to avoid this case by resolving LATEST_TIMESTAMP to the current server time when creating the internal scanner for finding ACLs in the covered cell set. Documenting a todo item from a discussion between anoop.hbase and myself.</description>
      <version>0.98.1</version>
      <fixedVersion>0.99.0,0.98.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.security.access.TestCellACLWithMultipleVersions.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.security.access.TestCellACLs.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.TableAuthManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessController.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-3-25 01:00:00" id="10824" opendate="2014-3-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enhance detection of protobuf generated code in line length check</summary>
      <description>In review of HBASE-5175, Anoop found that long line detection wasn't very effective for protobuf generated code.Here is one example:-1 lineLengths. The patch introduces the following lines longer than 100:+ private DoubleMsg(boolean noInit){ this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }This is current filter: lines=`cat $PATCH_DIR/patch | grep "^+" | grep -v "^@@" | grep -v "^+++" | grep -v "import" | grep -v "hbase.protobuf.generated" | awk -v len="$MAX_LINE_LENGTH_PATCH" 'length ($0) &gt; len' | head -n 10`'com.google.protobuf.' should be considered as well.</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">dev-support.test-patch.sh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-3-26 01:00:00" id="10842" opendate="2014-3-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Some loggers not declared static final</summary>
      <description>In a few of source files, the logger is defined as private final Log LOG = LogFactory.getLog(MyClass.class);This should be changed to static final.One question is about the following declaration:private final Log LOG = LogFactory.getLog(this.getClass());In this form, the logger can be shared by derived classes. But one will get NPE when logging in methods that are invoked inside the constructors.</description>
      <version>0.98.1,0.96.1.1</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.RegionSizeCalculator.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.OfflineCallback.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapred.TableOutputFormat.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapred.TableInputFormatBase.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapred.TableInputFormat.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapred.HRegionPartitioner.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapreduce.TableOutputFormat.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapreduce.TableInputFormat.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapreduce.HRegionPartitioner.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-9-1 01:00:00" id="10886" opendate="2014-4-1 00:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>add htrace-zipkin to the runtime dependencies again</summary>
      <description>Once htrace-zipkin was removed from depencencies in HBASE-9700. Because all of the depencencies of htrace-zipkin is bundled with HBase now, it is good to add it for the ease of use.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.tracing.xml</file>
      <file type="M">pom.xml</file>
      <file type="M">hbase-shell.pom.xml</file>
      <file type="M">hbase-server.pom.xml</file>
      <file type="M">hbase-it.pom.xml</file>
      <file type="M">hbase-client.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-4-1 01:00:00" id="10888" opendate="2014-4-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enable distributed log replay as default</summary>
      <description>Enable 'distributed log replay' by default. Depends on hfilev3 being enabled.</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.wal.HLogSplitter.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.SplitLogManager.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.handler.LogReplayHandler.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.handler.CreateTableHandler.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.DeadServer.java</file>
      <file type="M">hbase-common.src.main.resources.hbase-default.xml</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.HConstants.java</file>
      <file type="M">hbase-client.src.main.java.org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper.java</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2014-4-10 01:00:00" id="10952" opendate="2014-4-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>[REST] Let the user turn off block caching if desired</summary>
      <description>After HBASE-10884 the REST gateway will use scanner defaults with respect to block caching. Add support for a query parameter for hinting blocks for the query should not be cached. Enable block caching by default.</description>
      <version>0.98.1,0.99.0</version>
      <fixedVersion>0.99.0,0.98.2</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.rest.model.TestScannerModel.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.rest.model.TestModelBase.java</file>
      <file type="M">hbase-server.src.main.resources.org.apache.hadoop.hbase.rest.XMLSchema.xsd</file>
      <file type="M">hbase-server.src.main.resources.org.apache.hadoop.hbase.rest.protobuf.ScannerMessage.proto</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.ScannerResultGenerator.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.ScannerResource.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.RowResultGenerator.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.RowResource.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.ResultGenerator.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.protobuf.generated.ScannerMessage.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.MultiRowResource.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.model.ScannerModel.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.Constants.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-4-10 01:00:00" id="10956" opendate="2014-4-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade hadoop-2 dependency to 2.4.0</summary>
      <description>Hadoop 2.4.0 has been released:http://search-hadoop.com/m/LgpTk2YKhUfThis JIRA is to upgrade hadoop-2 dependency to 2.4.0</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2009-1-1 01:00:00" id="1105" opendate="2009-1-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove duplicated code in HCM, add javadoc to RegionState, etc.</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.19.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.hadoop.hbase.master.RegionManager.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.client.HConnectionManager.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.HBase.rb</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2014-6-30 01:00:00" id="11102" opendate="2014-4-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document JDK versions supported by each release</summary>
      <description>We can make use of a JDK version x HBase version matrix to explain which JDK version is supported and required. 0.94, 0.96, and 0.98 releases all support JDK6 and JDK7. For 1.0, there is a discussion thread to decide whether to drop JDK6 support. There has been some work to support JDK8. We can also document that.</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.getting.started.xml</file>
      <file type="M">src.main.docbkx.configuration.xml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-8-31 01:00:00" id="11629" opendate="2014-7-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Operational concerns for Replication should call out ZooKeeper</summary>
      <description>Our design invariants state that ZooKeeper data is safe to delete. However, replication only stores its data in zookeeper. This can lead to operators accidentally disabling their replication set up while attempting to recover from an unrelated issue by clearing the zk state.We should update the operational concerns section on replication to call out that the /hbase/replication tree should not be deleted. We should probably also add a warning to the set up steps.</description>
      <version>None</version>
      <fixedVersion>2.0.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.ops.mgt.xml</file>
      <file type="M">src.main.docbkx.developer.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-10-7 01:00:00" id="12983" opendate="2015-2-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>HBase book mentions hadoop.ssl.enabled when it should be hbase.ssl.enabled</summary>
      <description>In the HBase book we say the following:A default HBase install uses insecure HTTP connections for web UIs for the master and region servers. To enable secure HTTP (HTTPS) connections instead, set hadoop.ssl.enabled to true in hbase-site.xml. This does not change the port used by the Web UI. To change the port for the web UI for a given HBase component, configure that port’s setting in hbase-site.xml. These settings are:The property should be hbase.ssl.enabled instead.</description>
      <version>None</version>
      <fixedVersion>2.0.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.asciidoc..chapters.security.adoc</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-12-26 01:00:00" id="9346" opendate="2013-8-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>HBCK should provide an option to check if regions boundaries are the same in META and in stores.</summary>
      <description>If META don't have the same region boundaries as the stores files, writes and read might go to the wrong place. We need to provide a way to check that withing HBCK.</description>
      <version>0.94.14,0.98.1,0.99.0,0.96.1.1</version>
      <fixedVersion>0.98.0,0.94.16,0.96.2,0.99.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.util.HBaseFsck.java</file>
    </fixedFiles>
  </bug>
</bugrepository>