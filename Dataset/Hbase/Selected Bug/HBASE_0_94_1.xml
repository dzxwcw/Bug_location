<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="HBASE">
  
  
  
  
  
  <bug fixdate="2012-5-27 01:00:00" id="5888" opendate="2012-4-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Clover profile in build</summary>
      <description>Clover is disabled right now. I would like to add a profile that enables clover reports. We can also backport this to 0.92, and 0.94, since we are also interested in test coverage for those branches.</description>
      <version>0.92.2,0.94.1,0.95.2</version>
      <fixedVersion>0.94.4,0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-5-16 01:00:00" id="6022" opendate="2012-5-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Include Junit in the libs when packaging so that TestAcidGaurntee can run</summary>
      <description>If JUnit is not in the libs folder running the test acid command fails.</description>
      <version>None</version>
      <fixedVersion>0.94.1</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-16 01:00:00" id="6023" opendate="2012-5-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Normalize security audit logging level with Hadoop</summary>
      <description>A pretty trivial change, we log failed authentication attempts at WARN level, as does Hadoop, but log successful authentication at TRACE level, where Hadoop instead logs it at INFO level.</description>
      <version>0.92.2,0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.java.org.apache.hadoop.hbase.ipc.HBaseServer.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-8-5 01:00:00" id="6165" opendate="2012-6-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Replication can overrun .META. scans on cluster re-start</summary>
      <description>When restarting a large set of regions on a reasonably small cluster the replication from another cluster tied up every xceiver meaning nothing could be onlined.</description>
      <version>None</version>
      <fixedVersion>0.94.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestPriorityRpc.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.ipc.HBaseServer.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.ipc.HBaseRpcMetrics.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.HConstants.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-6-5 01:00:00" id="6167" opendate="2012-6-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix xinclude for docs broke when we multi-moduled</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-6-7 01:00:00" id="6188" opendate="2012-6-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove the concept of table owner</summary>
      <description>The table owner concept was a design simplification in the initial drop.First, the design changes under review means only a user with GLOBAL CREATE permission can create a table, which will probably be an administrator.Then, granting implicit permissions may lead to oversights and it adds unnecessary conditionals to our code. So instead the administrator with GLOBAL CREATE permission should make the appropriate grants at table create time.</description>
      <version>0.94.0,0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.security.access.TestAccessController.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessControlLists.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessController.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.HTableDescriptor.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-6-8 01:00:00" id="6192" opendate="2012-6-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document ACL matrix in the book</summary>
      <description>We have an excellent matrix at https://issues.apache.org/jira/secure/attachment/12531252/Security-ACL%20Matrix.pdf for ACL. Once the changes are done, we can adapt that and put it in the book, also add some more documentation about the new authorization features.</description>
      <version>0.94.1,0.95.2</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.security.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2008-5-9 01:00:00" id="621" opendate="2008-5-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make MAX_VERSIONS work like TTL: In scans and gets, check MAX_VERSIONs setting and return that many only rather than wait on compaction</summary>
      <description>HBASE-47 added specification of TTL on cells. The implementation checks cell timestamp against configured TTL before returning results scanning or getting. You can also set the maximum versions of a cell to keep. The maximum versions is not checked scanning or getting, only when we compact (We'll drop cells that are beyond the maximum version at compaction time). This issue is about adding check for maximum versions to gets and scans so that if you ask for all versions but have configured the store to only keep 3 versions, though 4 may have been inserted, you'll currently get 4 returned (if compactions have not had a chance to run).</description>
      <version>None</version>
      <fixedVersion>0.2.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.test.org.apache.hadoop.hbase.regionserver.TestCompaction.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.Memcache.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
      <file type="M">src.java.org.apache.hadoop.hbase.HConstants.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-6-14 01:00:00" id="6211" opendate="2012-6-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Put latencies in jmx</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.94.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.metrics.TestMetricsMBeanBase.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.metrics.MetricsMBeanBase.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.metrics.histogram.MetricsHistogram.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-6-18 01:00:00" id="6229" opendate="2012-6-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>AM.assign() should not set table state to ENABLED directly.</summary>
      <description>In case of assign from EnableTableHandler table state is ENABLING. Any how EnableTableHandler will set ENABLED after assigning all the the table regions. If we try to set to ENABLED directly then client api may think ENABLE table is completed. When we have a case like all the regions are added directly into META and we call assignRegion then we need to make the table ENABLED. Hence in such case the table will not be in ENABLING or ENABLED state.</description>
      <version>0.92.2,0.94.1</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.AssignmentManager.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2012-6-19 01:00:00" id="6238" opendate="2012-6-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Grant on META not taking effect</summary>
      <description>User is not able to perform authorized operations on Meta.</description>
      <version>0.94.0,0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessControlLists.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-6-20 01:00:00" id="6247" opendate="2012-6-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>[REST] HTablePool.putTable is deprecated</summary>
      <description>HTablePool.putTable is deprecated, use returnTable instead.</description>
      <version>0.92.2,0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.SchemaResource.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.ScannerResultGenerator.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.RowResultGenerator.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.RowResource.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.rest.RegionsResource.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-6-21 01:00:00" id="6252" opendate="2012-6-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>TABLE ADMIN should be allowed to relocate regions</summary>
      <description/>
      <version>0.94.0,0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.security.access.TestAccessController.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessController.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-7-21 01:00:00" id="6253" opendate="2012-6-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do not allow user to disable or drop ACL table</summary>
      <description>Currently HTableDescriptor.isLegalTableName API doesn't check for the acl table name, due to this user can able to disable/enable/drop/create the acl table.</description>
      <version>0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.security.access.TestAccessController.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessController.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-7-5 01:00:00" id="6332" opendate="2012-7-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve POM for better integration with downstream ivy projects</summary>
      <description>Currently there are 2 issues affecting the downstream ivy projects: no default value for slf4j.version dependency on a non-standard junit artifactI suggest we correct both of these in order to ensure the smooth upgrade path for things like Sqoop.</description>
      <version>0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-7-8 01:00:00" id="6355" opendate="2012-7-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow HBase to compile against JDK7</summary>
      <description/>
      <version>0.94.1,0.95.2</version>
      <fixedVersion>0.94.1,0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2012-5-12 01:00:00" id="6562" opendate="2012-8-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fake KVs are sometimes passed to filters</summary>
      <description>In internal tests at Salesforce we found that fake row keys sometimes are passed to filters (Filter.filterRowKey(...) specifically).The KVs are eventually filtered by the StoreScanner/ScanQueryMatcher, but the row key is passed to filterRowKey in RegionScannImpl before that happens.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.KeyValue.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-9-13 01:00:00" id="6564" opendate="2012-8-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>HDFS space is not reclaimed when a column family is deleted</summary>
      <description>When a column family of a table is deleted, the HDFS space of the column family does not seem to be reclaimed even after a major compaction.</description>
      <version>0.94.1</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.HBaseTestingUtility.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.MasterFileSystem.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.master.handler.TableDeleteFamilyHandler.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-8-22 01:00:00" id="6633" opendate="2012-8-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Adding new hooks to the split flow - For roll backs and one final hook after split is completed either successfully or failed</summary>
      <description>Currently we have two hooks in the split flow of a region. PreSplit() and postSplit(). But not always these are helpful in case i have a problem in preSplit() or postSplit() i need to do a rollback of the current region or the region that i am handling thro the hooks.So its better if we have a hook in the rollback code and also one final hook say postCompleteSplit() so that CP can take any corrective action.Pls do suggest if i can provide a patch for this.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.security.access.TestAccessController.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestSplitTransaction.java</file>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.coprocessor.TestCoprocessorInterface.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.security.access.AccessController.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.SplitTransaction.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.SplitRequest.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.coprocessor.RegionObserver.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.coprocessor.BaseRegionObserver.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-11-25 01:00:00" id="6665" opendate="2012-8-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ROOT region should not be splitted even with META row as explicit split key</summary>
      <description>split operation on ROOT table by specifying explicit split key as .META.closing the ROOT region and taking long time to fail the split before rollback.I think we can skip split for ROOT table as how we are doing for META region.</description>
      <version>None</version>
      <fixedVersion>0.94.3,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.client.TestAdmin.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegion.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-1-30 01:00:00" id="6694" opendate="2012-8-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Test scanner batching in export job feature HBASE-6372 AND report on improvement HBASE-6372 adds</summary>
      <description>From tail of HBASE-6372, Jon had raised issue that test added did not actually test the feature. This issue is about adding a test of HBASE-6372. We should also have numbers for the improvement that HBASE-6372 brings.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.mapreduce.TestImportExport.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.mapreduce.Export.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2012-6-31 01:00:00" id="6701" opendate="2012-8-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Revisit thrust of paragraph on splitting</summary>
      <description>See the thread 'md5 hash key and splits' for the confusion our paragraph on splitting seems to bring on (as well as good input on when manual splitting might be favored). The user is under the impression that he needs to manually split though his keys have md5 salt. The paragraph needs to make sure it does not bring on such confusion as it would seem to in this case.</description>
      <version>None</version>
      <fixedVersion>0.99.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.docbkx.configuration.xml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2012-9-17 01:00:00" id="6798" opendate="2012-9-17 00:00:00" resolution="Duplicate">
    <buginformation>
      <summary>HDFS always read checksum form meta file</summary>
      <description>I use hbase0.941 and hadoop-0.20.2-cdh3u5 version.The HBase support checksums in HBase block cache in HBASE-5074 jira.The HBase support checksums for decrease the iops of HDFS, so that HDFSdont't need to read the checksum from meta file of block file.But in hadoop-0.20.2-cdh3u5 version, BlockSender still read the metadata file even if the hbase.regionserver.checksum.verify property is ture.</description>
      <version>0.94.0,0.94.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.docbkx.performance.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-9-19 01:00:00" id="6838" opendate="2012-9-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Regionserver may generate identical scanner name</summary>
      <description>In current implementation of HRegionserver#addScanner, it may generate same scanner name, thus make scanner confusion.</description>
      <version>0.94.1</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HRegionServer.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-9-21 01:00:00" id="6853" opendate="2012-9-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>IllegalArgumentException is thrown when an empty region is splitted</summary>
      <description>This is w.r.t a mail sent in the dev mail list.Empty region split should be handled gracefully. Either we should not allow the split to happen if we know that the region is empty or we should allow the split to happen by setting the no of threads to the thread pool executor as 1.int nbFiles = hstoreFilesToSplit.size();ThreadFactoryBuilder builder = new ThreadFactoryBuilder(); builder.setNameFormat("StoreFileSplitter-%1$d"); ThreadFactory factory = builder.build(); ThreadPoolExecutor threadPool = (ThreadPoolExecutor) Executors.newFixedThreadPool(nbFiles, factory); List&lt;Future&lt;Void&gt;&gt; futures = new ArrayList&lt;Future&lt;Void&gt;&gt;(nbFiles);Here the nbFiles needs to be a non zero positive value.</description>
      <version>0.92.1,0.94.1</version>
      <fixedVersion>0.94.2</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.SplitTransaction.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-9-23 01:00:00" id="6869" opendate="2012-9-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update our hadoop-2 to 2.0.1-alpha</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2012-4-2 01:00:00" id="6915" opendate="2012-10-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>String and ConcurrentHashMap sizes change on jdk7; makes TestHeapSize fail</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.98.0,0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-common.src.main.java.org.apache.hadoop.hbase.util.ClassSize.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-10-2 01:00:00" id="6917" opendate="2012-10-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Trunk jdk7 build broke because we moved to zk 3.4.4</summary>
      <description>Chatted w/ Mahadev and he confirmed issues running 3.4.4 w/ jdk7. Will be fixed in zk3.4.5.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-11-9 01:00:00" id="6965" opendate="2012-10-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Generic MXBean Utility class to support all JDK vendors</summary>
      <description>This issue is related to JIRA https://issues.apache.org/jira/browse/HBASE-6945. This issue is opened to propose the use of a newly created generic org.apache.hadoop.hbase.util.OSMXBean class that can be used by other classes. JIRA HBASE-6945 contains a patch for the class org.apache.hadoop.hbase.ResourceChecker that uses OSMXBean. With the inclusion of this new class, HBase can be built and become functional with JDKs and JREs other than what is provided by Oracle. This class uses reflection to determine the JVM vendor (Sun, IBM) and the platform (Linux or Windows), and contains other methods that return the OS properties - 1. Number of Open File descriptors; 2. Maximum number of File Descriptors. This class compiles without any problems with IBM JDK 7, OpenJDK 6 as well as Oracle JDK 6. Junit tests (runDevTests category) completed without any failures or errors when tested on all the three JDKs.The builds and tests were attempted on branch hbase-0.94 Revision 1396305.</description>
      <version>0.94.1</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-common.pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2012-12-25 01:00:00" id="7436" opendate="2012-12-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve stack trace info dumped by ForeignExceptionSnare#rethrowException</summary>
      <description>Currently the way rethrowException works it throws an exception with the stack where the ForeignException was locally created (normally where it gets deserialized, and with a getCause with the stack of the original thread on the remote thread.Unfortunately, this doesn't provide any in formation about which call to rethrowException locally tripped over the exception. This simple patch wraps again to get the stack info which provides this missing context.</description>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.errorhandling.TestForeignExceptionDispatcher.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.errorhandling.ForeignExceptionDispatcher.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-26 01:00:00" id="7437" opendate="2012-12-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve CompactSelection</summary>
      <description>1. Using AtomicLong makes CompactSelection simple and improve its performance.2. There are unused fields and methods.3. The fields should be private.4. Assertion in the method finishRequest seems wrong: public void finishRequest() { if (isOffPeakCompaction) { long newValueToLog = -1; synchronized(compactionCountLock) { assert !isOffPeakCompaction : "Double-counting off-peak count for compaction";The above assertion seems almost always false.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">hbase-server.src.test.java.org.apache.hadoop.hbase.regionserver.TestOffPeakCompactions.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.HStore.java</file>
      <file type="M">hbase-server.src.main.java.org.apache.hadoop.hbase.regionserver.compactions.OffPeakCompactions.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-12-28 01:00:00" id="7446" opendate="2012-12-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make the reference guide utf8 rather than 8859</summary>
      <description/>
      <version>None</version>
      <fixedVersion>0.95.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.docbkx.customization.xsl</file>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
</bugrepository>