<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="4003" opendate="2020-5-14 00:00:00" fixdate="2020-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In MaterializationTest, FilterProjectTransposeRule matches with logical and physical convention</summary>
      <description>In MaterializationTest.testMaterializationSubstitution2, FilterProjectTransposeRule matches with logical and physical convention at the same time, that means, LogicalFilter and EnumerableProject. We should check and prevent this from happening.</description>
      <version>None</version>
      <fixedVersion>1.24.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.history.md</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.SortRemoveRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ProjectRemoveRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.VolcanoRuleCall.java</file>
    </fixedFiles>
  </bug>
  <bug id="4007" opendate="2020-5-18 00:00:00" fixdate="2020-6-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>MergeJoin collation check should not be limited to join key&amp;#39;s order</summary>
      <description>Given MergeJoin on foo.a=bar.a and foo.b=bar.b,The collation check on MergeJoin always require it is sorted by (a,b), but after 1.23.0 calcite can generate MergeJoin on collation of (b,a), or even (a,b,c), (b,a,c), which are all legit. We should relax the check condition.</description>
      <version>None</version>
      <fixedVersion>1.24.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlHintsConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlHintsConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.rel.RelCollationTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.ImmutableIntList.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.RelCollations.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.RelCollation.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdCollation.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableMergeJoin.java</file>
    </fixedFiles>
  </bug>
  <bug id="403" opendate="2014-9-5 00:00:00" fixdate="2014-11-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enumerable gives NullPointerException with NOT on nullable expression</summary>
      <description>Foodmart query #6597select "store"."store_country" as "c0", "store"."store_state" as "c1", "store"."store_city" as "c2", "store"."store_name" as "c3", "Store"."store_type" as "c4", "store"."store_manager" as "c5", "store"."store_sqft" as "c6", "store"."grocery_sqft" as "c7", "store"."frozen_sqft" as "c8", "store"."meat_sqft" as "c9", "store"."coffee_bar" as "c10", "store"."store_street_address" as "c11"from "store" as "store"group by "store"."store_country", "store"."store_state", "store"."store_city", "store"."store_name", "store"."store_type", "store"."store_manager", "store"."store_sqft", "store"."grocery_sqft", "store"."frozen_sqft", "store"."meat_sqft", "store"."coffee_bar", "store"."store_street_address"having NOT((((sum("store"."store_sqft") - sum("store"."grocery_sqft")) &lt; 10000)) )order by "store"."store_country" ASC NULLS LAST, "store"."store_state" ASC NULLS LAST, "store"."store_city" ASC NULLS LAST, "store"."store_name" ASC NULLS LASTgives the following stack:java.lang.NullPointerException at Baz$6$1.moveNext(Unknown Source) at net.hydromatic.optiq.runtime.ObjectEnumeratorCursor.next(ObjectEnumeratorCursor.java:43) at net.hydromatic.avatica.AvaticaResultSet.next(AvaticaResultSet.java:186) at net.hydromatic.optiq.test.OptiqAssert.countRows(OptiqAssert.java:493)More minimal test case:select 1from "store"group by "store_street_address"having NOT (sum("grocery_sqft") &lt; 10000)</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexImpTable.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.ReflectiveSchemaTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="4031" opendate="2020-5-29 00:00:00" fixdate="2020-6-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove code to be removed before 1.24</summary>
      <description></description>
      <version>1.23.0</version>
      <fixedVersion>1.24.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlWindow.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlSelectKeyword.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlMatchRecognize.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlJdbcDataTypeName.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlInsertKeyword.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlExplainLevel.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlExplainFormat.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlExplain.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.JoinType.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.JoinConditionType.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlTrimFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptNode.java</file>
      <file type="M">linq4j.src.test.java.org.apache.calcite.linq4j.function.FunctionTest.java</file>
      <file type="M">linq4j.src.main.java.org.apache.calcite.linq4j.function.Functions.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteAssert.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.AbstractMaterializedViewTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.ImmutableIntList.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.implicit.TypeCoercion.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.implicit.AbstractTypeCoercion.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.advise.SqlSimpleParser.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.advise.SqlAdvisor.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.SqlFunctions.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.Hook.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.DateRangeRules.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.hint.RelHint.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.hint.HintStrategyTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.hint.HintStrategy.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.hint.HintOptionChecker.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.VolcanoPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelTraitDef.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.AbstractRelOptPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.jdbc.ContextSqlValidator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.interpreter.Bindables.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.config.CalciteConnectionProperty.java</file>
    </fixedFiles>
  </bug>
  <bug id="4061" opendate="2020-6-11 00:00:00" fixdate="2020-6-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Build should fail if Calcite code uses deprecated APIs</summary>
      <description>Calcite build should fail if Calcite code uses deprecated APIs. This includes external APIs (e.g. Guava methods) and internal APIs (e.g. a deprecated class in the org.apache.calcite.util package).This used to occur when the build was powered by Maven.Compared to a policy where code is allowed to use deprecated APIs for a 'grace period', this policy has a number of advantages. One is that Calcite devs (or users) can upgrade dependencies at short notice, with no code changes.Another is that it forces people who are doing internal refactoring (replacing one internal Calcite API with another) to finish the job.vlsi Can you take this please? I can't figure out how to set javac's '-Xlint:deprecated -Werror' from Gradle.</description>
      <version>None</version>
      <fixedVersion>1.24.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">spark.src.main.java.org.apache.calcite.adapter.spark.HttpServer.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidRules.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlWindow.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlOverOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.Window.java</file>
      <file type="M">cassandra.src.main.java.org.apache.calcite.adapter.cassandra.CassandraSchema.java</file>
      <file type="M">build.gradle.kts</file>
    </fixedFiles>
  </bug>
  <bug id="4063" opendate="2020-6-12 00:00:00" fixdate="2020-6-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unnest an array of single-item structs causes ClassCastException</summary>
      <description>If we run the following queries with UNNEST operator, we get the expected results:select * from UNNEST(array[3, 4]) as T2(y);-- y=3-- y=4select * from UNNEST(array[array[3], array[4]]) as T2(y)-- y=[3]-- y=[4]select * from UNNEST(array[ROW(3), ROW(4)]) as T2(y)-- y=[3]-- y=[4]-- Is this result ok? (see first comment of the current ticket)However, if we try to combine them with a correlation with some other values, as we could do in more realistic examples: select * from dept_nested as d, UNNEST(d.employees) e2The first two return the expected results, but the last one throws an exception:select * from (values (1), (2)) T1(x), UNNEST(array[3, 4]) as T2(y);-- x=1; y=3-- x=1; y=4-- x=2; y=3-- x=2; y=4select * from (values (1), (2)) T1(x), UNNEST(array[array[3], array[4]]) as T2(y);-- x=1; y=[3]-- x=1; y=[4]-- x=2; y=[3]-- x=2; y=[4]select * from (values (1), (2)) T1(x), UNNEST(array[ROW(3), ROW(4)]) as T2(y);-- ERROR!!!-- java.lang.ClassCastException: org.apache.calcite.runtime.FlatLists$Flat1List cannot be cast to java.lang.Integer</description>
      <version>1.23.0</version>
      <fixedVersion>1.24.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.util.BuiltInMethod.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.SqlFunctions.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableUncollect.java</file>
    </fixedFiles>
  </bug>
  <bug id="4086" opendate="2020-6-23 00:00:00" fixdate="2020-6-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade Avatica version to 1.17.0</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.24.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">gradle.properties</file>
    </fixedFiles>
  </bug>
  <bug id="4089" opendate="2020-6-24 00:00:00" fixdate="2020-6-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In Babel, allow &amp;#39;CAST(integer AS DATE)&amp;#39; even though it is illegal in Calcite SQL</summary>
      <description>In Babel, allow 'CAST(integer AS DATE)', even though it is illegal in Calcite SQL (and standard SQL).Map it to valid standard SQL. BigQuery CAST(n AS DATE) is equivalent to Calcite DATE '1970-01-01' + n * INTERVAL '1' DAY.Also, add functions DATE_FROM_UNIX_DATE(INTEGER), UNIX_SECONDS(TIMESTAMP), UNIX_MILLIS(TIMESTAMP), UNIX_MICROS(TIMESTAMP), TIMESTAMP_SECONDS(BIGINT), TIMESTAMP_MILLIS(BIGINT), TIMESTAMP_MICROS(BIGINT) in the BigQuery library. They are well-named and well-specified, so they might be useful to people working in dialects besides BigQuery. DATE_FROM_UNIX_DATE(0) should return DATE '1970-01-01'.</description>
      <version>None</version>
      <fixedVersion>1.24.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.ReturnTypes.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.OperandTypes.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlLibraryOperators.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlLibrary.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.SqlFunctions.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.config.CalciteConnectionProperty.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexImpTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumUtils.java</file>
      <file type="M">babel.src.test.java.org.apache.calcite.test.BabelQuidemTest.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
