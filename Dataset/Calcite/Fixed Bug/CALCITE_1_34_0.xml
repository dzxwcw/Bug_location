<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="503" opendate="2014-12-1 00:00:00" fixdate="2014-1-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tests to check rules on Aggregate operator w/o grouping sets</summary>
      <description>Some rules on Aggregate operators are missing tests e.g. AggregateUnionAggregate.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="554" opendate="2015-1-8 00:00:00" fixdate="2015-1-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Outer join over NULL keys generates wrong result</summary>
      <description>Consider the following query, where both LHS and RHS contains NULL in the join keys: with t1(x) as (select * from (values (1),(2), (case when 1 = 1 then null else 3 end)) as t(x)), t2(x) as (select * from (values (1),(case when 1 = 1 then null else 3 end)) as t(x)) select t1.x from t1 left join t2 on t1.x = t2.xCalcite would return 2 rows, while the correct result seems to be 3 rows (including the row of null in T1). @Test public void testOutJoinNull() { String sql = " with \n" + " t1(x) as (select * from (values (1),(2), (case when 1 = 1 then null else 3 end)) as t(x)),\n" + " t2(x) as (select * from (values (1),(case when 1 = 1 then null else 3 end)) as t(x))\n" + " select t1.x from t1 left join t2 on t1.x = t2.x"; CalciteAssert.that().query(sql).returnsCount(3); }Caused by: java.lang.AssertionError: expected:&lt;3&gt; but was:&lt;2&gt;Here is the result for the same query, if run on Postgres9.3:mydb=# withmydb-# t1(x) as (select * from (values (1),(2), (case when 1 = 1 then null else 3 end)) as t(x)),mydb-# t2(x) as (select * from (values (1),(case when 1 = 1 then null else 3 end)) as t(x))mydb-# select t1.x from t1 left join t2 on t1.x = t2.xmydb-# ; x--- 1 2(3 rows)</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">linq4j.src.test.java.org.apache.calcite.linq4j.test.Linq4jTest.java</file>
      <file type="M">linq4j.src.main.java.org.apache.calcite.linq4j.EnumerableDefaults.java</file>
      <file type="M">core.src.test.resources.sql.outer.oq</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="561" opendate="2015-1-16 00:00:00" fixdate="2015-1-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade parent POM</summary>
      <description>Upgrade Calcite's parent POM from apache-14 to apache-16. This will implicitly upgrade many of the dependencies, especially the maven plugins we use during the build process (e.g. surefire plugin).</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">linq4j.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="567" opendate="2015-1-25 00:00:00" fixdate="2015-1-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make "quidem" dependency have scope "test"</summary>
      <description>Make "quidem" dependency have scope "test"</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="568" opendate="2015-1-25 00:00:00" fixdate="2015-1-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade to a version of pentaho-aggdesigner that does not pull in servlet-api</summary>
      <description>The pentaho-aggdesigner dependency pulls in commons-logging, which pulls in servlet-api. We should fix pentaho-aggdesigner https://github.com/julianhyde/pentaho-aggdesigner/issues/1, make a release, and upgrade to that fixed version.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="577" opendate="2015-1-29 00:00:00" fixdate="2015-3-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Revert temporary API changes introduced in [CALCITE-575]</summary>
      <description>The API changes introduced in CALCITE-575 are temporary. We should remove them before 1.1.</description>
      <version>None</version>
      <fixedVersion>1.1.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.RelFieldTrimmer.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ProjectRemoveRule.java</file>
    </fixedFiles>
  </bug>
  <bug id="580" opendate="2015-1-30 00:00:00" fixdate="2015-2-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Average aggregation on an Integer column throws java.lang.ClassCastException</summary>
      <description>There are 2 Integer columns: a, c in table abc.While running the following sql, it throw the ClassCastException:select a, avg(c) as agg from abc group by aException in thread "main" java.lang.ClassCastException: java.lang.Long incompatible with java.lang.Integer at org.apache.calcite.avatica.util.AbstractCursor$IntAccessor.getInt(AbstractCursor.java:460) at org.apache.calcite.avatica.AvaticaResultSet.getInt(AvaticaResultSet.java:311)The generated code that I think causing the issue, it try to cast the result to long.public Object current() { final Object[] current = (Object[]) inputEnumerator.current(); return new Object[] { current[0], (long) org.apache.calcite.runtime.SqlFunctions.toInt(current[1]) / org.apache.calcite.runtime.SqlFunctions.toLong(current[2])};}</description>
      <version>None</version>
      <fixedVersion>1.1.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.ReflectiveSchemaTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.JavaRowFormat.java</file>
    </fixedFiles>
  </bug>
  <bug id="583" opendate="2015-2-1 00:00:00" fixdate="2015-2-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Operator `||` mishandled ANY type</summary>
      <description>For instance, select ANY type || ANY type ... leads assertion error from:assert (precision &gt;= 0) || (precision == RelDataType.PRECISION_NOT_SPECIFIED);(SqlTypeFactoryImpl.java( line: 62))Essentially, it is because, SqlReturnTypeInference of `||` is DYADIC_STRING_SUM_PRECISION. When doing inference for the return type, there is one data field in DYADIC_STRING_SUM_PRECISION called "precision", which is calculated as arg0.precison + arg1.precision.However, for ANY type, the precision is defined as -1. So the above calculation will give "-2" for ANY type operands, in turn, breaking up the assertion.Moreover, `||` can fail when the two operands have different types (e.g., ANY type || String). In the No schema system, ANY type can be quite prevalent. For example, select ANY type || string || ANY type ... where, in addition to two ANY types on two sides, we have a string in between.</description>
      <version>None</version>
      <fixedVersion>1.1.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.ReturnTypes.java</file>
    </fixedFiles>
  </bug>
  <bug id="586" opendate="2015-2-4 00:00:00" fixdate="2015-2-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Serializing Signature.internalParameters can cause exceptions</summary>
      <description>Observed exceptions:java.lang.AssertionError: nullat org.apache.calcite.rel.type.RelDataTypeImpl.getFieldList(RelDataTypeImpl.java:138) ~[calcite-core-1.0.0-incubating-SNAPSHOT.jar:1.0.0-incubating-SNAPSHOT]at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_25]at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_25]at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_25]at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_25]at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:466) ~[jackson-databind-2.4.2.jar:2.4.2]And in https://github.com/devth/calcite-map-demo:java.lang.RuntimeException: com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class org.apache.calcite.sql.type.SqlTypeExplicitPrecedenceList and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.apache.calcite.avatica.remote.ResultSetResponse["signature"]-&gt;org.apache.calcite.avatica.Signature["internalParameters"]-&gt;java.util.LinkedHashMap["v0stashed"]-&gt;com.google.common.collect.RegularImmutableList[0]-&gt;org.apache.calcite.rex.RexCall["operands"]-&gt;com.google.common.collect.RegularImmutableList[0]-&gt;org.apache.calcite.rex.RexInputRef["type"]-&gt;org.apache.calcite.sql.type.MapSqlType["keyType"]-&gt;org.apache.calcite.sql.type.BasicSqlType["precedenceList"]) at org.apache.calcite.avatica.remote.JsonHandler.handle(JsonHandler.java:61) ~[calcite-avatica-1.0.0-incubating.jar:1.0.0-incubating] at org.apache.calcite.avatica.remote.JsonHandler.apply(JsonHandler.java:46) ~[calcite-avatica-1.0.0-incubating.jar:1.0.0-incubating] at org.apache.calcite.avatica.server.AvaticaHandler.handle(AvaticaHandler.java:47) ~[calcite-avatica-server-1.0.0-incubating.jar:1.0.0-incubating]Pull request:https://github.com/apache/incubator-calcite/pull/48</description>
      <version>None</version>
      <fixedVersion>1.1.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">doc.HISTORY.md</file>
    </fixedFiles>
  </bug>
</bugrepository>
