<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="420" opendate="2014-9-22 00:00:00" fixdate="2014-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add REPLACE character string function</summary>
      <description>Oracle and MSSQL have a REPLACE function (see http://docs.oracle.com/cd/B19306_01/server.102/b14200/functions134.htm). It is not in the SQL standard, and in fact the standard has no equivalent function.Syntax:REPLACE(char, search_string [, replace_string])REPLACE is not a reserved word. Therefore the implementation will need to add REPLACE to CommonNonReservedKeyWord() in the parser.Note that Drill and potentially other users of Optiq use REPLACE as part of CREATE OR REPLACE syntax. Careful not to break that.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.BuiltInMethod.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlJdbcFunctionCall.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.SqlFunctions.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexImpTable.java</file>
    </fixedFiles>
  </bug>
  <bug id="429" opendate="2014-9-30 00:00:00" fixdate="2014-6-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add statistics SPI for lattice optimization algorithm</summary>
      <description>In OPTIQ-427 we added an an optimization algorithm to choose an initial set of tiles to materialize. The rowCountEstimate attribute is the number of rows in the lattice.Add an SPI to generate estimates of (a) the number of rows in the lattice, (b) the number of rows in a given tile of the lattice (specified by its dimensions).Also add a default implementation of the SPI that executes SQL queries, caches the results, and uses some kind of approximation for the cardinalities of sets of attributes e.g. if quarter has 4 distinct values and year has 10 distinct values then (year, quarter) has 40 distinct values (or perhaps an expectation of 39.79 distinct values in a table with 3,650 rows, per the formula n . (1 - ((n - 1) / n) ^ p)).Implementations that read stats from external stats tables, or execute SQL that samples a small percentage of the rows, would also be possible.</description>
      <version>None</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.model.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.LatticeTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.model.ModelHandler.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.model.JsonLattice.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.materialize.Lattice.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.ConnectionConfigImpl.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.AvaticaUtils.java</file>
      <file type="M">avatica.pom.xml</file>
      <file type="M">avatica-server.src.test.java.org.apache.calcite.avatica.test.AvaticaSuite.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
