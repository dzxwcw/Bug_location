<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="492" opendate="2014-11-30 00:00:00" fixdate="2014-1-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support UPSERT statement in parser</summary>
      <description>Support an UPSERT VALUES and UPSERT SELECT statement in Calcite. These have the same syntax as INSERT VALUES and INSERT SELECT, but they insert the row if it doesn't already exist and update it otherwise. This is a pretty common pattern for big data applications that want to have an option to write without reading first. See http://phoenix.apache.org/language/index.html#upsert_values and http://phoenix.apache.org/language/index.html#upsert_select for syntax.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">doc.REFERENCE.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlInsertKeyword.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlInsert.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
    </fixedFiles>
  </bug>
  <bug id="493" opendate="2014-11-30 00:00:00" fixdate="2014-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add EXTEND clause, for defining columns and their types at query/DML time</summary>
      <description>Often times only being able to define a static schema over which to query is not flexible enough. It would be useful to be able to define columns and their type at query/DML time. For an example syntax, see http://phoenix.apache.org/dynamic_columns.html</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelTestBase.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.MockCatalogReader.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlAdvisorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.TableNamespace.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.IdentifierNamespace.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlUpdate.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlMerge.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlKind.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlInsert.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDelete.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDataTypeSpec.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.prepare.RelOptTableImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptAbstractTable.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
    </fixedFiles>
  </bug>
  <bug id="494" opendate="2014-11-30 00:00:00" fixdate="2014-1-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support NEXT/CURRENT VALUE FOR syntax for sequences usage</summary>
      <description>Support the ANSI standard NEXT VALUE FOR and CURRENT VALUE FOR syntax to access/increment sequence values. See http://phoenix.apache.org/sequences.html and http://phoenix.apache.org/language/index.html#sequence for examples.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlAdvisorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.BuiltInMethod.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlKind.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.StandardConvertletTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.schema.Schema.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.SqlFunctions.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexImpTable.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
    </fixedFiles>
  </bug>
  <bug id="497" opendate="2014-11-30 00:00:00" fixdate="2014-1-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support optional qualifier for column name references</summary>
      <description>Some systems, such as HBase, have a named group to which columns belong (i.e. a column family in this case). To disambiguate column references (i.e. if the same column name is used in different column families), it's useful to allow an optional qualifier. This is similar to the RECORD field mechanism that Calcite already supports, but in this case the record name would be optional, since it's not necessary if the column names are unique. For example: http://phoenix.apache.org/language/index.html#column_ref</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">splunk.src.main.java.org.apache.calcite.adapter.splunk.SplunkTableScan.java</file>
      <file type="M">core.src.test.resources.sql.misc.oq</file>
      <file type="M">core.src.test.java.org.apache.calcite.tools.PlannerTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.MockCatalogReader.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.enumerable.EnumerableCorrelateTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.SqlTypeUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.RelStructuredTypeFlattener.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.type.RelDataTypeImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.type.RelDataType.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.prepare.CalciteCatalogReader.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
