<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="1983" opendate="2017-9-12 00:00:00" fixdate="2017-10-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Push EQUALS and NOT EQUALS operations with numeric cast on dimensions to Druid</summary>
      <description>For instance, the following query should be pushed as a time-series query with filters.use ssb_druid;Time taken: 0.229 seconds, Fetched: 24 row(s)hive&gt; &gt; explain select &gt; sum(discounted_price) &gt; from &gt; ssb_druid_day &gt; where &gt; lo_quantity = 25 ;OKPlan optimized by CBO.Vertex dependency in root stageReducer 2 &lt;- Map 1 (SIMPLE_EDGE)Stage-0 Fetch Operator limit:-1 Stage-1 Reducer 2 vectorized, llap File Output Operator [FS_14] Group By Operator [GBY_13] (rows=1 width=8) Output:["_col0"],aggregations:["sum(VALUE._col0)"] &lt;-Map 1 [SIMPLE_EDGE] vectorized, llap SHUFFLE [RS_12] Group By Operator [GBY_11] (rows=1 width=8) Output:["_col0"],aggregations:["sum(discounted_price)"] Select Operator [SEL_10] (rows=1 width=0) Output:["discounted_price"] Filter Operator [FIL_9] (rows=1 width=0) predicate:(UDFToDouble(lo_quantity) = 25.0) TableScan [TS_0] (rows=5999989709 width=0) ssb_druid@ssb_druid_day,ssb_druid_day,Tbl:PARTIAL,Col:NONE,Output:["lo_quantity","discounted_price"],properties:{"druid.query.json":"{\"queryType\":\"select\",\"dataSource\":\"ssb_druid_day\",\"descending\":false,\"intervals\":[\"1900-01-01T00:00:00.000/3000-01-01T00:00:00.000\"],\"dimensions\":[\"c_city\",\"c_nation\",\"c_region\",\"d_weeknuminyear\",\"d_year\",\"d_yearmonth\",\"d_yearmonthnum\",\"lo_discount\",\"lo_quantity\",\"p_brand1\",\"p_category\",\"p_mfgr\",\"s_city\",\"s_nation\",\"s_region\"],\"metrics\":[\"lo_revenue\",\"discounted_price\",\"net_revenue\"],\"granularity\":\"all\",\"pagingSpec\":{\"threshold\":16384,\"fromNext\":true},\"context\":{\"druid.query.fetch\":false}}","druid.query.type":"select"}</description>
      <version>1.15.0</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidQuery.java</file>
    </fixedFiles>
  </bug>
  <bug id="2001" opendate="2017-10-5 00:00:00" fixdate="2017-10-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JDBC driver should return "SYSTEM TABLE" rather than "SYSTEM_TABLE"</summary>
      <description>JDBC driver should return "SYSTEM TABLE" rather than "SYSTEM_TABLE". Per DRILL-5844, JDBC recommends that table types have spaces in them.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.sequence.iq</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcFrontJdbcBackTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.schema.Schema.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.jdbc.CalciteMetaImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="2035" opendate="2017-11-7 00:00:00" fixdate="2017-11-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add APPROX_COUNT_DISTINCT aggregate function</summary>
      <description>Add APPROX_COUNT_DISTINCT aggregate function. The effect of APPROX_COUNT_DISTINCT(args) is the same as COUNT(DISTINCT args) but the planner may generate approximate results (e.g. by using HyperLogLog).Note "may" not "must", above: the planner may choose a plan that returns exact results.This is a step towards CALCITE-1588, which would allow an APPROXIMATE clause and specify in more detail the degree of approximation allowed.</description>
      <version>None</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">site..docs.algebra.md</file>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidTable.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidRules.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidQuery.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelMetadataTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelBuilderTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.plan.volcano.TraitPropagationTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.plan.RelWriterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.tools.RelBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.tools.PigRelBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlSplittableAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlCountAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.RelFieldTrimmer.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.SubQueryRemoveRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateUnionTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateStarTableRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateReduceFunctionsRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateFilterTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AbstractMaterializedViewRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.externalize.RelJsonReader.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.Window.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.Match.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.AggregateCall.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.SubstitutionVisitor.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="2061" opendate="2017-11-19 00:00:00" fixdate="2017-11-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Dynamic parameters in OFFSET, FETCH and LIMIT clauses</summary>
      <description>Fetch/Offset already support RexNode, it will be useful to support Dynamic parameters as well.This implementation is needed to be able to run Yahoo YCSB JDBC benchmarks which does large use of this syntaxselect .... LIMIT ?</description>
      <version>1.15.0</version>
      <fixedVersion>1.15.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDynamicParam.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.RelFieldTrimmer.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.PruneEmptyRules.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdRowCount.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableLimit.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
    </fixedFiles>
  </bug>
  <bug id="2063" opendate="2017-11-21 00:00:00" fixdate="2017-4-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add JDK 10 to CI</summary>
      <description>In CALCITE-2058 we added support for JDK 10 (early access build), and we test using a cron job on Julian's server but currently Apache's Jenkins does not support JDK 10. This task is to enable JDK 10 tests when Jenkins supports it.</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">.travis.yml</file>
    </fixedFiles>
  </bug>
  <bug id="2076" opendate="2017-12-3 00:00:00" fixdate="2017-12-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade to Druid 0.11.0</summary>
      <description>This task is to update to Druid version 0.11.0</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.history.md</file>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
    </fixedFiles>
  </bug>
  <bug id="2077" opendate="2017-12-3 00:00:00" fixdate="2017-12-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Druid adapter: Use "scan" query rather than "select" query</summary>
      <description>The biggest difference between select query and scan query is that, scan query doesn't retain all rows in memory before rows can be returned to client.Select query on very large segments will cause memory pressure on druid historicals if too many rows required by select query whereas Scan query doesn't have this issue.Scan query can also return all rows without issuing another pagination query, which is extremely useful when query against historical or realtime node directly.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.QueryType.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidQuery.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidConnectionImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="2081" opendate="2017-12-8 00:00:00" fixdate="2017-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Query with windowed aggregates under both sides of a JOIN throws NullPointerException</summary>
      <description>NPE when joining 2 subqueries that use window functions.Testing with a new test case in JdbcTest: /** Tests for a join of subqueries using Window Functions */ @Test public void testJoinWithWinAgg() { final String sql = "select a.*, b.r from\n" + "(select \"deptno\", first_value(\"empid\") over \n" + "(partition by \"deptno\" order by \"commission\") as r\n" + "from \"hr\".\"emps\") a\n" + "left join\n" + "(select \"deptno\", last_value(\"empid\") over \n" + "(partition by \"deptno\" order by \"commission\") as r\n" + "from \"hr\".\"emps\") b\n" + "on a.\"deptno\" = b.\"deptno\""; CalciteAssert.hr() .query(sql) .runs(); }Debugging this I found out that the NPE occurs at Expressions.declare (line 2937) in initializer.getType() because initializer is null. The statement isint prevStart;This statement does not have an initializer, but the method "declare" is trying to get the initializer's type, generating NPE.This happens when joining 2 subqueries that use window functions because they end up using the same variables. In BlockBuilder.append (line 124) it checks if the variable already exists and the problem starts there.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.winagg.iq</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableWindow.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableRelImplementor.java</file>
    </fixedFiles>
  </bug>
  <bug id="2089" opendate="2017-12-15 00:00:00" fixdate="2017-12-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Druid adapter: Push filter on floor(time) to Druid</summary>
      <description>currently only filters containing extract are pushed to druid. This task is to also push filters containing containing floor(time) in similar way. e.g for query - Select * from druid_table where floor('__time') between ''2014-08-01 00:00:00 UTC' and '2016-10-01 00:00:00 UTC');</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.TimeExtractionFunction.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidQuery.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidDateTimeUtils.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteAssert.java</file>
    </fixedFiles>
  </bug>
  <bug id="2090" opendate="2017-12-15 00:00:00" fixdate="2017-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Extend Druid Range Rules to extract interval from Floor</summary>
      <description>DruidRangeRules currently only extracts intervals from EXTRACT function. This task is to enhance Druid Range Rules to also support Floor functions.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rules.DateRangeRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexLiteral.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.DateRangeRules.java</file>
    </fixedFiles>
  </bug>
  <bug id="2093" opendate="2017-12-18 00:00:00" fixdate="2017-3-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>OsAdapterTest in Calcite Plus does not respect locale</summary>
      <description>On Linux when PL locales are applied FileTableFunction java uses Float.parse which does not consider os locales but rather uses dot for float numbers.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">plus.src.main.java.org.apache.calcite.adapter.os.FilesTableFunction.java</file>
    </fixedFiles>
  </bug>
  <bug id="2094" opendate="2017-12-18 00:00:00" fixdate="2017-12-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Druid adapter: Count(*) returns null instead of 0 when condition filters all rows</summary>
      <description>Druid adapter returns nothing for Select count(*) from table where condition_is_false According to SQL standard the result need to be zero.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidRules.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidQuery.java</file>
    </fixedFiles>
  </bug>
  <bug id="2097" opendate="2017-12-18 00:00:00" fixdate="2017-12-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Druid adapter: Push Aggregate and Filter operators containing metric columns to Druid</summary>
      <description>Druid 0.10.0 version has added the capability to group by or filter over metrics columns.This Patch will allow pushing of grouping by metric column using same api for dimensions, same will be done for filters.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidRules.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidQuery.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidConnectionImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="2113" opendate="2017-12-29 00:00:00" fixdate="2017-1-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Push column pruning to druid when Aggregate cannot be pushed</summary>
      <description>Column pruning will not work when we have an Aggregate on top of a DruidQuery and the aggregate cannot be pushed to druid. (one such case is when it is count on a metric). To fix this, we can introduce a new Rule to extract a Project from the aggregate and push that to DruidQuery before pushing the aggregate. INFO : Executing command(queryId=hive_20171020180303_09fd3ab2-6e4a-42a1-9e85-4bca0e13460b): explain SELECT COUNT(`__time`) FROM tpcds_denormalized_druid_table_300M WHERE `__time` &gt;= '1999-11-01 00:00:00' AND `__time` &lt;= '1999-11-10 00:00:00' AND `__time` &lt; '1999-11-05 00:00:00'INFO : Starting task [Stage-3:EXPLAIN] in serial modeINFO : Resetting the caller context to HIVE_SSN_ID:a5e1f82e-6d6c-405c-a6da-0d74f2248603INFO : Completed executing command(queryId=hive_20171020180303_09fd3ab2-6e4a-42a1-9e85-4bca0e13460b); Time taken: 0.011 secondsINFO : OKtpcds_real_bin_partitioned_orc_1000@tpcds_denormalized_druid_table_300m,tpcds_denormalized_druid_table_300m,Tbl:COMPLETE,Col:NONE,Output:["__time"],properties:{"druid.query.json":"{\"queryType\":\"select\",\"dataSource\":\"tpcds_real_bin_partitioned_orc_1000.tpcds_denormalized_druid_table_300M\",\"descending\":false,\"intervals\":[\"1999-11-01T00:00:00.000/1999-11-05T00:00:00.000\"],\"dimensions\":[\"i_item_id\",\"i_rec_start_date\",\"i_rec_end_date\",\"i_item_desc\",\"i_brand_id\",\"i_brand\",\"i_class_id\",\"i_class\",\"i_category_id\",\"i_category\",\"i_manufact_id\",\"i_manufact\",\"i_size\",\"i_formulation\",\"i_color\",\"i_units\",\"i_container\",\"i_manager_id\",\"i_product_name\",\"c_customer_id\",\"c_salutation\",\"c_first_name\",\"c_last_name\",\"c_preferred_cust_flag\",\"c_birth_day\",\"c_birth_month\",\"c_birth_year\",\"c_birth_country\",\"c_login\",\"c_email_address\",\"c_last_review_date\",\"ca_address_id\",\"ca_street_number\",\"ca_street_name\",\"ca_street_type\",\"ca_suite_number\",\"ca_city\",\"ca_county\",\"ca_state\",\"ca_zip\",\"ca_country\",\"ca_gmt_offset\",\"s_rec_end_date\",\"s_store_name\",\"s_hours\",\"s_manager\",\"s_market_id\",\"s_geography_class\",\"s_market_desc\",\"s_market_manager\",\"s_division_id\",\"s_division_name\",\"s_company_id\",\"s_company_name\",\"s_street_number\",\"s_street_name\",\"s_street_type\",\"s_suite_number\",\"s_city\",\"s_county\",\"s_state\",\"s_zip\",\"s_country\",\"s_gmt_offset\"],\"metrics\":[\"ss_ticket_number\",\"ss_quantity\",\"ss_wholesale_cost\",\"ss_list_price\",\"ss_sales_price\",\"ss_ext_discount_amt\",\"ss_ext_sales_price\",\"ss_ext_wholesale_cost\",\"ss_ext_list_price\",\"ss_ext_tax\",\"ss_coupon_amt\",\"ss_net_paid\",\"ss_net_paid_inc_tax\",\"ss_net_profit\",\"i_current_price\",\"i_wholesale_cost\",\"s_number_employees\",\"s_floor_space\",\"s_tax_precentage\"],\"granularity\":\"all\",\"pagingSpec\":{\"threshold\":16384,\"fromNext\":true},\"context\":{\"druid.query.fetch\":false}}","druid.query.type":"select"} |</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidRules.java</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="2114" opendate="2017-12-29 00:00:00" fixdate="2017-12-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Re-enable DruidAggregateFilterTransposeRule</summary>
      <description>It was disabled as part of https://issues.apache.org/jira/browse/CALCITE-1706.consider re-enabling it, we now have fix for https://issues.apache.org/jira/browse/CALCITE-1707.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidRules.java</file>
    </fixedFiles>
  </bug>
  <bug id="2128" opendate="2018-1-10 00:00:00" fixdate="2018-2-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In JDBC adapter, add SQL dialect for Jethro Data</summary>
      <description>Calcite Jdbc operators code needs to be public so it could be used in hive code to support usage of external jdbc tables in hive</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialectFactoryImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialectFactory.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.JoinExtractFilterRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcTableScan.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcSchema.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcRules.java</file>
    </fixedFiles>
  </bug>
  <bug id="2143" opendate="2018-1-18 00:00:00" fixdate="2018-1-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>RelToSqlConverter produces incorrect SQL with aggregation</summary>
      <description>This plan:LogicalAggregate(group=[{1}], my-alias=[SUM($0)]) LogicalAggregate(group=[{0, 1}]) LogicalProject(b=[$2], a=[$0]) LogicalJoin(condition=[=($0, $1)], joinType=[inner]) LogicalTableScan(table=[[rel-1]]) LogicalTableScan(table=[[rel-2]])Produces this erroneous SQL:SELECT `t0`.`my-alias` AS `a`, (SUM(`t0`.`a`)) AS `my-alias`FROM (SELECT `rel-2`.`b`, `rel-1`.`a` FROM `rel-1` INNER JOIN `rel-2` ON (`rel-1`.`a` = `rel-2`.`a`) GROUP BY `rel-2`.`b`, `rel-1`.`a`) AS `t0`GROUP BY `t0`.`my-alias`Note the first field of the outer SELECT, where 'my-alias' is aliased as 'a'.Any clues how to fix would be appreciated.</description>
      <version>1.15.0</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rel2sql.SqlImplementor.java</file>
    </fixedFiles>
  </bug>
  <bug id="2147" opendate="2018-1-22 00:00:00" fixdate="2018-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>GroupingSets involving rollup resulting into an incorrect plan</summary>
      <description>Problem description:When rollup or cube expressions are specified as input to grouping_sets ,then instead of handling the rollup or cube expression in LogicalAggregate operator  they are handled in LogicalProject operator which is incorrect. Basically grouping_sets with rollup/cube expressions as input is not flattened into logical aggregate operator. Problem Test case:create table temp11(a integer, b integer);select a,b,count from temp11 group by grouping sets(rollup(a,b),a,b,());Test Case output:{  "rels": [    {      "id": "0",      "relOp": "LogicalTableScan",      "table": [        "CATALOG",        "temp11"      ],      "inputs": []    },    {      "id": "1",      "relOp": "LogicalProject",      "fields": [        "$f0",        "a",        "b"      ],      "exprs": [        {          "op": "ROLLUP",          &lt;&lt;--- Incorrect expressioin in LogicalProject operator.          "operands": [            {              "input": 0,              "name": "$0"            },            {              "input": 1,              "name": "$1"            }          ]        },        {          "input": 0,          "name": "$0"        },        {          "input": 1,          "name": "$1"        }      ]    },    {      "id": "2",      "relOp": "LogicalAggregate",      "group": [        0,        1,        2      ],      "groups": [        [          0        ],        [          1        ],        [          2        ],        []      ],      "aggs": [        {          "agg": "COUNT",          "type": {            "type": "BIGINT",            "nullable": false          },          "distinct": false,          "operands": []        }      ]    },    {      "id": "3",      "relOp": "LogicalProject",      "fields": [        "a",        "b",        "EXPR$2"      ],      "exprs": [        {          "input": 1,          "name": "$1"        },        {          "input": 2,          "name": "$2"        },        {          "input": 3,          "name": "$3"        }      ]    }  ]}</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="2157" opendate="2018-1-30 00:00:00" fixdate="2018-5-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ClickHouse dialect implementation</summary>
      <description>ClickHouse is a really fast columnar DBMS for OLAP: https://clickhouse.yandex/.It has a jdbc adapter and uses mostly standard sql, though there are differences (e.g. join syntax, datatypes, function name case-sensitivity).</description>
      <version>None</version>
      <fixedVersion>1.23.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialectFactoryImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialect.java</file>
    </fixedFiles>
  </bug>
  <bug id="2162" opendate="2018-2-1 00:00:00" fixdate="2018-2-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Exception when accessing sub-field of sub-field of composite Array element</summary>
      <description>for example, the following expression will throw an exception:a[1].b.cbut the following will work:a[1].b </description>
      <version>1.15.0</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.MockCatalogReader.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="2164" opendate="2018-2-4 00:00:00" fixdate="2018-4-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix alerts raised by lgtm.com</summary>
      <description>lgtm.com has identified a number of places where the code can be improved by small changes. These include cases of container contents never accessed (so the container can be removed) reference equality test on boxed types (equals can be used instead) type mismatch on container access (presumably checking for the wrong object) boxed variable is never null (primitive type can be used instead) dereferenced variable may be null (test for null should be added) useless comparison test (the test can be removed)The analysis by lgtm.com can be viewed at https://lgtm.com/projects/g/apache/calcite/alerts . This issue is to address some of these alerts</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">linq4j.src.test.java.org.apache.calcite.linq4j.test.Linq4jSuite.java</file>
      <file type="M">linq4j.src.main.java.org.apache.calcite.linq4j.LookupImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.StackWriter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ReduceDecimalsRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.LoptSemiJoinOptimizer.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.JoinToMultiJoinRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdSize.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdPopulationSize.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdDistinctRowCount.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexToLixTranslator.java</file>
    </fixedFiles>
  </bug>
  <bug id="2172" opendate="2018-2-8 00:00:00" fixdate="2018-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document IDE setup for project contribution</summary>
      <description>Document the IDE setup for Calcite development. Start with IDEA, document Eclipse, NetBeans, and maybe VIM and Emacs. </description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.howto.md</file>
      <file type="M">site.develop.index.md</file>
    </fixedFiles>
  </bug>
  <bug id="2197" opendate="2018-3-1 00:00:00" fixdate="2018-3-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Test failures on Windows</summary>
      <description>There are currently test failures on Windows. Fix by defining matchers that compare strings regardless of line-endings.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">server.src.test.java.org.apache.calcite.test.ServerTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.util.UtilTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelBuilderTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.Matchers.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.LatticeTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteAssert.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.plan.RelWriterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.CompositeOperandTypeChecker.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdCollation.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.Project.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.interpreter.SortNode.java</file>
    </fixedFiles>
  </bug>
  <bug id="2206" opendate="2018-3-7 00:00:00" fixdate="2018-4-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>JDBC adapter incorrectly pushes windowed aggregates down to HSQLDB</summary>
      <description>JDBC adapter incorrectly pushes windowed aggregates down to HSQLDB. Queries containing window functions fail when using HSQLDB (or any other DB that does not support window functions) because the optimizer converts them to native SQL with window functions which are not supported by HSQLDB. For example:select "store_id", "product_id", sum("unit_sales") unit_sales, row_number() over (partition by "store_id" order by sum("unit_sales") desc) row_numfrom "sales_fact_1998"group by "store_id", "product_id"</description>
      <version>1.15.0</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcAdapterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.InfobrightSqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.HsqldbSqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.H2SqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.AccessSqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcRules.java</file>
    </fixedFiles>
  </bug>
  <bug id="2207" opendate="2018-3-7 00:00:00" fixdate="2018-3-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enforce Java version via maven-enforcer-plugin</summary>
      <description>Now that jdk7 support has been dropped, we should add some logic to the build to fail obviously when a version of Java is used that we don't support.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="2213" opendate="2018-3-14 00:00:00" fixdate="2018-3-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode integration tests are failing</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">plus.src.main.resources.chinook.chinook.json</file>
      <file type="M">geode.src.test.java.org.apache.calcite.adapter.geode.rel.GeodeZipsIT.java</file>
      <file type="M">geode.src.test.java.org.apache.calcite.adapter.geode.rel.GeodeAdapterBookshopIT.java</file>
      <file type="M">geode.README.md</file>
    </fixedFiles>
  </bug>
  <bug id="2316" opendate="2018-5-18 00:00:00" fixdate="2018-5-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Elasticsearch adapter converts query literals to lower-case</summary>
      <description>Example of usageSQL: select * from "elastic" where _MAP&amp;#91;&amp;#39;Foo&amp;#39;&amp;#93; = 'BAR' (note upper-case) ES Query: { "term": { "foo" : "bar" }} (note lower-case) </description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.elasticsearch.ElasticsearchFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="2318" opendate="2018-5-18 00:00:00" fixdate="2018-6-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NumberFormatException while Sqlline start</summary>
      <description>Hellolooks like known issue here https://github.com/jline/jline2/issues/281IMHO jline version update will help to have it fixedto reproduce just run sqlline[serg@localhost csv]$ ./sqlline [ERROR] Failed to construct terminal; falling back to unsupportedjava.lang.NumberFormatException: For input string: "0x100" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:580) at java.lang.Integer.valueOf(Integer.java:766) at jline.internal.InfoCmp.parseInfoCmp(InfoCmp.java:59) at jline.UnixTerminal.parseInfoCmp(UnixTerminal.java:242) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:65) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:50) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at java.lang.Class.newInstance(Class.java:442) at jline.TerminalFactory.getFlavor(TerminalFactory.java:211) at jline.TerminalFactory.create(TerminalFactory.java:102) at jline.TerminalFactory.get(TerminalFactory.java:186) at jline.TerminalFactory.get(TerminalFactory.java:192) at sqlline.SqlLineOpts.&lt;init&gt;(SqlLineOpts.java:45) at sqlline.SqlLine.&lt;init&gt;(SqlLine.java:54) at sqlline.SqlLine.start(SqlLine.java:372) at sqlline.SqlLine.main(SqlLine.java:265)[ERROR] Failed to construct terminal; falling back to unsupportedjava.lang.NumberFormatException: For input string: "0x100" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:580) at java.lang.Integer.valueOf(Integer.java:766) at jline.internal.InfoCmp.parseInfoCmp(InfoCmp.java:59) at jline.UnixTerminal.parseInfoCmp(UnixTerminal.java:242) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:65) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:50) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at java.lang.Class.newInstance(Class.java:442) at jline.TerminalFactory.getFlavor(TerminalFactory.java:211) at jline.TerminalFactory.create(TerminalFactory.java:102) at jline.TerminalFactory.create(TerminalFactory.java:51) at sqlline.SqlLine.getConsoleReader(SqlLine.java:705) at sqlline.SqlLine.begin(SqlLine.java:639) at sqlline.SqlLine.start(SqlLine.java:373) at sqlline.SqlLine.main(SqlLine.java:265)</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="2319" opendate="2018-5-21 00:00:00" fixdate="2018-6-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Druid Expressions - Output Type of Boolean expressions should be set to LONG.</summary>
      <description>Sample Query - SELECT \"product_id\" &gt; 1000 as pid_category, COUNT(\"store_sales\") FROM FOODMART_TABLE GROUP BY \"product_id\" &gt; 1000";For the above query output type of virtual column is set to string whereas it should be set to float as druid expression return type is float. "{"queryType":"groupBy","dataSource":"foodmart","granularity":"all","dimensions":[{"type":"default","dimension":"vc","outputName":"vc","outputType":"STRING"}],"virtualColumns":[{"type":"expression","name":"vc","expression":"(CAST(\"product_id\", 'LONG') &gt; 1000)","outputType":"FLOAT"}],"limitSpec":{"type":"default"},"aggregations":[{"type":"filtered","filter":{"type":"not","field":{"type":"selector","dimension":"store_sales","value":null}},"aggregator":{"type":"count","name":"EXPR$1","fieldName":"store_sales"}}],"intervals":["1900-01-09T00:00:00.000Z/2992-01-10T00:00:00.000Z"]}"</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidExpressions.java</file>
    </fixedFiles>
  </bug>
  <bug id="2379" opendate="2018-6-25 00:00:00" fixdate="2018-7-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CVSS dependency-check-maven fails for calcite-spark module</summary>
      <description>Check for vulnerabilities among dependencies fails for calcite-spark module."mvn install -Ppedantic -DskipTests=true" fails for lib py4j-0.10.4.jar.</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ubenchmark.pom.xml</file>
      <file type="M">spark.pom.xml</file>
      <file type="M">site..docs.howto.md</file>
    </fixedFiles>
  </bug>
  <bug id="2380" opendate="2018-6-25 00:00:00" fixdate="2018-6-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Elasticsearch, MongoDB, Druid adapters have javadoc errors</summary>
      <description>javadoc generation fails for some adapters.Commands to reproduce:$ mvn -DskipTests clean javadoc:javadoc javadoc:test-javadoc$ mvn -DskipTests clean site</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">mongodb.src.test.java.org.apache.calcite.test.MongoAssertions.java</file>
      <file type="M">mongodb.src.test.java.org.apache.calcite.adapter.mongodb.MongoDatabaseRule.java</file>
      <file type="M">mongodb.src.test.java.org.apache.calcite.adapter.mongodb.MongoAdapterTest.java</file>
      <file type="M">mongodb.src.main.java.org.apache.calcite.adapter.mongodb.MongoToEnumerableConverter.java</file>
      <file type="M">mongodb.src.main.java.org.apache.calcite.adapter.mongodb.MongoTable.java</file>
      <file type="M">mongodb.src.main.java.org.apache.calcite.adapter.mongodb.MongoSchema.java</file>
      <file type="M">elasticsearch5.src.test.java.org.apache.calcite.test.ElasticChecker.java</file>
      <file type="M">elasticsearch5.src.test.java.org.apache.calcite.adapter.elasticsearch5.EmbeddedElasticRule.java</file>
      <file type="M">elasticsearch5.src.test.java.org.apache.calcite.adapter.elasticsearch5.EmbeddedElasticNode.java</file>
      <file type="M">elasticsearch5.src.test.java.org.apache.calcite.adapter.elasticsearch5.ElasticSearch5AdapterTest.java</file>
      <file type="M">elasticsearch5.src.main.java.org.apache.calcite.adapter.elasticsearch5.Elasticsearch5Table.java</file>
      <file type="M">elasticsearch5.src.main.java.org.apache.calcite.adapter.elasticsearch5.Elasticsearch5Schema.java</file>
      <file type="M">elasticsearch5.src.main.java.org.apache.calcite.adapter.elasticsearch5.Elasticsearch5Enumerator.java</file>
      <file type="M">elasticsearch2.src.test.java.org.apache.calcite.test.ElasticChecker.java</file>
      <file type="M">elasticsearch2.src.test.java.org.apache.calcite.adapter.elasticsearch2.EmbeddedElasticRule.java</file>
      <file type="M">elasticsearch2.src.test.java.org.apache.calcite.adapter.elasticsearch2.EmbeddedElasticNode.java</file>
      <file type="M">elasticsearch2.src.test.java.org.apache.calcite.adapter.elasticsearch2.ElasticSearch2AdapterTest.java</file>
      <file type="M">elasticsearch2.src.main.java.org.apache.calcite.adapter.elasticsearch2.Elasticsearch2Table.java</file>
      <file type="M">elasticsearch2.src.main.java.org.apache.calcite.adapter.elasticsearch2.Elasticsearch2Schema.java</file>
      <file type="M">elasticsearch2.src.main.java.org.apache.calcite.adapter.elasticsearch2.Elasticsearch2Enumerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="2381" opendate="2018-6-26 00:00:00" fixdate="2018-7-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update HOWTOs to clarify a few gotchas</summary>
      <description>Some issues I ran into while releasing Avatica 1.12.0 that should be clarified in the HOWTO document on the website: GPG signs using a default key (I think this is the first key, if no default is set). I had multiple keys and my Apache key was not my first key. I was not 100% sure that `-DdevelopmentVersion` should be the version after the current release. It took a while to work out how to authenticate against Apache's maven repo. See http://www.apache.org/dev/publishing-maven-artifacts.html#dev-env for solutionThe HOWTO for Calcite should also be updated to aid future release managers.</description>
      <version>None</version>
      <fixedVersion>1.17.0,avatica-1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.howto.md</file>
    </fixedFiles>
  </bug>
  <bug id="2416" opendate="2018-7-16 00:00:00" fixdate="2018-8-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Assertion error when determining monotonicity</summary>
      <description>CREATE TABLE test ( x integer, y integer);SELECT 2 * 2 * x FROM test; Causes:Exception in thread "main" java.lang.AssertionError: Internal error: invalid literal: 2 * 2 Re-raising CALCITE-1504 which was fixed via CALCITE-1486</description>
      <version>1.15.0,1.16.0,1.17.0</version>
      <fixedVersion>1.18.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlLiteral.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlMonotonicBinaryOperator.java</file>
    </fixedFiles>
  </bug>
  <bug id="2427" opendate="2018-7-24 00:00:00" fixdate="2018-4-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Sub-queries not supported in DML statements</summary>
      <description>It appears that subqueries are not supported in DML statements.The yield in a NPE.Respective testcase is disabled with reference to CALCITE-1527.@Ignore("CALCITE-1527")@Test public void testUpdateSubQuery() {final String sql = "update emp\n"+ "set empno = (\n"+ " select min(empno) from emp as e where e.deptno = emp.deptno)";sql(sql).ok();}  </description>
      <version>1.14.0,1.15.0,1.16.0</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.tools.PlannerTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
    </fixedFiles>
  </bug>
  <bug id="2428" opendate="2018-7-30 00:00:00" fixdate="2018-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra unit test fails to parse JDK version string</summary>
      <description>Unit test fails because java.version string is parsed incorrectly</description>
      <version>None</version>
      <fixedVersion>1.18.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.util.TestUtil.java</file>
      <file type="M">cassandra.src.test.java.org.apache.calcite.test.CassandraAdapterTest.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
