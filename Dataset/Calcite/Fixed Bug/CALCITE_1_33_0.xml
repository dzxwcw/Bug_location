<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="550" opendate="2014-12-29 00:00:00" fixdate="2014-12-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Case-insensitive matching of sub-query columns fails</summary>
      <description>Currently, the default LEX in Calcite is LEX.ORACLE, and most unit test cases are using LEX.ORACLE. However, when LEX is set to be MYSQL/SQL_SERVER etc, Calcite would complain "field/column not found error" in subquery, while the MYSQL/SQL_SERVER policy should allow such query. For example, given the following query, with LEX.MYSQL.select DID from (select deptid as did FROM ( values (1), (2) ) as T1(deptid) ) Calcite would raise the following error:Caused by: java.lang.AssertionError: Internal error: Type 'RecordType(INTEGER did)' has no field â€˜DID'According to LEX.MYSQL, the unquoted sql identifier should remain unchanged, and matched with case-insensitive, hence the query is valid. /** Lexical policy similar to MySQL. (To be precise: MySQL on Windows; * MySQL on Linux uses case-sensitive matching, like the Linux file system.) * The case of identifiers is preserved whether or not they quoted; * after which, identifiers are matched case-insensitively. * Back-ticks allow identifiers to contain non-alphanumeric characters. */ MYSQL(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, false),</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.DelegatingScope.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlIdentifier.java</file>
    </fixedFiles>
  </bug>
  <bug id="557" opendate="2015-1-13 00:00:00" fixdate="2015-1-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove AbstractConverter</summary>
      <description>Currently each subset contains an AbstractConverter to each subset in the same set. If there are a lot of active traits, there are many, many AbstractConverters that do not add anything to the planning.This task would remove those AbstractConverters. In fact AbstractConverter would never be created.Also, make costing of joins more deterministic when both inputs have the same number of rows. Currently we use the RelNode.id of the inputs, but this is unstable if we change what rules are activated. So, we should order the inputs based on the number of columns first, and on id only if that fails.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.ScannableTableTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.LatticeTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateReduceFunctionsRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.RelSubset.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.RelSet.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.materialize.TileSuggester.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.materialize.TileKey.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.materialize.MaterializationService.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.materialize.Lattice.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.interpreter.ScanNode.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcRules.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcConvention.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableJoin.java</file>
      <file type="M">core.src.test.resources.sql.misc.oq</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.RuleQueue.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
