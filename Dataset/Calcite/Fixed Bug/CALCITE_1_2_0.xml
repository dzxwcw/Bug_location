<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="666" opendate="2015-4-6 00:00:00" fixdate="2015-10-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Anti-semi-joins against JDBC adapter give wrong results</summary>
      <description>When using JdbcAdapter to execute a query with a WHERE clause wherein the predicate using the &lt;&gt; operator contains a subquery, e.g.:select * from table1 where c1 &lt;&gt; (select c1 from table2 where rnum =0);The query is split to two (outer - "select from *from table1" and inner -"select col2 from table2 where col1 =0") Enumerable objects and then combined with the org.apache.calcite.runtime.Enumerables semiJoin method.The returned resultset however, is equivalent to the result of executing "select * from table1" and the WHERE clause condition ignored.Test:package org.apache.calcite.test;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.Properties;import org.apache.calcite.jdbc.Driver;public class TestSubqueryInPredicate { public static void main(String[] args) { try { //testScottdb(); testPredicateSubquery(); } catch (Exception e) { e.printStackTrace(); } } public static void testPredicateSubquery() throws SQLException { String h2dbMemUrl = "jdbc:hsqldb:mem:."; Connection baseConnection = DriverManager.getConnection(h2dbMemUrl); Statement statement = baseConnection.createStatement(); statement.execute("CREATE TABLE if not exists table1 (\n" + "RNUM INTEGER,\n" + "C1 INTEGER,\n" + "C2 VARCHAR(2))"); statement.execute("insert into table1 values ( 0, 10, 'BB')"); statement.execute("insert into table1 values ( 1, 15, 'DD')"); statement.execute("insert into table1 values ( 2, NULL, 'EE')"); statement.execute("insert into table1 values ( 3, 10, 'FF')"); statement.execute("CREATE TABLE if not exists table2 (\n" + "RNUM INTEGER,\n" + "C1 INTEGER,\n" + "C2 INTEGER)"); statement.execute("insert into table2 values ( 0, 10, 15)"); statement.execute("insert into table2 values ( 1, 20, 25)"); statement.execute("insert into table2 values ( 2, NULL, 50)"); statement.close(); baseConnection.commit(); Properties info = new Properties(); info.put("model", "inline:" + "{\n" + " version: '1.0',\n" + " defaultSchema: 'BASEJDBC',\n" + " schemas: [\n" + " {\n" + " type: 'jdbc',\n" + " name: 'BASEJDBC',\n" + " jdbcDriver: '" + Driver.class.getName() + "',\n" + " jdbcUrl: '" + h2dbMemUrl + "',\n" + " jdbcCatalog: null,\n" + " jdbcSchema: null\n" + " }\n" + " ]\n" + "}"); Connection calciteConnection = DriverManager.getConnection( "jdbc:calcite:", info); System.out.println ("select * from table1 where c1 &lt;&gt; (select c1 from table2 &gt; where rnum =0)"); PreparedStatement calcitePS = calciteConnection.prepareStatement( "select * from table1 where c1 &lt;&gt; (select c1 from table2 where rnum =0)"); ResultSet rs = calcitePS.executeQuery(); while (rs.next()){ System.out.print ("\n" + "| RNUM:" + (Integer) rs.getObject("RNUM") + " | "); System.out.print ("C1:" + (Integer) rs.getObject("C1") + " | "); System.out.print ("C2:" + rs.getString("C2") + " | "); } rs.close(); calciteConnection.close(); }}Test Result:select * from table1 where c1 &lt;&gt; (select c1 from table2 &gt; where rnum =0) RNUM:0 C1:10 C2:BB RNUM:1 C1:15 C2:DD RNUM:2 C1:null C2:EE RNUM:3 C1:10 C2:FF Generated Code:[SELECT *FROM "TABLE1"][SELECT "C1"FROM "TABLE2"WHERE "RNUM" = 0]/* 1 */ org.apache.calcite.DataContext root;/* 2 */ /* 3 */ public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {/* 4 */ root = root0;/* 5 */ return org.apache.calcite.runtime.Enumerables.semiJoin(org.apache.calcite.runtime.ResultSetEnumerable.of(((org.apache.calcite.adapter.jdbc.JdbcSchema) root.getRootSchema().getSubSchema("BASEJDBC").unwrap(org.apache.calcite.adapter.jdbc.JdbcSchema.class)).getDataSource(), "SELECT *\nFROM \"TABLE1\"", new org.apache.calcite.linq4j.function.Function1() {/* 6 */ public org.apache.calcite.linq4j.function.Function0 apply(final java.sql.ResultSet resultSet) {/* 7 */ return new org.apache.calcite.linq4j.function.Function0() {/* 8 */ public Object apply() {/* 9 */ try {/* 10 */ final Object[] values = new Object&amp;#91;3&amp;#93;;/* 11 */ values&amp;#91;0&amp;#93; = resultSet.getInt(1);/* 12 */ if (resultSet.wasNull()) {/* 13 */ values[0] = null;/* 14 */ }/* 15 */ values&amp;#91;1&amp;#93; = resultSet.getInt(2);/* 16 */ if (resultSet.wasNull()) {/* 17 */ values[1] = null;/* 18 */ }/* 19 */ values&amp;#91;2&amp;#93; = resultSet.getObject(3);/* 20 */ return values;/* 21 */ } catch (java.sql.SQLException e) {/* 22 */ throw new RuntimeException(/* 23 */ e);/* 24 */ }/* 25 */ }/* 26 */ }/* 27 */ ;/* 28 */ }/* 29 */ public Object apply(final Object resultSet) {/* 30 */ return apply(/* 31 */ (java.sql.ResultSet) resultSet);/* 32 */ }/* 33 */ }/* 34 */ ), org.apache.calcite.runtime.ResultSetEnumerable.of(((org.apache.calcite.adapter.jdbc.JdbcSchema) root.getRootSchema().getSubSchema("BASEJDBC").unwrap(org.apache.calcite.adapter.jdbc.JdbcSchema.class)).getDataSource(), "SELECT \"C1\"\nFROM \"TABLE2\"\nWHERE \"RNUM\" = 0", new org.apache.calcite.linq4j.function.Function1() {/* 35 */ public org.apache.calcite.linq4j.function.Function0 apply(final java.sql.ResultSet resultSet) {/* 36 */ return new org.apache.calcite.linq4j.function.Function0() {/* 37 */ public Object apply() {/* 38 */ try {/* 39 */ final Object value;/* 40 */ value = resultSet.getInt(1);/* 41 */ if (resultSet.wasNull()) {/* 42 */ value = null;/* 43 */ }/* 44 */ return value;/* 45 */ } catch (java.sql.SQLException e) {/* 46 */ throw new RuntimeException(/* 47 */ e);/* 48 */ }/* 49 */ }/* 50 */ }/* 51 */ ;/* 52 */ }/* 53 */ public Object apply(final Object resultSet) {/* 54 */ return apply(/* 55 */ (java.sql.ResultSet) resultSet);/* 56 */ }/* 57 */ }/* 58 */ ), new org.apache.calcite.linq4j.function.Function1() {/* 59 */ public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {/* 60 */ return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;/* 61 */ }/* 62 */ public Object apply(Object v1) {/* 63 */ return apply(/* 64 */ (Object[]) v1);/* 65 */ }/* 66 */ }/* 67 */ , new org.apache.calcite.linq4j.function.Function1() {/* 68 */ public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Integer v1) {/* 69 */ return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;/* 70 */ }/* 71 */ public Object apply(Object v1) {/* 72 */ return apply(/* 73 */ (Integer) v1);/* 74 */ }/* 75 */ }/* 76 */ );/* 77 */ }/* 78 */ /* 79 */ /* 80 */ public Class getElementType() {/* 81 */ return java.lang.Object[].class;/* 82 */ }/* 83 */ /* 84 */</description>
      <version>1.2.0-incubating</version>
      <fixedVersion>1.5.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcAdapterTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="669" opendate="2015-4-6 00:00:00" fixdate="2015-1-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Move from Commons Logging to SLF4J</summary>
      <description>As mentioned on CALCITE-641, it could be useful to adopt a logging implementation that supports pluggable backends and has MDC support.</description>
      <version>None</version>
      <fixedVersion>avatica-1.7.0,1.7.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">mongodb.pom.xml</file>
      <file type="M">src.main.config.checkstyle.suppressions.xml</file>
      <file type="M">splunk.src.main.java.org.apache.calcite.adapter.splunk.util.StringUtils.java</file>
      <file type="M">splunk.src.main.java.org.apache.calcite.adapter.splunk.util.HttpUtils.java</file>
      <file type="M">splunk.src.main.java.org.apache.calcite.adapter.splunk.SplunkPushDownRule.java</file>
      <file type="M">splunk.src.main.java.org.apache.calcite.adapter.splunk.search.SplunkConnectionImpl.java</file>
      <file type="M">splunk.pom.xml</file>
      <file type="M">site..docs.howto.md</file>
      <file type="M">site..docs.history.md</file>
      <file type="M">pom.xml</file>
      <file type="M">piglet.src.main.javacc.PigletParser.jj</file>
      <file type="M">piglet.pom.xml</file>
      <file type="M">mongodb.src.main.java.org.apache.calcite.adapter.mongodb.MongoRules.java</file>
      <file type="M">avatica-server.pom.xml</file>
      <file type="M">avatica-server.src.main.java.org.apache.calcite.avatica.jdbc.JdbcMeta.java</file>
      <file type="M">avatica-server.src.main.java.org.apache.calcite.avatica.server.AvaticaJsonHandler.java</file>
      <file type="M">avatica-server.src.main.java.org.apache.calcite.avatica.server.AvaticaProtobufHandler.java</file>
      <file type="M">avatica-server.src.main.java.org.apache.calcite.avatica.server.DelegatingAvaticaHandler.java</file>
      <file type="M">avatica-server.src.main.java.org.apache.calcite.avatica.server.HttpServer.java</file>
      <file type="M">avatica.pom.xml</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.remote.Driver.java</file>
      <file type="M">core.pom.xml</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableAggregateRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableJoinRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableMergeJoinRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableRules.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcRules.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.interpreter.Bindables.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.AbstractRelOptPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.hep.HepPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptRuleCall.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RexImplicationChecker.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.SubstitutionVisitor.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.VisitorDataContext.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.RelSet.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.RelSubset.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.RuleQueue.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.VolcanoPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.VolcanoRuleCall.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.prepare.Prepare.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.AbstractRelNode.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.InvalidRelException.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rel2sql.SqlImplementor.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.CalcRelSplitter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ValuesReduceRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.CalciteException.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.ResultSetEnumerable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.RelDecorrelator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.RelFieldTrimmer.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.advise.SqlAdvisor.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.parser.SqlParserUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.pretty.SqlPrettyWriter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorException.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.Benchmark.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.trace.CalciteLogger.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.trace.CalciteTimingTracer.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.trace.CalciteTrace.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.Util.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="686" opendate="2015-4-17 00:00:00" fixdate="2015-4-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SqlNode.unparse produces invalid SQL</summary>
      <description>The "unparse" method on a parse tree node produces invalid SQL for a few node types, including GROUPING SETS, CUBE, WITH, EXTEND, UPDATE.We should enable SqlUnParserTest in the suite and fix any test failures.</description>
      <version>None</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteSuite.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.plan.RelOptPlanReaderTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlWithItem.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlWith.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlUpdate.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlSpecialOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlKind.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlInternalOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlInfixOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlBinaryOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
    </fixedFiles>
  </bug>
  <bug id="688" opendate="2015-4-20 00:00:00" fixdate="2015-5-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>splitCondition does not behave correctly when one side of the condition references columns from different inputs</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.join.oq</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="691" opendate="2015-4-22 00:00:00" fixdate="2015-4-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow projects to supply alternate SQL parser</summary>
      <description></description>
      <version>None</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.prepare.CalcitePrepareImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.prepare.CalciteMaterializer.java</file>
    </fixedFiles>
  </bug>
  <bug id="692" opendate="2015-4-22 00:00:00" fixdate="2015-4-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add back sqlline as a dependency</summary>
      <description>We removed sqlline as a dependency in CALCITE-619, but this broke the sqlline launcher (and sqlline.bat) because sqlline.jar no longer appears in Calcite's dependencies.We need to add back the sqlline dependency.Also add a test SqllineTest that checks whether sqlline can connect to Calcite. (Parts the functionality of this test are disabled pending https://github.com/julianhyde/sqlline/issues/35.)</description>
      <version>None</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteSuite.java</file>
      <file type="M">core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="740" opendate="2015-5-20 00:00:00" fixdate="2015-6-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Redundant WHERE clause causes wrong result in MongoDB adapter</summary>
      <description>Running a query with the 'where' clause: where (pop &gt; 8000 and pop &gt; 9000)does not produce the same result as: where pop &gt; 9000instead it produces the same result as: where pop &gt; 8000This was run using calcite-mongo's zips collection.The interpreter appears to treat the 'and' as an 'or'. This despite the fact that queries like: where (pop &gt; 8000 and pop &lt; 9000)work as you would expect.Tried this on other data stores and did not see the same problem. Just calcite-mongo.</description>
      <version>1.2.0-incubating</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">mongodb.src.test.java.org.apache.calcite.test.MongoAdapterIT.java</file>
      <file type="M">mongodb.src.main.java.org.apache.calcite.adapter.mongodb.MongoFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="741" opendate="2015-5-24 00:00:00" fixdate="2015-8-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>DEPENDENCIES should not be empty</summary>
      <description>Jacques Nadeau, during 1.3 RC1 vote:Minor comment, the DEPENDENCIES file states that it lists transitive dependencies (which Calcite has) but doesn't actually list anything.</description>
      <version>None</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ubenchmark.pom.xml</file>
      <file type="M">splunk.pom.xml</file>
      <file type="M">spark.pom.xml</file>
      <file type="M">pom.xml</file>
      <file type="M">plus.pom.xml</file>
      <file type="M">mongodb.pom.xml</file>
      <file type="M">linq4j.pom.xml</file>
      <file type="M">example.csv.pom.xml</file>
      <file type="M">core.pom.xml</file>
      <file type="M">avatica.pom.xml</file>
      <file type="M">avatica-server.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="743" opendate="2015-5-26 00:00:00" fixdate="2015-8-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Source distributions .tar.gz and .zip should contain identical files</summary>
      <description>Source distributions .tar.gz and .zip should contain identical files, but in the 1.3 RC1 vote ndimiduk says there is one difference:Do note that the contents of the two archives are not exactly identical:$ diff --brief -r apache-calcite-1.3.0-incubating-src-tgz/apache-calcite-1.3.0-incubating-src-zip/Only in apache-calcite-1.3.0-incubating-src-tgz/: git.properties</description>
      <version>None</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="748" opendate="2015-6-1 00:00:00" fixdate="2015-6-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Builder for relational expressions</summary>
      <description>Creating relational expressions currently involves calling the "create" method of the relevant sub-class of RelNode, often with a lot of obscure parameters. This might be appropriate for someone writing a rule, but is not particularly friendly to someone who wants to write queries using an API.We propose instead a builder. It would have a method for each core type of relational expression; for example a filter method that returns a Filter. For a given type, there might be overloads that allow you more control.Inside the builder is a factory for each operator type. Thus a builder could be configured to create logical rels (LogicalFilter, LogicalProject) or rels of a different convention (HiveFilter, HiveProject).Two particular areas that the builder can help. First, it can deduce the names and types of output columns. (You can override types, and optionally also names, or maybe just some names, using other APIs.)Second, it can help you build RexNode expressions. It knows the type and names of the input, it will let you build expressions in terms of column ordinals or names, which are easier than RexInputRefs.</description>
      <version>None</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">site..docs.algebra.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.util.UtilTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.tools.FrameworksTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteSuite.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.Stacks.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.tools.Frameworks.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.RelFieldTrimmer.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.schema.Schemas.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.schema.Path.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.FilterAggregateTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.RelFactories.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.prepare.CalcitePrepareImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptRuleCall.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.Contexts.java</file>
    </fixedFiles>
  </bug>
  <bug id="883" opendate="2015-9-9 00:00:00" fixdate="2015-3-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support RESPECT NULLS, IGNORE NULLS option for LEAD, LAG, FIRST_VALUE, LAST_VALUE and NTH_VALUE window functions</summary>
      <description>This issue was brought up in Drill community: (https://issues.apache.org/jira/browse/DRILL-3597)For convenience, I copied and pasted the reporter Khurram Faraaz's description here:"The SQL standard defines a RESPECT NULLS or IGNORE NULLS option for lead, lag, first_value, and last_value window functions."In Calcite, we should have been able to recognized this option.</description>
      <version>None</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelMetadataTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.plan.volcano.TraitPropagationTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.plan.RelWriterTest.java</file>
      <file type="M">core.src.main.resources.org.apache.calcite.runtime.CalciteResource.properties</file>
      <file type="M">core.src.main.java.org.apache.calcite.tools.RelBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.AggChecker.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlSplittableAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlOverOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlKind.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlFilterOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlNthValueAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlLeadLagAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlFirstLastValueAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.CalciteResource.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexShuttle.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexOver.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ReduceExpressionsRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ProjectWindowTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateUnionTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateStarTableRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateReduceFunctionsRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateFilterTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.logical.LogicalWindow.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.externalize.RelJsonReader.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.externalize.RelJson.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.Window.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.AggregateCall.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.SubstitutionVisitor.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableWindow.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
      <file type="M">core.src.main.codegen.config.fmpp</file>
    </fixedFiles>
  </bug>
  <bug id="885" opendate="2015-9-15 00:00:00" fixdate="2015-9-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add Oracle test environment</summary>
      <description>Augment calcite-test-dataset with an environment that can be used to test against Oracle. Due to licensing issues, it is probably not possible to include an Oracle installation in the same VM, but we could use one of Oracle's pre-built VMs.</description>
      <version>None</version>
      <fixedVersion>1.5.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.StreamTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.LatticeTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcFrontJdbcBackTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcFrontJdbcBackLinqMiddleTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.ConnectionSpec.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteAssert.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.SqlTypeFactoryImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.jdbc.JdbcImplementor.java</file>
      <file type="M">core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="886" opendate="2015-9-16 00:00:00" fixdate="2015-9-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>System functions in GROUP BY clause</summary>
      <description>The system functions are the ones that do not have parentheses, like CURRENT_DATE, CURRENT_TIME, CURRENT_USER, etc.When such functions appear in the group by clause, Calcite will hit SqlValidatorException, complaining the column with the function name could not be found in any table.For instance,select CURRENT_USER from SCOTT.EMP GROUP BY CURRENT_USER;org.apache.calcite.sql.validate.SqlValidatorException &lt;init&gt;SEVERE: org.apache.calcite.sql.validate.SqlValidatorException: Column 'CURRENT_USER' not found in any tableThis query runs perfectly fine.select CURRENT_USER from SCOTT.EMP limit 1;Looks like the sql validation logic for group by clause could not recognize SqlIdentifier which may represent a function w/o parentheses.</description>
      <version>None</version>
      <fixedVersion>1.5.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.agg.oq</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
