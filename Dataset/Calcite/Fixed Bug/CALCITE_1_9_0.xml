<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="1365" opendate="2016-8-30 00:00:00" fixdate="2016-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Introduce UnionPullUpConstantsRule</summary>
      <description>Create a rule that pulls up constants through a Union operator.</description>
      <version>1.9.0</version>
      <fixedVersion>1.9.0</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.tools.PlannerTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdPredicates.java</file>
    </fixedFiles>
  </bug>
  <bug id="1369" opendate="2016-9-5 00:00:00" fixdate="2016-9-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Display a list of Avatica clients on the website</summary>
      <description>I think it would be really neat to have a well organized list of Avatica clients on the website. This would make clients much more discoverable and make Avatica and Calcite much more easier for people to get started with. For example, Kafka has a wiki page with their clients here: https://cwiki.apache.org/confluence/display/KAFKA/Clients1. Most of the clients currently available (the .NET and python ones) are currently targeted towards Apache Phoenix. Should we include these clients? If not, is there a process for reaching out to their maintainers to see if they are interested in generalising them to target Avatica?2. Is there any process for including a client on such a page? Should anyone be able to add the client, or do we need explicit permission from the maintainers?3. To reduce friction, is it viable to have a wiki page, so that maintainers can easily add their own clients?</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.site..docs.index.md</file>
    </fixedFiles>
  </bug>
  <bug id="1378" opendate="2016-9-21 00:00:00" fixdate="2016-9-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ArrayIndexOutOfBoundsException in sql-to-rel conversion for two-level columns</summary>
      <description>There was a little bit left over to be done for CALCITE-1208, as mentioned in https://issues.apache.org/jira/browse/CALCITE-1208?focusedCommentId=15427099&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15427099.</description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.DelegatingScope.java</file>
    </fixedFiles>
  </bug>
  <bug id="1379" opendate="2016-9-21 00:00:00" fixdate="2016-9-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>When expanding STAR, expand sub-fields in RecordType columns of StructKind.PEEK_FIELDS and StructKind.PEEK_FIELDS_DEFAULT</summary>
      <description>This is part of CALCITE-1208 and is a Phoenix-specific requirement.For example, if table T's type is defined asVARCHAR K0,VARCHAR C1,RecordType(INTEGER C0, INTEGER C1) F0,RecordType(INTEGER C0, INTEGER C2) F1, where both F0 and F1 is of StructKind.PEEK_FIELDS or StructKind.PEEK_FIELDS_DEFAULT,"select * from T" should expand the sub-fields of F0 and F1 and has a return type ofVARCHAR K0,VARCHAR C1,INTEGER F0.C0,INTEGER F0.C1,INTEGER F1.C0,INTEGER F1.C2</description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlIdentifier.java</file>
    </fixedFiles>
  </bug>
  <bug id="1384" opendate="2016-9-22 00:00:00" fixdate="2016-11-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add freemarker templates to parser for "ALTER SYSTEM ..." calls</summary>
      <description>In Phoenix, we'd like to add some Phoenix-specific commands in support of our UDF implementation. For example, we'd like to add commands like to manage the jars containing the implementation of the UDFs (see this&amp;#91;1&amp;#93; comment): ALTER SYSTEM ADD JAR ... ALTER SYSTEM LIST JARSTo accomplish this, we need to add freemarker templates to parser for "ALTER SYSTEM ..." calls and then leverage these templates in Phoenix.&amp;#91;1&amp;#93; https://issues.apache.org/jira/browse/PHOENIX-3242?focusedCommentId=15512529&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15512529</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteSuite.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlSetOption.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
      <file type="M">core.src.main.codegen.config.fmpp</file>
      <file type="M">core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1389" opendate="2016-9-27 00:00:00" fixdate="2016-11-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add rule to perform rewriting of queries using materialized views with joins</summary>
      <description>I've been looking into implementing the approach from the following paper. It's very nicely written and easy to follow. It also doesn't require trying different join permutations. I'm starting with several additional restrictions (only equijoins, no aggregations, etc.)ftp://ftp.cse.buffalo.edu/users/azhang/disc/SIGMOD/pdf-files/331/202-optimizing.pdfThanks to jcamachorodriguez for his help in sorting out some issues with the rule so far.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.MaterializationTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.VolcanoPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="1390" opendate="2016-9-22 00:00:00" fixdate="2016-9-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avatica JDBC driver wrongly modifies Properties object</summary>
      <description>Creating this JIRA from mail thread https://lists.apache.org/thread.html/5029f1f09c95a76b6e60a0f80e6f145dedf0b51cfdc08b964fb3b060@%3Cuser.phoenix.apache.org%3EI'm using DriverManager.getConnection(url, properties) using following properties url -&gt; "jdbc:phoenix:thin:url=http://prabhu-3.novalocal:8765;serialization =PROTOBUF" properties -&gt; 0 = {java.util.Hashtable$Entry@1491} "user" -&gt; "phoenixuser" 1 = {java.util.Hashtable$Entry@1492} "password" -&gt; 2 = {java.util.Hashtable$Entry@1493} "url" -&gt; "jdbc:phoenix:thin:url=http://prabhu-3.novalocal:8765;serialization =PROTOBUF" 3 = {java.util.Hashtable$Entry@1494} "hbase.client.retries.number" -&gt; "4" 4 = {java.util.Hashtable$Entry@1495} "driver" -&gt; "org.apache.phoenix.jdbc.PhoenixDriver" With the above propert/setting/config it returns a connection to the URL specified, but it also modifies my properties object to following properties -&gt; 0 = {java.util.Hashtable$Entry@2361} "serialization" -&gt; "PROTOBUF" 1 = {java.util.Hashtable$Entry@2362} "user" -&gt; "phoenixuser" 2 = {java.util.Hashtable$Entry@2363} "password" -&gt; *3 = {java.util.Hashtable$Entry@2364} "url" -&gt; "http://prabhu-3.novalocal:8765 &lt;http://prabhu-3.novalocal:8765&gt;"* 4 = {java.util.Hashtable$Entry@2365} "hbase.client.retries.number" -&gt; "4" 5 = {java.util.Hashtable$Entry@2366} "driver" -&gt; "org.apache.phoenix.jdbc.PhoenixDriver" The above only happens if I'm using thin-client. Is this the expected behaviour ? I plan to use this "properties" object after getting the connection for something else. Also, I'm using following in my maven dependency "org.apache.phoenix:phoenix-server-client:4.7.0-HBase-1.1"</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.remote.RemoteMetaTest.java</file>
      <file type="M">avatica.core.src.main.java.org.apache.calcite.avatica.ConnectStringParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="1393" opendate="2016-9-27 00:00:00" fixdate="2016-9-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Exclude packages org.apache.calcite.benchmarks.generated, org.openjdk.jmh from javadoc</summary>
      <description>Exclude packages org.apache.calcite.benchmarks.generated, org.openjdk.jmh from javadoc. These are in the ubenchmark module (in main mode, not test mode) but we don't want them to appear on the web site.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1394" opendate="2016-9-27 00:00:00" fixdate="2016-9-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Using CoreMatchers.containsString causes javadoc errors</summary>
      <description>Under JDK 1.7, using the method CoreMatchers.containsString causes javadoc warnings, similar to https://github.com/junit-team/junit4/issues/872. The cause, I think, is that Avatica uses mockito and it bundles a different version of hamcrest. The solution is to use StringContains.containsString, which exists in an earlier version of hamcrest.</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0,1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.sql.parser.SqlParserUtil.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.server.DigestAuthHttpServerTest.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.server.BasicAuthHttpServerTest.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.remote.RemoteMetaTest.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.RemoteDriverTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="1396" opendate="2016-9-28 00:00:00" fixdate="2016-9-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>isDeterministic only explores top RexCall</summary>
      <description></description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.rex.RexExecutorTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="1400" opendate="2016-9-28 00:00:00" fixdate="2016-9-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>AggregatePullUpConstantsRule might adjust aggregation function parameters indices wrongly</summary>
      <description>I explored a bit and I think this is a piece missing in CALCITE-1038. Introducing a Project operator below as part of the rewriting was removed, and thus, there is no need to adjust the indices of the aggregation function parameters. However, the code is still there.</description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateProjectPullUpConstantsRule.java</file>
    </fixedFiles>
  </bug>
  <bug id="1402" opendate="2016-9-29 00:00:00" fixdate="2016-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Druid Filter translation incorrect if input reference is in RHS of comparison</summary>
      <description>It should have been fixed as part of CALCITE-1357/CALCITE-1358.</description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidQuery.java</file>
    </fixedFiles>
  </bug>
  <bug id="1404" opendate="2016-9-30 00:00:00" fixdate="2016-10-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement FILTER on aggregate functions in Interpreter</summary>
      <description>BindableAggregate doesn't properly filter aggregates like SUM(cnt) FILTER(WHERE foo = 'bar'). It seems to be ignoring the filter completely.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.InterpreterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.interpreter.AggregateNode.java</file>
    </fixedFiles>
  </bug>
  <bug id="1408" opendate="2016-10-3 00:00:00" fixdate="2016-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ResultSet.getXxx methods should throw SQLDataException if cannot convert to the requested type</summary>
      <description>AccessorImpl relies on cannotConvert(String) method to throw a exception when conversion is not possible between the accessor data type, and what the user requested.The exact class type of the exception is RuntimeException which is very generic, and not easy for the user to catch, unlike more specific types. Moreover JDBC drivers usually throws a SQLException instances for these kind of exceptions, which is likely what users are expecting.</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.core.src.test.java.org.apache.calcite.avatica.util.NumberAccessorTest.java</file>
      <file type="M">avatica.core.src.main.java.org.apache.calcite.avatica.util.AbstractCursor.java</file>
    </fixedFiles>
  </bug>
  <bug id="1413" opendate="2016-10-5 00:00:00" fixdate="2016-10-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>New CASE statement simplification</summary>
      <description>Another possible simplification for CASE statements that return boolean values.CASE WHEN p1 THEN e1 WHEN p2 THEN e2 ELSE TRUEENDwhere e1...en are boolean expressions, can be rewritten into:(p1 and e1) or (p2 and e2 and not(p1)) or (not(p1) and not(p2))if p1...pn cannot be nullable.</description>
      <version>1.9.0</version>
      <fixedVersion>1.18.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.sub-query.iq</file>
      <file type="M">core.src.test.resources.sql.some.iq</file>
      <file type="M">core.src.test.resources.sql.blank.iq</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RexProgramTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelMetadataTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexSimplify.java</file>
    </fixedFiles>
  </bug>
  <bug id="1414" opendate="2016-10-5 00:00:00" fixdate="2016-12-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add RAND_INTEGER function, which returns a random integer modulo N</summary>
      <description>Add a RANDOM function.It is not standard SQL, but most DBMSs have one, and it be useful.It will also allow us to better test non-deterministic expressions.I propose that: RANDOM&amp;#40;n) returns an integer between 0 and n - 1 inclusive. There is no facility to specify a seed at this time. The random number generator is randomly seeded at query start time based on (say) the method used by Java's new Random(); if you run the query twice, you will (probably) not get the same results. If you call the function twice in the same row, it will (probably) return different results.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.BuiltInMethod.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.SqlFunctions.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexImpTable.java</file>
    </fixedFiles>
  </bug>
  <bug id="1424" opendate="2016-10-9 00:00:00" fixdate="2016-10-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Druid type is called FLOAT, not DOUBLE</summary>
      <description>Currently the supported column types in Druid adapter are: LONG, DOUBLE, STRING and hyperUniqueThere's no clue to show Druid has DOUBLE as its column type. But instead it should be FLOAT as mentioned in Druid Documentation:Dimension columns will have type STRING. Metric columns will have type FLOAT or LONG or name of the underlying complex type such as hyperUnique in case of COMPLEX metric. Timestamp column will have type LONG.Fangjin Yang didn't mentioned it in related posts either. See 1 and 2</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidConnectionImpl.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteAssert.java</file>
    </fixedFiles>
  </bug>
  <bug id="1621" opendate="2017-2-7 00:00:00" fixdate="2017-2-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Adding a cast around the null literal in aggregate rules</summary>
      <description>details in mail</description>
      <version>1.9.0</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.tools.RelBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateValuesRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateReduceFunctionsRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RexProgramTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelMetadataTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.StandardConvertletTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.externalize.RelJson.java</file>
    </fixedFiles>
  </bug>
  <bug id="1622" opendate="2017-2-8 00:00:00" fixdate="2017-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bugs in website example code</summary>
      <description>On your website's http://calcite.apache.org/docs/ page, the example code is completely broken: it doesn't add() either the ReflectiveSchema or the JdbcSchema to the CalciteConnection's root schema, and the "name" and "hr" JdbcSchema parameter for MySQL appear to need swapping.It took me hours to get Calcite working because of this .I am attaching a patch.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.index.md</file>
    </fixedFiles>
  </bug>
  <bug id="1623" opendate="2017-2-8 00:00:00" fixdate="2017-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make sure the Calendar inside DATE, TIME and TIMESTAMP literals has timezone UTC</summary>
      <description>At query preparation time, Calcite uses a Calendar to hold the value of DATE, TIME, TIMESTAMP literals. It assumes that Calendar has a UTC (GMT) time zone. Bad things probably happen if it does not. We should check, and throw IllegalArgumentException if not.(For the record, Calendar is not used at run time. Those values become int or long, or Integer or Long if nullable.)</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">example.csv.src.main.java.org.apache.calcite.adapter.csv.CsvEnumerator.java</file>
      <file type="M">druid.src.main.java.org.apache.calcite.adapter.druid.DruidConnectionImpl.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlLimitsTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteAssert.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.rex.RexExecutorTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexLiteral.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.DateRangeRules.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptMaterializations.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
