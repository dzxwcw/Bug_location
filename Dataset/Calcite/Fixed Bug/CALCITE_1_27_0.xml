<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="436" opendate="2014-10-9 00:00:00" fixdate="2014-10-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Simpler SPI to query Table</summary>
      <description>Currently, the easiest way for a Table to return results is to implement TranslatableTable, and in the toRel method return a RelNode. That RelNode is typically a sub-class of TableAccessRelBase and implements itself by generating Java code, which must be compiled an executed.We propose an interfaces so that a Table can return results directly.import net.hydromatic.avatica.Cursor;import org.eigenbase.util.Pair;import net.hydromatic.optiq.Table;import org.eigenbase.rex.RexNode;import org.eigenbase.reltype.RelDataTypeField;interface CursorableTable extends Table { /** Returns a cursor over the rows in this Table. */ Cursor scan();}interface ProjectableCursorableTable extends Table { /** Given a list of filters and a list of fields to project, returns a * cursor over the rows in this Table and a list of filters that it * could not implement. * * &lt;p&gt;The cursor must implement the projects and any filters not * in the list. */ Pair&lt;Cursor, List&lt;RexNode&gt;&gt; projectFilterScan(List&lt;RexNode&gt; filters, List&lt;RelDataTypeField&gt; projects);}Cursor is a simple API to implement.A table that implements the CursorableTable SPI does not need to implement TranslatableTable, and so can return its results without doing any code generation.The ProjectableCursorableTable SPI is also optional and goes further; it allows Calcite to push down simple projects and filters without the Table implementor writing any rules or code-generation code. If the implementation of the SPI cannot handle a particular filter, it just returns it, and Calcite will add its own filter to implement it.</description>
      <version>None</version>
      <fixedVersion>0.9.2-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">example.csv.src.test.resources.sales.COMPRESSED.EMPS.csv.gz</file>
      <file type="M">example.csv.TUTORIAL.md</file>
      <file type="M">example.csv.src.test.resources.smart.json</file>
      <file type="M">example.csv.src.test.resources.sales.EMPS.csv</file>
      <file type="M">avatica.src.main.java.net.hydromatic.avatica.AvaticaConnection.java</file>
      <file type="M">avatica.src.main.java.net.hydromatic.avatica.AvaticaPrepareResult.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.BuiltinMethod.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.impl.interpreter.Interpreter.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.impl.interpreter.Nodes.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.impl.interpreter.ProjectNode.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.impl.interpreter.Row.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.impl.interpreter.ScanNode.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.impl.interpreter.SortNode.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.jdbc.MetaImpl.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.jdbc.OptiqConnectionImpl.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.jdbc.OptiqPrepare.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.prepare.OptiqPrepareImpl.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.prepare.RelOptTableImpl.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.rules.java.EnumerableRel.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.rules.java.EnumerableRelImplementor.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.rules.java.JavaRules.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.runtime.Enumerables.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.runtime.EnumeratorCursor.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.Schemas.java</file>
      <file type="M">core.src.main.java.net.hydromatic.optiq.tools.Programs.java</file>
      <file type="M">core.src.main.java.org.eigenbase.relopt.RelOptUtil.java</file>
      <file type="M">core.src.main.java.org.eigenbase.rel.metadata.RelMdPercentageOriginalRows.java</file>
      <file type="M">core.src.main.java.org.eigenbase.rel.rules.PushProjector.java</file>
      <file type="M">core.src.main.java.org.eigenbase.rel.rules.PushProjectPastFilterRule.java</file>
      <file type="M">core.src.main.java.org.eigenbase.rel.rules.PushProjectPastJoinRule.java</file>
      <file type="M">core.src.main.java.org.eigenbase.resource.EigenbaseNewResource.java</file>
      <file type="M">core.src.main.java.org.eigenbase.rex.RexProgram.java</file>
      <file type="M">core.src.main.java.org.eigenbase.util.Bug.java</file>
      <file type="M">core.src.main.resources.org.eigenbase.resource.EigenbaseResource.properties</file>
      <file type="M">core.src.test.java.net.hydromatic.optiq.impl.generate.RangeTable.java</file>
      <file type="M">core.src.test.java.net.hydromatic.optiq.test.InterpreterTest.java</file>
      <file type="M">core.src.test.java.net.hydromatic.optiq.test.OptiqSuite.java</file>
      <file type="M">core.src.test.java.net.hydromatic.optiq.test.ReflectiveSchemaTest.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.CsvEnumerator.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.CsvSchema.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.CsvSchemaFactory.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.CsvSmartTable.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.CsvTable.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.CsvTableFactory.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.CsvTableScan.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.JsonEnumerator.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.JsonTable.java</file>
      <file type="M">example.csv.src.main.java.net.hydromatic.optiq.impl.csv.package-info.java</file>
      <file type="M">example.csv.src.test.java.net.hydromatic.optiq.test.CsvTest.java</file>
      <file type="M">example.csv.src.test.java.net.hydromatic.optiq.test.package-info.java</file>
      <file type="M">example.csv.src.test.resources.bug.json</file>
      <file type="M">example.csv.src.test.resources.model-with-custom-table.json</file>
      <file type="M">example.csv.src.test.resources.model.json</file>
      <file type="M">example.csv.src.test.resources.sales.archers.json</file>
    </fixedFiles>
  </bug>
  <bug id="470" opendate="2014-11-20 00:00:00" fixdate="2014-11-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CSV Example README Tutorial Doesn&amp;#39;t Work</summary>
      <description>While kicking the tires I encountered the following failure:0: jdbc:calcite:model=target/test-classes/mod&gt; !connect jdbc:calcite:model=target/test-classes/smart.json admin admin1: jdbc:calcite:model=target/test-classes/sma&gt; EXPLAIN PLAN FOR SELECT * FROM emps;+------+| PLAN |+------+| CsvTableScan(table=[[SALES, EMPS]], fields=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) |+------+1 row selected (0.342 seconds)1: jdbc:calcite:model=target/test-classes/sma&gt; SELECT depts.name, count(*). . . . . . . . . . . . . . . . . . . . . . .&gt; FROM emps JOIN depts USING (deptno). . . . . . . . . . . . . . . . . . . . . . .&gt; GROUP BY depts.name;Nov 19, 2014 10:45:14 PM org.apache.calcite.sql.validate.SqlValidatorException &lt;init&gt;SEVERE: org.apache.calcite.sql.validate.SqlValidatorException: Column 'DEPTNO' matched using NATURAL keyword or USING clause has incompatible types: cannot compare 'JavaType(class java.lang.String)' to 'JavaType(class java.lang.Integer)'Nov 19, 2014 10:45:14 PM org.apache.calcite.runtime.CalciteException &lt;init&gt;SEVERE: org.apache.calcite.runtime.CalciteContextException: From line 2, column 29 to line 2, column 34: Column 'DEPTNO' matched using NATURAL keyword or USING clause has incompatible types: cannot compare 'JavaType(class java.lang.String)' to 'JavaType(class java.lang.Integer)'Error: while executing SQL: SELECT depts.name, count(*)FROM emps JOIN depts USING (deptno)GROUP BY depts.name (state=,code=0)Given a pointer to what needs to be addressed, I can try and provide a patch for this.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">example.csv.src.test.resources.sales.EMPS.csv.gz</file>
      <file type="M">example.csv.src.test.java.org.apache.calcite.test.CsvTest.java</file>
      <file type="M">example.csv.src.main.java.org.apache.calcite.adapter.csv.CsvEnumerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="474" opendate="2014-11-21 00:00:00" fixdate="2014-11-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Clean up rule naming in order to support enabling/disabling rules</summary>
      <description>(comment from Julian): We already require rule classes to have canonical names. By default, we use the class name (sans package). We should tighten up and allow names to only include &amp;#91;A-Za-z0-9$_.&amp;#93;.</description>
      <version>None</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ValuesReduceRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.ReduceExpressionsRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.JoinUnionTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.JoinProjectTransposeRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.FilterJoinRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.volcano.VolcanoPlanner.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptRule.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
