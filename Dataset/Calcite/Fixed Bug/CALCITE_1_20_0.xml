<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CALCITE">
  <bug id="2977" opendate="2019-4-3 00:00:00" fixdate="2019-4-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Exception is not thrown out when there are ambiguous field in select list</summary>
      <description>In the following sql:select t0 from (select 1 as t0, 2 as t0 from dept)SqlValidatorImpl does not  throw an exception for the ambiguous field "t0".  </description>
      <version>1.20.0</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.DelegatingScope.java</file>
    </fixedFiles>
  </bug>
  <bug id="3090" opendate="2019-5-24 00:00:00" fixdate="2019-5-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update repository URL</summary>
      <description>Use https for maven central.</description>
      <version>None</version>
      <fixedVersion>1.20.0,avatica-1.16.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug id="3148" opendate="2019-6-27 00:00:00" fixdate="2019-6-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Validator throws IndexOutOfBoundsException for SqlInsert when source and sink have non-equal fields number</summary>
      <description></description>
      <version>1.20.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="3159" opendate="2019-6-29 00:00:00" fixdate="2019-9-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Distinct can be removed for MIN/MAX/BIT_OR/BIT_AND aggregate functions</summary>
      <description>For the following query:select a, min(distinct b), bit_or(distinct c) from foo group by a;Currently Calcite still preserve the distinct for these aggregate functions, but DISTINCT is not meaningful with MIN/MAX and is available for ISO compatibility only. We can safely remove distinct and get more optimization opportunities.</description>
      <version>1.20.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelBuilderTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.tools.RelBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlMinMaxAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlBitOpAggFunction.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.AggregateCall.java</file>
    </fixedFiles>
  </bug>
  <bug id="3160" opendate="2019-7-1 00:00:00" fixdate="2019-7-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Failed to materialize when the aggregate function uses group key</summary>
      <description>Repro:@Test public void testAggregateGroupSetsRollUp() { checkMaterialize( "select \"empid\", \"deptno\", count(*) as c, sum(\"empid\") as s from \"emps\" " + "group by \"empid\", \"deptno\"", "select count(*) + 1 as c, \"deptno\" from \"emps\" group by cube(\"empid\",\"deptno\")", HR_FKUK_MODEL, CalciteAssert.checkResultContains( "EnumerableCalc(expr#0..2=[{inputs}], expr#3=[1], " + "expr#4=[+($t2, $t3)], C=[$t4], deptno=[$t1])\n" + " EnumerableAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {1}, {}]], agg#0=[$SUM0($2)])\n" + " EnumerableTableScan(table=[[hr, m0]])")); }Note that if we change sum(\"empid\") to sum("salary"), it can materialize successfully.</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.MaterializationTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.SubstitutionVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3174" opendate="2019-7-5 00:00:00" fixdate="2019-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>IS NOT DISTINCT FROM condition pushed from filter to join is not collapsed</summary>
      <description>If filter containing IS NOT DISTINCT FROM expression is pushed to join, this results to new join condition having this expanded IS NOT DISTINCT FROM expression (and not collapsed one), which can be further modified making impossible to identify the IS NOT DISTINCT FROM condition.</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.FilterJoinRule.java</file>
    </fixedFiles>
  </bug>
  <bug id="3175" opendate="2019-7-6 00:00:00" fixdate="2019-8-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>AssertionError while serializing to JSON a RexLiteral with Enum type</summary>
      <description>Calcite gives an AssertionError while serializing to JSON a RexLiteral with enum type.For example, serialize the RexCall of TRIM function cause java.lang.AssertionError exception. The first argument of TRIM is an enum SqlTrimFunction.Flag with values LEADING, TRAILING, BOTH.</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.plan.RelWriterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.tools.RelBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexBuilder.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.externalize.RelJson.java</file>
    </fixedFiles>
  </bug>
  <bug id="3177" opendate="2019-7-7 00:00:00" fixdate="2019-8-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Deserialize from json of + operator cause exception</summary>
      <description>For a simple sql string "select SAL + 10 FROM SALES.EMP", parse it to RelNode, serialize it to json string works well, but deserialize from the json string cause exception. The error stack is in the error_info.jpg picture.</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.plan.RelWriterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.externalize.RelJsonReader.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.externalize.RelJson.java</file>
    </fixedFiles>
  </bug>
  <bug id="3187" opendate="2019-7-9 00:00:00" fixdate="2019-7-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Derive all decimal return type through type factory</summary>
      <description>Currently decimal product and quotient return types are derived through type factory, this allows clients to override the return type if they so desire.But decimal sum is embedded in return types, also decimal mod does not have a return type inference defined.This task is to derive all of the return types through type factory, so that clients can override if they wish to.</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.ReturnTypes.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlStdOperatorTable.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.type.RelDataTypeSystem.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.type.RelDataTypeFactoryImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.type.RelDataTypeFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="3189" opendate="2019-7-10 00:00:00" fixdate="2019-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Multiple fixes for Oracle SQL dialect</summary>
      <description>Among others, it includes i) SQL translation support for specific types (e.g. SMALLINT --&gt; NUMBER(5)), ii) limiting max length of VARCHAR type (by default 4000), iii) creating datetime literals correctly, and iv) method to infer whether a given data type is supported or not.</description>
      <version>1.20.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.OracleSqlDialect.java</file>
    </fixedFiles>
  </bug>
  <bug id="3191" opendate="2019-7-12 00:00:00" fixdate="2019-8-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In JDBC adapter for MySQL, implement Values by generating SELECT without FROM</summary>
      <description>In JDBC adapter, generate implement Values relational operator by generating SELECT without a FROM clause. (For most dialects we generate VALUES, but MySQL does not support VALUES in a query.)</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.PostgresqlSqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.OracleSqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.MysqlSqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rel2sql.SqlImplementor.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rel2sql.RelToSqlConverter.java</file>
    </fixedFiles>
  </bug>
  <bug id="3195" opendate="2019-7-13 00:00:00" fixdate="2019-7-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Handle UDF that throws checked exceptions in enumerable code generator</summary>
      <description>Current auto-generated code cannot handle UDFs that throws checked exception, so the auto-generated code fails to compile.In piglet, the PigUDFWrapper class is a workaround for handling IOException from some Pig UDFs.Need to fix the codegen engine, then remove PigUDFWrapper class.</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">linq4j.src.test.java.org.apache.calcite.linq4j.test.InlinerTest.java</file>
      <file type="M">linq4j.src.main.java.org.apache.calcite.linq4j.tree.TryStatement.java</file>
      <file type="M">linq4j.src.main.java.org.apache.calcite.linq4j.tree.Shuttle.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.util.Smalls.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.UdfTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexToLixTranslator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.ReflectiveCallNotNullImplementor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3201" opendate="2019-7-18 00:00:00" fixdate="2019-7-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SqlValidator throws exception for sql insert target table with virtual columns</summary>
      <description>Now if we have a target table with schema:t1: - a int not null - b bigint STORED - c varchar VIRTUALand validate a query like:insert into t1 select a from t1;It would throw exception because the target table fields count is 3 but the query is 1, actually the table t1 columns b and c have strategy that we can not insert into, so we better ignore these columns when do validation.The following query in SQLSERVER-2017 passed:create table t( a int, b int, c as a+2);-- insert into t values(1, 2, 3) fails with non-equal schema fields count.insert into t values(1, 2);</description>
      <version>1.20.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">server.src.test.java.org.apache.calcite.test.ServerTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.catalog.MockCatalogReaderExtended.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.catalog.Fixture.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.schema.ColumnStrategy.java</file>
    </fixedFiles>
  </bug>
  <bug id="3214" opendate="2019-7-26 00:00:00" fixdate="2019-8-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add UnionToUnionRule for materialization matching</summary>
      <description>Below materialization matching fails now @Test public void testDEV() { String sql0 = "select * from \"emps\" where \"empid\" &lt; 300"; String sql1 = "select * from \"emps\" where \"empid\" &gt; 200"; checkMaterialize(sql0 + " union all " + sql1, sql1 + " union all " + sql0); }This issue proposes to add a rule for union matching</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.MaterializationTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.MaterializedViewSubstitutionVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3215" opendate="2019-7-26 00:00:00" fixdate="2019-8-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Simplification may have not fully simplified IS NOT NULL expressions</summary>
      <description>CALCITE-2929 have added a safety check to avoid simplifying problematic cases.The safety check apparently misses some kinds, for example: UNARY_PLUS @Test public void testIsNullSimplificationWithUnaryPlus() { RexNode expr = isNotNull(coalesce(unaryPlus(vInt(1)), vIntNotNull(0))); RexNode s = simplify.simplifyUnknownAs(expr, RexUnknownAs.UNKNOWN); assertThat(expr.isAlwaysTrue(), is(true)); assertThat(s, is(trueLiteral)); }</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.RexProgramTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.fuzzer.RexProgramFuzzyTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexSimplify.java</file>
    </fixedFiles>
  </bug>
  <bug id="3218" opendate="2019-7-29 00:00:00" fixdate="2019-8-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Syntax error while parsing DATEADD function (which is valid on Redshift)</summary>
      <description>Syntax error while parsing the DATEADD function:SELECT DATE(CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', events.event_date )) AS "events.event_date", COALESCE(SUM(events.daily_user_count ), 0) AS "events.daily_active_users", COALESCE(SUM(events.monthly_user_count ), 0) AS "events.monthly_active_users"FROM public.events_proto AS eventsWHERE (((events.event_date ) &gt;= ((CONVERT_TIMEZONE('America/Los_Angeles', 'UTC', DATEADD(day,-364, DATE_TRUNC('day',CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', GETDATE())) )))) AND (events.event_date ) &lt; ((CONVERT_TIMEZONE('America/Los_Angeles', 'UTC', DATEADD(day,365, DATEADD(day,-364, DATE_TRUNC('day',CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', GETDATE())) ) ))))))GROUP BY 1HAVING NOT (COALESCE(SUM(events.monthly_user_count ), 0) = 0)ORDER BY 1 DESCLIMIT 500throws `Column 'year' not found in any table``DATEADD(year,1,...`This query is valid on Redshift. Redshift's parser understands that the first argument (DAY) is intended to be a time unit, not an identifier.</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.materialize.LatticeSuggesterTest.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
      <file type="M">babel.src.test.java.org.apache.calcite.test.BabelParserTest.java</file>
      <file type="M">babel.src.main.codegen.includes.parserImpls.ftl</file>
      <file type="M">babel.src.main.codegen.config.fmpp</file>
    </fixedFiles>
  </bug>
  <bug id="3235" opendate="2019-8-7 00:00:00" fixdate="2019-8-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add CONCAT function for Redshift</summary>
      <description>Get this error:No match found for function signature CONCAT(&lt;CHARACTER&gt;, &lt;CHARACTER&gt;, ...)When using CONCAT, e.g.SELECT CONCAT('a', city) FROM public.aircraft </description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.materialize.LatticeSuggesterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlLibraryOperatorTableFactory.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlLibraryOperators.java</file>
    </fixedFiles>
  </bug>
  <bug id="3236" opendate="2019-8-8 00:00:00" fixdate="2019-8-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Handle issues found in static code analysis</summary>
      <description>Recently, we are conducting static code analysis to make our project robust.In Calcite, many potential risks can also be found with the tool FindBugs, as shown in the figure below.However, it is difficult to trigger most of them. Current now, we fix two obvious issues.</description>
      <version>1.20.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.MutableRelTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.mutable.MutableTableFunctionScan.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.SubstitutionVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3252" opendate="2019-8-14 00:00:00" fixdate="2019-8-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add CONVERT_TIMEZONE, TO_DATE, TO_TIMESTAMP functions to Redshift operator library</summary>
      <description>Syntax error while parsing CONVERT_TIMEZONE, TO_DATE, TO_TIMESTAMP functions on Redshift. Example queries that error for these functions:SELECT CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', CAST('2019-01-01 01:00:00' AS TIMESTAMP) FROM mytable SELECT TO_DATE('2019-01-01', 'YYYY-MM-DD') FROM mytable SELECT TO_TIMESTAMP('2019-01-01 01:00:00', 'YYYY-MM-DD HH:MM:SS') FROM mytable With errors like:No match found for function signature CONVERT_TIMEZONE(&lt;CHARACTER&gt;, &lt;CHARACTER&gt;, &lt;TIMESTAMP&gt;)These are valid in Redshift and Postgres, except for CONVERT_TIMEZONE, which I believe is only valid on Redshift. </description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.materialize.LatticeSuggesterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.type.OperandTypes.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlJdbcFunctionCall.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlLibraryOperators.java</file>
    </fixedFiles>
  </bug>
  <bug id="3280" opendate="2019-8-21 00:00:00" fixdate="2019-8-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cannot parse query REGEXP_REPLACE in Redshift</summary>
      <description>REGEXP_REPLACE error:No match found for function signature REGEXP_REPLACE(&lt;CHARACTER&gt;, &lt;CHARACTER&gt;, &lt;CHARACTER&gt;) Example query:SELECT * , MD5(TRIM(BOTH ' ' FROM REGEXP_REPLACE(LOWER(name), '([[:space:]]|,)+([iInNcC]|[lLcC]).*$', ''))) AS company_id FROM public.account </description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlFunctionsTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.main.resources.org.apache.calcite.runtime.CalciteResource.properties</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.Unsafe.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.BuiltInMethod.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlLibraryOperators.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.SqlFunctions.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.CalciteResource.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexImpTable.java</file>
    </fixedFiles>
  </bug>
  <bug id="3310" opendate="2019-8-30 00:00:00" fixdate="2019-8-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Approximate and exact aggregate calls are recognized as the same during sql-to-rel conversion</summary>
      <description>For sql:SELECT empno, count(distinct ename)approx_count_distinct(ename)FROM empGROUP BY empnoAfter sql-to-rel conversion, the plan is:LogicalProject(EMPNO=[$0], EXPR$1=[$1], EXPR$2=[$1]) LogicalAggregate(group=[{0}], EXPR$1=[COUNT(DISTINCT $1)]) LogicalProject(EMPNO=[$0], ENAME=[$1]) LogicalTableScan(table=[[CATALOG, SALES, EMP]])</description>
      <version>1.20.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.core.AggregateCall.java</file>
    </fixedFiles>
  </bug>
  <bug id="3311" opendate="2019-8-30 00:00:00" fixdate="2019-8-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add doc to site for implicit type coercion</summary>
      <description></description>
      <version>1.20.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.reference.md</file>
      <file type="M">site..docs.adapter.md</file>
    </fixedFiles>
  </bug>
  <bug id="3321" opendate="2019-9-3 00:00:00" fixdate="2019-9-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>BigQuery does not have correct casing rules</summary>
      <description>Bigquery has some strange case sensitivity rules, so I think it should leave casing unchanged and make it not case sensitiveSee rules here:https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#case_sensitivity</description>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.BigQuerySqlDialect.java</file>
    </fixedFiles>
  </bug>
  <bug id="3344" opendate="2019-9-14 00:00:00" fixdate="2019-9-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In JDBC adapter, generate "SELECT TOP(n)" for MSSQL 2008 and earlier, and for Sybase ASE</summary>
      <description>In JDBC adapter, generate "SELECT TOP&amp;#40;n)" for Microsoft SQL Server (MSSQL) 2008 and earlier, because it doesn't support "FETCH".For MSSQL 2012 and higher, continue to generate "FETCH NEXT n ROWS".I have started work here: https://github.com/julianhyde/calcite/tree/3344-top-n</description>
      <version>None</version>
      <fixedVersion>1.22.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rel2sql.RelToSqlConverterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlWriter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlSelectOperator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.pretty.SqlPrettyWriter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.SybaseSqlDialect.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.dialect.MssqlSqlDialect.java</file>
    </fixedFiles>
  </bug>
  <bug id="3355" opendate="2019-9-17 00:00:00" fixdate="2019-12-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Deduce whether CASE and COALESCE may produce NULL values</summary>
      <description>When executing queries like: "SELECT COALESCE(name, 'unknown') as name_out FROM PCOLLECTION"(input 'name' is nullable)There is a need to know whether the result is nullable or not (in this case - not). During validation stage "COALESCE" is being transformed (via SqlValidatorImpl.performUnconditionalRewrites) into a "CASE" statement, which currently does not determine nullability of a result.</description>
      <version>1.20.0</version>
      <fixedVersion>1.22.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.fun.SqlCaseOperator.java</file>
    </fixedFiles>
  </bug>
  <bug id="3433" opendate="2019-10-21 00:00:00" fixdate="2019-11-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>EQUALS operator between date/timestamp types returns false if the type is nullable</summary>
      <description>sqlselect time0 = time1from (select timestamp'2000-12-30 21:07:32' as time0, timestamp'2000-12-30 21:07:32' as time1 union all select cast(null as timestamp) as time0, cast(null as timestamp) as time1)answer is falsebut sqlselect time0 = time1from(select timestamp'2000-12-30 21:07:32' as time0, timestamp'2000-12-30 21:07:32'as time1)answer is true </description>
      <version>1.17.0,1.18.0,1.19.0,1.20.0,1.21.0</version>
      <fixedVersion>1.22.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.RexImpTable.java</file>
    </fixedFiles>
  </bug>
  <bug id="3576" opendate="2019-12-6 00:00:00" fixdate="2019-4-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove Enumerable convention check in FilterIntoJoinRule</summary>
      <description>Context: https://github.com/apache/calcite/pull/1247#discussion_r289489174</description>
      <version>None</version>
      <fixedVersion>1.23.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.misc.iq</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.enumerable.EnumerableHashJoinTest.java</file>
      <file type="M">core.src.test.resources.sql.sub-query.iq</file>
      <file type="M">core.src.test.resources.sql.join.iq</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.MaterializationTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.FilterJoinRule.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableNestedLoopJoin.java</file>
    </fixedFiles>
  </bug>
  <bug id="3822" opendate="2020-2-25 00:00:00" fixdate="2020-6-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Source distribution must not contain fonts under SIL OFL 1.1 license (category B)</summary>
      <description>The source distribution contains "font-awesome:fonts" which is licensed ashttp://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License).OFL 1.1 is "category B" (see LEGAL-112).We need to remove "web and desktop font files", probably under site/fonts. Code and icons are OK.</description>
      <version>1.20.0,1.21.0</version>
      <fixedVersion>1.22.0,avatica-1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">release.build.gradle.kts</file>
    </fixedFiles>
  </bug>
</bugrepository>
