<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CALCITE">
  
  
  
  
  <bug fixdate="2017-4-21 01:00:00" id="2063" opendate="2017-11-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add JDK 10 to CI</summary>
      <description>In CALCITE-2058 we added support for JDK 10 (early access build), and we test using a cron job on Julian's server but currently Apache's Jenkins does not support JDK 10. This task is to enable JDK 10 tests when Jenkins supports it.</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">.travis.yml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2017-12-3 01:00:00" id="2076" opendate="2017-12-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade to Druid 0.11.0</summary>
      <description>This task is to update to Druid version 0.11.0</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.history.md</file>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2017-2-8 01:00:00" id="2081" opendate="2017-12-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Query with windowed aggregates under both sides of a JOIN throws NullPointerException</summary>
      <description>NPE when joining 2 subqueries that use window functions.Testing with a new test case in JdbcTest: /** Tests for a join of subqueries using Window Functions */ @Test public void testJoinWithWinAgg() { final String sql = "select a.*, b.r from\n" + "(select \"deptno\", first_value(\"empid\") over \n" + "(partition by \"deptno\" order by \"commission\") as r\n" + "from \"hr\".\"emps\") a\n" + "left join\n" + "(select \"deptno\", last_value(\"empid\") over \n" + "(partition by \"deptno\" order by \"commission\") as r\n" + "from \"hr\".\"emps\") b\n" + "on a.\"deptno\" = b.\"deptno\""; CalciteAssert.hr() .query(sql) .runs(); }Debugging this I found out that the NPE occurs at Expressions.declare (line 2937) in initializer.getType() because initializer is null. The statement isint prevStart;This statement does not have an initializer, but the method "declare" is trying to get the initializer's type, generating NPE.This happens when joining 2 subqueries that use window functions because they end up using the same variables. In BlockBuilder.append (line 124) it checks if the variable already exists and the problem starts there.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.winagg.iq</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableWindow.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.EnumerableRelImplementor.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2017-1-15 01:00:00" id="2090" opendate="2017-12-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Extend Druid Range Rules to extract interval from Floor</summary>
      <description>DruidRangeRules currently only extracts intervals from EXTRACT function. This task is to enhance Druid Range Rules to also support Floor functions.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">druid.src.test.java.org.apache.calcite.test.DruidAdapterIT.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.rel.rules.DateRangeRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexLiteral.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.DateRangeRules.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  
  
  <bug fixdate="2018-2-1 01:00:00" id="2162" opendate="2018-2-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Exception when accessing sub-field of sub-field of composite Array element</summary>
      <description>for example, the following expression will throw an exception:a[1].b.cbut the following will work:a[1].b </description>
      <version>1.15.0</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.MockCatalogReader.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2018-2-8 01:00:00" id="2172" opendate="2018-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document IDE setup for project contribution</summary>
      <description>Document the IDE setup for Calcite development. Start with IDEA, document Eclipse, NetBeans, and maybe VIM and Emacs. </description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.howto.md</file>
      <file type="M">site.develop.index.md</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2018-3-7 01:00:00" id="2207" opendate="2018-3-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enforce Java version via maven-enforcer-plugin</summary>
      <description>Now that jdk7 support has been dropped, we should add some logic to the build to fail obviously when a version of Java is used that we don't support.</description>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2018-3-14 01:00:00" id="2213" opendate="2018-3-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Geode integration tests are failing</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.16.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">plus.src.main.resources.chinook.chinook.json</file>
      <file type="M">geode.src.test.java.org.apache.calcite.adapter.geode.rel.GeodeZipsIT.java</file>
      <file type="M">geode.src.test.java.org.apache.calcite.adapter.geode.rel.GeodeAdapterBookshopIT.java</file>
      <file type="M">geode.README.md</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2018-6-18 01:00:00" id="2318" opendate="2018-5-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>NumberFormatException while Sqlline start</summary>
      <description>Hellolooks like known issue here https://github.com/jline/jline2/issues/281IMHO jline version update will help to have it fixedto reproduce just run sqlline[serg@localhost csv]$ ./sqlline [ERROR] Failed to construct terminal; falling back to unsupportedjava.lang.NumberFormatException: For input string: "0x100" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:580) at java.lang.Integer.valueOf(Integer.java:766) at jline.internal.InfoCmp.parseInfoCmp(InfoCmp.java:59) at jline.UnixTerminal.parseInfoCmp(UnixTerminal.java:242) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:65) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:50) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at java.lang.Class.newInstance(Class.java:442) at jline.TerminalFactory.getFlavor(TerminalFactory.java:211) at jline.TerminalFactory.create(TerminalFactory.java:102) at jline.TerminalFactory.get(TerminalFactory.java:186) at jline.TerminalFactory.get(TerminalFactory.java:192) at sqlline.SqlLineOpts.&lt;init&gt;(SqlLineOpts.java:45) at sqlline.SqlLine.&lt;init&gt;(SqlLine.java:54) at sqlline.SqlLine.start(SqlLine.java:372) at sqlline.SqlLine.main(SqlLine.java:265)[ERROR] Failed to construct terminal; falling back to unsupportedjava.lang.NumberFormatException: For input string: "0x100" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:580) at java.lang.Integer.valueOf(Integer.java:766) at jline.internal.InfoCmp.parseInfoCmp(InfoCmp.java:59) at jline.UnixTerminal.parseInfoCmp(UnixTerminal.java:242) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:65) at jline.UnixTerminal.&lt;init&gt;(UnixTerminal.java:50) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at java.lang.Class.newInstance(Class.java:442) at jline.TerminalFactory.getFlavor(TerminalFactory.java:211) at jline.TerminalFactory.create(TerminalFactory.java:102) at jline.TerminalFactory.create(TerminalFactory.java:51) at sqlline.SqlLine.getConsoleReader(SqlLine.java:705) at sqlline.SqlLine.begin(SqlLine.java:639) at sqlline.SqlLine.start(SqlLine.java:373) at sqlline.SqlLine.main(SqlLine.java:265)</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2018-7-25 01:00:00" id="2379" opendate="2018-6-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CVSS dependency-check-maven fails for calcite-spark module</summary>
      <description>Check for vulnerabilities among dependencies fails for calcite-spark module."mvn install -Ppedantic -DskipTests=true" fails for lib py4j-0.10.4.jar.</description>
      <version>None</version>
      <fixedVersion>1.17.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ubenchmark.pom.xml</file>
      <file type="M">spark.pom.xml</file>
      <file type="M">site..docs.howto.md</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2018-7-26 01:00:00" id="2381" opendate="2018-6-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update HOWTOs to clarify a few gotchas</summary>
      <description>Some issues I ran into while releasing Avatica 1.12.0 that should be clarified in the HOWTO document on the website: GPG signs using a default key (I think this is the first key, if no default is set). I had multiple keys and my Apache key was not my first key. I was not 100% sure that `-DdevelopmentVersion` should be the version after the current release. It took a while to work out how to authenticate against Apache's maven repo. See http://www.apache.org/dev/publishing-maven-artifacts.html#dev-env for solutionThe HOWTO for Calcite should also be updated to aid future release managers.</description>
      <version>None</version>
      <fixedVersion>1.17.0,avatica-1.13.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.howto.md</file>
    </fixedFiles>
  </bug>
  
  
  
</bugrepository>