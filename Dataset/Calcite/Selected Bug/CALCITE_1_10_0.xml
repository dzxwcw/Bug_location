<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CALCITE">
  <bug fixdate="2016-12-10 01:00:00" id="1425" opendate="2016-10-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support two-level column structure in INSERT/UPDATE/MERGE</summary>
      <description/>
      <version>1.10.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlToRelConverterTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.MockCatalogReader.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorUtil.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.ListScope.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.IdentifierNamespace.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.DelegatingScope.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlInsert.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlIdentifier.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.advise.SqlAdvisorValidator.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.schema.CustomExpansionTable.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-10-12 01:00:00" id="1433" opendate="2016-10-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>avatica-server module depends on non-existent avatica test-jar</summary>
      <description>Because of CALCITE-1224, avatica artifact was renamed avatica-core (and a new avatica artifact is produced). Unfortunately, avatica-server still depends on avatica test-jar, which is now avatica-core test-jar.</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.standalone-server.pom.xml</file>
      <file type="M">avatica.server.pom.xml</file>
      <file type="M">avatica.pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2016-11-17 01:00:00" id="1447" opendate="2016-10-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement INTERSECT DISTINCT by rewriting to UNION ALL and counting</summary>
      <description>Interesect distinct will be rewritten as Rewrite: (GB-Union All-GB)-GB-FIL-Proj Example: R1 Intersect All R2 R3 = GB(R1 on all attributes + count() as c) union all GB(R2 on all attributes + count() as c) R4 = GB(R3 on all attributes + count(c) as cnt) R5 = Fil ( cnt == #branch ) R6 = Proj(R5 on all attributes)</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.misc.iq</file>
      <file type="M">core.src.test.resources.sql.dummy.iq</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcFrontLinqBackTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.plan.RelOptUtil.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-10-23 01:00:00" id="1463" opendate="2016-10-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove exclusions from standalone-server&amp;#39;s shaded jar</summary>
      <description>More fallout from the non-shaded+shaded client changes in CALCITE-1224.The standalone-server's shaded jar was excluding some dependencies already present because it only provided the shaded jar. When switching it to use the non-shaded artifact, the exclusions should have been removed and they were not.</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.standalone-server.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-10-23 01:00:00" id="1464" opendate="2016-10-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade dependencies to latest in their maintenance lines</summary>
      <description>Updating jetty to 9.2.19.v20160908 is probably safe/good to do. Updating to jodatime 2.9.4 also sounds good</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.pom.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-11-8 01:00:00" id="1484" opendate="2016-11-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade Apache parent POM to version 18</summary>
      <description>Upgrade Apache parent POM to version 18, which was released in May; we are currently on version 17.The differences seem to include: upgrade various plugins change http: to https: in URLs exclude DEPENDENCIES from release (related to CALCITE-741)</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ubenchmark.pom.xml</file>
      <file type="M">spark.pom.xml</file>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-11-8 01:00:00" id="1485" opendate="2016-11-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade Avatica&amp;#39;s Apache parent POM to version 18</summary>
      <description>In Avatica, upgrade Apache parent POM to version 18. Details similar to CALCITE-1484.</description>
      <version>None</version>
      <fixedVersion>avatica-1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.tck.pom.xml</file>
      <file type="M">avatica.standalone-server.pom.xml</file>
      <file type="M">avatica.shaded.core.pom.xml</file>
      <file type="M">avatica.server.pom.xml</file>
      <file type="M">avatica.pom.xml</file>
      <file type="M">avatica.core.pom.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-11-23 01:00:00" id="1506" opendate="2016-11-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Push OVER Clause to underlying SQL via JDBC adapter</summary>
      <description>The jdbc adapter adapter should push down the OVER clause for all dialects that support window functions. At the moment the Rel to SQL conversion ignores the 'OVER(...)'. The RexOver expression is treated as a plain RexCall and the RexOver#window attribute is not converted into SQL. For example if the following sql query (using Postgres dialect): SELECT "id", "device_id", "transaction_value", "account_id", "ts_millis", MAX("ts_millis") OVER(partition by "device_id") as "last_version_number" FROM "HAWQ"."transaction"WHERE "device_id" = 1445is pushed down to the jdbc like this:SELECT "id", "device_id", "transaction_value", "account_id", "ts_millis", MAX("ts_millis") AS "last_version_number"FROM "transaction"WHERE "device_id" = 1445The OVER clause is completely dropped! Here is the plan:JdbcToEnumerableConverter JdbcProject(id=[$0], device_id=[$1], transaction_value=[$2], account_id=[$3], ts_millis=[$4], last_version_number=[MAX($4) OVER (PARTITION BY $1 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)]) JdbcFilter(condition=[=($1, 1445)]) JdbcTableScan(table=[[HAWQ, transaction]])</description>
      <version>1.10.0</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcAdapterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rel2sql.SqlImplementor.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-3-29 01:00:00" id="1513" opendate="2016-11-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Correlated NOT IN query throws AssertionError</summary>
      <description>A correlated NOT IN query throws AssertionError during decorrelation. Here is a patch that reproduces the case:diff --git a/core/src/test/resources/sql/subquery.iq b/core/src/test/resources/sql/subquery.iqindex ad71655..975aae1 100644--- a/core/src/test/resources/sql/subquery.iq+++ b/core/src/test/resources/sql/subquery.iq@@ -370,6 +370,22 @@ where e.job not in ( !plan !} +# Correlated condition in NOT IN.+# Tested on Oracle.+select count(*) as c+from "scott".emp as e+where sal + 100 not in (+ select comm+ from "scott".emp+ where job = e.job);+ EMPNO ENAME JOB MGR HIREDATE SAL COMM DEPTNO+---------- ---------- --------- ---------- --------- ---------- ---------- ----------+ 7499 ALLEN SALESMAN 7698 20-FEB-81 1600 300 30+ 7521 WARD SALESMAN 7698 22-FEB-81 1250 500 30+ 7654 MARTIN SALESMAN 7698 28-SEP-81 1250 1400 30+ 7844 TURNER SALESMAN 7698 08-SEP-81 1500 0 30+!ok+ # [CALCITE-864] Correlation variable has incorrect row type if it is populated # by right side of a Join select *And here is the stack:java.lang.AssertionError: Internal error: While invoking method 'public org.apache.calcite.sql2rel.RelDecorrelator$Frame org.apache.calcite.sql2rel.RelDecorrelator.decorrelateRel(org.apache.calcite.rel.logical.LogicalAggregate)' at org.apache.calcite.util.Util.newInternal(Util.java:792) at org.apache.calcite.util.ReflectUtil$2.invoke(ReflectUtil.java:534) at org.apache.calcite.sql2rel.RelDecorrelator.getInvoke(RelDecorrelator.java:601) at org.apache.calcite.sql2rel.RelDecorrelator.decorrelate(RelDecorrelator.java:242) at org.apache.calcite.sql2rel.RelDecorrelator.decorrelateQuery(RelDecorrelator.java:211) at org.apache.calcite.tools.Programs$DecorrelateProgram.run(Programs.java:370) at org.apache.calcite.tools.Programs$SequenceProgram.run(Programs.java:351) at org.apache.calcite.prepare.Prepare.optimize(Prepare.java:155) at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:286) at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:195) at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:748) at org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:610) at org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:580)Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.calcite.util.ReflectUtil$2.invoke(ReflectUtil.java:531) ... 29 moreCaused by: java.lang.AssertionError at org.apache.calcite.sql2rel.RelDecorrelator.decorrelateRel(RelDecorrelator.java:454) ... 34 more</description>
      <version>None</version>
      <fixedVersion>1.19.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.sub-query.iq</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  <bug fixdate="2016-1-20 01:00:00" id="1547" opendate="2016-12-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Release Calcite 1.11.0</summary>
      <description>Release Apache Calcite 1.11.0. The plan is to release in early January, target code freeze on Wed Dec 28th.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.howto.md</file>
      <file type="M">site..docs.history.md</file>
      <file type="M">README</file>
      <file type="M">pom.xml</file>
      <file type="M">NOTICE</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-12-21 01:00:00" id="1548" opendate="2016-12-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Instantiate function objects once per query</summary>
      <description>If a user-defined function is based on a class and its methods are non-static then it needs to be instantiated; at present the code generator seems to instantiate it once per iteration, but it should be instantiated in a static member, therefore once per query.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">linq4j.src.test.java.org.apache.calcite.linq4j.test.ExpressionTest.java</file>
      <file type="M">linq4j.src.main.java.org.apache.calcite.linq4j.tree.DeterministicCodeOptimizer.java</file>
      <file type="M">linq4j.src.main.java.org.apache.calcite.linq4j.tree.BlockBuilder.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.util.Smalls.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.UdfTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.adapter.enumerable.ReflectiveCallNotNullImplementor.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2017-1-4 01:00:00" id="1562" opendate="2017-1-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update findbugs jsr305</summary>
      <description>If we update the version of jsr305 that we use, we also obtain clarity on the license of the artifact to assuage any concerns.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2017-1-13 01:00:00" id="1575" opendate="2017-1-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Literals may lose precision during expression reduction</summary>
      <description/>
      <version>1.11.0,1.10.0</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rex.RexUtil.java</file>
    </fixedFiles>
  </bug>
  
  
</bugrepository>