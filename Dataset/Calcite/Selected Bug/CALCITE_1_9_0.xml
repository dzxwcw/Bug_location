<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CALCITE">
  
  <bug fixdate="2016-9-5 01:00:00" id="1369" opendate="2016-9-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Display a list of Avatica clients on the website</summary>
      <description>I think it would be really neat to have a well organized list of Avatica clients on the website. This would make clients much more discoverable and make Avatica and Calcite much more easier for people to get started with. For example, Kafka has a wiki page with their clients here: https://cwiki.apache.org/confluence/display/KAFKA/Clients1. Most of the clients currently available (the .NET and python ones) are currently targeted towards Apache Phoenix. Should we include these clients? If not, is there a process for reaching out to their maintainers to see if they are interested in generalising them to target Avatica?2. Is there any process for including a client on such a page? Should anyone be able to add the client, or do we need explicit permission from the maintainers?3. To reduce friction, is it viable to have a wiki page, so that maintainers can easily add their own clients?</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.site..docs.index.md</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2016-9-27 01:00:00" id="1393" opendate="2016-9-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Exclude packages org.apache.calcite.benchmarks.generated, org.openjdk.jmh from javadoc</summary>
      <description>Exclude packages org.apache.calcite.benchmarks.generated, org.openjdk.jmh from javadoc. These are in the ubenchmark module (in main mode, not test mode) but we don't want them to appear on the web site.</description>
      <version>None</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2016-9-27 01:00:00" id="1394" opendate="2016-9-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Using CoreMatchers.containsString causes javadoc errors</summary>
      <description>Under JDK 1.7, using the method CoreMatchers.containsString causes javadoc warnings, similar to https://github.com/junit-team/junit4/issues/872. The cause, I think, is that Avatica uses mockito and it bundles a different version of hamcrest. The solution is to use StringContains.containsString, which exists in an earlier version of hamcrest.</description>
      <version>None</version>
      <fixedVersion>avatica-1.9.0,1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.sql.parser.SqlParserUtil.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.server.DigestAuthHttpServerTest.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.server.BasicAuthHttpServerTest.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.remote.RemoteMetaTest.java</file>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.RemoteDriverTest.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-9-28 01:00:00" id="1400" opendate="2016-9-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>AggregatePullUpConstantsRule might adjust aggregation function parameters indices wrongly</summary>
      <description>I explored a bit and I think this is a piece missing in CALCITE-1038. Introducing a Project operator below as part of the rewriting was removed, and thus, there is no need to adjust the indices of the aggregation function parameters. However, the code is still there.</description>
      <version>1.9.0</version>
      <fixedVersion>1.10.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateProjectPullUpConstantsRule.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2016-10-30 01:00:00" id="1404" opendate="2016-9-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement FILTER on aggregate functions in Interpreter</summary>
      <description>BindableAggregate doesn't properly filter aggregates like SUM(cnt) FILTER(WHERE foo = 'bar'). It seems to be ignoring the filter completely.</description>
      <version>None</version>
      <fixedVersion>1.11.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.InterpreterTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.interpreter.AggregateNode.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2017-2-8 01:00:00" id="1622" opendate="2017-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bugs in website example code</summary>
      <description>On your website's http://calcite.apache.org/docs/ page, the example code is completely broken: it doesn't add() either the ReflectiveSchema or the JdbcSchema to the CalciteConnection's root schema, and the "name" and "hr" JdbcSchema parameter for MySQL appear to need swapping.It took me hours to get Calcite working because of this .I am attaching a patch.</description>
      <version>None</version>
      <fixedVersion>1.12.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.index.md</file>
    </fixedFiles>
  </bug>
  
</bugrepository>