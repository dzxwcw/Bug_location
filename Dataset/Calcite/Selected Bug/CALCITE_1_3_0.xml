<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CALCITE">
  <bug fixdate="2015-4-9 01:00:00" id="1113" opendate="2015-10-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Parameter precision and scale are not returned from Avatica REST API</summary>
      <description>Create a tableCREATE TABLE IF DECIMAL_TABLE(keycolumn VARCHAR(255) PRIMARY KEY,column1 DECIMAL(38,0));Prepare a parameterized statementrequest:{"request":"prepare","connectionId":"3c39adc2-d13d-f87a-a63f-4ac6fbaf7CE8","sql":"select * from decimal_table where column1 &gt; ? ","maxRowCount":"-1"}{"response":"prepare","statement":{"connectionId":"3c39adc2-d13d-f87a-a63f-4ac6fbaf7CE8","id":1891923767,"signature":{"columns":[{"ordinal":0,"autoIncrement":false,"caseSensitive":false,"searchable":true,"currency":false,"nullable":0,"signed":false,"displaySize":255,"label":"KEYCOLUMN","columnName":"KEYCOLUMN","schemaName":"","precision":255,"scale":0,"tableName":"DECIMAL_TABLE","catalogName":"","type":{"type":"scalar","id":12,"name":"VARCHAR","rep":"STRING"},"readOnly":true,"writable":false,"definitelyWritable":false,"columnClassName":"java.lang.String"},{"ordinal":1,"autoIncrement":false,"caseSensitive":false,"searchable":true,"currency":false,"nullable":1,"signed":true,"displaySize":38,"label":"COLUMN1","columnName":"COLUMN1","schemaName":"","precision":38,"scale":0,"tableName":"DECIMAL_TABLE","catalogName":"","type":{"type":"scalar","id":3,"name":"DECIMAL","rep":"OBJECT"},"readOnly":true,"writable":false,"definitelyWritable":false,"columnClassName":"java.math.BigDecimal"}],"sql":"select * from decimal_table where column1 &gt; ? ","parameters":[{"signed":false,"precision":0,"scale":0,"parameterType":3,"typeName":"DECIMAL","className":"java.math.BigDecimal","name":"?1"}],"cursorFactory":{"style":"LIST","clazz":null,"fieldNames":null}}}}The precision and scale are always returned as '0'."parameters":[{"signed":false, "precision":0, "scale":0 ,"parameterType":3,"typeName":"DECIMAL","className":"java.math.BigDecimal","name":"?1"}],"cursorFactory":{"style":"LIST","clazz":null,"fieldNames":null}}}}</description>
      <version>1.3.0-incubating</version>
      <fixedVersion>avatica-1.8.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">avatica.server.src.test.java.org.apache.calcite.avatica.RemoteDriverTest.java</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2015-4-24 01:00:00" id="700" opendate="2015-4-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pass time zone into tests</summary>
      <description>Pass time zone into tests launched via maven. If you run tests via, saymvn -Duser.timezone=Europe/Moscow testthen each of the tests instantiated by surefire in each sub-project will be run in a JVM whose default timezone is Moscow.This helps us ensure that JDBC date-time conversions work correctly in all time zones.A limitation is that the timezone name must not contain spaces: -Duser.timezone=America/Los_Angeles works, -Duser.timezone=America/Los Angeles does not.You can safely ignore the warning [WARNING] The system property user.timezone is configured twice! The property appears in &lt;argLine/&gt; and any of &lt;systemPropertyVariables/&gt;, &lt;systemProperties/&gt; or user property.</description>
      <version>None</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  <bug fixdate="2015-5-12 01:00:00" id="723" opendate="2015-5-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Document lattices</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">README.md</file>
      <file type="M">doc.model.md</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2015-5-16 01:00:00" id="733" opendate="2015-5-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Multiple distinct-COUNT query gives wrong results</summary>
      <description>The query select "department_id" as d, count(distinct "education_level") as c1, count(distinct "gender") as c2 from foodmart_clone."employee" group by "department_id"; returns 0 rows and should return 12. In the plan EnumerableCalc(expr#0..3=[{inputs}], department_id=[$t2], C1=[$t3], C2=[$t1]) EnumerableJoin(condition=[=($0, $2)], joinType=[inner]) EnumerableAggregate(group=[{0}], groups=[[{7}]], C2=[COUNT($1)]) EnumerableAggregate(group=[{7, 15}]) EnumerableTableScan(table=[[FOODMART_CLONE, employee]]) EnumerableAggregate(group=[{0}], groups=[[{7}]], C1=[COUNT($1)]) EnumerableAggregate(group=[{7, 13}]) EnumerableTableScan(table=[[FOODMART_CLONE, employee]]) you can see group=[{0}], groups=[[{7}]] and this is wrong &amp;#8211; the groups should be made up of the same bits as the group. We should add an assert on this invariant and fixing it will probably cause the plan to return the right results.</description>
      <version>None</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.agg.oq</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-7-5 01:00:00" id="752" opendate="2015-6-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add back sqlline as a dependency to csv example</summary>
      <description>Tried to run some example query in calcite tutorial http://calcite.incubator.apache.org/docs/tutorial.html. Hit the following error, when started sqlline under example/csv:Error: Could not find or load main class sqlline.SqlLine.Turns out CALCITE-619 removed the SqlLine dependency, and CALCITE-692 added it back to calcite-core, but only in "test" scope. This means the dependency of sqlline is not transitive in example/csv project, and hence hit the error.Proposed change is to change the the scope from "test" to default, which is transitive.</description>
      <version>None</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">example.csv.pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2015-7-26 01:00:00" id="774" opendate="2015-6-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>When Group By clause is present, the argument in window function should not refer to any column outside Group By</summary>
      <description>An invalid query such as:select max(empno) over () from empgroup by deptnoThis query is invalid because the argument in max (i.e., empno) points at a column which is not present in Group By clause. However, Calcite does not catch it but generate a plan. Invalid queries should fail early to reduce potential confusion.</description>
      <version>None</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.AggChecker.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-7-13 01:00:00" id="799" opendate="2015-7-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect result for "HAVING count(*) &gt; 1"</summary>
      <description/>
      <version>1.3.0-incubating</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.agg.oq</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.RelOptRulesTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.FilterAggregateTransposeRule.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-7-18 01:00:00" id="806" opendate="2015-7-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ROW_NUMBER should emit distinct values</summary>
      <description>ROW_NUMBER should emit distinct values even for rows that have identical sort keys, or if there is no sort key. (This is distinct from RANK and DENSE_RANK, which emit the same value for rows with the same sort key.)</description>
      <version>None</version>
      <fixedVersion>1.4.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">core.src.test.resources.sql.winagg.oq</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.main.resources.org.apache.calcite.runtime.CalciteResource.properties</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlWindow.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql2rel.SqlToRelConverter.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.runtime.CalciteResource.java</file>
    </fixedFiles>
  </bug>
  
</bugrepository>