<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CALCITE">
  <bug fixdate="2019-3-11 01:00:00" id="2911" opendate="2019-3-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Release Calcite 1.19.0</summary>
      <description>Release Calcite 1.19.0.</description>
      <version>None</version>
      <fixedVersion>1.19.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.howto.md</file>
      <file type="M">site..docs.history.md</file>
      <file type="M">README</file>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-3-18 01:00:00" id="2931" opendate="2019-3-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Mongo Adapter - Compare Bson (not string) query representation in tests</summary>
      <description>Some tests currently fail because of wrong order of keys in Bson. // Expected{$project: {POP: '$pop', STATE: '$state'}}// Actual{$project: {STATE: '$state', POP: '$pop'}}</description>
      <version>None</version>
      <fixedVersion>1.19.0</fixedVersion>
      <type>Test</type>
    </buginformation>
    <fixedFiles>
      <file type="M">mongodb.src.test.java.org.apache.calcite.adapter.mongodb.MongoAdapterTest.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2019-4-12 01:00:00" id="2993" opendate="2019-4-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ParseException may be thrown for legal SQL queries due to incorrect "LOOKAHEAD(1)" hints</summary>
      <description>In some cases, ParseException is thrown incorrectly:Case 1select lead(x) ignore from t -- "ignore" aliases "lead(x)"Case 2select * from t match_recognize ( after match skip to last -- "last" is a identifier. This is the implicit form of "skip to last last" pattern (strt down+ up+) define down as down.price &lt; PREV(down.price), up as up.price &gt; prev(up.price) ) mrCase 3select json_object(key: value) from t -- "key"/"value" are both column names.And the failure on Case 1 is introduced by the fix of CALCITE-2847, Case 2/3 are not.</description>
      <version>None</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">server.src.main.codegen.config.fmpp</file>
      <file type="M">piglet.src.main.javacc.PigletParser.jj</file>
      <file type="M">core.src.test.java.org.apache.calcite.sql.parser.SqlParserTest.java</file>
      <file type="M">core.src.test.codegen.config.fmpp</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
      <file type="M">babel.src.main.codegen.config.fmpp</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2019-4-16 01:00:00" id="3006" opendate="2019-4-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Inaccurate information on site, example code doesn&amp;#39;t compile</summary>
      <description>The example code on Calcite website is no longer valid, create method was removed from ReflectiveSchema, thus the example code doesn't compile.</description>
      <version>None</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site..docs.index.md</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2019-5-24 01:00:00" id="3022" opendate="2019-4-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Babel: Various SQL parsing issues</summary>
      <description>Various parsing issues in Babel SQL.</description>
      <version>None</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">server.src.main.codegen.config.fmpp</file>
      <file type="M">core.src.test.codegen.config.fmpp</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.parser.SqlParserUtil.java</file>
      <file type="M">core.src.main.codegen.templates.Parser.jj</file>
      <file type="M">core.src.main.codegen.config.fmpp</file>
      <file type="M">babel.src.test.java.org.apache.calcite.test.BabelParserTest.java</file>
      <file type="M">babel.src.main.codegen.includes.parserImpls.ftl</file>
      <file type="M">babel.src.main.codegen.config.fmpp</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2019-5-22 01:00:00" id="3084" opendate="2019-5-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement JDBC string functions: ASCII, REPEAT, SPACE, SOUNDEX, DIFFERENCE</summary>
      <description>Implement jdbc functional content:{fn ASCII(string)}{fn DIFFERENCE(string, string)}{fn REPEAT(string, integer)}{fn SOUNDEX(string)}{fn SPACE(integer)} </description>
      <version>1.19.0</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.sql.test.SqlOperatorBaseTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.SqlJdbcFunctionCall.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-5-28 01:00:00" id="3098" opendate="2019-5-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade SQLLine to 1.8.0</summary>
      <description>Upgrade SQLLine to 1.8.0.</description>
      <version>None</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-8-25 01:00:00" id="311" opendate="2014-6-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Wrong results when filtering the results of windowed aggregation</summary>
      <description>Optiq incorrectly pushes filter down window aggregation, thus window aggregates get wrong input data resulting in incorrect result.Here's example:OptiqAssert.that() .with(OptiqAssert.Config.REGULAR) .query( "select * from (select \"empid\", count(*) over () c\n" + "from \"hr\".\"emps\"\n" + ") where \"empid\"=100") .returns("empid=100; C=4\n"); // It should count(*) first, and filter laterThe actual result is: empid=100; C=1The plan is as follows:EnumerableCalcRel(expr#0..5=[{inputs}], empid=[$t0], $1=[$t5]) EnumerableWindowRel(window#0=[window(partition {} order by [] range between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING aggs [COUNT()])]) EnumerableCalcRel(expr#0..4=[{inputs}], expr#5=[CAST($t0):INTEGER NOT NULL], expr#6=[100], expr#7=[=($t5, $t6)], proj#0..4=[{exprs}], $condition=[$t7]) EnumerableTableAccessRel(table=[[hr, emps]])I have no idea why PushFilterPastProjectRule is executed before WindowedAggSplitterRule.PROJECT.At best we should allow pushing filters that use expressions matching PARTITION BY expressions.I am not sure that is easy to do in ProjectRel_with_RexOvers form.I guess it would be easier if we create WindowRel first, and then have dedicated PushFilterPastWindowRel rule.At least we should deny PushFilterPastProjectRule when Project contains RexOver.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.winagg.iq</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2019-6-6 01:00:00" id="3116" opendate="2019-6-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Upgrade to Avatica 1.15</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.20.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">core.src.test.resources.sql.struct.iq</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.QuidemTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.JdbcTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.util.Bug.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-6-27 01:00:00" id="3151" opendate="2019-6-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>RexCall&amp;#39;s Monotonicity is not considered in determining a Calc&amp;#39;s collation</summary>
      <description>In FLINK-12999 I found a case that the planner can't generate a valid execution plan for a sample query:SELECT UUID() FROM (VALUES(1, 2, 3)) T(a, b, c)I made an investigation and found the root case was: RexCall's Monotonicity is not considered in determining a Calc's collation( should do the same as Project).</description>
      <version>1.19.0</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.test.RelOptRulesTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.rel.metadata.RelMdCollation.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-1-29 01:00:00" id="3157" opendate="2019-6-29 00:00:00" resolution="Unresolved">
    <buginformation>
      <summary>Upgrade mongo java driver 3.5.0 -&gt; 3.10.2</summary>
      <description>We have quite outdated mongo java driver(3.5.0). Upgrade to 3.10.2</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">mongodb.src.test.java.org.apache.calcite.adapter.mongodb.MongoAdapterTest.java</file>
      <file type="M">mongodb.src.main.java.org.apache.calcite.adapter.mongodb.MongoSchemaFactory.java</file>
      <file type="M">mongodb.src.main.java.org.apache.calcite.adapter.mongodb.MongoSchema.java</file>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2019-7-8 01:00:00" id="3179" opendate="2019-7-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bump Jackson from 2.9.8 to 2.9.9</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2019-8-31 01:00:00" id="3222" opendate="2019-7-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix code style issues introduced by CALCITE-3031</summary>
      <description/>
      <version>None</version>
      <fixedVersion>1.21.0</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.main.java.org.apache.calcite.rel.rules.SubQueryRemoveRule.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
</bugrepository>