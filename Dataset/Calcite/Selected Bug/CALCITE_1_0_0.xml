<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CALCITE">
  <bug fixdate="2014-4-2 01:00:00" id="507" opendate="2014-12-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add Vagrant files to enable testing of data storages: mysql, postgresql, mongo, etc</summary>
      <description>As discussed in email list, it makes sense to implement Vagrant (or similar) VM machines to simplify testing of the downstream executors.Currently it is not clear how to configure mysql/mongo/etc.Not sure if it should be a set of separate configurations or a single configuration with all the batteries included.For instance, Vagrant allows to configure a set of machines, while still providing a way to start just a subset.</description>
      <version>1.0.0-incubating</version>
      <fixedVersion>1.3.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">doc.HOWTO.md</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-12-17 01:00:00" id="535" opendate="2014-12-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support skip overwrite in hydromatic-resource</summary>
      <description>Merge in https://github.com/julianhyde/hydromatic-resource/pull/4</description>
      <version>1.0.0-incubating</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-1-17 01:00:00" id="537" opendate="2014-12-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support skip overwrite in maven-remote-resources-plugin</summary>
      <description>Track https://github.com/apache/maven-plugins/pull/40</description>
      <version>1.0.0-incubating</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-1-17 01:00:00" id="539" opendate="2014-12-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid org-apache-calcite-jdbc.properties being regenerated on each compilation</summary>
      <description>org-apache-calcite-jdbc.properties includes build.timestamp=${build.timestamp} so it is different on each build execution.Need to do something with that.Does it make sense to convert this file to some generated java source?That might allow us to reuse Velocity caching of maven-remote-resource-plugins.</description>
      <version>1.0.0-incubating</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-1-17 01:00:00" id="541" opendate="2014-12-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update maven-source-plugin to 2.4 to get speedup in jdk 1.8</summary>
      <description>Old version of maven-source-plugin has "is java.version==1.7" guard check for the usage of 1.7+ features.New version has proper java.version&gt;=1.7, so it is faster in 1.8</description>
      <version>1.0.0-incubating</version>
      <fixedVersion>1.0.0-incubating</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2015-3-26 01:00:00" id="605" opendate="2015-2-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reduce dependency on third-party maven repositories</summary>
      <description>Calcite's dependencies are spread among Apache repo, Maven central, and Conjars. All Apache dependencies should be (and I believe are) in Apache, and everything else should be in Maven central.Currently some dependencies are in Conjars: eigenbase eigenbase-properties net.hydromatic quidem net.hydromatic tpcds org.pentaho pentaho-aggdesigner-algorithm pentaho mondrian-data-foodmart-hsqldb pentaho mondrian-data-foodmart-queries sqlline sqllineMove or copy these into Maven central.</description>
      <version>None</version>
      <fixedVersion>1.1.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pom.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.FoodmartTest.java</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.CalciteAssert.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2015-3-13 01:00:00" id="619" opendate="2015-3-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Slim down dependencies in parent POM</summary>
      <description>Calcite's parent POM currently has a long dependency list, but that list should be short, or even empty.The parent POM should (and does) have a dependencyManagement section that specifies versions, but each module should have a dependencies section containing the dependencies that it actually uses.</description>
      <version>None</version>
      <fixedVersion>1.2.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ubenchmark.pom.xml</file>
      <file type="M">splunk.pom.xml</file>
      <file type="M">spark.pom.xml</file>
      <file type="M">pom.xml</file>
      <file type="M">plus.pom.xml</file>
      <file type="M">mongodb.pom.xml</file>
      <file type="M">linq4j.pom.xml</file>
      <file type="M">example.csv.pom.xml</file>
      <file type="M">core.pom.xml</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.AvaticaStatement.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.AvaticaFactory.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.AvaticaConnection.java</file>
      <file type="M">avatica.pom.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-2-16 01:00:00" id="623" opendate="2015-3-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use Jenkins</summary>
      <description>Use Jenkins for continuous integration.See discussion with ndimiduk and mujtabachohan in CALCITE-553.</description>
      <version>None</version>
      <fixedVersion>1.7.0</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">site.develop.index.md</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-3-17 01:00:00" id="627" opendate="2015-3-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add Avatica support for getTableTypes, getColumns</summary>
      <description>Extending from CALCITE-618, include getColumns and getTableTypes</description>
      <version>None</version>
      <fixedVersion>1.2.0-incubating</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.java.org.apache.calcite.jdbc.CalciteRemoteDriverTest.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.remote.Service.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.remote.RemoteMeta.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.remote.LocalService.java</file>
      <file type="M">avatica.src.main.java.org.apache.calcite.avatica.remote.JsonService.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-3-19 01:00:00" id="633" opendate="2015-3-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>WITH ... ORDER BY cannot find table</summary>
      <description>Calcite cannot find table alias when resolving the ORDER BY clause of a WITH query. Example:with e as (select * from emp)select * from e as e1 order by e1.empnothrows Table 'E1' not found</description>
      <version>None</version>
      <fixedVersion>1.2.0-incubating</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">core.src.test.resources.sql.sort.oq</file>
      <file type="M">core.src.test.resources.org.apache.calcite.test.SqlToRelConverterTest.xml</file>
      <file type="M">core.src.test.java.org.apache.calcite.test.SqlValidatorTest.java</file>
      <file type="M">core.src.main.java.org.apache.calcite.sql.validate.SqlValidatorImpl.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  
  <bug fixdate="2015-3-24 01:00:00" id="644" opendate="2015-3-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Increase check style line limit to 100 chars</summary>
      <description>Per subject.</description>
      <version>None</version>
      <fixedVersion>1.2.0-incubating</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.main.config.checkstyle.checker.xml</file>
    </fixedFiles>
  </bug>
  
  
  
</bugrepository>