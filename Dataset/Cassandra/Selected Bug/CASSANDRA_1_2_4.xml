<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2012-4-25 01:00:00" id="3783" opendate="2012-1-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add &amp;#39;null&amp;#39; support to CQL 3.0</summary>
      <description>Dense composite supports adding records where only a prefix of all the component specifying the key is defined. In other words, with:CREATE TABLE connections ( userid int, ip text, port int, protocol text, time timestamp, PRIMARY KEY (userid, ip, port, protocol)) WITH COMPACT STORAGEyou can insertINSERT INTO connections (userid, ip, port, time) VALUES (2, '192.168.0.1', 80, 123456789);You cannot however select that column specifically (i.e, without selecting column (2, '192.168.0.1', 80, 'http') for instance).This ticket proposes to allow that though 'null', i.e. to allowSELECT * FROM connections WHERE userid = 2 AND ip = '192.168.0.1' AND port = 80 AND protocol = null;It would then also make sense to support:INSERT INTO connections (userid, ip, port, protocol, time) VALUES (2, '192.168.0.1', 80, null, 123456789);as an equivalent to the insert query above.</description>
      <version>1.2.4</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.Term.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Sets.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Maps.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Lists.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Constants.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-3-15 01:00:00" id="5164" opendate="2013-1-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Invalid streamId in cql binary protocol when using invalid CL</summary>
      <description>Execute a query using invalid CL (0x100 for example)The response comes but does not use the request streamId (always 0).</description>
      <version>1.2.4</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.transport.messages.ErrorMessage.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.Message.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-3-1 01:00:00" id="5302" opendate="2013-3-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix nodetool ring and status output format for IPv6 addresses</summary>
      <description>My pedantic nature can't stand having unaligned columns in nodetool outputs, which happens when IP addresses are IPv6 ones:michal@aperture$ nodetool -h myhost statusDatacenter: DC1==================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- Address Load Owns (effective) Host ID Token RackUN 2001:3c27:21:166:0:1:2:7 331.65 GB 100,0% d557fb83-72f2-4e92-9f26-de6c788aada5 85070591730234615865843651857942052864 rack2UN 2001:3c27:21:166:0:1:1:7 328.8 GB 100,0% 0461a4bf-97a6-447d-9d06-3b42ad1f702c 0 rack1I'm attaching a patch that fixes this problem for nodetool status / ring commands. It does it by picking first item in nodes list (for nodetool ring it's first node in general, for nodetool status it's first node in each DC) and uses its length as a field length for output.It bases on assumptions that it's imppossible to have 0 nodes in cluster/DC and the lenghts of addresses are "similar". The alternative I'm considering too is finding the longest address - it will be 100% accurate.</description>
      <version>1.2.4</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2013-3-18 01:00:00" id="5354" opendate="2013-3-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CL regression in the presence of bootstrapping nodes</summary>
      <description>It looks like CASSANDRA-4858 broke CASSANDRA-833 again; pendingEndpoints is not provided to or accounted by blockFor.</description>
      <version>1.2.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.WriteResponseHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AbstractWriteResponseHandler.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2013-3-20 01:00:00" id="5364" opendate="2013-3-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Guava should be bumped to 13.0.1 in maven dependency declaration.</summary>
      <description>Otherwise following error accours because generated pom says 12.0 and RateLimiter was introduced by 13.0java.lang.NoClassDefFoundError: com/google/common/util/concurrent/RateLimiter        at org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpointInternal(HintedHandOffManager.java:316)        at org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpoint(HintedHandOffManager.java:252)        at org.apache.cassandra.db.HintedHandOffManager.access$300(HintedHandOffManager.java:89)        at org.apache.cassandra.db.HintedHandOffManager$4.runMayThrow(HintedHandOffManager.java:459)        at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)        at java.lang.Thread.run(Thread.java:679)Caused by: java.lang.ClassNotFoundException: com.google.common.util.concurrent.RateLimiter        at java.net.URLClassLoader$1.run(URLClassLoader.java:217)        at java.security.AccessController.doPrivileged(Native Method)        at java.net.URLClassLoader.findClass(URLClassLoader.java:205)        at java.lang.ClassLoader.loadClass(ClassLoader.java:321)        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:294)        at java.lang.ClassLoader.loadClass(ClassLoader.java:266)</description>
      <version>1.2.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-3-21 01:00:00" id="5372" opendate="2013-3-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Broken default values for min/max timestamp</summary>
      <description>When the SStableMetadata are not present (or are too hold), the default for the min and max timestamp used is not always correct. Namely, the default (i.e. when we don't know anything) for the min timestamp should be MIN_VALUE and the max timestamp should be MAX_VALUE.And there is 2 places where we need to apply those default: if the metadata is an old one that don't have the info if we don't have any metadata component at allThe only default that is correct is the case fixed by CASSANDRA-5153, but even then it missed a number of occurrences of the problem.</description>
      <version>1.1.11,1.2.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableMetadata.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2013-4-2 01:00:00" id="5413" opendate="2013-4-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh returns map entries in wrong order</summary>
      <description>The elements in the map &lt;timeuuid,decimal&gt; are returned in cqlsh in an order that is neither sorted by name, value or timestamp.Below is output from cqlsh and cassandra cli. (looks a bit messy here, I have attached a text file without word wrapping)cqlsh:iBidTest&gt; select * from lots ; event_id | lot_id | bids_accepted | bids_details | bids_temp | minimum | number | title-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------- a4a70900-24e1-11df-8924-001ff3591711 | 1 | null | null | null | 200 | 2 | New lot 2 a4a70900-24e1-11df-8924-001ff3591711 | 3 | null | null | {8b457e90-9ae2-11e2-9bcb-a1f164a2d4a3: 1000, 9606ca50-9ae2-11e2-9bcb-a1f164a2d4a3: 650, 908fb640-9ae2-11e2-9bcb-a1f164a2d4a3: 600, 7d930650-9ae2-11e2-9bcb-a1f164a2d4a3: 500, a1ef7f10-9ae2-11e2-9bcb-a1f164a2d4a3: 1250, 9aedd360-9ae2-11e2-9bcb-a1f164a2d4a3: 950} | 100 | 1 | New lot 1&amp;#91;default@ibidtest&amp;#93; get lots&amp;#91;a4a70900-24e1-11df-8924-001ff3591711&amp;#93;;=&gt; (column=1:, value=, timestamp=1364829909818000)=&gt; (column=1:minimum, value=0000000000c8, timestamp=1364829397026000)=&gt; (column=1:number, value=32, timestamp=1364829909818000)=&gt; (column=1:title, value=4e6577206c6f742032, timestamp=1364829397026000)=&gt; (column=3:, value=, timestamp=1364830894466000)=&gt; (column=3:bids_temp:7d9306509ae211e29bcba1f164a2d4a3, value=0000000001f4, timestamp=1364830833463000)=&gt; (column=3:bids_temp:8b457e909ae211e29bcba1f164a2d4a3, value=0000000003e8, timestamp=1364830856441000)=&gt; (column=3:bids_temp:908fb6409ae211e29bcba1f164a2d4a3, value=000000000258, timestamp=1364830865317000)=&gt; (column=3:bids_temp:9606ca509ae211e29bcba1f164a2d4a3, value=00000000028a, timestamp=1364830874485000)=&gt; (column=3:bids_temp:9aedd3609ae211e29bcba1f164a2d4a3, value=0000000003b6, timestamp=1364830882711000)=&gt; (column=3:bids_temp:a1ef7f109ae211e29bcba1f164a2d4a3, value=0000000004e2, timestamp=1364830894466000)=&gt; (column=3:minimum, value=0000000064, timestamp=1364829412417000)=&gt; (column=3:number, value=31, timestamp=1364829852020000)=&gt; (column=3:title, value=4e6577206c6f742031, timestamp=1364829412417000)Returned 14 results.Elapsed time: 130 msec(s).</description>
      <version>1.2.4</version>
      <fixedVersion>Legacy/CQL,Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.formatting.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2013-4-3 01:00:00" id="5425" opendate="2013-4-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>disablebinary nodetool command</summary>
      <description>The following commands are available via `nodetool`: disablehandoff - Disable the future hints storing on the current node disablegossip - Disable gossip (effectively marking the node dead) disablethrift - Disable thrift serverIs it possible to get disablebinary added to help with the testing of binary client drivers?</description>
      <version>1.2.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.resources.org.apache.cassandra.tools.NodeToolHelp.yaml</file>
      <file type="M">src.java.org.apache.cassandra.transport.Server.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.CassandraDaemon.java</file>
    </fixedFiles>
  </bug>
  
</bugrepository>