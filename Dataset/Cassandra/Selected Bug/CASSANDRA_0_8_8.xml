<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  <bug fixdate="2011-10-2 01:00:00" id="3126" opendate="2011-9-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>unable to remove column metadata via CLI</summary>
      <description>I cant find way how to remove all columns definitions without CF import/export.&amp;#91;default@int4&amp;#93; update column family sipdb with column_metadata = [];Syntax error at position 51: required (...)+ loop did not match anything at input ']'&amp;#91;default@int4&amp;#93; update column family sipdb with column_metadata = &amp;#91;{}&amp;#93;;Command not found: `update column family sipdb with column_metadata = &amp;#91;{}&amp;#93;;`. Type 'help;' or '?' for help.&amp;#91;default@int4&amp;#93;</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-10-9 01:00:00" id="3170" opendate="2011-9-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Schema versions output should be on separate lines for separate versions</summary>
      <description>On the CLI if you do a 'describe cluster;' it would be really nice to have different versions on different lines or some way to call out multiple versions more. Right now it's a UUID with a list of nodes for one, but with multiple versions, it's on the same line - another UUID and another list of nodes. That's hard to distinguish between one version and multiple versions at a glance.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-11-12 01:00:00" id="3186" opendate="2011-9-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool should not NPE when rack/dc info is not yet available</summary>
      <description>As the title says. What happens is the persisted ring is loaded, but if those nodes are down and you're using a snitch like ec2 that gets rack/dc info from gossip, nodetool NPEs instead of showing that the node is down.</description>
      <version>0.8.8</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.locator.Ec2Snitch.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-12-15 01:00:00" id="3214" opendate="2011-9-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make CFIF use rpc_endpoint prior to trying endpoint</summary>
      <description>Following up on CASSANDRA-3187 , we probably need to attempt to use the rpc_endpoint address first, and then fall back to the gossip endpoint if we don't get what we want.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyInputFormat.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2011-10-11 01:00:00" id="3350" opendate="2011-10-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Can&amp;#39;t USE numeric keyspace names in CQL</summary>
      <description>Cassandra allows keyspace names to start with a digit or an underscore (see o.a.c.db.migration.Migration.isLegalName), but CQL's USE statement only accepts a CQL identifier, which must start with a letter. So there's no way to use a keyspace named "142" or "&amp;#95;hi&amp;#95;" in CQL, for example.The USE statement should accept string literals and integers as well as identifiers, and CQL identifiers (IDENT) should probably allow starting with the underscore.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-10-13 01:00:00" id="3358" opendate="2011-10-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>2GB row size limit in ColumnIndex offset calculation</summary>
      <description>Index offset is calculated using int instead of long resulting in overflow at 2GB row size. As a result affected columns can not be retrieved. Fix: use long instead of int</description>
      <version>0.7.10,0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnIndexer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-10-20 01:00:00" id="3390" opendate="2011-10-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ReadResponseSerializer.serializedSize() calculation is wrong</summary>
      <description>in ReadResponse.javathe following code public long serializedSize(ReadResponse response, int version) { int size = DBConstants.intSize; size += (response.isDigestQuery() ? response.digest() : ByteBufferUtil.EMPTY_BYTE_BUFFER).remaining(); size += DBConstants.boolSize; if (response.isDigestQuery()) size += response.digest().remaining(); else size += Row.serializer().serializedSize(response.row(), version); return size; }adds the digest size 2 timesthis triggers assertion error in at least ReadVerbHandler</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-10-28 01:00:00" id="3414" opendate="2011-10-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Not possible to change row_cache_provider on existing cf</summary>
      <description>row_cache_provider is not possible to change using update column family xyz with row_cache_provider='something' in 0.8It does work in 1.0.0Reason is that the field is not added to the avro record, patch attached fixes that</description>
      <version>0.8.8</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
</bugrepository>