<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  
  
  
  <bug fixdate="2014-8-31 01:00:00" id="7663" opendate="2014-7-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Removing a seed causes previously removed seeds to reappear</summary>
      <description>When you remove a seed from a cluster, Gossiper.removeEndpoint ensures it is removed from the seed list. However, it also resets the seed list to be the original list, which would bring back any previously removed seeds. What is the reasoning for having the call to buildSeedsList()? If it wasnâ€™t there then I think the problem would be solved.</description>
      <version>1.2.19,2.0.10,2.1.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.locator.SimpleSeedProvider.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-8-4 01:00:00" id="7687" opendate="2014-8-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh DESC CLUSTER fails retrieving ring information</summary>
      <description>Details: https://datastax-oss.atlassian.net/browse/PYTHON-111Applies only to cqlsh using the datastax python-driver.Patch attached.</description>
      <version>2.1.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2014-8-7 01:00:00" id="7717" opendate="2014-8-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-stress: add sample yamls to distro</summary>
      <description>C* stress is missing sample yaml files in distro. They are in git - but not in the downloadable tgz .</description>
      <version>2.1.0</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.rules</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-8-11 01:00:00" id="7744" opendate="2014-8-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Dropping the last collection column turns CompoundSparseCellNameType$WithCollection into CompoundDenseCellNameType</summary>
      <description>Dropping the last collection column turns CompoundSparseCellNameType$WithCollection into CompoundDenseCellNameTypeTo reproducecqlsh:test&gt; create table test (id int primary key, col map&lt;int,int&gt;);cqlsh:test&gt; alter table test drop col;cqlsh:test&gt; alter table test add col list&lt;int&gt;;code=2200 [Invalid query] message="Cannot add new column to a COMPACT STORAGE table"</description>
      <version>2.0.10,2.1.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateTableStatement.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-8-11 01:00:00" id="7753" opendate="2014-8-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Level compaction for Paxos table</summary>
      <description>Paxos table uses size tiered compaction which causes stable per read to be high. Converting to level has improved the performance. I think we should consider making this as default or to change the default setting of size tiered.</description>
      <version>2.0.10,2.1.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-8-13 01:00:00" id="7763" opendate="2014-8-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cql_tests static_with_empty_clustering test failure</summary>
      <description>======================================================================FAIL: static_with_empty_clustering_test (cql_tests.TestCQL)----------------------------------------------------------------------Traceback (most recent call last): File "/home/ryan/git/datastax/cassandra-dtest/tools.py", line 213, in wrapped f(obj) File "/home/ryan/git/datastax/cassandra-dtest/cql_tests.py", line 4082, in static_with_empty_clustering_test assert_one(cursor, "SELECT * FROM test", ['partition1', '', 'static value', 'value']) File "/home/ryan/git/datastax/cassandra-dtest/assertions.py", line 40, in assert_one assert res == [expected], resAssertionError: [[u'partition1', u'', None, None], [u'partition1', u'', None, None], [u'partition1', u'', None, u'value']]-------------------- &gt;&gt; begin captured logging &lt;&lt; --------------------dtest: DEBUG: cluster ccm directory: /tmp/dtest-Ex54V7--------------------- &gt;&gt; end captured logging &lt;&lt; -------------------------------------------------------------------------------------------Ran 1 test in 6.866sFAILED (failures=1)regression from CASSANDRA-7455?</description>
      <version>2.1.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.composites.CompoundSparseCellNameType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.composites.AbstractCType.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-8-20 01:00:00" id="7802" opendate="2014-8-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Need to export JVM_OPTS from init.d script</summary>
      <description>Since 2.0, the init.d script was refactored and requires JVM variables to be exported for them to actually be picked up and used. In this case, JVM_OPTS never gets exported, so user defined variables from /etc/default/cassandra are never applied.This also affects the latest 2.1 rc, and I assume all previous versions.Pull request: https://github.com/apache/cassandra/pull/42Diff: https://github.com/apache/cassandra/pull/42.diffPatch: https://github.com/apache/cassandra/pull/42.patch</description>
      <version>2.0.11,2.1.0</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.init</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-8-20 01:00:00" id="7806" opendate="2014-8-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: Fix column name formatting for functions, [applied], udt fields</summary>
      <description>cqlsh is using the python driver's default row factory (named_tuple_factory) which can change result column names to make valid python identifiers. Instead, cqlsh should use ordered_dict_factory so that the original result column names are preserved (and so is the ordering).</description>
      <version>2.1.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-8-26 01:00:00" id="7831" opendate="2014-8-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>recreating a counter column after dropping it leaves in unusable state</summary>
      <description>create table counter_bug (t int, c counter, primary key (t));update counter_bug set c = c +1 where t = 1;select * from counter_bug ; t | c--+-- 1 | 1(1 rows)alter table counter_bug drop c;alter table counter_bug add c counter;update counter_bug set c = c +1 where t = 1;select * from counter_bug;(0 rows)update counter_bug set c = c +1 where t = 2;select * from counter_bug;(0 rows)</description>
      <version>2.0.11,2.1.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.AlterTableStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-8-26 01:00:00" id="7834" opendate="2014-8-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Case sensitivity problem in cqlsh when specifying keyspace in select</summary>
      <description>The dtest cqlsh_tests.py:TestCqlsh.test_with_empty_values is currently failing. Upon investigation, the issue is a case sensitivity problem in cqlsh. If I have a keyspace, 'cassandra', the following queries all work:use cassandra;use CASSANDRA;select * from cassandra.table;The following query worked in 2.0 but does not work in cqlsh in 2.1:select * from CASSANDRA.tableIt should be noted that the final query also works when accessing C* through the python driver, so it should work in cqlsh.</description>
      <version>2.1.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-9-2 01:00:00" id="7863" opendate="2014-9-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: Use frozen&lt;&gt; for tuples and UDTs in DESCRIBE output</summary>
      <description>cqlsh was not updated by CASSANDRA-7857 to use frozen&lt;&gt; where necessary in DESCRIBE output.</description>
      <version>2.1.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">lib.cassandra-driver-internal-only-2.1.0.post.zip</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-9-5 01:00:00" id="7895" opendate="2014-9-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ALTER TYPE &lt;name&gt; RENAME TO &lt;name&gt; no longer parses as valid cql</summary>
      <description>Type renaming seems to be broken. The error looks like perhaps the syntax has changed or there's a problem parsing the cql.cqlsh:test&gt; create type foo (somefield int);cqlsh:test&gt; alter type foo rename to bar;&lt;ErrorMessage code=2000 [Syntax error in CQL query] message="line 1:22 no viable alternative at input 'to' (alter type foo rename [to] bar...)"&gt;</description>
      <version>2.1.0,2.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>