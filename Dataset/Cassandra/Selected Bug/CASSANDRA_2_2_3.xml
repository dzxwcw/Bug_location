<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2015-10-28 01:00:00" id="10219" opendate="2015-8-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>KeyCache deserialization doesn&amp;#39;t properly read indexed entries</summary>
      <description>When we write the key cache, we write the RowIndeEntry entirely, as can be seen in CacheService.KeyCacheSerializer.serialize:ByteBufferUtil.writeWithLength(key.key, out);out.writeInt(key.desc.generation);out.writeBoolean(true);key.desc.getFormat().getIndexSerializer(cfm, key.desc.version, SerializationHeader.forKeyCache(cfm)).serialize(entry, out);When we deserialize such entry, we have the case where an entry correspon to a sstable that doesn't exist anymore (presumably, it's been deleted between the last cache saving and the restart that triggers the cache loading), which goes this way:ByteBuffer key = ByteBufferUtil.read(input, keyLength);int generation = input.readInt();SSTableReader reader = findDesc(generation, cfs.getSSTables(SSTableSet.CANONICAL));input.readBoolean(); // backwards compatibility for "promoted indexes" booleanif (reader == null){ RowIndexEntry.Serializer.skipPromotedIndex(input); return null;}But the thing is, RowIndexEntry.Serializer.skipPromotedIndex doesn't skip a full RowIndexEntry, it doesn't skip the position in particular, and so as far as I can tell, that part is buggy. I believe we should call RowIndexEntry.Serializer.skip.I'll note that I just noticed this while reading the code but I haven't reproduced that problem personally. I also haven't pin-pointed the exact source of that problem, but it's been there for a while as far as I can tell. At the same time, the condition to reach that branch is probably pretty uncommon, and failure to load the key cache does not prevent the node from starting and it doesn't even seem that we log an error (we log at DEBUG, maybe we should log at WARN), which would explain nobody reporting this.</description>
      <version>2.1.11,2.2.3,3.0.0rc2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.KeyCacheTest.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-10-25 01:00:00" id="10400" opendate="2015-9-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Hadoop CF splits should be more polite to custom orderered partitioners</summary>
      <description>Looks like Philip Thompson just didn't know about preservesOrder() on IPartitioner when he wrote this, no big deal.</description>
      <version>2.2.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2015-10-8 01:00:00" id="10484" opendate="2015-10-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh pg-style-strings broken</summary>
      <description>Support for multiline pg-style strings in cqlsh is broken.cqlsh:foo&gt; insert into texttab (a) values ($$Invalid syntax at line 1, char 33 insert into texttab (a) values ($$ ^cqlsh:foo&gt; Will tackle that and also add a test for it.</description>
      <version>2.2.3,3.0.0rc2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.test.test.cql.parsing.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-10-8 01:00:00" id="10487" opendate="2015-10-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Regression in select count with limit</summary>
      <description>After CASSANDRA-4914 the LIMIT clause should limit only the number of rows returned to the user not the number of rows used by the aggregates.That functionality is currently broken in 2.2.</description>
      <version>2.2.3</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.AggregationTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-10-13 01:00:00" id="10507" opendate="2015-10-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Update cqlsh copy for new internal driver serialization interface (2.1 and 2.2)</summary>
      <description>We need the same fix as in CASSANDRA-10318 to support an API change in the driver, see for example:http://cassci.datastax.com/job/cassandra-2.2_dtest/lastCompletedBuild/testReport/cqlsh_tests.cqlsh_copy_tests/CqlshCopyTest/test_reading_use_header/</description>
      <version>2.1.11,2.2.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
</bugrepository>