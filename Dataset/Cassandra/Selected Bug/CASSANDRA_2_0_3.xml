<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  
  
  
  <bug fixdate="2013-10-13 01:00:00" id="6190" opendate="2013-10-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra 2.0 won&amp;#39;t start up with Java 7u40 with Client JVM. (works on Server JVM, and both JVMs 7u25)</summary>
      <description>Java 7u40 on some platforms do not recognize the the -XX:+UseCondCardMark JVM option. 7u40 on Macintosh works correctly, If I use the tarball 7u40 version of 7, we encounter the error below. I tried 7u25 (the previous release) and it functioned correctly.ubuntu@ubuntu:~$ Unrecognized VM option 'UseCondCardMark'Error: Could not create the Java Virtual Machine.Error: A fatal exception has occurred. Program will exit.</description>
      <version>1.2.14,2.0.3</version>
      <fixedVersion>Local/Config</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-24 01:00:00" id="6238" opendate="2013-10-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>LOCAL_ONE doesn&amp;#39;t work for SimpleStrategy</summary>
      <description>LOCAL_ONE only works for NetworkTopologyStrategy which has DC specification. Any other strategy fails.If there is no DC specified in the strategy, we should treat LOCAL_ONE as ONE</description>
      <version>1.2.12,2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ConsistencyLevel.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-24 01:00:00" id="6239" opendate="2013-10-24 00:00:00" resolution="Duplicate">
    <buginformation>
      <summary>pidfile is never written, "/etc/init.d/cassandra stop" fails</summary>
      <description>The init script tries, via start-stop-daemon, to write a pidfile to /var/run/cassandra/cassandra.pid. /var/run/cassandra doesn't exist (righftully so, /var/run can be a tmpfs), so the init script has this stanza above the start-stop-daemon invocation: [ -e `dirname "PIDFILE"` ] || \ install -d -ocassandra -gcassandra -m750 `dirname $PIDFILE`The first line is missing the dollar sign before the PIDFILE variable (i.e. it should be 'dirname "$PIDFILE"'). This has the effect that "dirname PIDFILE" is called, with the PIDFILE as a literal, which always returns "." as the output, which always exists, so the "install" call never gets executed, the directory never gets created and start-stop-daemon is unable to write the pidfile.The pidfile is never written and "/etc/init.d/cassandra stop" never works.Adding a $ before PIDFILE fixes the issue. This has been tested.</description>
      <version>None</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">examples.pig.example-script.pig</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-25 01:00:00" id="6242" opendate="2013-10-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL LIST USERS does nothing after a user is created.</summary>
      <description>After using CREATE USER to create a new user, the LIST USERS command returns nothing to the console.After removing this user again, the command works as expected.$ ./cqlsh -u cassandra -p cassandraConnected to Test Cluster at localhost:9160.[cqlsh 4.0.1 | Cassandra 2.0.1 | CQL spec 3.1.1 | Thrift protocol 19.37.0]Use HELP for help.cqlsh&gt; LIST USERS; name | super-----------+------- cassandra | Truecqlsh&gt; CREATE USER bob WITH PASSWORD 'example' NOSUPERUSER;cqlsh&gt; LIST USERS;cqlsh&gt; SELECT * FROM system_auth.users; name | super-----------+------- bob | False cassandra | True(2 rows)cqlsh&gt; DROP USER bob;cqlsh&gt; LIST USERS; name | super-----------+------- cassandra | Truecqlsh&gt;</description>
      <version>2.0.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-25 01:00:00" id="6244" opendate="2013-10-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>calculatePendingRanges could be asynchronous on 1.2 too</summary>
      <description>calculatePendingRanges can hang up the Gossip thread to the point of a node marking all the other nodes down.I noticed that the same problem was resolved with CASSANDRA-5135, so I attempted to port the patch from that issue to the 1.2 codebase.</description>
      <version>1.2.12,2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.locator.SimpleStrategyTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-26 01:00:00" id="6247" opendate="2013-10-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CAS updates should require P.MODIFY AND P.SELECT</summary>
      <description>With CAS it is possible to simulate a SELECT query using conditional UPDATE IF. Hence all CAS updates should require P.SELECT permission, and not just P.MODIFY.</description>
      <version>2.0.3</version>
      <fixedVersion>Feature/LightweightTransactions</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.CassandraServer.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ModificationStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-27 01:00:00" id="6249" opendate="2013-10-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Keep memtable data size updated even during flush; add a method to calculate total memtables size (incl pending flush)</summary>
      <description>Keep memtable data size updated even during flush. Add a method to calculate total memtables size (including pending flush ones).</description>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.Memtable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DataTracker.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamily.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-28 01:00:00" id="6252" opendate="2013-10-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide hooks around CQL2/CQL3 statement execution and preparation</summary>
      <description>Provide hooks around CQL2/CQL3 statement execution and preparation - with the ability to modify the statements in pre-execution hooks, and take extra steps both pre-and-post execution.</description>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.transport.messages.BatchMessage.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.QueryProcessor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-10-29 01:00:00" id="6267" opendate="2013-10-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>restrict max num_tokens to something Gossip can handle</summary>
      <description/>
      <version>1.2.12,2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-30 01:00:00" id="6270" opendate="2013-10-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>SERIAL consistency in errors to v1 protocol driver</summary>
      <description>I'm the author of the Ruby driver for CQL, and I got a bug report about strange errors when running on C* 2.0 and using lightweight transaction queries. The bug report can be found here: https://github.com/iconara/cql-rb/issues/53The client sent UPDATE table SET val = 42 WHERE row_id = 5 IF val = 41 and when C* couldn't fulfill SERIAL consistency it sent an error back saying "Operation timed out - received only -1 responses".So far so good, but it also set the consistency field in the error response to 8, corresponding to SERIAL in v2 of the binary protocol, even if the communication with the client was over v1 of the protocol. Since my driver doesn't yet support v2 it doesn't think that 8 is a valid consistency, and fails to parse the frame.Is this the intended behaviour of C*, or an oversight in how that error is formulated? I could easily add SERIAL and accept it even if the communication is over v1 of the protocol, but the bigger issue is how C* handles drivers that do not speak the latest version of the protocol. People should be able to use a driver that worked correctly with C* X with C* X+1, right?Do drivers have to be accepting in what they receive from C* because they might get consistencies, data types, etc. that are from future versions of the protocol, or does C* guarantee that frames will conform to the protocol that the driver says it understands?</description>
      <version>2.0.3</version>
      <fixedVersion>Feature/LightweightTransactions</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.transport.SimpleClient.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.messages.QueryMessage.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.messages.ExecuteMessage.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ModificationStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.QueryOptions.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-30 01:00:00" id="6273" opendate="2013-10-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool should get default JMX port from cassandra-env.sh</summary>
      <description>Although nodetool provides command line switches to specify the JMX port, it would be convenient if it could default to the value specified in cassandra-env.sh</description>
      <version>1.2.12,2.0.3</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.nodetool</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-10-30 01:00:00" id="6274" opendate="2013-10-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>fixes for compacting larger-than-memory rows</summary>
      <description/>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.data.serialization.2.0.db.RowMutation.bin</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LazilyCompactedRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionController.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.AbstractCompactedRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnIndex.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-11-2 01:00:00" id="6287" opendate="2013-11-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid flushing compaction_history after each operation</summary>
      <description/>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.SystemKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-2 01:00:00" id="6290" opendate="2013-11-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Switch to JDK7&amp;#39;s StandardCharsets</summary>
      <description>Instead of using Charset.forName() take advantage of JDK7's StandardCharsets that provides UTF-8 and US-ASCII character sets as static fields.http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html</description>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.util.Operation.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.Reader.java</file>
      <file type="M">test.unit.org.apache.cassandra.utils.FBUtilitiesTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.SchemaLoader.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.marshal.RoundTripTest.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.ByteBufferUtil.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.DataType.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.Client.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.UTF8Serializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.AsciiSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.Ec2Snitch.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.VersionedValue.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">src.java.org.apache.cassandra.auth.PasswordAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-6 01:00:00" id="6308" opendate="2013-11-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Thread leak caused in creating OutboundTcpConnectionPool</summary>
      <description>We have seen in one of our large clusters that there are many OutboundTcpConnection threads having the same names. From a thread dump, OutboundTcpConnection threads have accounted for the largest shares of the total threads (65%+) and kept growing.Here is a portion of a grep output for threads in which names start with "WRITE-":"WRITE-/10.28.131.195" daemon prio=10 tid=0x00002aaac4022000 nid=0x2cb5 waiting on condition &amp;#91;0x00002acfbacda000&amp;#93;"WRITE-/10.28.131.195" daemon prio=10 tid=0x00002aaac42fe000 nid=0x2cb4 waiting on condition &amp;#91;0x00002acfbacad000&amp;#93;"WRITE-/10.30.142.49" daemon prio=10 tid=0x0000000040840000 nid=0x2cb1 waiting on condition &amp;#91;0x00002acfbac80000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004083e000 nid=0x2cb0 waiting on condition &amp;#91;0x00002acfbac53000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004083b800 nid=0x2caf waiting on condition &amp;#91;0x00002acfbac26000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040839800 nid=0x2cae waiting on condition &amp;#91;0x00002acfbabf9000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040837800 nid=0x2cad waiting on condition &amp;#91;0x00002acfbabcc000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000404a3800 nid=0x2cac waiting on condition &amp;#91;0x00002acfbab9f000&amp;#93;"WRITE-/10.30.142.49" daemon prio=10 tid=0x00000000404a1800 nid=0x2cab waiting on condition &amp;#91;0x00002acfbab72000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004049f800 nid=0x2caa waiting on condition &amp;#91;0x00002acfbab45000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004049e000 nid=0x2ca9 waiting on condition &amp;#91;0x00002acfbab18000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004049c800 nid=0x2ca8 waiting on condition &amp;#91;0x00002acfbaaeb000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x000000004049a800 nid=0x2ca7 waiting on condition &amp;#91;0x00002acfbaabe000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040498800 nid=0x2ca6 waiting on condition &amp;#91;0x00002acfbaa91000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040496800 nid=0x2ca5 waiting on condition &amp;#91;0x00002acfbaa64000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040717800 nid=0x2ca4 waiting on condition &amp;#91;0x00002acfbaa37000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040716000 nid=0x2ca3 waiting on condition &amp;#91;0x00002acfbaa0a000&amp;#93;"WRITE-/10.30.146.195" daemon prio=10 tid=0x0000000040714800 nid=0x2ca2 waiting on condition &amp;#91;0x00002acfba9dd000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040712800 nid=0x2ca1 waiting on condition &amp;#91;0x00002acfba9b0000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040710800 nid=0x2ca0 waiting on condition &amp;#91;0x00002acfba983000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004070e800 nid=0x2c9f waiting on condition &amp;#91;0x00002acfba956000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004070d000 nid=0x2c9e waiting on condition &amp;#91;0x00002acfba929000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004070b800 nid=0x2c9d waiting on condition &amp;#91;0x00002acfba8fc000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004070a000 nid=0x2c9c waiting on condition &amp;#91;0x00002acfba8cf000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040827000 nid=0x2c9b waiting on condition &amp;#91;0x00002acfba8a2000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040825000 nid=0x2c9a waiting on condition &amp;#91;0x00002acfba875000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00002aaac488e000 nid=0x2c99 waiting on condition &amp;#91;0x00002acfba848000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040823000 nid=0x2c98 waiting on condition &amp;#91;0x00002acfba81b000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040821800 nid=0x2c97 waiting on condition &amp;#91;0x00002acfba7ee000&amp;#93;"WRITE-/10.30.146.195" daemon prio=10 tid=0x000000004081f000 nid=0x2c96 waiting on condition &amp;#91;0x00002acfba7c1000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004081d000 nid=0x2c95 waiting on condition &amp;#91;0x00002acfba794000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004081b000 nid=0x2c94 waiting on condition &amp;#91;0x00002acfba767000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00002aaac488b000 nid=0x2c93 waiting on condition &amp;#91;0x00002acfba73a000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040819000 nid=0x2c92 waiting on condition &amp;#91;0x00002acfba70d000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407f9000 nid=0x2c91 waiting on condition &amp;#91;0x00002acfba6e0000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407f7000 nid=0x2c90 waiting on condition &amp;#91;0x00002acfba6b3000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407f5000 nid=0x2c8f waiting on condition &amp;#91;0x00002acfba686000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407f3000 nid=0x2c8d waiting on condition &amp;#91;0x00002acfba659000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407f1800 nid=0x2c8c waiting on condition &amp;#91;0x00002acfba62c000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000407ef000 nid=0x2c8b waiting on condition &amp;#91;0x00002acfba5ff000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000407ed800 nid=0x2c8a waiting on condition &amp;#91;0x00002acfba5d2000&amp;#93;"WRITE-/10.28.131.195" daemon prio=10 tid=0x00000000407ec000 nid=0x2c89 waiting on condition &amp;#91;0x00002acfba5a5000&amp;#93;"WRITE-/10.30.161.144" daemon prio=10 tid=0x00000000407e9800 nid=0x2c88 waiting on condition &amp;#91;0x00002acfba578000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405f5000 nid=0x2c87 waiting on condition &amp;#91;0x00002acfba54b000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405f3000 nid=0x2c86 waiting on condition &amp;#91;0x00002acfba51e000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405f1000 nid=0x2c85 waiting on condition &amp;#91;0x00002acfba4f1000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405ef000 nid=0x2c83 waiting on condition &amp;#91;0x00002acfba4c4000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405ed800 nid=0x2c82 waiting on condition &amp;#91;0x00002acfba497000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405eb800 nid=0x2c81 waiting on condition &amp;#91;0x00002acfba46a000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405ea000 nid=0x2c80 waiting on condition &amp;#91;0x00002acfba43d000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405e8800 nid=0x2c7f waiting on condition &amp;#91;0x00002acfba40f000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405e7800 nid=0x2c7e waiting on condition &amp;#91;0x00002acfba3e2000&amp;#93;"WRITE-/10.30.161.144" daemon prio=10 tid=0x0000000040607000 nid=0x2c7d waiting on condition &amp;#91;0x00002acfba3b5000&amp;#93;"WRITE-/10.30.161.144" daemon prio=10 tid=0x0000000040605800 nid=0x2c7c waiting on condition &amp;#91;0x00002acfba388000&amp;#93;"WRITE-/10.30.142.49" daemon prio=10 tid=0x0000000040604000 nid=0x2c7b waiting on condition &amp;#91;0x00002acfba35b000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x0000000040602000 nid=0x2c7a waiting on condition &amp;#91;0x00002acfba32e000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405ff800 nid=0x2c79 waiting on condition &amp;#91;0x00002acfba301000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405fe000 nid=0x2c78 waiting on condition &amp;#91;0x00002acfba2d4000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405fc000 nid=0x2c77 waiting on condition &amp;#91;0x00002acfba2a7000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x00000000405fa800 nid=0x2c75 waiting on condition &amp;#91;0x00002acfba27a000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x0000000040af9800 nid=0x2c74 waiting on condition &amp;#91;0x00002acfba24d000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x0000000040af8000 nid=0x2c73 waiting on condition &amp;#91;0x00002acfba220000&amp;#93;"WRITE-/10.30.161.144" daemon prio=10 tid=0x0000000040af6000 nid=0x2c72 waiting on condition &amp;#91;0x00002acfba1f3000&amp;#93;"WRITE-/10.28.131.195" daemon prio=10 tid=0x0000000040af4000 nid=0x2c71 waiting on condition &amp;#91;0x00002acfba1c6000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x0000000040af2000 nid=0x2c70 waiting on condition &amp;#91;0x00002acfba199000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040af0800 nid=0x2c6f waiting on condition &amp;#91;0x00002acfba16c000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040aef000 nid=0x2c6e waiting on condition &amp;#91;0x00002acfba13f000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040aed000 nid=0x2c6d waiting on condition &amp;#91;0x00002acfba112000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040aeb800 nid=0x2c6b waiting on condition &amp;#91;0x00002acfba0b8000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00002aaac46b9000 nid=0x2c6a waiting on condition &amp;#91;0x00002acfba08b000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407b3000 nid=0x2c69 waiting on condition &amp;#91;0x00002acfba05e000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407b1800 nid=0x2c68 waiting on condition &amp;#91;0x00002acfba031000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407af800 nid=0x2c66 waiting on condition &amp;#91;0x00002acfba004000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407ae000 nid=0x2c65 waiting on condition &amp;#91;0x00002acfb9fd7000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407ab800 nid=0x2c64 waiting on condition &amp;#91;0x00002acfb9faa000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407a9800 nid=0x2c63 waiting on condition &amp;#91;0x00002acfb9f7d000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407a8000 nid=0x2c62 waiting on condition &amp;#91;0x00002acfb9f50000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407a6800 nid=0x2c61 waiting on condition &amp;#91;0x00002acfb9f23000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000408d2800 nid=0x2c60 waiting on condition &amp;#91;0x00002acfb9ef6000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000408d1000 nid=0x2c5f waiting on condition &amp;#91;0x00002acfb9ec9000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000408cf800 nid=0x2c5d waiting on condition &amp;#91;0x00002acfb9e9c000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000408cd800 nid=0x2c5c waiting on condition &amp;#91;0x00002acfb9e6f000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000408cc000 nid=0x2c5b waiting on condition &amp;#91;0x00002acfb9e42000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004088d800 nid=0x2c5a waiting on condition &amp;#91;0x00002acfb9e15000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004088b000 nid=0x2c59 waiting on condition &amp;#91;0x00002acfb9de8000&amp;#93;"WRITE-/10.157.10.134" daemon prio=10 tid=0x0000000040889000 nid=0x2c58 waiting on condition &amp;#91;0x00002acfb9dbb000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040887800 nid=0x2c57 waiting on condition &amp;#91;0x00002acfb9d8e000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x0000000040720000 nid=0x2c56 waiting on condition &amp;#91;0x00002acfb9d61000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x000000004071f000 nid=0x2c55 waiting on condition &amp;#91;0x00002acfb9d34000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000407c3000 nid=0x2c54 waiting on condition &amp;#91;0x00002acfb9d07000&amp;#93;"WRITE-/10.78.95.30" daemon prio=10 tid=0x00000000407c1800 nid=0x2c53 waiting on condition &amp;#91;0x00002acfb9cda000&amp;#93;"WRITE-/10.28.131.195" daemon prio=10 tid=0x00000000407c0000 nid=0x2c52 waiting on condition &amp;#91;0x00002acfb9cac000&amp;#93;"WRITE-/10.28.131.195" daemon prio=10 tid=0x00000000407be000 nid=0x2c51 waiting on condition &amp;#91;0x00002acfb9c7f000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000405cc000 nid=0x2c50 waiting on condition &amp;#91;0x00002acfb9c52000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000405ca800 nid=0x2c4f waiting on condition &amp;#91;0x00002acfb9c24000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000405c8800 nid=0x2c4e waiting on condition &amp;#91;0x00002acfb9bf7000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00000000405c6800 nid=0x2c4d waiting on condition &amp;#91;0x00002acfb9bca000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00002aaac5010800 nid=0x2c4c waiting on condition &amp;#91;0x00002acfb9b9c000&amp;#93;"WRITE-/10.6.222.233" daemon prio=10 tid=0x00002aaac4cd9800 nid=0x2c4b waiting on condition &amp;#91;0x00002acfb9b6f000&amp;#93;"WRITE-/10.11.15.209" daemon prio=10 tid=0x0000000040756800 nid=0x2c4a waiting on condition &amp;#91;0x00002acfb9b42000&amp;#93;"WRITE-/10.11.15.209" daemon prio=10 tid=0x0000000040754800 nid=0x2c49 waiting on condition &amp;#91;0x00002acfb9b15000&amp;#93;We have patched this https://issues.apache.org/jira/browse/CASSANDRA-5175 but I don't this fix solves the issue totally. I will attach a patch soon.</description>
      <version>1.2.12,2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-2-9 01:00:00" id="6325" opendate="2013-11-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>AssertionError on startup reading saved Serializing row cache</summary>
      <description>I don't see any reason what this could have to do with the upgrade, but don't have a large enough non-prod cluster to just keep restarting on. Occurred on roughly 2 out of 100 restarted nodes. ERROR [main] 2013-11-08 14:40:13,535 CassandraDaemon.java (line 482) Exception encountered during startupjava.lang.AssertionError at org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.serialize(SerializingCacheProvider.java:41) at org.apache.cassandra.cache.SerializingCacheProvider$RowCacheSerializer.serialize(SerializingCacheProvider.java:37) at org.apache.cassandra.cache.SerializingCache.serialize(SerializingCache.java:118) at org.apache.cassandra.cache.SerializingCache.put(SerializingCache.java:176) at org.apache.cassandra.cache.InstrumentingCache.put(InstrumentingCache.java:44) at org.apache.cassandra.cache.AutoSavingCache.loadSaved(AutoSavingCache.java:156) at org.apache.cassandra.db.ColumnFamilyStore.initRowCache(ColumnFamilyStore.java:444) at org.apache.cassandra.db.Table.open(Table.java:114) at org.apache.cassandra.db.Table.open(Table.java:87) at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:278) at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:465)I have the files if there is any useful analysis that can be run. Looked 'normal' to a cursory `less` inspection.Possibly related: CASSANDRA-4463</description>
      <version>1.2.12,2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-10 01:00:00" id="6327" opendate="2013-11-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>select with "in" clause wrongly returns empty result</summary>
      <description>This query returns no result:cqlsh:tick_data&gt; select syd from current_prices where shard = 1 and syd in (1, 556129);(0 rows)However this query does return a result, showing that the previous query was wrong to return no result:cqlsh:tick_data&gt; select syd from current_prices where shard = 1 and syd in (556129); syd-------- 556129(1 rows)This can be reproduced as follows:(a) Create a keyspace tick_data:create keyspace tick_data WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};(b) Create a table current_prices:CREATE TABLE current_prices ( shard int, syd int, ask decimal, bid decimal, currency ascii, when timeuuid, PRIMARY KEY (shard, syd));(c) Stop Cassandra and untar the attached tar file in /var/lib/cassandra/data/tick_data/. It populates the current_prices table.(d) Restart Cassandra and perform the above selects.</description>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.CompositeType.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-12 01:00:00" id="6333" opendate="2013-11-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ArrayIndexOutOfBound when using count(*) with over 10,000 rows</summary>
      <description>We've been getting a TSocket read 0 bytes error when we try and run SELECT count FROM &lt;table&gt; if the table has over 10,000 rows.I've been able to reproduce the problem by using cassandra-stress to insert different number of rows. When I insert under 10,000, the count is returned. When I insert exactly 10,000, I get a message that my results were limited to 10,000 by default. If insert 10,001, I get the exception below.ERROR [Thrift:4] 2013-11-12 09:54:04,850 CustomTThreadPoolServer.java (line 212) Error occurred during processing of message.java.lang.ArrayIndexOutOfBoundsException: -1 at java.util.ArrayList.elementData(ArrayList.java:371) at java.util.ArrayList.remove(ArrayList.java:448) at org.apache.cassandra.cql3.ResultSet.trim(ResultSet.java:92) at org.apache.cassandra.cql3.statements.SelectStatement.process(SelectStatement.java:848) at org.apache.cassandra.cql3.statements.SelectStatement.pageCountQuery(SelectStatement.java:196) at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:163) at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:57) at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:129) at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:145) at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:136) at org.apache.cassandra.thrift.CassandraServer.execute_cql3_query(CassandraServer.java:1936) at org.apache.cassandra.thrift.Cassandra$Processor$execute_cql3_query.getResult(Cassandra.java:4394) at org.apache.cassandra.thrift.Cassandra$Processor$execute_cql3_query.getResult(Cassandra.java:4378) at org.apache.thrift.ProcessFunction.process(ProcessFunction.java:39) at org.apache.thrift.TBaseProcessor.process(TBaseProcessor.java:39) at org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess.run(CustomTThreadPoolServer.java:194) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722)</description>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.pager.AbstractQueryPager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-12 01:00:00" id="6337" opendate="2013-11-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Set minTimestamp correctly to be able to drop expired sstables</summary>
      <description>When calculating which sstables we can drop we set minTimestamp to Integer.MAX_VALUE, this is wrong since minTimestamp is a long, and in most cases minTimestamp on sstables is larger than Integer.MAX_VALUE.We should set it to Long.MAX_VALUE, patch does that.</description>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionController.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-11-12 01:00:00" id="6338" opendate="2013-11-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make gossip tolerate slow Gossip tasks</summary>
      <description>Currently if a single gossip task bogs down the gossip Stage, Gossip will mark everyone down because it hasn't seen updates from them (since they are all queued behind the slow one).This means that full GCs can cause gossip "flapping" as well as any actually problematic tasks such as recomputing pending ranges.</description>
      <version>2.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.MessageDeliveryTask.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
</bugrepository>