<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2011-5-12 01:00:00" id="1974" opendate="2011-1-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>PFEPS-like snitch that uses gossip instead of a property file</summary>
      <description>Now that we have an ec2 snitch that propagates its rack/dc info via gossip from CASSANDRA-1654, it doesn't make a lot of sense to use PFEPS where you have to rsync the property file across all the machines when you add a node. Instead, we could have a snitch where you specify its rack/dc in a property file, and propagate this via gossip like the ec2 snitch. In order to not break PFEPS, this should probably be a new snitch.</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.locator.PropertyFileSnitch.java</file>
      <file type="M">conf.cassandra.yaml</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2011-4-12 01:00:00" id="2889" opendate="2011-7-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoids having replicate on write tasks stacking up at CL.ONE</summary>
      <description>The counter design involves a read on the first replica during a write. At CL.ONE, this read is not involved in the latency of the operation (the write is acknowledged before). This means it is fairly easy to insert too quickly at CL.ONE and have the replicate on write tasks falling behind. The goal of this ticket is to protect against that.An option could be to bound the replicate on write task queue so that write start to block once we have too much of those in the queue. Another option could be to drop the oldest tasks when they are too old, but it's probably a more unsafe option.</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.concurrent.StageManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-2-27 01:00:00" id="3412" opendate="2011-10-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>make nodetool ring ownership smarter</summary>
      <description>just a thought.. the ownership info currently just look at the token and calculate the % between nodes. It would be nice if it could do more, such as discriminate nodes of each DC, replica set, etc. ticket is open for suggestion...</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2012-5-23 01:00:00" id="3771" opendate="2012-1-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow paging through non-ordered partitioner results in CQL3</summary>
      <description>CQL &lt; 3 silently turns a "key &gt;= X" into "token(key) &gt;= token(X)". This is not what users will expect, since many of the rows returned will not in fact satisfy the requested key inequality. We should add syntax that makes the difference between keys and tokens explicit, possibly with a token() "function" as imagined here.</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.Term.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Relation.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-6-9 01:00:00" id="3882" opendate="2012-2-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>avoid distributed deadlock in migration stage</summary>
      <description>This is follow-up work for the remainders of CASSANDRA-3832 which was only a partial fix. The deadlock in the migration stage needs to be fixed, as it can cause bootstrap (at least) to take potentially a very very long time to complete, and might also cause a lack of schema propagation until otherwise "poked".</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-4-14 01:00:00" id="3909" opendate="2012-2-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pig should handle wide rows</summary>
      <description>Pig should be able to use the wide row support in CFIF.</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.pig.CassandraStorage.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  
  <bug fixdate="2012-5-7 01:00:00" id="4010" opendate="2012-3-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Report thrift status in nodetool info</summary>
      <description>Improve nodetool info command by reporting thrift status. Add following line:Thrift active: true</description>
      <version>1.0.11,1.1.1</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-4-13 01:00:00" id="4045" opendate="2012-3-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>BOF fails when some nodes are down</summary>
      <description>As the summary says, we should allow jobs to complete when some targets are unavailable.</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.BulkRecordWriter.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2012-3-23 01:00:00" id="4080" opendate="2012-3-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cut down on the comparisons needed during shouldPurge and needDeserialize</summary>
      <description>shouldPurge in particular is still a performance sore point with LCS.</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-4-28 01:00:00" id="4098" opendate="2012-3-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Listing wide-rows from CLI crashes Cassandra</summary>
      <description>If a user attempts to list a column family from the CLI that contains a wide-row (e.g. 10 million columns). It crashes hangs the CLI and then Cassandra eventually crashes with an OoM. We should introduce a default limit on columns when listing a column family.(patch on its way)</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.IncomingTcpConnection.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2012-5-17 01:00:00" id="4160" opendate="2012-4-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ORDER BY ... DESC reverses comparrison predicates in WHERE</summary>
      <description>When issuing a cql select statement with an ORDER BY ... DESC clause the comparison predicates in the WHERE clause gets reversed. Example: (see also attached)SELECT number FROM test WHERE number &lt; 3 ORDER BY number DESCreturns the results expected of WHERE number &gt; 3</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-18 01:00:00" id="4164" opendate="2012-4-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cqlsh should support DESCRIBE on cql3-style composite CFs</summary>
      <description>There is a discrepancy between create column family commands and then the output of the describe command:cqlsh:test&gt; CREATE TABLE timeline ( ... user_id varchar, ... tweet_id uuid, ... author varchar, ... body varchar, ... PRIMARY KEY (user_id, tweet_id) ... );cqlsh:test&gt; describe columnfamily timeline;CREATE COLUMNFAMILY timeline ( user_id text PRIMARY KEY) WITH comment='' AND comparator='CompositeType(org.apache.cassandra.db.marshal.UUIDType,org.apache.cassandra.db.marshal.UTF8Type)' AND read_repair_chance=0.100000 AND gc_grace_seconds=864000 AND default_validation=text AND min_compaction_threshold=4 AND max_compaction_threshold=32 AND replicate_on_write=True AND compaction_strategy_class='SizeTieredCompactionStrategy' AND compression_parameters:sstable_compression='org.apache.cassandra.io.compress.SnappyCompressor';</description>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-18 01:00:00" id="4168" opendate="2012-4-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>"Setup" section of tools/stress/README.txt needs update</summary>
      <description>The README.txt file states "Run `ant` from the Cassandra source directory, then Run `ant` from the contrib/stress directory."The file needs to reflect the changes in the way stress is built.</description>
      <version>1.0.10,1.1.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-19 01:00:00" id="4173" opendate="2012-4-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: in cql3 mode, use cql3 quoting when outputting cql</summary>
      <description>when cqlsh needs to output a column name or other term which needs quoting (say, if you run DESCRIBE KEYSPACE and some column name has a space in it), it currently only knows how to quote in the cql2 way. That is,cqlsh:foo&gt; describe columnfamily barCREATE COLUMNFAMILY bar ( a int PRIMARY KEY, 'b c' text) WITH...cql3 does not recognize single quotes around column names, or columnfamily or keyspace names either. cqlsh ought to learn how to use double-quotes instead when in cql3 mode.</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-5-25 01:00:00" id="4183" opendate="2012-4-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix dependency versions in generated pos</summary>
      <description>Some of the versions of dependencies have fallen out of sync</description>
      <version>1.1.1</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-4-25 01:00:00" id="4184" opendate="2012-4-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make identifier and value grammar for CQL3 stricter</summary>
      <description>The current grammar for CQL3 allows: uuid and integer constants as identifiers identifier as value (aka term in the grammar)I think both of those should be removed.For 1, mostly because this feels useless and slightly complicates the grammar which is annoying for the documentation of CQL3 for instance (note that this doesn't mean forbidding integer or uuid as identifier, but means they have to be double-quoted when used as such).For 2, I think that allowing identifier as value is actually misleading, typically if you write things like SELECT foo WHERE foo=foo. It suggests we support JOIN when we do not.Also, if both are done, then one will always be able to distinguish between identifier and value even without any context, which is a nice property.</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2012-5-25 01:00:00" id="4186" opendate="2012-4-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL3: make some keywords unreserved</summary>
      <description>CQL has quite a few keywords. Currently all of them are reserved, but this is not always necessary. PostreSQL for instance distinguish between reserved keywords and non-reserved ones, and allow things like key, timestamp or type as identifiers. I suggest we do the same as convenience for the user.</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-25 01:00:00" id="4187" opendate="2012-4-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL3: move {max/min}_compaction_thresholds to compaction options</summary>
      <description>It makes way more sense to have min_compaction_threshold and max_compaction_threshold be parts of the compaction_strategy_options. They are not in thrift (and CQL2) only for historical reasons, but there is no reason not to fix it. Especially given that they don't make sense for all compaction strategy (Leveled compaction ignores them).</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateColumnFamilyStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.AlterTableStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.CFPropDefs.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2012-5-30 01:00:00" id="4198" opendate="2012-4-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: update recognized syntax for cql3</summary>
      <description>cqlsh should recognize cql3 syntax when in cql3 mode; this includes tab completing proper syntax and properly quoting any terms in single- or double-quotes (current version only knows how to use single quotes).also, prefer using the term "TABLE" over "COLUMNFAMILY" wherever one of those is generated from cqlsh (like in DESCRIBE output).and if it's not too bad, it would help to have the online help strings reflect cql3 syntax (maybe with a nod to cql2 restrictions where appropriate).</description>
      <version>1.1.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.pylexotron.py</file>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  
  
  <bug fixdate="2012-5-23 01:00:00" id="4279" opendate="2012-5-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>kick off background compaction when min/max changed</summary>
      <description>When the threshold changes, we may be eligible for a compaction immediately (without waiting for a flush to trigger the eligibility check).</description>
      <version>1.0.11,1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-5-23 01:00:00" id="4280" opendate="2012-5-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>2I CFs should inherit parent compaction settings</summary>
      <description/>
      <version>1.1.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
</bugrepository>