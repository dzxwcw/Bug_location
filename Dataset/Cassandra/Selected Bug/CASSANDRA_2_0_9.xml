<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2013-5-8 01:00:00" id="6162" opendate="2013-10-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra does not start on Ubuntu 13.04 RUssian</summary>
      <description>Output just after install:vm.max_map_count = 1048575expr: синтаксическая ошибка^^^^ RU: syntax errorexpr: синтаксическая ошибка^^^^ RU: syntax error/etc/init.d/cassandra: 59: [: Illegal number: /etc/init.d/cassandra: 63: [: Illegal number: /etc/init.d/cassandra: 67: [: Illegal number: expr: синтаксическая ошибка^^^^ RU: syntax error/etc/init.d/cassandra: 81: [: Illegal number: xss = -ea -javaagent:/usr/share/cassandra/lib/jamm-0.2.5.jar -XX:+UseThreadPriorities -XX:ThreadPriorityPolicy=42 -XmsM -XmxM -XmnM -XX:+HeapDumpOnOutOfMemoryError -Xss256k</description>
      <version>2.0.9,2.1rc1</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-5-13 01:00:00" id="6344" opendate="2013-11-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>When running CQLSH with file input, exit with error status code if script fails</summary>
      <description>Just thought it would be nice if the cqlsh process would exit with an error status code if there are errors in the script, since it is the only thing the cqlsh process does when executing.Preferably a predictable status code could be used for a script error to discern it from some other odd error (i.e., don't use `1` because that could be many things). Maybe `2` or something.</description>
      <version>1.2.17,2.0.9,2.1rc1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-6-2 01:00:00" id="6539" opendate="2014-1-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Track metrics at a keyspace level as well as column family level</summary>
      <description>It would be useful to be able to see aggregated metrics (write/read count/latency) at a keyspace level as well as at the individual column family level.</description>
      <version>1.2.17,2.0.9,2.1rc2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Keyspace.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2014-5-2 01:00:00" id="6973" opendate="2014-4-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>timestamp data type does ISO 8601 formats with &amp;#39;Z&amp;#39; as time zone.</summary>
      <description>The timestamp data type does not support format where time zone is specified with 'Z' (as in zulu aka. UTC+0 aka +0000 time zone). Example:create table foo(ts timestamp primary key);insert into foo(ts) values('2014-04-01T20:17:35+0000'); &amp;#8211; this workscqlsh:test&gt; insert into foo(ts) values('2014-04-01T20:17:35Z');Bad Request: unable to coerce '2014-04-01T20:17:35Z' to a formatted date (long)The example date was copied directly from ISO 8601 Wikipedia page. The standard says that "If the time is in UTC, add a Z directly after the time without a space. Z is the zone designator for the zero UTC offset."Tested with cqlsh with 2.0.6 version.</description>
      <version>2.0.9</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.serializers.TimestampSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.UUIDType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.TimeUUIDType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.TimestampType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.DateType.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-5-22 01:00:00" id="7067" opendate="2014-4-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refuse CAS batch that have a &amp;#39;USING TIMESTAMP&amp;#39;</summary>
      <description>Cassandra must refuse BATCHes with TIMESTAMP, if they contain a CAS statement(s). Like this one:BEGIN BATCH USING TIMESTAMP 1111111111111111INSERT INTO users (id, firstname, lastname) VALUES (999, 'Jack', 'Sparrow') IF NOT EXISTSAPPLY BATCH</description>
      <version>2.0.9</version>
      <fixedVersion>Feature/LightweightTransactions</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.BatchStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-5-6 01:00:00" id="7172" opendate="2014-5-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: Accept and execute CQL statement(s) from command-line parameter</summary>
      <description>I don't know if there is a workaround for this, but currently, if I want to dump the output of a statement into a file, I need to save the statements into another file and pass it as input to cqlsh. Something like:$ cqlsh -f &amp;#91;statement_file&amp;#93; &gt; &amp;#91;output_file&amp;#93;I am aware of the existence of the cqlsh CAPTURE command but it doesn't work for everything (particularly, for cqlsh-only commands like DESCRIBE)To solve this, I propose that you add an "-e" parameter to cqlsh that accepts a valid CQL statement to execute. This is exactly the same as MySQL CLI's "-e" parameter: http://dev.mysql.com/doc/refman/5.5/en/mysql-command-options.html#option_mysql_execute</description>
      <version>2.0.9,2.1rc1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-5-7 01:00:00" id="7185" opendate="2014-5-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh can&amp;#39;t tab-complete disabling compaction</summary>
      <description>cqlsh can't tab-complete the following case where you want to disable compaction:alter table keys with compaction = {'class': 'SizeTieredCompactionStrategy', 'enabled': 'false'}Specfically it doesn't know 'enabled' is a valid option.</description>
      <version>2.0.9,2.1rc1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">doc.cql3.CQL.textile</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-5-8 01:00:00" id="7191" opendate="2014-5-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>reduce needless garbage/thrashing in pending range calculation</summary>
      <description>code inverts the same multimap in a loop... just pull it out of the loopagainst 1.2</description>
      <version>1.2.17,2.0.9,2.1rc1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.PendingRangeCalculatorService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-5-12 01:00:00" id="7210" opendate="2014-5-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add --resolve-ip option on &amp;#39;nodetool ring&amp;#39;</summary>
      <description>Give nodetool ring the option of either displaying IPs or hostnames for the nodes in a ring.</description>
      <version>2.0.9,2.1rc1</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-5-12 01:00:00" id="7211" opendate="2014-5-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Triggers Demo seems incompatible with row markers</summary>
      <description>Added an if statement to skip row markers and a few comments to help people reading the example.</description>
      <version>2.0.9,2.1rc1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">examples.triggers.src.org.apache.cassandra.triggers.InvertedIndex.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-5-19 01:00:00" id="7264" opendate="2014-5-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add conditional support for the creation/deletion of users</summary>
      <description>Currently attempting to do "drop user if exists tom;" or " create user if exists tom password 'tom' " does not work. Would be a nice feature to add from a test automation standpoint so that we don't error out when attempting to clean up or create the test environment.</description>
      <version>2.0.9,2.1rc1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.DropUserStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateUserStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">doc.cql3.CQL.textile</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-5-20 01:00:00" id="7274" opendate="2014-5-20 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Better display table organization on desc table via primary key list</summary>
      <description>In cqlsh, the desc table command does not make it sufficiently clear which columns are part of the row key and which are clustering keys.A simple change to the primary key list, though, would make it easier to tell.Consider the following table definition:create table my_table { first_column text, second_column text, third_column text, primary key (first_column, second_column, third_column)}This table has a row key of first_column and clustering keys of second_column, third_column. But if the user intended for the table to have all three in the row key, the correct definition would be:create table my_table { first_column text, second_column text, third_column text, primary key ((first_column, second_column, third_column))}But this is a sufficiently subtle difference that the first may be mistaken for the second or vice-versa.My suggested solution is to always wrap the row key in parentheses. This is already supported by create table syntax, so it's just a matter of changing desc table to display the create table statement with the primary key always in parentheses, like so:create table my_table { first_column text, second_column text, third_column text, primary key ((first_column), second_column, third_column)}</description>
      <version>2.0.9</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-6-27 01:00:00" id="7305" opendate="2014-5-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL3, Static columns not returning rows if values are not set</summary>
      <description>Just a quick note on static columns, if you create some cql rows using clustered columns and don't provide a value for a static column, then selecting the row key with the (null) static column won't return any rows.create table statictest( a int, b text static, c text, PRIMARY KEY (a, c));insert into statictest (a, c) values (1, 'test');select a,b from statictest;(0 rows)</description>
      <version>2.0.9</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-5-29 01:00:00" id="7320" opendate="2014-5-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Swap local and global default read repair chances</summary>
      <description>See the discussion in CASSANDRA-6887 on why.Sylvain: "instead of having read_repair_chance=0.1 and dclocal_read_repair_chance=0, to switch to read_repair_chance=0 and dclocal_read_repair_chance=0.1. If you have only one DC, then it won't change from the current default, and if you have multiple-DC, I can agree that not crossing DC boundaries for read repair is a better default."Not basing on 1.2 because it's rather late for that. Not too late for the 2.0 cycle though, so setting fixver to 2.0.9.</description>
      <version>2.0.9,2.1rc1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-5-29 01:00:00" id="7325" opendate="2014-5-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cqlsh counts non-empty lines for "Blank lines" warning</summary>
      <description>[cqlsh 4.1.1 | Cassandra 2.0.8-SNAPSHOT | CQL spec 3.1.1 | Thrift protocol 19.39.0]Use HELP for help.cqlsh&gt; use system;cqlsh:system&gt; select * ... from ... local ... whereStatements are terminated with a ';'. You can press CTRL-C to cancel an imcomplete statement.</description>
      <version>2.0.9,2.1rc2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-6-31 01:00:00" id="7333" opendate="2014-5-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>gossipinfo should include the generation</summary>
      <description>As the title says, we should include this information in gossipinfo so it's easier to diagnose the generation-from-future type problems.</description>
      <version>1.2.17,2.0.9,2.1rc2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.gms.FailureDetector.java</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2014-6-11 01:00:00" id="7380" opendate="2014-6-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Native protocol needs keepalive, we should add it</summary>
      <description>On clients connecting to C* 1.2.15 using native protocol. We see that when the client is bounced, the old connection is not going awayOn Thrift, there is the rpc_keepalive but there is no similar feature for the native protocol</description>
      <version>1.2.17,2.0.9,2.1rc2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.transport.Server.java</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-6-15 01:00:00" id="7399" opendate="2014-6-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: describe table shows wrong data type for CompositeType</summary>
      <description>DESCRIBE for CompositeType produces wrong output.Currently:CREATE TABLE compo.comp ( id int PRIMARY KEY, comp 'org.apache.cassandra.db.marshal.CompositeType'&lt;int, text&gt;)...Correct:CREATE TABLE compo.comp ( id int PRIMARY KEY, comp 'org.apache.cassandra.db.marshal.CompositeType(Int32Type,UTF8Type)')...Means:1. use normal brackets instead of &lt;&gt;1. use C* type names instead of CQL3 names1. move types inside quoted</description>
      <version>1.2.17,2.0.9,2.1rc2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-6-17 01:00:00" id="7407" opendate="2014-6-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>COPY command does not work properly with collections causing failure to import data</summary>
      <description>The COPY command does not properly format collections in the output CSV - to be able to re-import the data.Here is how you can replicate the problem:CREATE TABLE user_colors ( user_id int PRIMARY KEY, colors list&lt;ascii&gt; );UPDATE user_colors SET colors = ['red','blue'] WHERE user_id=5; UPDATE user_colors SET colors = ['purple','yellow'] WHERE user_id=6; UPDATE user_colors SET colors = ['black''] WHERE user_id=7;COPY user_colors (user_id, colors) TO 'output.csv';CREATE TABLE user_colors2 ( user_id int PRIMARY KEY, colors list&lt;ascii&gt; );COPY user_colors2 (user_id, colors ) FROM 'user_colors.csv';Bad Request: line 1:68 no viable alternative at input ']'Aborting import at record #0 (line 1). Previously-inserted values still present.0 rows imported in 0.007 seconds.The CSV file seems to be malformed The single quotes within the collection are missing The double quotes for collection on user_id=7 are missing and causing COPY to fail.5,"[red, blue]"7,[black]6,"[purple, yellow]"Should be like this5,"['red', 'blue']"7,"['black']"6,"['purple', 'yellow']"Once the file is changed, the import worksCOPY user_colors2 (user_id, colors ) FROM 'user_colors.csv';3 rows imported in 0.012 seconds.SELECT * FROM user_colors2; user_id | colors---------+------------------ 5 | [red, blue] 7 | [black] 6 | [purple, yellow](3 rows)</description>
      <version>1.2.17,2.0.9,2.1rc2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.formatting.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>