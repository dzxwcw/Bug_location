<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2010-7-13 01:00:00" id="1275" opendate="2010-7-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log threadpool stats after excessive GC</summary>
      <description>When GC begins taking longer and longer, it is often a sign that the JVM is going OOM, but it is not clear why. Often, users swamp the MDP by either writing at CL.ZERO or issuing many read requests while the machine is block on disk IO. To more easily diagnose this, we should log the threadpool stats when we see a GC take too long.</description>
      <version>0.6.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.GCInspector.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-7-14 01:00:00" id="1280" opendate="2010-7-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>make storage-conf.xml optional for Hadoop jobs</summary>
      <description/>
      <version>0.6.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.ConfigHelper.java</file>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyRecordReader.java</file>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.java</file>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyInputFormat.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">contrib.word.count.src.WordCount.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-7-24 01:00:00" id="1316" opendate="2010-7-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Read repair does not always work correctly</summary>
      <description>Read repair does not always work. At the least, we allow violation of the CL.ALL contract. To reproduce, create a three node cluster with RF=3, and json2sstable one of the attached json files on each node. This creates a row whose key is 'test' with 9 columns, but only 3 columns are on each machine. If you get_count this row in quick succession at CL.ALL, sometimes you will receive a count of 6, sometimes 9. After the ReadRepairManager has sent the repairs, you will always get 9, which is the desired behavior.I have another data set obtained in the wild which never fully repairs for some reason, but it's a bit large to attach (600ish columns per machine.) I'm still trying to figure out why RR isn't working on this set, but I always get different results when reading at any CL including ALL, no matter how long I wait or how many reads I do.</description>
      <version>0.6.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-7-25 01:00:00" id="1317" opendate="2010-7-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>StorageProxy ignores snitch when determining whether to do a local read</summary>
      <description>this primarily affects CASSANDRA-1314 and to a lesser degree CASSANDRA-981</description>
      <version>0.6.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">contrib.client.only.ClientOnlyExample.java</file>
    </fixedFiles>
  </bug>
  
</bugrepository>