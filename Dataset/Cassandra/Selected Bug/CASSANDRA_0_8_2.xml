<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2010-8-24 01:00:00" id="1125" opendate="2010-5-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Filter out ColumnFamily rows that aren&amp;#39;t part of the query (using a KeyRange)</summary>
      <description>Currently, when running a MapReduce job against data in a Cassandra data store, it reads through all the data for a particular ColumnFamily. This could be optimized to only read through those rows that have to do with the query.It's a small change but wanted to put it in Jira so that it didn't fall through the cracks.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.ConfigHelper.java</file>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyInputFormat.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-7-12 01:00:00" id="2763" opendate="2011-6-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>When dropping a keyspace you&amp;#39;re currently authenticated to, might be nice to de-authenticate upon completion</summary>
      <description>I found that when I'm authenticated to MyKeyspace, then do 'drop keyspace MyKeyspace;', I'm still authenticated to it. It's trivial I know, but seems reasonable to unauthenticate from it.</description>
      <version>0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-7-14 01:00:00" id="2770" opendate="2011-6-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Expose data_dir though jmx</summary>
      <description>Going to implement this right away to get into next versons.</description>
      <version>0.7.8,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2011-6-21 01:00:00" id="2803" opendate="2011-6-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra deb should depend on libjna-java</summary>
      <description>Cassandra debs (0.7, 0.8, trunk) currently include a Recommends: for libjna-java, the package that includes the JNA jar. The original reason for the Recommends: instead of Depends: was that it's technically possible to run without JNA.However, since (a) I know of no reason not to use JNA, and (b) the Cassandra RPMs already require JNA, let us change this Recommends: to Depends: for all future debs.I don't believe this affects the licensing issues which stopped us from bundling JNA with cassandra directly.</description>
      <version>0.8.2</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.control</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-7-21 01:00:00" id="2804" opendate="2011-6-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>expose dropped messages, exceptions over JMX</summary>
      <description>Patch against 0.7.</description>
      <version>0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.GCInspector.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessageDeliveryTask.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-6-23 01:00:00" id="2817" opendate="2011-6-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Expose number of threads blocked on submitting a memtable for flush</summary>
      <description>Writes can be blocked by a thread trying to submit a memtable while the flush queue is full. While this is the expected behavior (the goal being to prevent OOMing), it is worth exposing when that happens so that people can monitor it and modify settings accordingly if that happens too often.</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.StatusLogger.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-6-27 01:00:00" id="2832" opendate="2011-6-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>reduce variance in HH impact between wide and narrow rows</summary>
      <description>default page_size of 10000 is huge, and makes it impossible to set a hinted_handoff_throttle_delay_in_ms that works well for both wide rows and narrow.at the same time you don't want to make it TOO small because that will hurt performance on the source node (seeking to the hinted row repeatedly).</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-6-28 01:00:00" id="2835" opendate="2011-6-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CFMetadata don&amp;#39;t set the default for Replicate_on_write correctly</summary>
      <description>Replicate_on_write must default to true (defaulting to false is very dangerous and imho, the option of setting it to false shouldn't exist in the first place) and CFMetadata.DEFAULT_REPLICATE_ON_WRITE is correctly true. But it doesn't get set correctly. Instead, the code force the value of the cf_def even if it wasn't defined, resulting in setting it to false since that is the default value for a boolean in JAVA.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-6-28 01:00:00" id="2836" opendate="2011-6-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add CFS.estimatedKeys to cfstats output</summary>
      <description>People ask for this all the time and making them resort to the hell that is JMX is not pleasant.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-6-29 01:00:00" id="2841" opendate="2011-6-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Always use even distribution for merkle tree with RandomPartitionner</summary>
      <description>When creating the initial merkle tree, repair tries to be (too) smart and use the key samples to "guide" the tree splitting. While this is a good idea for OPP where there is a good change the data distribution is uneven, you can't beat an even distribution for the RandomPartitionner. And a quick experiment even shows that the method used is significantly less efficient than an even distribution for the ranges of the merkle tree (that is, an even distribution gives a much better of distribution of the number of keys by range of the tree).Thus let's switch to an even distribution for RandomPartitionner. That 3 lines change alone amounts for a significant improvement of repair's precision.</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.AntiEntropyService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2011-7-5 01:00:00" id="2860" opendate="2011-7-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Versioning works *too* well</summary>
      <description>The scenario goes something like this: you upgrade from 0.7 to 0.8, but all the nodes remember that the remote side is 0.7, so they in turn speak 0.7, causing the local node to also think the remote is 0.7, even though both are really 0.8.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.OutboundTcpConnection.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-7-8 01:00:00" id="2873" opendate="2011-7-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Typo in src/java/org/apache/cassandra/cli/CliClient</summary>
      <description>I have read your documentation about syntax for creating column family and parameters that I can pass.According to documentation i can use parameter :" - keys_cache_save_period: Duration in seconds after which Cassandra should safe the keys cache. Caches are saved to saved_caches_directory as specified in conf/Cassandra.yaml. Default is 14400 or 4 hours. "but then i was receiving error: "No enum const class org.apache.cassandra.cli.CliClient$ColumnFamilyArgument.KEYS_CACHE_SAVE_PERIOD"In class mentioned in title we have:protected enum ColumnFamilyArgument115 {116 COLUMN_TYPE,117 COMPARATOR,118 SUBCOMPARATOR,119 COMMENT,120 ROWS_CACHED,121 ROW_CACHE_SAVE_PERIOD,122 KEYS_CACHED,123 KEY_CACHE_SAVE_PERIOD, &lt;---- TYPO !124 READ_REPAIR_CHANCE,125 GC_GRACE,126 COLUMN_METADATA,127 MEMTABLE_OPERATIONS,128 MEMTABLE_THROUGHPUT,129 MEMTABLE_FLUSH_AFTER,130 DEFAULT_VALIDATION_CLASS,131 MIN_COMPACTION_THRESHOLD,132 MAX_COMPACTION_THRESHOLD,133 REPLICATE_ON_WRITE,134 ROW_CACHE_PROVIDER,135 KEY_VALIDATION_CLASS136 }</description>
      <version>0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.resources.org.apache.cassandra.cli.CliHelp.yaml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-7-15 01:00:00" id="2902" opendate="2011-7-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>"count" doesn&amp;#39;t accept UUIDs in CLI even though "get" does</summary>
      <description>&amp;#91;default@V360HC_SCHEMA1&amp;#93; get RawValues&amp;#91;7dc75c1c-8af0-462a-a920-bc1dafc44f31&amp;#93; limit 1;=&gt; (column=1310593550317, value=aced00057709053fe9cc17a95b9093, timestamp=1310593550583438)Returned 1 results.&amp;#91;default@V360HC_SCHEMA1&amp;#93; count RawValues&amp;#91;7dc75c1c-8af0-462a-a920-bc1dafc44f31&amp;#93;;UUIDs must be exactly 16 bytes</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2011-7-18 01:00:00" id="2911" opendate="2011-7-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Simplified classes to write SSTables (for bulk loading usage)</summary>
      <description>sstableloader only stream existing sstables. If you need to load data existing in another form (json, csv, whatnot), you need to first write the sstable(s) to load. The recommended way to do this is either to use json2sstable or to modify it if your input is not json. Modifying json2sstable is however more involved than it needs to be, you'll need at least some basic understanding of a bunch of internal classes (DecoratedKey, ColumnFamily, SuperColumn, ...). Even for json input, you can use json2sstable only if your json actually conform to what is expected and even then, good luck to someone that want to add counters.This ticket proposes to add a simple interface to write sstables.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-7-18 01:00:00" id="2912" opendate="2011-7-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL ignores client timestamp for full row deletion</summary>
      <description/>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.system.test.cql.py</file>
      <file type="M">src.java.org.apache.cassandra.cql.DeleteStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-7-21 01:00:00" id="2934" opendate="2011-7-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>log broken incoming connections at DEBUG</summary>
      <description/>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.IncomingTcpConnection.java</file>
    </fixedFiles>
  </bug>
</bugrepository>