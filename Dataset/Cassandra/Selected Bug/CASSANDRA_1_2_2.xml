<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  <bug fixdate="2012-10-21 01:00:00" id="4366" opendate="2012-6-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>add UseCondCardMark XX jvm settings on jdk 1.7</summary>
      <description>found by jbellisadding jvm extension setting UseCondCardMark as defined herehttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7029167for better lock handling especially on hotspot with multicore processors.</description>
      <version>1.2.2</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-2-17 01:00:00" id="4554" opendate="2012-8-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log when a node is down longer than the hint window and we stop saving hints</summary>
      <description>We know that we need to repair whenever we lose a node or disk permanently (since it may have had undelivered hints on it), but without exposing this we don't know when nodes stop saving hints for a temporarily dead node, unless we're paying very close attention to external monitoring.</description>
      <version>1.2.2,2.0beta1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.HintedHandOffTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.SystemTable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2012-2-6 01:00:00" id="5038" opendate="2012-12-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>LZ4Compressor</summary>
      <description>LZ4 is a new compression algo that's ~2x faster than Snappy.jpountz has written a nice java port which includes a misc.Unsafe version that performs &gt;= than our java snappy version.Details at http://blog.jpountz.net/post/28092106032/wow-lz4-is-fastThe nice thing is this should work with java7 and be more portable.We can also fallback the pure java impl</description>
      <version>1.2.2</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">NOTICE.txt</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2013-1-17 01:00:00" id="5168" opendate="2013-1-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>word count example fails with InvalidRequestException(why:Start key&amp;#39;s token sorts after end token)</summary>
      <description>Tried with the latest 1.2 branch (commit d64dc2eb3a1a3c3771bbe3218af9ce9629ec67bf) and got this error. Seems related to but different than CASSANDRA-5106.</description>
      <version>1.1.10,1.2.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftValidation.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-1-27 01:00:00" id="5189" opendate="2013-1-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>compact storage metadata is broken</summary>
      <description>cqlsh:foo&gt; CREATE TABLE bar ( ... id int primary key, ... i int ... ) WItH COMPACT STORAGE;cqlsh:foo&gt; INSERT INTO bar (id, i) VALUES (1, 2);Bad Request: Missing PRIMARY KEY part column1Perhaps you meant to use CQL 2? Try using the -2 option when starting cqlsh.cqlsh:foo&gt; INSERT INTO bar (id, column1) VALUES (1, 2);Bad Request: Missing mandatory column iPerhaps you meant to use CQL 2? Try using the -2 option when starting cqlsh.</description>
      <version>1.2.2</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateColumnFamilyStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2013-1-31 01:00:00" id="5207" opendate="2013-1-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Validate login for USE queries</summary>
      <description>CASSANDRA-5144 added login validation to Thrift set_keyspace method. Same should be done for CQL2 and CQL3 USE queries, otherwise C* will leak keyspace existence to strangers even when the configured authenticator requires login.</description>
      <version>1.2.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.UseStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2013-2-8 01:00:00" id="5231" opendate="2013-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add username autocompletion to cqlsh</summary>
      <description>Add cqlsh username autocompletion to grant/revoke/list/drop/alter queries.</description>
      <version>1.2.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-2-8 01:00:00" id="5232" opendate="2013-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ALTER TABLE ADD - data loss</summary>
      <description>cqlsh:Test&gt; CREATE TABLE t1 (id int PRIMARY KEY, t text);cqlsh:Test&gt; UPDATE t1 SET t = '111' WHERE id = 1;cqlsh:Test&gt; ALTER TABLE t1 ADD l list&lt;text&gt;;cqlsh:Test&gt; SELECT * FROM t1; id | l | t----------- 1 | null | 111cqlsh:Test&gt; ALTER TABLE t1 ADD m map&lt;int, text&gt;;cqlsh:Test&gt; SELECT * FROM t1;cqlsh:Test&gt;Last query doesn't return any data.</description>
      <version>1.2.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.DataTracker.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-2-8 01:00:00" id="5233" opendate="2013-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add cqlsh help for auth statements</summary>
      <description>Add cqlsh help for CREATE USER/DROP USER/GRANT/REVOKE etc.</description>
      <version>1.2.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.helptopics.py</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-2-11 01:00:00" id="5240" opendate="2013-2-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL3 has error with Compund row keys when secondray index involved</summary>
      <description>CREATE TABLE test( interval text, seq int, id int, severity int, PRIMARY KEY ((interval, seq), id)) WITH CLUSTERING ORDER BY (id DESC);&amp;#8211;CREATE INDEX ON test(severity);insert into test(interval, seq, id , severity) values('t',1, 1, 1);insert into test(interval, seq, id , severity) values('t',1, 2, 1);insert into test(interval, seq, id , severity) values('t',1, 3, 2);insert into test(interval, seq, id , severity) values('t',1, 4, 3);insert into test(interval, seq, id , severity) values('t',2, 1, 3);insert into test(interval, seq, id , severity) values('t',2, 2, 3);insert into test(interval, seq, id , severity) values('t',2, 3, 1);insert into test(interval, seq, id , severity) values('t',2, 4, 2);select * from test where severity = 3 and interval = 't' and seq =1;Bad Request: Start key sorts after end key. This is not allowed; you probably should not specify end key at all under random partitionerThe following works fineCREATE TABLE test( interval text, id int, severity int, PRIMARY KEY (interval, id)) WITH CLUSTERING ORDER BY (id DESC);&amp;#8211;CREATE INDEX ON test(severity);insert into test(interval, id , severity) values('t1', 4, 1);insert into test(interval, id , severity) values('t1', 1, 3);insert into test(interval, id , severity) values('t1', 2, 2);insert into test(interval, id , severity) values('t1', 3, 3);insert into test(interval, id , severity) values('t2', 3, 3); insert into test(interval, id , severity) values('t2', 1, 3); insert into test(interval, id , severity) values('t2', 2, 1);select * from test where severity = 3 and interval = 't1';interval | id | severity-------------------- t1 | 3 | 3 t1 | 1 | 3</description>
      <version>1.2.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
</bugrepository>