<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  
  <bug fixdate="2017-4-21 01:00:00" id="13891" opendate="2017-9-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>fromJson(null) throws java.lang.NullPointerException on Cassandra</summary>
      <description>Basically, fromJson throws a java.lang.NullPointerException when NULL is passed, instead of just returning a NULL itself. Say I create a UDT and a table as follows:create type type1(id int,name text);create table table1(id int,t FROZEN&lt;type1&gt;,primary key (id));And then try and insert a row as such:insert into table1 (id, t) VALUES (1, fromJson(null));I get the error: java.lang.NullPointerExceptionThis works as expected: insert into table1 (id, t) VALUES (1, null);Programmatically, one does not always know when a UDT will be null, hence me expecting fromJson to just return NULL.</description>
      <version>2.2.13,3.0.17,3.11.3,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.JsonTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.functions.FunctionCall.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2018-3-1 01:00:00" id="14209" opendate="2018-2-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>group by select queries query results differ when using select * vs select fields</summary>
      <description>I get two different out with these 2 queries.  The only difference between the 2 queries is that one does ‘select *’ and other does ‘select specific fields’ without any aggregate functions.I am using Apache Cassandra 3.10.Consistency level set to LOCAL_QUORUM.cassandra@cqlsh&gt; select * from wp.position where account_id = 'user_1';{{ account_id | security_id | counter | avg_exec_price | pending_quantity | quantity | transaction_id | update_time}}---------------------------------------------------------------------------------+--------------------------------{{ user_1 | AMZN | 2 | 1239.2 | 0 | 1011 | null | 2018-01-25 17:18:07.158000+0000}}{{ user_1 | AMZN | 1 | 1239.2 | 0 | 1010 | null | 2018-01-25 17:18:07.158000+0000}}(2 rows)cassandra@cqlsh&gt; select * from wp.position where account_id = 'user_1' group by security_id;{{ account_id | security_id | counter | avg_exec_price | pending_quantity | quantity | transaction_id | update_time}}---------------------------------------------------------------------------------+--------------------------------{{ user_1 | AMZN | 1 | 1239.2 | 0 | 1010 | null | 2018-01-25 17:18:07.158000+0000}}(1 rows)cassandra@cqlsh&gt; select account_id,security_id, counter, avg_exec_price,quantity, update_time from wp.position where account_id = 'user_1' group by security_id ;{{ account_id | security_id | counter | avg_exec_price | quantity | update_time}}---------------------------------------------------+--------------------------------{{ user_1 | AMZN | 2 | 1239.2 | 1011 | 2018-01-25 17:18:07.158000+0000}}(1 rows)Table Description:CREATE TABLE wp.position ({{ account_id text,}}{{ security_id text,}}{{ counter bigint,}}{{ avg_exec_price double,}}{{ pending_quantity double,}}{{ quantity double,}}{{ transaction_id uuid,}}{{ update_time timestamp,}}{{ PRIMARY KEY (account_id, security_id, counter)}}) WITH CLUSTERING ORDER BY (security_id ASC, counter DESC) </description>
      <version>3.11.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectGroupByTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.JsonTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.selection.Selection.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2018-3-21 01:00:00" id="14247" opendate="2018-2-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>SASI tokenizer for simple delimiter based entries</summary>
      <description>Currently SASI offers only two tokenizer options: NonTokenizerAnalyser StandardAnalyzerThe latter is built upon Snowball, powerful for human languages but overkill for simple tokenization.A simple tokenizer is proposed here. The need for this arose as a workaround of CASSANDRA-11182, and to avoid the disk usage explosion when having to resort to CONTAINS. See https://github.com/openzipkin/zipkin/issues/1861Example use of this would be:CREATE CUSTOM INDEX span_annotation_query_idx ON zipkin2.span (annotation_query) USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = { 'analyzer_class': 'org.apache.cassandra.index.sasi.analyzer.DelimiterAnalyzer', 'delimiter': '░', 'case_sensitive': 'true', 'mode': 'prefix', 'analyzed': 'true'};Original credit for this work goes to https://github.com/zuochangan</description>
      <version>3.11.3,4.0-alpha1,4.0</version>
      <fixedVersion>Feature/SASI</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2018-4-23 01:00:00" id="14411" opendate="2018-4-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use Bounds instead of Range to represent sstable first/last token when checking how to anticompact sstables</summary>
      <description>There is currently a chance of missing marking a token as repaired due to the fact that we use Range which are (a, b] to represent first/last token in sstables instead of Bounds which are &amp;#91;a, b&amp;#93;.</description>
      <version>2.2.13,3.0.17,3.11.3,4.0-alpha1,4.0</version>
      <fixedVersion>Consistency/Repair</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.compaction.AntiCompactionTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2018-5-30 01:00:00" id="14428" opendate="2018-4-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Run ant eclipse-warnings in circleci</summary>
      <description>We should run ant eclipse-warnings in circle-ci</description>
      <version>3.0.17,3.11.3,4.0-alpha1,4.0</version>
      <fixedVersion>CI</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">.circleci.config.yml</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2018-5-29 01:00:00" id="14475" opendate="2018-5-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool - Occasional high CPU on large, CPU capable machines</summary>
      <description>Periodically calling nodetool every 5 min results in increased CPU usage by nodetool only on a machine with 32 physical cores (64 vCPUs) according to our monitoring:Investigation and testing has shown that it is related to running with default number of parallel GC threads which is 43 on this particular machine. We see a System.gc() according to flight recorder but no real evidence from where it comes from. The nodetool call in question is simply gathering e.g. the version with "nodetool version".After explicitly setting the number of parallel GC threads to 1, the high CPU is entirely gone (see chart above), without impacting nodetool being executed successfully. 1 parallel GC thread should be sufficient for nodetool anyway I think.</description>
      <version>3.11.3,4.0-alpha1,4.0</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.nodetool</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2018-6-12 01:00:00" id="14513" opendate="2018-6-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Reverse order queries in presence of range tombstones may cause permanent data loss</summary>
      <description>Slice queries in descending sort order can create oversized artificial range tombstones. At CL &gt; ONE, read repair can propagate these tombstones to all replicas, wiping out vast data ranges that they mistakenly cover.</description>
      <version>3.0.17,3.11.3,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Core,Legacy/CQL,Legacy/LocalWrite-ReadPaths</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.columniterator.SSTableReversedIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.columniterator.AbstractSSTableIterator.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
</bugrepository>