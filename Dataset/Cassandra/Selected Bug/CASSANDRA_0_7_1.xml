<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  
  
  <bug fixdate="2010-12-21 01:00:00" id="1525" opendate="2010-9-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve log4j configuration to provide the ability to modify logging levels dynamically via JMX</summary>
      <description>It would nice to add some named appenders to log4j configuration in such a way that their levels could be increased via jconsole. I have done this with other logging libraries and I believe that most of the capabilities here are built in to log4j.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">conf.log4j-server.properties</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cassandra.bat</file>
      <file type="M">bin.cassandra</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2010-1-27 01:00:00" id="1546" opendate="2010-9-27 00:00:00" resolution="Duplicate">
    <buginformation>
      <summary>(Yet another) approach to counting</summary>
      <description>This could be described as a mix between CASSANDRA-1072 without clocks and CASSANDRA-1421.More details in the comment below.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.ColumnFamilyStoreTest.java</file>
      <file type="M">test.conf.cassandra.yaml</file>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-2-28 01:00:00" id="1551" opendate="2010-9-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>create "tell me what nodes you have hints for" jmx api</summary>
      <description>we can do this efficiently in 0.7 due to new HH schema. in 0.6 this would require scanning all hints so probably not worth it.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2010-1-8 01:00:00" id="1718" opendate="2010-11-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra should chdir / when daemonizing</summary>
      <description>Common practice when daemonizing is to cd / to avoid pinning a filesystem. For example, if the oper happens to start Cassandra (by itself, or with a manual jsvc invocation, or with the initscript) in /mnt/usb-storage, and there is something mounted there, then the oper will not be able to unmount the usb device that was mounted at that location, since the cassandra process has it open as its cwd.evidence that this isn't being done already:~% sudo lsof -p 9775 | awk '$4=="cwd"'jsvc 9775 cassandra cwd DIR 8,1 4096 147675 /home/paul/packages/cassandra/trunk(That instance was invoked using the Debian initscript.)Obviously chdir("/") isn't necessary when not daemonizing, although it shouldn't hurt either.If there are concerns about Cassandra having an ongoing ability to open filenames relative to its original working directory, then it should be sufficient just to do a "cd /" in the initscript before starting Cassandra. That case, at least, is particularly important.</description>
      <version>0.7.1</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.init</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-1-14 01:00:00" id="1859" opendate="2010-12-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>distributed test harness</summary>
      <description>Distributed Test Harness deploys a cluster on a cloud provider runs tests targeted at the cluster tears down the cluster</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ivysettings.xml</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2010-1-23 01:00:00" id="1895" opendate="2010-12-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Loadbalance during gossip issues leaves cluster in bad state</summary>
      <description>Running loadbalance against a node in a 4 node cluster leaves gossip in a wonky state.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2010-1-23 01:00:00" id="1898" opendate="2010-12-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>json2sstable should support streaming</summary>
      <description>json2sstable loads the entire json file into memory. This is so it can sort the file before creating an sstable. If the file was created using sstable2json and the partitioner isn't changing, this isn't necessary. For very large files this means json2sstable requires a huge amount of memory.There should be an option to stream the file. A simple check for out of order keys will prevent writing bad sstables.This should be possible with the SAX style parser available in our current json library.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.tools.SSTableImportTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.tools.SSTableExportTest.java</file>
      <file type="M">test.resources.SuperCF.json</file>
      <file type="M">test.resources.SimpleCF.json</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableImport.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2010-12-29 01:00:00" id="1916" opendate="2010-12-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cleanup needs to remove secondary index entries</summary>
      <description/>
      <version>0.7.1</version>
      <fixedVersion>Feature/2iIndex</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.CleanupTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.AbstractCompactedRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CompactionManager.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2010-12-30 01:00:00" id="1921" opendate="2010-12-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add jmx password authentication to nodetool</summary>
      <description>patch soon...</description>
      <version>0.7.1</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2011-1-11 01:00:00" id="1968" opendate="2011-1-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Increase JVM young generation size</summary>
      <description>Increasing the young generation size has a profound effect on performance and cpu utilization. We should set it explicitly.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-1-11 01:00:00" id="1970" opendate="2011-1-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Message version resolution</summary>
      <description>When a new new node (version N) contacts an old node (version N-1) for the first time, the old node will not understand the message. One resolution mechanism would be for the old node to "bounce" the message back to the sender. The sender would then respond by translating the message to the appropriate version and resending it.For this to work, 0.7.1 will need to have the "bounce" feature.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.net.IncomingTcpConnection.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-1-12 01:00:00" id="1972" opendate="2011-1-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Default concurrency values are improperly proportioned</summary>
      <description>The "default"/"suggested" concurrent_reads value is much too low. It assumes that CPU will be the bottleneck, rather than IO, and for most deployments, this will not be the case. Additionally it is better to be queued for IO in the kernel or on your device than in user space, because the former work to optimize queue order.Additionally, reads are much cheaper than writes in terms of CPU time (since writes can experience contention due to retries), so while concurrent_writes should probably factor in the number of cores on the machine, concurrent_reads should probably be calculated purely by number of spindles.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra.yaml</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  <bug fixdate="2011-1-21 01:00:00" id="2023" opendate="2011-1-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>fix regression in 1968 (young gen sizing logic)</summary>
      <description>1968 introduced a regression (there was still cleanup to do). In particular it broke when an explicit MAX_HEAP_SIZE was set. Attaching draft patch (needs more testing).Allowing automatic newsize calculation in the face of a manually specified MAX_HEAP_SIZE was problematic. Either one has to duplicate JVM parsing of MAX_HEAP_SIZE or ask the user to set MAX_HEAP_SIZE_IN_MB (or similar) instead.In this patch (consider it a draft) i opted for the latter + picking up MAX_HEAP_SIZE for backwards compatibility (but with the effect that it disables new size calculation). I tried to make it slightly more posixly correct, but as usual no guarantees given that I have no posix shell to test it on.I'm not really happy about the shell acrobatics and my confidence that there is not some left-over issue is not high. Should we just not worry about MAX_HEAP_SIZE compatibility and remove all that compatibility cruft? Plenty of acrobatics left still, but it would remove the more hideous parts.</description>
      <version>0.7.1</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-1-21 01:00:00" id="2028" opendate="2011-1-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra should log, at info level, when a keyspace and/or column family is created and/or updated</summary>
      <description>Cassandra currently doesn't log at info level when schema changes happen. It should probably log details about what is being created/changed when it applies the changes locally.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.migration.UpdateKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.UpdateColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.Migration.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.DropKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.DropColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.AddKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.AddColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-1-21 01:00:00" id="2029" opendate="2011-1-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>describe_keyspace in CLI should default to the currently set keyspace if there is one, otherwise keep current behavior</summary>
      <description>currently "describe keyspace" requires a keyspace argument, even if "use some_keyspace" was already issued. If there is one set, it should default to that.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliUserHelp.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-1-21 01:00:00" id="2031" opendate="2011-1-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI chokes on whitespace after semicolon when using -f</summary>
      <description>The CLI chokes on whitespace after the semicolon when a file is passed with -f"... missing EOF at"</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliMain.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-1-21 01:00:00" id="2032" opendate="2011-1-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI should accept # (and/or some other char) as a comment character in files passed with -f</summary>
      <description>The CLI doesn't allow comments in files passed in with -f</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliMain.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-2-24 01:00:00" id="2041" opendate="2011-1-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>add paging of large rows to sstable2json</summary>
      <description/>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-1-24 01:00:00" id="2044" opendate="2011-1-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI should loop on describe_schema until agreement or fatel exit with stacktrace/message if no agreement after X seconds</summary>
      <description>see CASSANDRA-2026 for brief background.It's easy to enter statements into the CLI before the schema has settled, often causing problems where it is no longer possible to get the nodes in agreement about the schema without removing the system directory.The alleviate the most common problems with this, the CLI should issue the modification statement and loop on describe_schema until all nodes agree or until X seconds has passed. If the timeout has been exceeded, the CLI should exit with an error and inform the user that the schema has not settled and further migrations are ill-advised until it does.number_of_nodes/2+1 seconds seems like a decent wait time for schema migrations to start with.Bonus points for making the value configurable.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliSessionState.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliOptions.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2011-1-28 01:00:00" id="2073" opendate="2011-1-28 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Streaming occasionally makes gossip back up</summary>
      <description>Streaming occasionally makes gossip back up, causing nodes to mark each other as down even though the network is ok. This appears to happen just after streaming has finished. I noticed this in the course of working on CASSANDRA-2072, so decommission is one way to reproduce. It seems to happen maybe one of fifteen or twenty tries, so it's fairly rare.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2011-2-2 01:00:00" id="2098" opendate="2011-2-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add description to nodetool commands</summary>
      <description>The help of nodetool is not very pretty, in particular there is no description of proposed commands</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-2-5 01:00:00" id="2114" opendate="2011-2-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>make it easier to have Cassandra JVM listen for remote debuggers</summary>
      <description>it's extremely common that I connect a remote debugger to the Cassandra JVM. It's become quite annoying to continually copy the same line into the config every time I need to hook up a debugger. We should add a commented line in cassnadra-env.sh to enable remote debugging.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-2-8 01:00:00" id="2135" opendate="2011-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add the ability to enable/disable Thrift through nodetool</summary>
      <description/>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-2-8 01:00:00" id="2138" opendate="2011-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>add option to enable efficient cross-dc replication</summary>
      <description>In CASSANDRA-1530 we made cross-dc replication more efficient, but 0.7.0 will ignore any forwarding messages it receives, so let's make this optional to allow smoother upgrades.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.FBUtilities.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.VersionedValue.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.ApplicationState.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-2-8 01:00:00" id="2142" opendate="2011-2-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add "reduce memory usage because I tuned things poorly" feature</summary>
      <description>Users frequently create too many columnfamilies, set the memtable thresholds too high (or adjust throughput while ignoring operations), and/or set caching thresholds too high. Then their server OOMs and they tell their friends Cassandra sucks.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.GCInspector.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-2-9 01:00:00" id="2148" opendate="2011-2-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>system CFs default to large memtable throughputs on large heaps</summary>
      <description>The default memtableThroughputInMB is calculated now based on the heap size. Most people running with a large heap in production explicitly set it for their memtable(s). However, the the CFs in the system keyspace still default to the calculated value which on a large heap can be quite large. HintsColumnFamily is really the only problematic one though as the others are flushed afters changes to them.we should:1) set the throughput on the hints CF to a reasonable max and min value - min(256, max(32, normalDefault/2))2) set the throughput on the other system CFs to some small constant value (just as a safety); 8M sounds good</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-2-10 01:00:00" id="2150" opendate="2011-2-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>sstablekeys silently ignores extra arguments</summary>
      <description>sstablekeys only passes arg $1 to SSTableExporter instead of passing all arguments, like sstable2json. Only one SSTable is allowed as an argument, but this is normally detected in SSTableExporter.java. By only passing the one argument, we end up silently ignoring the remaining arguments.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.sstablekeys</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2009-1-4 01:00:00" id="526" opendate="2009-11-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Operations: Allow the ability to start a node without joining the ring</summary>
      <description>In environments with a dedicated operations team, it might make sense for some organizations to start Cassandra nodes with a flag that allows them to bootup, but not join the ring until they receive an explicit command. This would help in situations if certain actions need to happen from the engineering side before certain nodes go live and take on traffic.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
</bugrepository>