<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2011-2-14 01:00:00" id="2160" opendate="2011-2-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add "join" command to the nodetool</summary>
      <description>Nodetool should be able to make current node join/re-join a ring.</description>
      <version>0.7.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-3-15 01:00:00" id="2168" opendate="2011-2-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>SSTable2Json tool returns a different key when a querying for a specific key in an SSTable that does not exist</summary>
      <description>bin/sstable2json storage/core/data/Foo/BAR-1-Data.db -k NonExistantKeyreturns{ "ExistantKey" }</description>
      <version>0.7.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-2-22 01:00:00" id="2219" opendate="2011-2-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>modernize nodecmd option handling</summary>
      <description/>
      <version>0.7.4</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-3-24 01:00:00" id="2242" opendate="2011-2-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve BRAFTest</summary>
      <description>BRAF is insufficiently tested (see CASSANDRA-2241). I'd like to get this up to 100% line coverage. (Not sure what it's actually at right now, since "ant codecoverage" doesn't work.)</description>
      <version>0.7.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.io.util.BufferedRandomAccessFileTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.BufferedRandomAccessFile.java</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2011-3-4 01:00:00" id="2271" opendate="2011-3-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Audit uses of BBU.clone</summary>
      <description/>
      <version>0.7.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.FBUtilities.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableReader.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-3-5 01:00:00" id="2276" opendate="2011-3-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pig memory issues with default LIMIT and large rows.</summary>
      <description>Rows with a lot of columns, especially super-colums with a lot of values can cause OutOfMemory errors in Cassandra when queried with Pig.</description>
      <version>0.7.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">contrib.pig.src.java.org.apache.cassandra.hadoop.pig.CassandraStorage.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-3-7 01:00:00" id="2282" opendate="2011-3-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>ReadCallback AssertionError: resolver.getMessageCount() &lt;= endpoints.size()</summary>
      <description>In a three node cluster with RF=2, when trying to page through all rows with get_range_slices() at CL.ONE, I get timeouts on the client side. Looking at the Cassandra logs, all of the nodes show the following AssertionError repeatedly:ERROR [RequestResponseStage:2] 2011-03-07 19:10:27,527 DebuggableThreadPoolExecutor.java (line 103) Error in ThreadPoolExecutorjava.lang.AssertionError at org.apache.cassandra.service.ReadCallback.response(ReadCallback.java:127) at org.apache.cassandra.net.ResponseVerbHandler.doVerb(ResponseVerbHandler.java:49) at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:72) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:636)ERROR [RequestResponseStage:2] 2011-03-07 19:10:27,529 AbstractCassandraDaemon.java (line 114) Fatal exception in thread Thread[RequestResponseStage:2,5,main]java.lang.AssertionError at org.apache.cassandra.service.ReadCallback.response(ReadCallback.java:127) at org.apache.cassandra.net.ResponseVerbHandler.doVerb(ResponseVerbHandler.java:49) at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:72) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:636)The nodes are all running 0.7.3. The cluster was at size 3 before any data was inserted, and everything else appears perfectly healthy.</description>
      <version>0.7.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-3-8 01:00:00" id="2286" opendate="2011-3-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>range queries don&amp;#39;t respect snitch for local replicas</summary>
      <description/>
      <version>0.7.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-3-8 01:00:00" id="2294" opendate="2011-3-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>secondary index CFs should use parent CF flush thresholds</summary>
      <description/>
      <version>0.7.4</version>
      <fixedVersion>Feature/2iIndex</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-3-8 01:00:00" id="2295" opendate="2011-3-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>memory pressure flusher should include secondary index CFs</summary>
      <description/>
      <version>0.7.4</version>
      <fixedVersion>Feature/2iIndex</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-3-10 01:00:00" id="2312" opendate="2011-3-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Stress.java columns are bigger than advertised</summary>
      <description>Converting from bytes to hex makes the columns 4x larger than they should be. (2x for conversion to hex, then another 2x for converting to UTF-16 which is the default String encoding.)</description>
      <version>0.7.4</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.util.Operation.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.Session.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.operations.Inserter.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-12-8 01:00:00" id="3598" opendate="2011-12-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Index Scan&amp;#39;s will span across multiple DC&amp;#39;s</summary>
      <description>Looks like we send requests to all the nodes provided by StorageService.instance.getLiveNaturalEndpoints(keyspace, range.right);We dont filter it based on blockedFor (Consistency levels).In a multi DC setup this will cause unnecessary load on the other DC. And even within a DC we might query more nodes than needed.</description>
      <version>0.7.4,0.8.9,1.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>