<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  <bug fixdate="2012-10-14 01:00:00" id="4959" opendate="2012-11-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQLSH insert help has typo</summary>
      <description>&amp;#91;cqlsh 2.3.0 | Cassandra 1.2.0-beta2-SNAPSHOT | CQL spec 3.0.0 | Thrift protocol 19.35.0&amp;#93;Use HELP for help.cqlsh&gt; help INSERT INSERT INTO &amp;#91;&lt;keyspace&gt;.&amp;#93;&lt;tablename&gt; ( &lt;colname1&gt;, &lt;colname2&gt; [, &lt;colname3&gt; &amp;#91;, ...&amp;#93;] ) VALUES ( &lt;colval1&gt;, &lt;colval2&gt; [, &lt;colval3&gt; &amp;#91;, ...&amp;#93;] ) &amp;#91;USING TIMESTAMP &lt;timestamp&gt;&amp;#93; &amp;#91;AND TTL &lt;timeToLive&amp;#93;];Should be. &amp;#91;AND TTL &lt;timeToLive&gt;&amp;#93;];Also it was not clear to me initially that you could just do:USING TTL &lt;timeToLive&gt;But maybe that is just me.</description>
      <version>2.0.12,2.1.2</version>
      <fixedVersion>Legacy/DocumentationandWebsite</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.helptopics.py</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-12-29 01:00:00" id="6952" opendate="2014-3-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cannot bind variables to USE statements</summary>
      <description>Attempting to bind a variable for a USE query results in a syntax error.Example Invocation:ResultSet result = session.execute("USE ?", "system");Error:ERROR SYNTAX_ERROR: line 1:4 no viable alternative at input '?', v=2</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-8-5 01:00:00" id="7704" opendate="2014-8-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>FileNotFoundException during STREAM-OUT triggers 100% CPU usage</summary>
      <description>See attached backtrace which was what triggered this. This stream failed and then ~12 seconds later it emitted that exception. At that point, all CPUs went to 100%. A thread dump shows all the ReadStage threads stuck inside IntervalTree.searchInternal inside of CFS.markReferenced().</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.streaming.StreamTransferTaskTest.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamTransferTask.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2010-12-15 01:00:00" id="798" opendate="2010-2-15 00:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>Add readme file to contrib/circuit</summary>
      <description>There is no readme file or equivalent in the contrib/circuit directory. This makes it hard to get a quick overview of what the purpose is.</description>
      <version>None</version>
      <fixedVersion>Legacy/DocumentationandWebsite</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">interface.cassandra.genavro</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-11-15 01:00:00" id="8125" opendate="2014-10-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool statusgossip doesn&amp;#39;t exist</summary>
      <description>nodetool supports different checks for status on thrift and for binary but does not support a check for gossip. You can get this information from nodetool info.The ones that exist are:nodetool statusbinarynodetool statusthriftIt would be nice if the following existed:nodetool statusgossip</description>
      <version>2.0.12,2.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeTool.java</file>
      <file type="M">src.resources.org.apache.cassandra.tools.NodeToolHelp.yaml</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-12-21 01:00:00" id="8156" opendate="2014-10-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix validation of indexes on composite column components of COMPACT tables</summary>
      <description>CASSANDRA-5125 added support of indexes on composite column components for non-compact tables (see CASSANDRA-5125 comments for additional information).This is a follow up for compact tables.Using compact tables it is possible to CREATE INDEX on composite primary key columns, but queries returns no results for the tests below.CREATE TABLE users2 ( userID uuid, fname text, zip int, state text, PRIMARY KEY ((userID, fname))) WITH COMPACT STORAGE;CREATE INDEX ON users2 (userID);CREATE INDEX ON users2 (fname);INSERT INTO users2 (userID, fname, zip, state) VALUES (b3e3bc33-b237-4b55-9337-3d41de9a5649, 'John', 10007, 'NY');-- the following queries returns 0 rows, instead of 1 expectedSELECT * FROM users2 WHERE fname='John'; SELECT * FROM users2 WHERE userid=b3e3bc33-b237-4b55-9337-3d41de9a5649;SELECT * FROM users2 WHERE userid=b3e3bc33-b237-4b55-9337-3d41de9a5649 AND fname='John';-- dropping 2ndary indexes restore normal behavior</description>
      <version>2.0.12</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateIndexStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-11-22 01:00:00" id="8164" opendate="2014-10-22 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>OOM due to slow memory meter</summary>
      <description>Memory meter holds strong reference to memtable while it iterates over memtable cells. Because meter is not fast, it prevents memtable from being GCed after it has been flushed for some time.If write rate is fast enough, this makes node OOM.Fixed this by aborting metering if table becomes not active in datatracker, i.e. flushing or flushed.</description>
      <version>2.0.12</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.Memtable.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  
  
  
  <bug fixdate="2014-12-4 01:00:00" id="8248" opendate="2014-11-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Possible memory leak</summary>
      <description>Sometimes during repair cassandra starts to consume more memory than expected.Total amount of data on node is about 20GB.Size of the data directory is 66GC because of snapshots.Top reports: PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND15724 loadbase 20 0 493g 55g 44g S 28 44.2 4043:24 javaAt the /proc/15724/maps there are a lot of deleted file maps7f63a6102000-7f63a6332000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a6332000-7f63a6562000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a6562000-7f63a6792000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a6792000-7f63a69c2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a69c2000-7f63a6bf2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a6bf2000-7f63a6e22000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a6e22000-7f63a7052000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a7052000-7f63a7282000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a7282000-7f63a74b2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a74b2000-7f63a76e2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a76e2000-7f63a7912000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a7912000-7f63a7b42000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a7b42000-7f63a7d72000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a7d72000-7f63a7fa2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a7fa2000-7f63a81d2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a81d2000-7f63a8402000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a8402000-7f63a8622000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a8622000-7f63a8842000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a8842000-7f63a8a62000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a8a62000-7f63a8c82000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a8c82000-7f63a8ea2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a8ea2000-7f63a90c2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)7f63a90c2000-7f63a92e2000 r--s 00000000 08:21 9442763 /ssd/cassandra/data/iss/feedback_history-d32bc7e048c011e49b989bc3e8a5a440/iss-feedback_history-tmplink-ka-328671-Index.db (deleted)$ sudo grep deleted /proc/15724/maps | wc -l640118$ sudo grep -v deleted /proc/15724/maps | wc -l303340</description>
      <version>None</version>
      <fixedVersion>Legacy/StreamingandMessaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableWriter.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-11-6 01:00:00" id="8265" opendate="2014-11-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Disable SSLv3 for POODLE</summary>
      <description>We should probably disable SSLv3.http://www.oracle.com/technetwork/java/javase/documentation/cve-2014-3566-2342133.html</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.transport.SimpleClient.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.Server.java</file>
      <file type="M">src.java.org.apache.cassandra.thrift.CustomTThreadPoolServer.java</file>
      <file type="M">src.java.org.apache.cassandra.security.SSLFactory.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2014-12-25 01:00:00" id="8373" opendate="2014-11-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>MOVED_NODE Topology Change event is never emitted</summary>
      <description>lifeCycleSubscribers.onMove never gets called because this tokenMetadata.updateNormalTokens call changes the endpoint moving status, making the later isMoving conditional always false.</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-12-1 01:00:00" id="8401" opendate="2014-12-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>dropping a CF doesn&amp;#39;t remove the latency-sampling task</summary>
      <description>this retains the CF object on heap indefinitely</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-12-2 01:00:00" id="8408" opendate="2014-12-2 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>limit appears to replace page size under certain conditions</summary>
      <description>This seems it could be related to CASSANDRA-8403.When paging a query with:limit &lt; page size &lt;&lt; data size, and querying using an 'IN' clause across several partitions, I get back several pages of size=limit (instead of the page size being used). So the limit is being exceeded and it seems to supplant the page size value, but something is still keeping the total rows returned down.To repro, create a table:CREATE TABLE paging_test ( id int, value text, PRIMARY KEY (id, value) )And add data across several partitions (I used 6 partitions). Add a bunch of rows to each partition (I have 80 total across all partitions).Perform a paged query using an 'IN' clause across all the partitions, where:limit &lt; page_size &lt;&lt; data size. I used something like:SELECT * FROM paging_test where id in (1,2,3,4,5,6) LIMIT 9;(with a page_size of 20 for the query).What I get returned is three pages of sizes: 9, 9, 8 &amp;#8211; 26 rows in total but I'm uncertain why.</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.service.QueryPagerTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.pager.QueryPagers.java</file>
      <file type="M">src.java.org.apache.cassandra.service.pager.Pageable.java</file>
      <file type="M">src.java.org.apache.cassandra.service.pager.MultiPartitionPager.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-12-3 01:00:00" id="8417" opendate="2014-12-3 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Default base_time_seconds in DTCS is almost always too large</summary>
      <description>One hour is a very long time to compact all new inserts together with any reasonable volume at all.</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2015-1-4 01:00:00" id="8558" opendate="2015-1-4 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>deleted row still can be selected out</summary>
      <description>firstCREATE KEYSPACE space1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};CREATE TABLE space1.table3(a int, b int, c text,primary key(a,b));CREATE KEYSPACE space2 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};secondCREATE TABLE space2.table1(a int, b int, c int, primary key(a,b));CREATE TABLE space2.table2(a int, b int, c int, primary key(a,b));INSERT INTO space1.table3(a,b,c) VALUES(1,1,'1');drop table space2.table1;DELETE FROM space1.table3 where a=1 and b=1;drop table space2.table2;select * from space1.table3 where a=1 and b=1;you will find that the row (a=1 and b=1) in space1.table3 is not deleted.</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.composites.CellNameType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.columniterator.SSTableNamesIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.columniterator.IndexedSliceReader.java</file>
      <file type="M">src.java.org.apache.cassandra.db.AtomDeserializer.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2015-1-8 01:00:00" id="8579" opendate="2015-1-8 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>sstablemetadata can&amp;#39;t load org.apache.cassandra.tools.SSTableMetadataViewer</summary>
      <description>The sstablemetadata tool only works when running from the source tree. The classpath doesn't get set correctly when running on a deployed environment.This bug looks to exist in 2.1 as well.</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">tools.bin.sstablemetadata</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2015-1-17 01:00:00" id="8640" opendate="2015-1-17 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Paxos requires all nodes for CAS</summary>
      <description>In C* 2.1,int requiredParticipants = participants + 1 / 2; // See CASSANDRA-833Will always return participants because of operator precedence. I am not sure just adding parentheses will fix the problem, though, as the original code differentiated between pending and natural endpoints. int requiredParticipants = pendingEndpoints.size() + 1 + naturalEndpoints.size() / 2; // See CASSANDRA-833</description>
      <version>2.0.12,2.1.3</version>
      <fixedVersion>Feature/LightweightTransactions</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>