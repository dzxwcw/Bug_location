<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  
  
  <bug fixdate="2013-2-15 01:00:00" id="6360" opendate="2013-11-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make nodetool cfhistograms output easily understandable</summary>
      <description>Almost nobody understands the cfhistograms output without googling it. By default, we shouldn't share an axis across all metrics. We can still provide the current format with a --compact option.</description>
      <version>2.0.6</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2014-2-27 01:00:00" id="6623" opendate="2014-1-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Null in a cell caused by expired TTL does not work with IF clause (in CQL3)</summary>
      <description>IF onecell=null clause does not work if the onecell has got its null value from an expired TTL. If onecell is updated with null value (UPDATE) then IF onecell=null works fine.This bug is not present when you create a table with COMPACT STORAGE directive.</description>
      <version>2.0.6</version>
      <fixedVersion>Legacy/Testing</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.CassandraServer.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ModificationStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2014-2-5 01:00:00" id="6658" opendate="2014-2-5 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Nodes flap once at startup</summary>
      <description>Upon initially seeing each other, a node will mark another UP, then DOWN, then UP again.</description>
      <version>2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.gms.FailureDetector.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-9-6 01:00:00" id="6666" opendate="2014-2-6 00:00:00" resolution="Duplicate">
    <buginformation>
      <summary>Avoid accumulating tombstones after partial hint replay</summary>
      <description/>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-2-6 01:00:00" id="6667" opendate="2014-2-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Mean cells per sstable is calculated incorrectly</summary>
      <description>We currently take the average of the mean for each partition, rather than correctly weighting by cell count. This affects hint paging as well as index selectivity calculation.</description>
      <version>1.2.16,2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.metrics.ColumnFamilyMetrics.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DataTracker.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStoreMBean.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-2-7 01:00:00" id="6678" opendate="2014-2-7 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unwanted schema pull while upgrading nodes from 1.2 to 2.0</summary>
      <description>While upgrading from 1.2 to 2.0, the 1.2 nodes are not supposed to pull schemas from upgraded 2.0 nodes to avoid conflicts.This relies on network version checks between the two nodes, but there's a bit of a race between the Gossiper, which is activated first, and the MessagingService, which is activated after the Gossiper and handles network version exchange: if a 1.2 node Gossiper gets a gossip message from a newly 2.0 node before opening connections from the MessagingService, the version will still be 1.2, and the schema will be pulled from the new node.A possible solution may be to have the Gossiper update the network version upon receiving the first gossip message of an upgraded node: thoughts?</description>
      <version>1.2.16,2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-2-10 01:00:00" id="6687" opendate="2014-2-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL: "drop table if exists" throws exception when table does not exist</summary>
      <description>MacBook-Bro-6:~ brenthaines$ cqlshConnected to Test Cluster at localhost:9160.[cqlsh 4.1.1 | Cassandra 2.0.5 | CQL spec 3.1.1 | Thrift protocol 19.39.0]Use HELP for help.cqlsh&gt; use apps;cqlsh:apps&gt; describe table brands;Column family 'brands' not foundcqlsh:apps&gt; drop table if exists brands;Bad Request: unconfigured columnfamily brandscqlsh:apps&gt;</description>
      <version>2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.DropTableStatement.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-2-12 01:00:00" id="6695" opendate="2014-2-12 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Don&amp;#39;t exchange schema between nodes with different versions (no pull, no push)</summary>
      <description>Subject. Don't push schema to unknown-, or differently major-versioned nodes, and don't pull schema from them, either.Since we don't support schema altering during upgrade, and adding nodes during cluster upgrades is also a non-recommended thing, this is what we are going to do.Until CASSANDRA-6038, that is.</description>
      <version>1.2.16,2.0.6,2.1beta1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-2-13 01:00:00" id="6701" opendate="2014-2-13 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>IN on the last clustering columns + ORDER BY DESC yield no results</summary>
      <description>That's not a very common mix but well, the following return no results which is obviously bogus:CREATE TABLE test (k int, c1 int, c2 int, PRIMARY KEY (k, c1, c2));INSERT INTO test(k, c1, c2) VALUES (0, 0, 0);INSERT INTO test(k, c1, c2) VALUES (0, 0, 1);INSERT INTO test(k, c1, c2) VALUES (0, 0, 2);SELECT * FROM test WHERE k=0 AND c1 = 0 AND c2 IN (2, 0) ORDER BY c1 DESCNote: it's pretty useless to order on a column which has an equal restriction, and that's probably why nobody ran into this yet, but that's really just due to a minor typo so there is no reason not to fix.</description>
      <version>1.2.16,2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-3-14 01:00:00" id="6703" opendate="2014-2-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh support for "static" CQL3 columns</summary>
      <description>Show "static" columns in DESCRIBE CREATE/ALTER TABLE autocompletions</description>
      <version>2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">examples.hadoop.cql3.word.count.src.WordCountSetup.java</file>
      <file type="M">examples.hadoop.cql3.word.count.src.WordCountCounters.java</file>
      <file type="M">examples.hadoop.cql3.word.count.src.WordCount.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-2-14 01:00:00" id="6713" opendate="2014-2-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Snapshot based repair does not send snapshot command to itself</summary>
      <description>Due to this, the Merkle tree created will differ a lot causing lot of streaming to happen.</description>
      <version>1.2.16,2.0.6,2.1beta1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.AntiEntropyService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2014-2-18 01:00:00" id="6722" opendate="2014-2-18 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cross-partition ordering should have warning or be disallowed when paging</summary>
      <description>consider this schema/data/query:CREATE TABLE paging_test ( id int, value text, PRIMARY KEY (id, value)) WITH CLUSTERING ORDER BY (value ASC) |id|value| |1 |a | |2 |b | |1 |c | |2 |d | |1 |e | |2 |f | |1 |g | |2 |h | |1 |i | |2 |j |select * from paging_test where id in (1,2) order by value asc;When paging the above query I get the sorted results from id=1 first, then the sorted results from id=2 after that. I was testing this because I was curious if the paging system could somehow globally sort the results but it makes sense that we can't do that, since that would require all results to be collated up front.</description>
      <version>2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2014-2-25 01:00:00" id="6769" opendate="2014-2-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Static columns break IN clauses</summary>
      <description>If you use static columns, as implemented in CASSANDRA-6561, then very simple SELECT...WHERE...IN queries fail with an internal NPE.create table foo (x text, y text, s text static, primary key (x,y));insert into foo (x,y,s) values ('a','b','c');select * from foo where x='a' and y in ('b','c');Request did not complete within rpc_timeout.ERROR &amp;#91;ReadStage:190&amp;#93; 2014-02-25 14:19:16,400 CassandraDaemon.java (line 196) Exception in thread Thread&amp;#91;ReadStage:190,5,main&amp;#93;java.lang.RuntimeException: java.lang.NullPointerException at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1900) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722)Caused by: java.lang.NullPointerException at org.apache.cassandra.db.filter.ColumnSlice$NavigableMapIterator.computeNext(ColumnSlice.java:141) at org.apache.cassandra.db.filter.ColumnSlice$NavigableMapIterator.computeNext(ColumnSlice.java:162) at org.apache.cassandra.db.filter.ColumnSlice$NavigableMapIterator.computeNext(ColumnSlice.java:162) at org.apache.cassandra.db.filter.ColumnSlice$NavigableMapIterator.computeNext(ColumnSlice.java:117) at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143) at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138) at org.apache.cassandra.db.filter.SliceQueryFilter$1.hasNext(SliceQueryFilter.java:148) at org.apache.cassandra.db.filter.QueryFilter$2.getNext(QueryFilter.java:157) at org.apache.cassandra.db.filter.QueryFilter$2.hasNext(QueryFilter.java:140) at org.apache.cassandra.utils.MergeIterator$OneToOne.computeNext(MergeIterator.java:200) at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143) at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138) at org.apache.cassandra.db.filter.SliceQueryFilter.collectReducedColumns(SliceQueryFilter.java:185) at org.apache.cassandra.db.filter.QueryFilter.collateColumns(QueryFilter.java:122) at org.apache.cassandra.db.filter.QueryFilter.collateOnDiskAtom(QueryFilter.java:80) at org.apache.cassandra.db.filter.QueryFilter.collateOnDiskAtom(QueryFilter.java:72) at org.apache.cassandra.db.CollationController.collectAllData(CollationController.java:297) at org.apache.cassandra.db.CollationController.getTopLevelColumns(CollationController.java:53) at org.apache.cassandra.db.ColumnFamilyStore.getTopLevelColumns(ColumnFamilyStore.java:1550) at org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(ColumnFamilyStore.java:1379) at org.apache.cassandra.db.Keyspace.getRow(Keyspace.java:327) at org.apache.cassandra.db.SliceFromReadCommand.getRow(SliceFromReadCommand.java:65) at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1341) at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1896)</description>
      <version>2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2014-3-27 01:00:00" id="6782" opendate="2014-2-27 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>setting TTL on some columns seems to expire whole row</summary>
      <description>I create a table with 4 columns, set a ttl on 2 of the columns and when the TTL is up, the entire row disappears.cqlsh:myks&gt; CREATE TABLE paging_test ( ... id int, ... mytext text, ... anothervalue text, ... somevalue text, ... PRIMARY KEY (id, mytext) ... );cqlsh:myks&gt; insert into paging_test (id, mytext, anothervalue, somevalue) values (1, 'foo', 'some', 'another');cqlsh:myks&gt; select * from paging_test; id | mytext | anothervalue | somevalue----+--------+--------------+----------- 1 | foo | some | another(1 rows)cqlsh:myks&gt; update paging_test using ttl 10 ... set somevalue='one', anothervalue='two' ... where id = 1 and mytext = 'foo';cqlsh:myks&gt; select * from paging_test; id | mytext | anothervalue | somevalue----+--------+--------------+----------- 1 | foo | two | one(1 rows)cqlsh:myks&gt; -- wait for it....cqlsh:myks&gt; select * from paging_test;(0 rows)</description>
      <version>2.0.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.UpdateStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
</bugrepository>