<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  
  
  <bug fixdate="2013-7-16 01:00:00" id="5573" opendate="2013-5-16 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Querying with an empty (impossible) range returns incorrect results</summary>
      <description>SELECT * FROM cf WHERE token(key) &gt; 2000 AND token(key) &lt;= 2000 LIMIT 1000 ALLOW FILTERING;This should return nothing, but instead appears to freak and return arbitrary token values.</description>
      <version>1.2.7,2.0beta2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.filter.ColumnSlice.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.QueryProcessor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-7-25 01:00:00" id="5697" opendate="2013-6-25 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh doesn&amp;#39;t allow semicolons in BATCH statements</summary>
      <description>The documentation for BATCH statements declares that semicolons are required between update operations. Currently including them results in an error 'expecting K_APPLY'. To match the design specifications, semi-colons should be allowed or optional.</description>
      <version>1.2.7,2.0beta1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-6-26 01:00:00" id="5700" opendate="2013-6-26 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>compact storage value restriction message confusing</summary>
      <description>i have a compact storage value column name (user) the same as another column family name (user) and was getting the errorRestricting the value of a compact CF (user) is not supportedwhich was very confusingchanged message toRestricting the value (user) of a compact CF is not supported(tackling the big problems)</description>
      <version>1.2.7</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
    </fixedFiles>
  </bug>
  
  
  
  <bug fixdate="2013-7-9 01:00:00" id="5735" opendate="2013-7-9 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add binary server status to the node information</summary>
      <description>nodetool info gives the gossip and thrift active status. Now, since there is a binary server it is nice to have the binary status too.</description>
      <version>1.2.7</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-7-14 01:00:00" id="5760" opendate="2013-7-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh DESCRIBE should properly describe CUSTOM secondary indexes</summary>
      <description>CASSANDRA-5484 and then CASSANDRA-5639 added CREATE CUSTOM INDEX support to CQL3, but cqlsh hasn't been updated to describe such indexes properly.</description>
      <version>1.2.7</version>
      <fixedVersion>Feature/2iIndex</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2013-7-15 01:00:00" id="5762" opendate="2013-7-15 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Lost row marker after TTL expires</summary>
      <description>I have the following tablecqlsh:loginproject&gt; DESCRIBE TABLE gameservers;CREATE TABLE gameservers ( address inet PRIMARY KEY, last_update timestamp, regions blob, server_status boolean) WITH bloom_filter_fp_chance=0.010000 AND caching='KEYS_ONLY' AND comment='' AND dclocal_read_repair_chance=0.000000 AND gc_grace_seconds=864000 AND read_repair_chance=0.100000 AND replicate_on_write='true' AND populate_io_cache_on_flush='false' AND compaction={'class': 'SizeTieredCompactionStrategy'} AND compression={'sstable_compression': 'SnappyCompressor'};after inserting a row and executing the following command:UPDATE gameservers USING TTL 10 SET server_status = true WHERE address = '192.168.0.100'after waiting for the ttl to expire, the row will lose its rowmarker making "select address from gameservers" returning 0 results although there are some.in cassandra-cli the table looks like this:&amp;#91;default@loginproject&amp;#93; list gameservers;Using default limit of 100Using default cell limit of 100-------------------RowKey: 192.168.0.100=&gt; (name=last_update, value=0000000000000017, timestamp=1373884433543000)=&gt; (name=regions, value=&lt;truncated&gt;, timestamp=1373883701652000)1 Row Returned.Elapsed time: 345 msec(s).&amp;#91;default@loginproject&amp;#93;</description>
      <version>1.2.7</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
  
  <bug fixdate="2013-7-19 01:00:00" id="5781" opendate="2013-7-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Providing multiple keys to sstable2json results in invalid json</summary>
      <description>if you pass multiple keys via the -k parameter to sstable for json the 2nd row will be appended to the end of the first without a comma. It would look like so:sstable2json foo-Data.db -k key1 -k key2 -k key3 -k key4{key1 : [[]...]key2: [[]...],key3 : [[]...],key4 : [[]...]}</description>
      <version>1.2.7</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>