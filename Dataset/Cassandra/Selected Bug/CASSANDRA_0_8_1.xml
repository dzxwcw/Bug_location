<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository name="CASSANDRA">
  
  
  
  
  <bug fixdate="2011-6-14 01:00:00" id="2473" opendate="2011-4-14 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL support for counters</summary>
      <description/>
      <version>0.8.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.system.test.cql.py</file>
      <file type="M">src.java.org.apache.cassandra.cql.UpdateStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.DeleteStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.CreateColumnFamilyStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">src.java.org.apache.cassandra.cql.BatchStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.AbstractModification.java</file>
      <file type="M">drivers.py.cql.marshal.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-6-21 01:00:00" id="2530" opendate="2011-4-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Additional AbstractType data type definitions to enrich CQL</summary>
      <description>Provide 5 additional Datatypes: ByteType, DateType, BooleanType, FloatType, DoubleType.</description>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.Term.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.CreateColumnFamilyStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cassandra.bat</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-5-21 01:00:00" id="2531" opendate="2011-4-21 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>There should be an easy way to see what DC and rack a node belongs to</summary>
      <description>It would be especially nice to see them in nodetool ring, but I would settle for having it listed in nodetool info.</description>
      <version>0.8.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-4-23 01:00:00" id="2545" opendate="2011-4-23 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL: cqlsh error running batch update commands</summary>
      <description>CQL Test Case//TEST CASE #1BEGIN BATCHUPDATE users SET gender = 'm', birth_year = '1981' WHERE KEY = 'user1';UPDATE users SET gender = 'm', birth_year = '1982' WHERE KEY = 'user2';UPDATE users SET gender = 'm', birth_year = '1983' WHERE KEY = 'user3';APPLY BATCH //TEST CASE #2BEGIN BATCH USING CONSISTENCY ZEROUPDATE users SET state = 'TX' WHERE KEY = 'user1';UPDATE users SET state = 'TX' WHERE KEY = 'user2';UPDATE users SET state = 'TX' WHERE KEY = 'user3';APPLY BATCH //ERRORBad Request: line 0:-1 mismatched input '&lt;EOF&gt;' expecting K_APPLYTest SetupCREATE COLUMNFAMILY users ( KEY varchar PRIMARY KEY, password varchar, gender varchar, session_token varchar, state varchar, birth_year bigint);INSERT INTO users (KEY, password, gender, state, birth_year) VALUES ('user1', 'ch@ngem3', 'f', 'CA', '1971');INSERT INTO users (KEY, password, gender, state, birth_year) VALUES ('user2', 'ch@ngem3', 'f', 'CA', '1972');INSERT INTO users (KEY, password, gender, state, birth_year) VALUES ('user3', 'ch@ngem3', 'f', 'CA', '1973');Documented SyntaxBEGIN BATCH &amp;#91;USING &lt;CONSISTENCY&gt;&amp;#93;UPDATE CF1 SET name1 = value1, name2 = value2 WHERE KEY = keyname1;UPDATE CF1 SET name3 = value3 WHERE KEY = keyname2;UPDATE CF2 SET name4 = value4, name5 = value5 WHERE KEY = keyname3;APPLY BATCH</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">drivers.py.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-5-29 01:00:00" id="2583" opendate="2011-4-29 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>optimize batches containing multiple updates to the same rows</summary>
      <description>Currently we turn batches into one RowMutation per statement. This is suboptimal if we have multiple statements operating on the same row. This could happen either with generated code, or deliberately to allow different options to different columns in the row, e.g. for TTLs (CASSANDRA-2476).</description>
      <version>0.8.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.UpdateStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.DeleteStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.BatchStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.AbstractModification.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-5-6 01:00:00" id="2616" opendate="2011-5-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add "DROP INDEX" command to CLI</summary>
      <description/>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.resources.org.apache.cassandra.cli.CliHelp.yaml</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-5-11 01:00:00" id="2637" opendate="2011-5-11 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>bloom filter true positives not counted unless key cache is enabled</summary>
      <description/>
      <version>0.7.6,0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableReader.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-5-19 01:00:00" id="2668" opendate="2011-5-19 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>don&amp;#39;t perform HH to client-mode nodes</summary>
      <description/>
      <version>0.7.7,0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.EndpointState.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-5-24 01:00:00" id="2697" opendate="2011-5-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>"insufficient space to compact even the two smallest files, aborting"</summary>
      <description>When I explicitly send compaction command "compact" with nodetool, Cassandra outputs error message above. This message is shown even when there is only one file and no need for compaction. I believe this is confusing for users, and recommend that some alternative message should be shown for such case.</description>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.CompactionManager.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-6-24 01:00:00" id="2702" opendate="2011-5-24 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Extend Row Cache Provider support</summary>
      <description/>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cache.CacheProviderTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.cache.SerializingCacheProvider.java</file>
      <file type="M">src.java.org.apache.cassandra.cache.SerializingCache.java</file>
      <file type="M">src.java.org.apache.cassandra.cache.IRowCacheProvider.java</file>
      <file type="M">src.java.org.apache.cassandra.cache.ConcurrentLinkedHashCacheProvider.java</file>
      <file type="M">src.java.org.apache.cassandra.cache.ConcurrentLinkedHashCache.java</file>
    </fixedFiles>
  </bug>
  
  <bug fixdate="2011-5-30 01:00:00" id="2721" opendate="2011-5-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool statusthrift exception while node starts up</summary>
      <description>We noticed when calling nodetool statusthrift, while a node is starting up, it throws an exception. I think the proper behavior should be just return false, instead of throwing an exception if RPC server hasn't started yet. That way this stack trace won't have to be thrown in nodetool:Exception in thread "main" java.lang.IllegalStateException: No configured RPC daemon</description>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-5-30 01:00:00" id="2722" opendate="2011-5-30 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool statusthrift</summary>
      <description>Provide the status of thrift server, if it's running or not.</description>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-5-31 01:00:00" id="2723" opendate="2011-5-31 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Rows that don&amp;#39;t exist get cached</summary>
      <description>We noticed that rows that don't exist were getting cached anyway. We end up storing an empty CF in cache.</description>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-9-1 01:00:00" id="2731" opendate="2011-6-1 00:00:00" resolution="Won&amp;#39;t Fix">
    <buginformation>
      <summary>Impelement in-house file caching.</summary>
      <description>Implement FileCache, CachedRandomAccessFile (to replace BufferedRandomAccessFile) and RadixTree (to play role of the backend cache storage) classes.FileCache class with be responsible for storing/retrieving data from Radix Tree and also flushing of the dirty pages to the disk, page management such as adding new pages, utilizing old/unused pages.CRAF Linux only features (via JNI):1). O_DIRECT for both read/write operations.2). AIO's lio_listio write operation batching.Provide possibility to migrate hot data directly from Memtable to CRAF cache to keep live-reads data always hot in memory. To minimise compaction effects CRAF should provide a way to by-pass a caching data if it does not already exists. Provide a way to make pointers in the cache which will be useful to minimize impact on performance when a single column is distributed among multiple SSTable files (except counter columns).Use jemalloc (http://www.canonware.com/jemalloc/) for cache memory management.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.index.SecondaryIndexManager.java</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-6-1 01:00:00" id="2733" opendate="2011-6-1 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool ring with EC2Snitch, NPE checking for the zone and dc</summary>
      <description>Existing EC2Snitch... compare is done via == instead of equals() while comparing the IP's... (endpoint == FBUtilities.getLocalAddress())It is ok to compare the Object Address as most of the code uses FBU.getLocalAddress() and it returns the same object everywhere... but it breaks nodetool ring.</description>
      <version>0.7.7,0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.locator.Ec2Snitch.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug fixdate="2011-6-6 01:00:00" id="2743" opendate="2011-6-6 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>add TABLE as a CQL alias for COLUMNFAMILY</summary>
      <description>This will make it easier on tools that support multiple databases like SQLAlchemy.</description>
      <version>0.8.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.system.test.cql.py</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  <bug fixdate="2011-6-10 01:00:00" id="2759" opendate="2011-6-10 00:00:00" resolution="Fixed">
    <buginformation>
      <summary>Scrub could lose increments and replicate that loss</summary>
      <description>If scrub cannot 'repair' a corrupted row, it will skip it. On node A, if the row contains some sub-count for A id, those will be lost forever since A is the source of truth on it's current id. We should thus renew node A id when that happens to avoid this (not unlike we do in cleanup).</description>
      <version>0.8.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  
  
  
</bugrepository>