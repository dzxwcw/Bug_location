<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="3865" opendate="2012-2-6 00:00:00" fixdate="2012-5-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra-cli returns &amp;#39;command not found&amp;#39; instead of syntax error</summary>
      <description>When creating a column family from the output of 'show schema' with an index, there is a trailing comma after "index_type: 0," The return from this is a 'command not found' This is misleading because the command is found, there is just a syntax error.'Command not found: `create column family $cfname ...`</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
    </fixedFiles>
  </bug>
  <bug id="4012" opendate="2012-3-7 00:00:00" fixdate="2012-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Load-from-flat-file data import tool</summary>
      <description>Would like to be able to import data from a comma-delimited or tab-delimited file, one "row" per line. (That is, "row" can be "logical row" as in http://www.datastax.com/dev/blog/schema-in-cassandra-1-1.)</description>
      <version>1.1.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4041" opendate="2012-3-13 00:00:00" fixdate="2012-6-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow updating column_alias types</summary>
      <description>CASSANDRA-3657 has added the ability to change comparators (including parts of a compositeType) when compatible. The code of CQL3 forbids it currently however so we should lift that limitation.</description>
      <version>1.1.2</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.AlterTableStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4108" opendate="2012-4-2 00:00:00" fixdate="2012-6-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add an option to cqlsh to authenticate to a keyspace by default</summary>
      <description>As the cassandra-cli does, it would be nice to have an option for cqlsh to authenticate to a keyspace on startup. That way you can write aliases for logging in or put it in the .cqlshrc file so you never have to do the 'use blah;' command redundantly every time.</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4193" opendate="2012-4-26 00:00:00" fixdate="2012-6-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cql delete does not delete</summary>
      <description>tested in 1.1 and trunk branch on a single node:cqlsh:test&gt; create table testcf_old ( username varchar , id int , name varchar , stuff varchar, primary key(username,id,name)) with compact storage;cqlsh:test&gt; insert into testcf_old ( username , id , name , stuff ) values ('abc', 2, 'rst', 'some other bunch of craps');cqlsh:test&gt; select * from testcf_old; username | id | name | stuff---------------+-------------------------- abc | 2 | rst | some other bunch of craps abc | 4 | xyz | a bunch of crapscqlsh:test&gt; delete from testcf_old where username = 'abc' and id =2;cqlsh:test&gt; select * from testcf_old; username | id | name | stuff---------------+-------------------------- abc | 2 | rst | some other bunch of craps abc | 4 | xyz | a bunch of crapssame also when not using compact:cqlsh:test&gt; create table testcf ( username varchar , id int , name varchar , stuff varchar, primary key(username,id));cqlsh:test&gt; select * from testcf; username | id | name | stuff------------------------------------+----------------- abc | 2 | some other bunch of craps | rst abc | 4 | xyz | a bunch of crapscqlsh:test&gt; delete from testcf where username = 'abc' and id =2;cqlsh:test&gt; select * from testcf; username | id | name | stuff------------------------------------+----------------- abc | 2 | some other bunch of craps | rst abc | 4 | xyz | a bunch of craps</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.DeleteStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4217" opendate="2012-5-3 00:00:00" fixdate="2012-5-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Easy access to column timestamps (and maybe ttl) during queries</summary>
      <description>It would be interesting to allow accessing the timestamp/ttl of a column though some syntax likeSELECT key, value, timestamp(value) FROM foo;and the same for ttl.I'll note that currently timestamp and ttl are returned in the resultset because it includes thrift Column object, but adding such syntax would make our future protocol potentially simpler as we wouldn't then have to care about timestamps explicitely (and more compact in general as we would only return timestamps when asked)</description>
      <version>1.1.2</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">src.java.org.apache.cassandra.cql3.ColumnIdentifier.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4248" opendate="2012-5-15 00:00:00" fixdate="2012-6-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>it&amp;#39;d be great to print the strategyOptions map in the KSMetatData.toString</summary>
      <description>summary says it all.. problem i had was trying to trace from the log to see what's the replication factors were used from the Migration log, but it didn't print anything. Almost though that means no replication was defined (which can't be true..)</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4275" opendate="2012-5-23 00:00:00" fixdate="2012-11-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Oracle Java 1.7 u4 does not allow Xss128k</summary>
      <description>Problem: This happens when you try to start it with default Xss setting of 128k=======The stack size specified is too small, Specify at least 160kError: Could not create the Java Virtual Machine.Error: A fatal exception has occurred. Program will exit.Solution=======Set -Xss to 256kProblem: This happens when you try to start it with Xss = 160k========ERROR &amp;#91;Thrift:14&amp;#93; 2012-05-22 14:42:40,479 AbstractCassandraDaemon.java (line 139) Fatal exception in thread Thread&amp;#91;Thrift:14,5,main&amp;#93;java.lang.StackOverflowErrorSolution=======Set -Xss to 256k</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4306" opendate="2012-6-5 00:00:00" fixdate="2012-6-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>enforce 1m min keycache for auto</summary>
      <description>when specifying 'auto' for key cache size make the minimum 1m.primarily so that KeyCacheTest passes</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4314" opendate="2012-6-6 00:00:00" fixdate="2012-6-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Index CF tombstones can cause OOM</summary>
      <description>My database (now at 1.0.10) is in a state in which it goes out of memory with hardly any activity at all. A key slice nothing more.The logs attached are this including verbose gc in stdout. I started up cassandra and waited a bit to ensure that it was unperturbed.Then (about 15:46) I ran this slice (using Pelops), which in this case should return NO data. My client times out and the database goes OOM. ConsistencyLevel cl = ConsistencyLevel.TWO;//TWO nodes in my cluster Selector s = new Selector(this.pool); List&lt;IndexExpression&gt; indexExpressions = new ArrayList&lt;IndexExpression&gt;(); IndexExpression e = new IndexExpression( ByteBuffer.wrap("encryptionSettingsID".getBytes(ASCII)), IndexOperator.EQ, ByteBuffer.wrap(encryptionSettingsID.getBytes(Utils.ASCII))); indexExpressions.add(e); IndexClause indexClause = new IndexClause(indexExpressions, ByteBuffer.wrap(EMPTY_BYTE_ARRAY), 1); SlicePredicate predicate = new SlicePredicate(); predicate.setColumn_names(Arrays.asList(new ByteBuffer[] { ByteBuffer.wrap(COL_PAN_ENC_BYTES) })); List&lt;KeySlice&gt; slices = s.getKeySlices(CF_TOKEN, indexClause, predicate, cl);Note that “encryptionSettingsID” is an indexed column. When this is executed there should be no columns with the supplied value.I suppose I may have some kind of blatant error in this query but it is not obvious to me. I’m relatively new to cassandra.My key space is defined as follows:KsDef(name:TB_UNIT, strategy_class:org.apache.cassandra.locator.SimpleStrategy, strategy_options:{replication_factor=3}, cf_defs:[CfDef(keyspace:TB_UNIT, name:token, column_type:Standard, comparator_type:BytesType, column_metadata:&amp;#91;ColumnDef(name:70 61 6E 45 6E 63, validation_class:BytesType), ColumnDef(name:63 72 65 61 74 65 54 73, validation_class:DateType), ColumnDef(name:63 72 65 61 74 65 44 61 74 65, validation_class:DateType, index_type:KEYS, index_name:TokenCreateDate), ColumnDef(name:65 6E 63 72 79 70 74 69 6F 6E 53 65 74 74 69 6E 67 73 49 44, validation_class:UTF8Type, index_type:KEYS, index_name:EncryptionSettingsID)&amp;#93;, caching:keys_only), CfDef(keyspace:TB_UNIT, name:pan_d721fd40fd9443aa81cc6f59c8e047c6, column_type:Standard, comparator_type:BytesType, caching:keys_only), CfDef(keyspace:TB_UNIT, name:counters, column_type:Standard, comparator_type:BytesType, column_metadata:&amp;#91;ColumnDef(name:75 73 65 43 6F 75 6E 74, validation_class:CounterColumnType)&amp;#93;, default_validation_class:CounterColumnType, caching:keys_only)])tpstats show pending tasks many minutes after time out:&amp;#91;root@r610-lb6 bin&amp;#93;# ../cassandra/bin/nodetool -h 127.0.0.1 tpstatsPool Name Active Pending Completed Blocked All time blockedReadStage 3 3 107 0 0RequestResponseStage 0 0 56 0 0MutationStage 0 0 6 0 0ReadRepairStage 0 0 0 0 0ReplicateOnWriteStage 0 0 0 0 0GossipStage 0 0 2231 0 0AntiEntropyStage 0 0 0 0 0MigrationStage 0 0 0 0 0MemtablePostFlusher 0 0 3 0 0StreamStage 0 0 0 0 0FlushWriter 0 0 3 0 0MiscStage 0 0 0 0 0InternalResponseStage 0 0 0 0 0HintedHandoff 0 0 9 0 0Message type DroppedRANGE_SLICE 0READ_REPAIR 0BINARY 0READ 0MUTATION 0REQUEST_RESPONSE 0cfstats:Keyspace: keyspace Read Count: 118 Read Latency: 0.14722033898305084 ms. Write Count: 0 Write Latency: NaN ms. Pending Tasks: 0 Column Family: token SSTable count: 7 Space used (live): 4745885584 Space used (total): 4745885584 Number of Keys (estimate): 18626048 Memtable Columns Count: 0 Memtable Data Size: 0 Memtable Switch Count: 0 Read Count: 118 Read Latency: 0.147 ms. Write Count: 0 Write Latency: NaN ms. Pending Tasks: 0 Bloom Filter False Postives: 0 Bloom Filter False Ratio: 0.00000 Bloom Filter Space Used: 55058352 Key cache: disabled Row cache: disabled Compacted row minimum size: 150 Compacted row maximum size: 258 Compacted row mean size: 201 Column Family: pan_2fef6478b62242dd94aecaa049b9d7bb SSTable count: 7 Space used (live): 1987147156 Space used (total): 1987147156 Number of Keys (estimate): 14955264 Memtable Columns Count: 0 Memtable Data Size: 0 Memtable Switch Count: 0 Read Count: 0 Read Latency: NaN ms. Write Count: 0 Write Latency: NaN ms. Pending Tasks: 0 Bloom Filter False Postives: 0 Bloom Filter False Ratio: 0.00000 Bloom Filter Space Used: 28056224 Key cache: disabled Row cache: disabled Compacted row minimum size: 104 Compacted row maximum size: 124 Compacted row mean size: 124 Column Family: counters SSTable count: 11 Space used (live): 3433469364 Space used (total): 3433469364 Number of Keys (estimate): 21475328 Memtable Columns Count: 0 Memtable Data Size: 0 Memtable Switch Count: 0 Read Count: 0 Read Latency: NaN ms. Write Count: 0 Write Latency: NaN ms. Pending Tasks: 0 Bloom Filter False Postives: 0 Bloom Filter False Ratio: 0.00000 Bloom Filter Space Used: 40271696 Key cache capacity: 4652 Key cache size: 4652 Key cache hit rate: NaN Row cache: disabled Compacted row minimum size: 125 Compacted row maximum size: 179 Compacted row mean size: 150</description>
      <version>1.0.11,1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4319" opendate="2012-6-7 00:00:00" fixdate="2012-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ex msg for cql3 order by constraints says primary filter can be an IN clause which is misleading</summary>
      <description>select * from visitor_audit where visitor_id in ('1_172892701', '1_316755431') order by audit_id desc limit 6;gives errorBad Request: Ordering is only supported is the first part of the PRIMARY KEY is restricted by an Equal or a INwhich seems to be what the query is doing. But it only supports Equal, fix error message.</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4328" opendate="2012-6-11 00:00:00" fixdate="2012-6-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL client timeout when inserting data after creating index</summary>
      <description>After creating index on table inserts fails.steps (from cqlsh -3)create table myapp (pidh text, cn text, tn text, s text, m text, ts bigint, PRIMARY KEY (pidh, ts));INSERT INTO myapp(pidh, cn, tn, s, m, ts) VALUES ('4274@localhost','Test.tests','main','text','bzzzzz',2231897614162493);create index idx_cn on myapp(cn);Next insert from cql client time outs without showing error.Each insert in systemlog gives ERROR &amp;#91;MutationStage:xx&amp;#93; ....from log file: INFO &amp;#91;MigrationStage:1&amp;#93; 2012-06-11 12:28:35,715 ColumnFamilyStore.java (line 633) Enqueuing flush of Memtable-schema_columnfamilies@1502301540(1259/1573 serialized/live bytes, 20 ops) INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:35,716 Memtable.java (line 266) Writing Memtable-schema_columnfamilies@1502301540(1259/1573 serialized/live bytes, 20 ops) INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:35,868 Memtable.java (line 307) Completed flushing /var/lib/cassandra/data/system/schema_columnfamilies/system-schema_columnfamilies-hd-143-Data.db (1312 bytes) for commitlog position ReplayPosition(segmentId=2232837134267994, position=8651) INFO &amp;#91;MigrationStage:1&amp;#93; 2012-06-11 12:28:35,869 ColumnFamilyStore.java (line 633) Enqueuing flush of Memtable-schema_columns@1756291746(280/350 serialized/live bytes, 5 ops) INFO &amp;#91;CompactionExecutor:26&amp;#93; 2012-06-11 12:28:35,869 CompactionTask.java (line 109) Compacting &amp;#91;SSTableReader(path=&amp;#39;/var/lib/cassandra/data/system/schema_columnfamilies/system-schema_columnfamilies-hd-141-Data.db&amp;#39;), SSTableReader(path=&amp;#39;/var/lib/cassandra/data/system/schema_columnfamilies/system-schema_columnfamilies-hd-142-Data.db&amp;#39;), SSTableReader(path=&amp;#39;/var/lib/cassandra/data/system/schema_columnfamilies/system-schema_columnfamilies-hd-140-Data.db&amp;#39;), SSTableReader(path=&amp;#39;/var/lib/cassandra/data/system/schema_columnfamilies/system-schema_columnfamilies-hd-143-Data.db&amp;#39;)&amp;#93; INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:35,869 Memtable.java (line 266) Writing Memtable-schema_columns@1756291746(280/350 serialized/live bytes, 5 ops) INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:36,104 Memtable.java (line 307) Completed flushing /var/lib/cassandra/data/system/schema_columns/system-schema_columns-hd-65-Data.db (325 bytes) for commitlog position ReplayPosition(segmentId=2232837134267994, position=8651) INFO &amp;#91;CompactionExecutor:26&amp;#93; 2012-06-11 12:28:36,130 CompactionTask.java (line 221) Compacted to &amp;#91;/var/lib/cassandra/data/system/schema_columnfamilies/system-schema_columnfamilies-hd-144-Data.db,&amp;#93;. 42,461 to 38,525 (~90% of original) bytes for 3 keys at 0.140767MB/s. Time: 261ms. INFO &amp;#91;MigrationStage:1&amp;#93; 2012-06-11 12:28:36,140 SecondaryIndexManager.java (line 208) Creating new index : ColumnDefinition{name=636e, validator=org.apache.cassandra.db.marshal.UTF8Type, index_type=KEYS, index_name='idx_cn', component_index=1} INFO &amp;#91;Creating index: myapp.idx_cn&amp;#93; 2012-06-11 12:28:36,141 ColumnFamilyStore.java (line 633) Enqueuing flush of Memtable-myapp@207814912(171/213 serialized/live bytes, 4 ops) INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:36,141 Memtable.java (line 266) Writing Memtable-myapp@207814912(171/213 serialized/live bytes, 4 ops) INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:36,255 Memtable.java (line 307) Completed flushing /var/lib/cassandra/data/Logging/myapp/Logging-myapp-hd-2-Data.db (170 bytes) for commitlog position ReplayPosition(segmentId=2232837134267994, position=8651) INFO &amp;#91;Creating index: myapp.idx_cn&amp;#93; 2012-06-11 12:28:36,256 SecondaryIndex.java (line 159) Submitting index build of myapp.idx_cn for data in SSTableReader(path='/var/lib/cassandra/data/Logging/myapp/Logging-myapp-hd-1-Data.db'), SSTableReader(path='/var/lib/cassandra/data/Logging/myapp/Logging-myapp-hd-2-Data.db') INFO &amp;#91;Creating index: myapp.idx_cn&amp;#93; 2012-06-11 12:28:36,258 ColumnFamilyStore.java (line 633) Enqueuing flush of Memtable-IndexInfo@409882274(39/48 serialized/live bytes, 1 ops) INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:36,258 Memtable.java (line 266) Writing Memtable-IndexInfo@409882274(39/48 serialized/live bytes, 1 ops) INFO &amp;#91;FlushWriter:4&amp;#93; 2012-06-11 12:28:36,390 Memtable.java (line 307) Completed flushing /var/lib/cassandra/data/system/IndexInfo/system-IndexInfo-hd-14-Data.db (84 bytes) for commitlog position ReplayPosition(segmentId=2232837134267994, position=8744) INFO &amp;#91;Creating index: myapp.idx_cn&amp;#93; 2012-06-11 12:28:36,390 SecondaryIndex.java (line 200) Index build of myapp.idx_cn completeERROR &amp;#91;MutationStage:37&amp;#93; 2012-06-11 12:28:39,657 AbstractCassandraDaemon.java (line 134) Exception in thread Thread&amp;#91;MutationStage:37,5,main&amp;#93;java.lang.RuntimeException: java.lang.IllegalArgumentException at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1254) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)Caused by: java.lang.IllegalArgumentException at java.nio.Buffer.limit(Buffer.java:267) at org.apache.cassandra.db.marshal.AbstractCompositeType.getBytes(AbstractCompositeType.java:51) at org.apache.cassandra.db.marshal.AbstractCompositeType.getWithShortLength(AbstractCompositeType.java:60) at org.apache.cassandra.db.marshal.AbstractCompositeType.compare(AbstractCompositeType.java:76) at org.apache.cassandra.db.marshal.AbstractCompositeType.compare(AbstractCompositeType.java:31) at java.util.TreeMap.getEntryUsingComparator(TreeMap.java:369) at java.util.TreeMap.getEntry(TreeMap.java:340) at java.util.TreeMap.containsKey(TreeMap.java:227) at java.util.TreeMap$KeySet.contains(TreeMap.java:1045) at org.apache.cassandra.db.Table.apply(Table.java:415) at org.apache.cassandra.db.Table.apply(Table.java:380) at org.apache.cassandra.db.RowMutation.apply(RowMutation.java:294) at org.apache.cassandra.service.StorageProxy$6.runMayThrow(StorageProxy.java:453) at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1250) ... 3 moreERROR &amp;#91;MutationStage:39&amp;#93; 2012-06-11 12:29:39,876 AbstractCassandraDaemon.java (line 134) Exception in thread Thread&amp;#91;MutationStage:39,5,main&amp;#93;java.lang.RuntimeException: java.lang.IllegalArgumentException at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1254) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)Caused by: java.lang.IllegalArgumentException at java.nio.Buffer.limit(Buffer.java:267) at org.apache.cassandra.db.marshal.AbstractCompositeType.getBytes(AbstractCompositeType.java:51) at org.apache.cassandra.db.marshal.AbstractCompositeType.getWithShortLength(AbstractCompositeType.java:60) at org.apache.cassandra.db.marshal.AbstractCompositeType.compare(AbstractCompositeType.java:76) at org.apache.cassandra.db.marshal.AbstractCompositeType.compare(AbstractCompositeType.java:31) at java.util.TreeMap.getEntryUsingComparator(TreeMap.java:369) at java.util.TreeMap.getEntry(TreeMap.java:340) at java.util.TreeMap.containsKey(TreeMap.java:227) at java.util.TreeMap$KeySet.contains(TreeMap.java:1045) at org.apache.cassandra.db.Table.apply(Table.java:415) at org.apache.cassandra.db.Table.apply(Table.java:380) at org.apache.cassandra.db.RowMutation.apply(RowMutation.java:294) at org.apache.cassandra.service.StorageProxy$6.runMayThrow(StorageProxy.java:453) at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1250) ... 3 more</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateIndexStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4331" opendate="2012-6-12 00:00:00" fixdate="2012-6-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>sstable2json error</summary>
      <description>/apache-cassandra-1.1.1/bin&gt; ./sstable2json /home/cassandra/data/pimda/CF_bookmark/pimda-CF_bookmark-hd-48-Data.db &gt; test.jsonERROR 22:27:14,215 Error in ThreadPoolExecutorjava.lang.ClassCastException: java.math.BigInteger cannot be cast to java.nio.ByteBuffer at org.apache.cassandra.db.marshal.UTF8Type.compare(UTF8Type.java:27) at org.apache.cassandra.dht.LocalToken.compareTo(LocalToken.java:45) at org.apache.cassandra.db.DecoratedKey.compareTo(DecoratedKey.java:89) at org.apache.cassandra.db.DecoratedKey.compareTo(DecoratedKey.java:38) at java.util.TreeMap.getEntry(TreeMap.java:328) at java.util.TreeMap.containsKey(TreeMap.java:209) at java.util.TreeSet.contains(TreeSet.java:217) at org.apache.cassandra.io.sstable.SSTableReader.load(SSTableReader.java:396) at org.apache.cassandra.io.sstable.SSTableReader.open(SSTableReader.java:187) at org.apache.cassandra.io.sstable.SSTableReader$1.run(SSTableReader.java:225) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)ERROR 22:27:14,219 Error in ThreadPoolExecutorjava.lang.ClassCastException: java.math.BigInteger cannot be cast to java.nio.ByteBuffer at org.apache.cassandra.db.marshal.UTF8Type.compare(UTF8Type.java:27) at org.apache.cassandra.dht.LocalToken.compareTo(LocalToken.java:45) at org.apache.cassandra.db.DecoratedKey.compareTo(DecoratedKey.java:89) at org.apache.cassandra.db.DecoratedKey.compareTo(DecoratedKey.java:38)</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.RowCacheTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.cache.AutoSavingCache.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4341" opendate="2012-6-14 00:00:00" fixdate="2012-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Small SSTable Segments Can Hurt Leveling Process</summary>
      <description>This concerns:static int MAX_COMPACTING_L0 = 32;Repair can create very small SSTable segments. We should consider moving to a threshold that takes into account the size of the files brought into compaction rather than the number of files for this and similar situations. Bringing the small files from L0 to L1 magnifies the issue.If there are too many very small files in L0 perhaps even an intermediate compaction would even reduce the magnifying effect of a L0 to L1 compaction.</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.io.util.SequentialWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.io.compress.CompressedSequentialWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledManifest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledCompactionTask.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="4343" opendate="2012-6-14 00:00:00" fixdate="2012-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>fix sstable blacklisting for LCS</summary>
      <description></description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledManifest.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4349" opendate="2012-6-16 00:00:00" fixdate="2012-6-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>PFS should give a friendlier error message when a node has not been configured</summary>
      <description>see CASSANDRA-4345</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.locator.PropertyFileSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractNetworkTopologySnitch.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4370" opendate="2012-6-25 00:00:00" fixdate="2012-6-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>hsha server may stop responding and will not close selectors</summary>
      <description>Cassandra launches several threads to listen on selectors. There can be CancelledKeyException and cassandra will log "Unexpected exception". In that case there two problems:1) listener thread will be closed and cassandra will stop after all listener threads will stop.2) selector will be not closed</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.CustomTHsHaServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="4372" opendate="2012-6-25 00:00:00" fixdate="2012-6-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL3 Range Query contains unwanted results with composite columns</summary>
      <description>Here is a CQL3 range query sample where I get wrong results (tested using cqlsh --cql3) from my perspective:CREATE KEYSPACE testing WITH strategy_class = 'SimpleStrategy' AND strategy_options:replication_factor = 1;USE testing;CREATE TABLE bug_test (a int, b int, c int, d int, e int, f text, PRIMARY KEY (a, b, c, d, e) );INSERT INTO bug_test (a, b, c, d, e, f) VALUES (1, 1, 1, 1, 2, '2');INSERT INTO bug_test (a, b, c, d, e, f) VALUES (1, 1, 1, 1, 1, '1');INSERT INTO bug_test (a, b, c, d, e, f) VALUES (1, 1, 1, 2, 1, '1');INSERT INTO bug_test (a, b, c, d, e, f) VALUES (1, 1, 1, 1, 3, '3');INSERT INTO bug_test (a, b, c, d, e, f) VALUES (1, 1, 1, 1, 5, '5');----------Normal select everything query:SELECT * FROM bug_test;Results: a | b | c | d | e | f------+-- 1 | 1 | 1 | 1 | 1 | 1 1 | 1 | 1 | 1 | 2 | 2 1 | 1 | 1 | 1 | 3 | 3 1 | 1 | 1 | 1 | 5 | 5 1 | 1 | 1 | 2 | 1 | 1Everything fine so far.----------Select with greater equal comparison for last column of composite key:SELECT a, b, c, d, e, f FROM bug_test WHERE a = 1 AND b = 1 AND c = 1 AND d = 1 AND e &gt;= 2;Results: a | b | c | d | e | f------+-- 1 | 1 | 1 | 1 | 2 | 2 1 | 1 | 1 | 1 | 3 | 3 1 | 1 | 1 | 1 | 5 | 5 1 | 1 | 1 | 2 | 1 | 1Bug:Why was the last row returned? It shouldn't be there, right?----------Select with greater comparison for last column of composite key:SELECT a, b, c, d, e, f FROM bug_test WHERE a = 1 AND b = 1 AND c = 1 AND d = 1 AND e &gt; 2;Results: a | b | c | d | e | f------+-- 1 | 1 | 1 | 1 | 3 | 3 1 | 1 | 1 | 1 | 5 | 5 1 | 1 | 1 | 2 | 1 | 1Bug:Why was the last row returned? It shouldn't be there, right?The same issue is also present with between ranges (e &gt;= 1 AND e &lt;= 2)...</description>
      <version>1.1.2</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4379" opendate="2012-6-26 00:00:00" fixdate="2012-6-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cleanup optimization can delete data but not corresponding index entries</summary>
      <description>introduced by CASSANDRA-4079</description>
      <version>1.1.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
