<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="13974" opendate="2017-10-24 00:00:00" fixdate="2017-11-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bad prefix matching when figuring out data directory for an sstable</summary>
      <description>We do a "startsWith" check when getting data directory for an sstable, we should match including File.separator</description>
      <version>3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.io.util.FileUtilsTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.DirectoriesTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.FileUtils.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Directories.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14721" opendate="2018-9-12 00:00:00" fixdate="2018-12-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>sstabledump displays incorrect value for "position" key</summary>
      <description>When partitions with multiple rows are displayed using sstabledump, the "position" value the first row of each partition is incorrect.For example:sstabledump mc-1-big-Data.db[ { "partition" : { "key" : [ "1", "24" ], "position" : 0 }, "rows" : [ { "type" : "row", "position" : 66, "clustering" : [ "2013-12-10 00:00:00.000Z" ], "liveness_info" : { "tstamp" : "2018-09-12T05:01:09.290086Z" }, "cells" : [ { "name" : "centigrade", "value" : 8 }, { "name" : "chanceofrain", "value" : 0.1 }, { "name" : "feelslike", "value" : 8 }, { "name" : "humidity", "value" : 0.76 }, { "name" : "wind", "value" : 10.0 } ] }, { "type" : "row", "position" : 66, "clustering" : [ "2013-12-11 00:00:00.000Z" ], "liveness_info" : { "tstamp" : "2018-09-12T05:01:09.295369Z" }, "cells" : [ { "name" : "centigrade", "value" : 4 }, { "name" : "chanceofrain", "value" : 0.3 }, { "name" : "feelslike", "value" : 4 }, { "name" : "humidity", "value" : 0.9 }, { "name" : "wind", "value" : 12.0 } ] }, { "type" : "row", "position" : 105, "clustering" : [ "2013-12-12 00:00:00.000Z" ], "liveness_info" : { "tstamp" : "2018-09-12T05:01:09.300841Z" }, "cells" : [ { "name" : "centigrade", "value" : 3 }, { "name" : "chanceofrain", "value" : 0.2 }, { "name" : "feelslike", "value" : 3 }, { "name" : "humidity", "value" : 0.68 }, { "name" : "wind", "value" : 6.0 } ] } ] }] The expected output is:[ { "partition" : { "key" : [ "1", "24" ], "position" : 0 }, "rows" : [ { "type" : "row", "position" : 28, "clustering" : [ "2013-12-10 00:00:00.000Z" ], "liveness_info" : { "tstamp" : "2018-09-12T05:01:09.290086Z" }, "cells" : [ { "name" : "centigrade", "value" : 8 }, { "name" : "chanceofrain", "value" : 0.1 }, { "name" : "feelslike", "value" : 8 }, { "name" : "humidity", "value" : 0.76 }, { "name" : "wind", "value" : 10.0 } ] }, { "type" : "row", "position" : 66, "clustering" : [ "2013-12-11 00:00:00.000Z" ], "liveness_info" : { "tstamp" : "2018-09-12T05:01:09.295369Z" }, "cells" : [ { "name" : "centigrade", "value" : 4 }, { "name" : "chanceofrain", "value" : 0.3 }, { "name" : "feelslike", "value" : 4 }, { "name" : "humidity", "value" : 0.9 }, { "name" : "wind", "value" : 12.0 } ] }, { "type" : "row", "position" : 105, "clustering" : [ "2013-12-12 00:00:00.000Z" ], "liveness_info" : { "tstamp" : "2018-09-12T05:01:09.300841Z" }, "cells" : [ { "name" : "centigrade", "value" : 3 }, { "name" : "chanceofrain", "value" : 0.2 }, { "name" : "feelslike", "value" : 3 }, { "name" : "humidity", "value" : 0.68 }, { "name" : "wind", "value" : 6.0 } ] } ] }]</description>
      <version>3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.JsonTransformer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15265" opendate="2019-8-7 00:00:00" fixdate="2019-10-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Index summary redistribution can start even when compactions are paused</summary>
      <description>When we pause autocompaction for upgradesstables/scrub/cleanup etc we pause all compaction strategies to make sure we can grab all sstables, index summary redistribution does not pause and this can cause us to fail the operation.</description>
      <version>3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Local/Compaction</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.io.sstable.IndexSummaryManagerTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.compaction.AntiCompactionTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.IndexSummaryRedistribution.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.IndexSummaryManager.java</file>
      <file type="M">src.java.org.apache.cassandra.index.SecondaryIndexBuilder.java</file>
      <file type="M">src.java.org.apache.cassandra.db.view.ViewBuilder.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Verifier.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionTask.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionInfo.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.cache.AutoSavingCache.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15347" opendate="2019-10-8 00:00:00" fixdate="2019-11-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add client testing capabilities to in-jvm tests</summary>
      <description>Allow testing native transport code path using in-jvm tests.</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.test.ResourceLeakTest.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.test.DistributedTestBase.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.RowUtil.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Listen.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.InstanceConfig.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.InstanceClassLoader.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Instance.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.AbstractCluster.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.api.IListen.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.api.IInstance.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.api.Feature.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.Server.java</file>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftServer.java</file>
      <file type="M">src.java.org.apache.cassandra.service.CassandraDaemon.java</file>
    </fixedFiles>
  </bug>
  <bug id="15365" opendate="2019-10-18 00:00:00" fixdate="2019-10-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add primary key liveness info when skipping illegal cells</summary>
      <description>In CASSANDRA-15086/CASSANDRA-15178 we started skipping the illegal legacy cells, problem is that if the row only contains illegal cells, we return a totally empty row which breaks stats collection: https://github.com/apache/cassandra/blob/93815db9853cb592edf13d82e91dc2e9d172f01f/src/java/org/apache/cassandra/db/rows/Rows.java#L70If the row only has these invalid cells, we should add a primary key liveness info to it to match the 2.1 behaviour.</description>
      <version>3.0.20,3.11.6</version>
      <fixedVersion>Local/SSTable</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.io.sstable.LegacySSTableTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.LegacyLayout.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15371" opendate="2019-10-22 00:00:00" fixdate="2019-10-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect messaging service version breaks in-JVM upgrade tests on trunk</summary>
      <description>The in-JVM upgrade tests on trunk currently fail because the messaging version for internode messaging is selected as MessagingService.current_version, a regression from the implementation in CASSANDRA-15078.</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Instance.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15385" opendate="2019-10-30 00:00:00" fixdate="2019-11-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ensure that tracing doesn&amp;#39;t break connections in 3.x/4.0 mixed mode by default</summary>
      <description></description>
      <version>3.0.20,3.11.6</version>
      <fixedVersion>Observability/Tracing</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tracing.TraceKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.repair.SystemDistributedKeyspace.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15398" opendate="2019-11-5 00:00:00" fixdate="2019-12-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix system_traces creation timestamp; optimise system keyspace upgrades</summary>
      <description>We have introduced changes to system_traces tables in 3.0 (removal of default_time_to_live, lowering of bloom_filter_fp_chance). We did not, however, bump the timestamp with which we add the tables to schema, still defaulting to 0. As a result, for clusters that upgraded from 2.1/2.2, on bounce we would always detect a mismatch between actual and desired table definitions, always try to reconcile it by issuing migration tasks, but have them never override the existing definitions in place.Additionally, prior to 2.0.2 (CASSANDRA-6016) we’d use a ‘real’ timestamp, so for clusters that started on even earlier versions of C* (say, 1.2), a bump to the timestamp by 1 would be insufficient, and a larger generation is necessary (I picked Jan 1 2020 as cut-off date).The patch also optimises the process of upgrading replicated system tables. Instead of issuing a migration task for every table that changed for every node, we batch all changes into a single schema migration task.</description>
      <version>3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Cluster/Schema</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tracing.TraceKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.SchemaKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.repair.SystemDistributedKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.auth.AuthKeyspace.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15400" opendate="2019-11-6 00:00:00" fixdate="2019-11-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra 3.0.18 went OOM several hours after joining a cluster</summary>
      <description>We have been moving from Cassandra 2.1.18 to Cassandra 3.0.18 and have been facing an OOM two times with 3.0.18 on newly added nodes joining an existing cluster after several hours being successfully bootstrapped.Running in AWS: m5.2xlarge, EBS SSD (gp2) Xms/Xmx12G, Xmn3G, CMS GC, OpenJDK8u222 4 compaction threads, throttling set to 32 MB/sWhat we see is a steady increase in the OLD gen over many hours. The node started to join / auto-bootstrap the cluster on Oct 30 ~ 12:00 It basically finished joining the cluster (UJ =&gt; UN) ~ 19hrs later on Oct 31 ~ 07:00 also starting to be a member of serving client read requestsMemory-wise (on-heap) it didn't look that bad at that time, but old gen usage constantly increased.We see a correlation in increased number of SSTables and pending compactions.Until we reached the OOM somewhere in Nov 1 in the night. After a Cassandra startup (metric gap in the chart above), number of SSTables + pending compactions is still high, but without facing memory troubles since then.This correlation is confirmed by the auto-generated heap dump with e.g. ~ 5K BigTableReader instances with ~ 8.7GByte retained heap in total.Having a closer look on a single object instance, seems like each instance is ~ 2MByte in size.With 2 pre-allocated byte buffers (highlighted in the screen above) at 1 MByte eachWe have been running with 2.1.18 for &gt; 3 years and I can't remember dealing with such OOM in the context of extending a cluster.While the MAT screens above are from our production cluster, we partly can reproduce this behavior in our loadtest environment (although not going full OOM there), thus I might be able to share a hprof from this non-prod environment if needed.Thanks a lot.</description>
      <version>3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Local/SSTable</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.io.sstable.SSTableMetadataTest.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.ByteBufferUtil.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.MetadataCollector.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Slice.java</file>
      <file type="M">src.java.org.apache.cassandra.db.RangeTombstone.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ClusteringPrefix.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Clustering.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15405" opendate="2019-11-7 00:00:00" fixdate="2019-11-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Mixed mode reads on compact storage tables can return incomplete results</summary>
      <description>In mixed mode (2.1/3.0), when coordinating a read on a 2.1 node, reading data from 3.0 nodes, we incorrectly trim the result (if it has tombstones) when preparing it for the 2.1 node, this is then interpreted by the 2.1 node as the pager has been exhausted.</description>
      <version>3.0.20,3.11.6</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.upgrade.UpgradeTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.LegacyLayout.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15408" opendate="2019-11-8 00:00:00" fixdate="2019-11-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra throws SyntaxException for obsolete keywords that Thrift API permits</summary>
      <description>In this refactor of CFPropDefs to TableAttributes for CASSANDRA-9712, three obsolete keywords were removed: obsoleteKeywords.add("index_interval"); obsoleteKeywords.add("replicate_on_write"); obsoleteKeywords.add("populate_io_cache_on_flush"); The Thrift API continues to reference these keywords as deprecated, so it's not clear that they are actually unsupported.Could we either add them back as obsoleteKeywords, or add a change log that statements with these properties will fail (There is already a changelog about "index_interval" but not the other two)? I understand that the Thrift API is totally deprecated so I don't feel strongly about cleaning it up.</description>
      <version>3.0.20,3.11.6</version>
      <fixedVersion>Documentation/NEWS.txt</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">NEWS.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15435" opendate="2019-11-21 00:00:00" fixdate="2019-12-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SELECT JSON does not return the correct value for empty blobs</summary>
      <description>In an attempt to fix the side effect of a problem CASSANDRA-13868 was committed in 2.2.11, 3.0.15, 3.11.1 and trunk.This patch introduced an issue on how empty values were rendered by SELECT JSON queries.Instead of returning the correct value for the type a null value was now returned.A user detected that problem for text column and opened CASSANDRA-14245 to request a fix for that problem. Unfortunately, I misunderstood the problem and the fix did not solve the real problem. It only made the code return 'an empty string instead of null values.The proper fix is to rollback the changes made for CASSANDRA-13868 and CASSANDRA-14245.Some unit tests also need to be added to test the behavior.</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>CQL/Interpreter</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.JsonTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.selection.Selection.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15441" opendate="2019-12-2 00:00:00" fixdate="2019-12-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bump generations and document changes to system_distributed and system_traces in 3.0, 3.11</summary>
      <description>We should document all the changes to distributed system keyspaces and assign unique generations to them. In 3.0 and 3.11 this is just a documentation issue.</description>
      <version>3.0.20,3.11.6</version>
      <fixedVersion>Cluster/Schema</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tracing.TraceKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.repair.SystemDistributedKeyspace.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15460" opendate="2019-12-19 00:00:00" fixdate="2019-1-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix missing call to enable RPC after native transport is started in in-jvm dtests</summary>
      <description>When starting the native transport, the original patch missed the step of calling StorageService.instance.setRpcReady(true);. This appears to only be required for counter columns, but without it you can't update a counter value.We should add this call after starting up the native transport, and set it to false during the shutdown sequence to mimic the production code.</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.test.NativeProtocolTest.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Instance.java</file>
    </fixedFiles>
  </bug>
  <bug id="15489" opendate="2020-1-7 00:00:00" fixdate="2020-1-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow dtest jar directory to be configurable</summary>
      <description>In some circumstances, we may want to use a non-hard-coded directory as the source for dtest jars. We should allow for a system property to change the default `build` directory.</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Versions.java</file>
    </fixedFiles>
  </bug>
  <bug id="15497" opendate="2020-1-10 00:00:00" fixdate="2020-2-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Implement node bootstrap in in-JVM tests</summary>
      <description>Currently, we do not have an ability to add nodes to the running in-jvm cluster, either by bootstrap or replacement process. We need to add an ability to add nodes in inactive state, start them up, and bootstrap to test streaming, range movements, and operations that occur during these processes.</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha4,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.test.NetworkTopologyTest.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.test.DistributedTestBase.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.NetworkTopology.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.InstanceConfig.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.DistributedTestSnitch.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.AbstractCluster.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.api.IInstanceConfig.java</file>
      <file type="M">src.java.org.apache.cassandra.service.GCInspector.java</file>
    </fixedFiles>
  </bug>
  <bug id="15505" opendate="2020-1-15 00:00:00" fixdate="2020-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add message interceptors to in-jvm dtests</summary>
      <description>Currently we only have means to filter messages in in-jvm tests. We need a facility to intercept and modify the messages between nodes for testing purposes.</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha4,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.MessageFilters.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Instance.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.IInvokableInstance.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.AbstractCluster.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.api.IMessageFilters.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.api.IMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="15506" opendate="2020-1-15 00:00:00" fixdate="2020-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Run in-jvm upgrade dtests in circleci</summary>
      <description>We should run the in-jvm upgrade dtests in circleci</description>
      <version>3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>CI,Test/dtest/java</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.test.TestLocator.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
      <file type="M">.circleci.config.yml.LOWRES</file>
      <file type="M">.circleci.config.yml.HIGHRES</file>
      <file type="M">.circleci.config.yml</file>
      <file type="M">.circleci.config-2.1.yml</file>
    </fixedFiles>
  </bug>
  <bug id="15508" opendate="2020-1-16 00:00:00" fixdate="2020-1-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Failing jvm dtest: FailingRepairTest.testFailingMessage</summary>
      <description>It seems we can't run parameterized unit tests with ant testsome:$ ant testsome -Dtest.name=org.apache.cassandra.distributed.test.FailingRepairTest -Dtest.methods=testFailingMessage....[junit-timeout] Testcase: initializationError(org.junit.runner.manipulation.Filter): Caused an ERROR[junit-timeout] No tests found matching Method testFailingMessage(org.apache.cassandra.distributed.test.FailingRepairTest) from org.junit.internal.requests.ClassRequest@4d95d2a2[junit-timeout] java.lang.Exception: No tests found matching Method testFailingMessage(org.apache.cassandra.distributed.test.FailingRepairTest) from org.junit.internal.requests.ClassRequest@4d95d2a2[junit-timeout] at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Test/unit</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">.circleci.config.yml.LOWRES</file>
      <file type="M">.circleci.config.yml.HIGHRES</file>
      <file type="M">.circleci.config.yml</file>
      <file type="M">.circleci.config-2.1.yml.high.res.patch</file>
      <file type="M">.circleci.config-2.1.yml</file>
    </fixedFiles>
  </bug>
  <bug id="15509" opendate="2020-1-16 00:00:00" fixdate="2020-1-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In-jvm upgrade dtest version parsing does not support 4.0 alpha/beta/rc builds</summary>
      <description>for example:https://circleci.com/gh/krummas/cassandra/2686</description>
      <version>2.2.16,3.0.20,3.11.6,4.0-alpha3,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Versions.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
