<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="10828" opendate="2015-12-8 00:00:00" fixdate="2015-5-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow usage of multiplier in the start value of cassandra-stress population sequence</summary>
      <description>Sometimes it would be useful to also use the multipliers M/B/K in the start value of a population sequence, such as in the below example:cassandra-stress write n=100 -pop seq=1M..10M</description>
      <version>2.1.15,2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.settings.SettingsPopulation.java</file>
    </fixedFiles>
  </bug>
  <bug id="11152" opendate="2016-2-10 00:00:00" fixdate="2016-6-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>SOURCE command in CQLSH 3.2 requires that "use keyspace" is in the cql file that you are sourcing</summary>
      <description>a difference in behaviour between SOURCE command in CQLSH 3.1 and 3.2. In CQLSH 3.1 SOURCE will NOT require "use keyspace" in the cql file that you execute: the "keyspace" directive in the qlshrc file will work and the cql file will be executed.In CQLSH 3.2.1, SOURCE command requires that "use keyspace" is in the cql file that you are sourcing, otherwise it throws this error:"No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename". The "keyspace" directive in cqlshrc is overridden by source command.steps to reproduce:create a file called select.cql in your home directory:echo "CONSISTENCY ONE;" &gt; select.cqlecho "select * from tab;" &gt;&gt; select.cqlin cqlsh:create KEYSPACE kspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};create TABLE tab ( id int primary key);insert into tab (id) VALUES ( 1);Add this to cqlsgrc:[authentication]keyspace = kspaceThen exit cqlsh and rerun cqlsh using the cqlshrc just modified.Note that you are in keyspace "kspace".execute:source 'select.cql' this will have different behaviour in CQLSH 3.2 and 3.1</description>
      <version>2.1.15,2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="11309" opendate="2016-3-6 00:00:00" fixdate="2016-5-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Generic Java UDF types broken for RETURNS NULL ON NULL INPUT</summary>
      <description>The Java source generated for Java UDFs as introduced by CASSANDRA-10819 is broken for RETURNS NULL ON NULL INPUT (not for CALLED ON NULL INPUT). This means that the generic types are lost for RETURNS NULL ON NULL INPUT but work as expected for CALLED ON NULL INPUT.</description>
      <version>3.7</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.UFTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.functions.UDHelper.java</file>
    </fixedFiles>
  </bug>
  <bug id="11587" opendate="2016-4-16 00:00:00" fixdate="2016-5-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cfstats estimate number of keys should return 0 for empty table</summary>
      <description>If sstable count is 0, the "estimate number of keys" in cfstats shows -1. SSTable count: 0Number of keys (estimate): -1The initial value of keyCount in SSTableReader is -1. When there is no sstable, nor entry in memtable, the keyCount isn't increased. Cfstats should have some boundary check and return 0 for this case.</description>
      <version>2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.nodetool.TableStats.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11661" opendate="2016-4-26 00:00:00" fixdate="2016-5-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra 2.0 and later require Java 7u25 or later - jdk 101</summary>
      <description>We have been running the cassandr server version 2.1.5. Friday, we applied the latest java patch, Java(TM) SE Runtime Environment (build 1.7.0_101-b14). Cassandra cannot start with this patch. The cassandra log states: Cassandra 2.0 and later require Java 7u25 or later.</description>
      <version>2.1.15,2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/Testing</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug id="11664" opendate="2016-4-26 00:00:00" fixdate="2016-6-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tab completion in cqlsh doesn&amp;#39;t work for capitalized letters</summary>
      <description>Tab completion in cqlsh doesn't work for capitalized letters, either in keyspace names or table names. Typing quotes and a corresponding capital letter should complete the table/keyspace name and the closing quote.cqlsh&gt; create keyspace "Test" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};cqlsh&gt; use "Tescqlsh&gt; use tescqlsh&gt; use Test;InvalidRequest: code=2200 [Invalid query] message="Keyspace 'test' does not exist"cqlsh&gt; use "Test";cqlsh:Test&gt; drop keyspace "Test"cqlsh:Test&gt; create table "TestTable" (a text primary key, b text);cqlsh:Test&gt; select * from "TestTable"; a | b---+---(0 rows)cqlsh:Test&gt; select * from "Test</description>
      <version>2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11708" opendate="2016-5-4 00:00:00" fixdate="2016-5-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>sstableloader not work with ssl options</summary>
      <description>My cassandra server start with client_encryption_options.client_encryption_options: enabled: true keystore: /path/to/keystore.node0 keystore_password: cassandra require_client_auth: true truststore: /path/to/truststore.node0 truststore_password: cassandrawhen I use sstableloader with -ts/-tspw/-ks/-kspw, I getAll host(s) tried for query failed (tried: localhost/127.0.0.1:9042 (com.datastax.driver.core.TransportException: [localhost/127.0.0.1:9042] Channel has been closed))com.datastax.driver.core.exceptions.NoHostAvailableException: All host(s) tried for query failed (tried: localhost/127.0.0.1:9042 (com.datastax.driver.core.TransportException: [localhost/127.0.0.1:9042] Channel has been closed))after looked at the code, I found only one way to active ssl is use -f with a configuration yaml file which has client_encryption_options: enabled: trueso I think it's a bug, better to active ssl when I set -ts and -tspw.</description>
      <version>2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.BulkLoader.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11736" opendate="2016-5-9 00:00:00" fixdate="2016-5-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>LegacySSTableTest::testStreamLegacyCqlTables fails</summary>
      <description>example Error Messageorg.apache.cassandra.streaming.StreamException: Stream failedStacktracejava.util.concurrent.ExecutionException: org.apache.cassandra.streaming.StreamException: Stream failed at com.google.common.util.concurrent.AbstractFuture$Sync.getValue(AbstractFuture.java:299) at com.google.common.util.concurrent.AbstractFuture$Sync.get(AbstractFuture.java:286) at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:116) at org.apache.cassandra.io.sstable.LegacySSTableTest.streamLegacyTable(LegacySSTableTest.java:175) at org.apache.cassandra.io.sstable.LegacySSTableTest.streamLegacyTables(LegacySSTableTest.java:155) at org.apache.cassandra.io.sstable.LegacySSTableTest.testStreamLegacyCqlTables(LegacySSTableTest.java:145)Caused by: org.apache.cassandra.streaming.StreamException: Stream failed at org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onFailure(StreamEventJMXNotifier.java:85) at com.google.common.util.concurrent.Futures$6.run(Futures.java:1310) at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:457) at com.google.common.util.concurrent.ExecutionList.executeListener(ExecutionList.java:156) at com.google.common.util.concurrent.ExecutionList.execute(ExecutionList.java:145) at com.google.common.util.concurrent.AbstractFuture.setException(AbstractFuture.java:202) at org.apache.cassandra.streaming.StreamResultFuture.maybeComplete(StreamResultFuture.java:215) at org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamResultFuture.java:191) at org.apache.cassandra.streaming.StreamSession.closeSession(StreamSession.java:429) at org.apache.cassandra.streaming.StreamSession.sessionFailed(StreamSession.java:639) at org.apache.cassandra.streaming.StreamSession.messageReceived(StreamSession.java:489) at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:276) at java.lang.Thread.run(Thread.java:745)I've ran bisect against last commits and (given it fails constantly) it started failing after this commit.</description>
      <version>3.7</version>
      <fixedVersion>Legacy/Testing</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.big.BigTableWriter.java</file>
    </fixedFiles>
  </bug>
  <bug id="11739" opendate="2016-5-9 00:00:00" fixdate="2016-5-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cache key references might cause OOM on incremental repair</summary>
      <description>We keep SSTableReader references for the duration of the repair to anti-compact later, and their tidier keep references to cache keys to be invalidated which are only cleaned up by GC after repair is finished. These cache keys can accumulate while repair is being executed leading to OOM for large tables/keyspaces.Heap dump attached.</description>
      <version>2.1.15,2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/StreamingandMessaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.ActiveRepairService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11840" opendate="2016-5-18 00:00:00" fixdate="2016-5-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Set a more conservative default to streaming_socket_timeout_in_ms</summary>
      <description></description>
      <version>2.1.15,2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/StreamingandMessaging</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamSession.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11855" opendate="2016-5-20 00:00:00" fixdate="2016-5-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>MessagingService#getCommandDroppedTasks should be displayed in netstats</summary>
      <description>MessagingService#getCommandDroppedTasks should be displayed in netstats along with the pending and completed.</description>
      <version>2.1.15,2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeTool.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11915" opendate="2016-5-28 00:00:00" fixdate="2016-6-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>[PATCH] doc: correct section number of opcode in protocol spec</summary>
      <description>This patch just corrected the section number, opcode detail is described in Section 2.4</description>
      <version>3.0.7,3.7</version>
      <fixedVersion>Legacy/DocumentationandWebsite</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">doc.native.protocol.v4.spec</file>
      <file type="M">doc.native.protocol.v3.spec</file>
    </fixedFiles>
  </bug>
  <bug id="9395" opendate="2015-5-14 00:00:00" fixdate="2015-5-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Prohibit Counter type as part of the PK</summary>
      <description>C* let me do this:create table aggregated.counter1 ( a counter , b int , PRIMARY KEY (b,a)) WITH CLUSTERING ORDER BY (a desc);and then treated a as an int!cqlsh&gt; update aggregated.counter1 set a= a+1 where b = 2 ;Bad Request: Invalid operation (a = a + 1) for non counter column ainsert INTO aggregated.counter1 (b, a ) VALUES ( 3, 2) ;(should have given can't insert must update error)Even though desc table still shows it as a counter type:CREATE TABLE counter1 ( b int, a counter, PRIMARY KEY ((b), a)) WITH CLUSTERING ORDER BY (a DESC) AND bloom_filter_fp_chance=0.010000 AND caching='KEYS_ONLY' AND comment='' AND dclocal_read_repair_chance=0.100000 AND gc_grace_seconds=864000 AND index_interval=128 AND read_repair_chance=0.000000 AND replicate_on_write='true' AND populate_io_cache_on_flush='false' AND default_time_to_live=0 AND speculative_retry='99.0PERCENTILE' AND memtable_flush_period_in_ms=0 AND compaction={'class': 'SizeTieredCompactionStrategy'} AND compression={'sstable_compression': 'LZ4Compressor'};</description>
      <version>2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.CountersTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateTableStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="9669" opendate="2015-6-28 00:00:00" fixdate="2015-5-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>If sstable flushes complete out of order, on restart we can fail to replay necessary commit log records</summary>
      <description>While postFlushExecutor ensures it never expires CL entries out-of-order, on restart we simply take the maximum replay position of any sstable on disk, and ignore anything prior. It is quite possible for there to be two flushes triggered for a given table, and for the second to finish first by virtue of containing a much smaller quantity of live data (or perhaps the disk is just under less pressure). If we crash before the first sstable has been written, then on restart the data it would have represented will disappear, since we will not replay the CL records.This looks to be a bug present since time immemorial, and also seems pretty serious.</description>
      <version>2.2.7,3.0.7,3.7</version>
      <fixedVersion>Legacy/LocalWrite-ReadPaths</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.utils.IntervalTreeTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.io.sstable.metadata.MetadataSerializerTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.io.compress.CompressedSequentialWriterTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.io.compress.CompressedRandomAccessReaderTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.lifecycle.ViewTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.lifecycle.TrackerTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogTestReplayer.java</file>
      <file type="M">test.long.org.apache.cassandra.db.commitlog.CommitLogStressTest.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableMetadataViewer.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamReceiveTask.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.DiskAwareRunnable.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.ValidationMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.StatsMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.MetadataSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.MetadataCollector.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.IMetadataSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.IMetadataComponentSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.CompactionMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.Version.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.SSTableReader.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.big.BigTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.big.BigFormat.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Memtable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.lifecycle.View.java</file>
      <file type="M">src.java.org.apache.cassandra.db.lifecycle.Tracker.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Directories.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.AbstractCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.ReplayPosition.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLogReplayer.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">test.unit.org.apache.cassandra.index.CustomIndexTest.java</file>
      <file type="M">src.java.org.apache.cassandra.index.SecondaryIndexManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="9861" opendate="2015-7-22 00:00:00" fixdate="2015-5-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>When forcibly exiting due to OOM, we should produce a heap dump</summary>
      <description>CASSANDRA-7507 introduced earlier termination on encountering an OOM, due to lack of certainty about system state. However a side effect is that we never produce heap dumps on OOM. We should ideally try to produce one forcibly before exiting.</description>
      <version>2.2.7,3.0.7,3.7</version>
      <fixedVersion>Local/StartupandShutdown</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.JVMStabilityInspector.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
