<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="3131" opendate="2011-9-2 00:00:00" fixdate="2011-11-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh doesn&amp;#39;t work on windows (no readline)</summary>
      <description>Saulius Menkevicius reports in CASSANDRA-3010 that cqlsh doesn't start on Windows because the readline module is not present.cqlsh should be fixed to only use readline if it is present.</description>
      <version>1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="3135" opendate="2011-9-4 00:00:00" fixdate="2011-9-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tighten class accessibility in JDBC Suite</summary>
      <description>Tighten up class accessibility by making classes in the suite that are not intended to be instantiated by a client directly remove the public modifier. In addition make abstract named classes use the abstract modifier. And finally make methods that are not part of public interfaces but shared in the package be marked protected.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.CResultSet.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.ColumnDecoder.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.CassandraPreparedStatement.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.CassandraDatabaseMetaData.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.CassandraConnection.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.AbstractStatement.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.AbstractResultSet.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.AbstractCassandraConnection.java</file>
    </fixedFiles>
  </bug>
  <bug id="3178" opendate="2011-9-12 00:00:00" fixdate="2011-11-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Counter shard merging is not thread safe</summary>
      <description>The first part of the counter shard merging process is done during counter replication. This was done there because it requires that all replica are made aware of the merging (we could only rely on nodetool repair for that but that seems much too fragile, it's better as just a safety net). However this part isn't thread safe as multiple threads can do the merging for the same shard at the same time (which shouldn't really "corrupt" the counter value per se, but result in an incorrect context).Synchronizing that part of the code would be very costly in term of performance, so instance I propose to move the part of the shard merging done during replication to compaction. It's a better place anyway. The only downside is that it means compaction will sometime send mutations to other node as a side effect, which doesn't feel very clean but is probably not a big deal either.</description>
      <version>0.8.8,1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.CounterMutationTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.context.CounterContextTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Memtable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CounterMutation.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CounterColumn.java</file>
      <file type="M">src.java.org.apache.cassandra.db.context.CounterContext.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.PrecompactedRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LazilyCompactedRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionController.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3393" opendate="2011-10-21 00:00:00" fixdate="2011-11-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>report compression ratio in CFSMBean</summary>
      <description>(should expose in nodetool cfstats as well)</description>
      <version>1.0.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.db.SystemTable.java</file>
      <file type="M">test.unit.org.apache.cassandra.io.sstable.SSTableMetadataSerializerTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.io.compress.CompressedRandomAccessReaderTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableReader.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Descriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.io.compress.CompressedSequentialWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DataTracker.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStoreMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3418" opendate="2011-10-28 00:00:00" fixdate="2011-11-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Counter decrements require a space around the minus sign but not around the plus sign</summary>
      <description>UPDATE validation_cf_counter SET test=test+1 WHERE id='test_key' =&gt; SuccessUPDATE validation_cf_counter SET test=test + 1 WHERE id='test_key' =&gt; SuccessUPDATE validation_cf_counter SET test=test - 1 WHERE id='test_key' =&gt; SuccessUPDATE validation_cf_counter SET test=test-1 WHERE id='test_key' =&gt; Failure (line 1:38 no viable alternative at input 'test')</description>
      <version>1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.Term.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.UpdateStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3424" opendate="2011-10-30 00:00:00" fixdate="2011-4-30 01:00:00" resolution="Incomplete">
    <buginformation>
      <summary>Selecting just the row_key returns nil instead of just the row_key</summary>
      <description>CREATE KEYSPACE CassandraCQLTestKeyspace WITH strategy_class='org.apache.cassandra.locator.SimpleStrategy' AND strategy_options:replication_factor=1USE CassandraCQLTestKeyspaceCREATE COLUMNFAMILY row_key_validation_cf_ascii (id ascii PRIMARY KEY, test_column text)INSERT INTO row_key_validation_cf_ascii (id, test_column) VALUES ('test string', 'test') Works as expectedSELECT * FROM row_key_validation_cf_ascii WHERE id = 'test string' Returns an empty result, unexpectedSELECT id FROM row_key_validation_cf_ascii WHERE id = 'test string'</description>
      <version>1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3456" opendate="2011-11-4 00:00:00" fixdate="2011-11-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Automatically create SHA1 of new sstables</summary>
      <description>Compressed sstables have block checksums which is great but non-compressed sstables don't for technical/compatibility reasons that I'm not criticizing. It's a bit annoying because when someone comes up with a corrupted file, we really have nothing to help discarding it as bitrot or not. However, it would be fairly trivial/cheap to compute the SHA1 (or other) of whole sstables when creating them. And if it's a new, separate, sstable component, we don't even have to implement anything to check the hash. It would only be there to (manually) check for bitrot when corruption is suspected by the user, or to say check the integrity of backups.I'm absolutely not pretending that it's a perfect solution, and for compressed sstables the block checksums are clearly more fine grained, but it's easy to add and could prove useful for non compressed files.</description>
      <version>1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.util.SequentialWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTable.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Component.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableWriter.java</file>
    </fixedFiles>
  </bug>
  <bug id="3466" opendate="2011-11-7 00:00:00" fixdate="2011-11-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Hinted handoff not working after rolling upgrade from 0.8.7 to 1.0.2</summary>
      <description>While testing rolling upgrades from 0.8.7 to 1.0.2 on a test cluster I've noticed that hinted hand-off didn't always work properly. Hints generated on an upgraded node does not seem to be delivered to other newly upgraded nodes once they rejoin the ring. They only way I've found to get a node to deliver its hints is to restart it.Here's some steps to reproduce this issue:1. Install cassandra 0.8.7 on node1 and node2 using default settings.2. Create keyspace foo with {replication_factor: 2}. Create column family bar3. Shutdown node2 4. Insert data into bar and verify that HintsColumnFamily on node2 contains hints5. Start node2 and verify that hinted handoff is performed and HintsColumnFamily becomes empty again.6. Upgrade and restart node17. Shutdown node2 8. Insert data into bar and verify that HintsColumnFamily on node2 contains hints9. Upgrade and start node210. Notice that hinted handoff is not performed when "node2" comes back. (Only if node1 is restarted)</description>
      <version>1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3467" opendate="2011-11-7 00:00:00" fixdate="2011-11-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>get_slice, super column family with UUIDType as column comparator</summary>
      <description>get_slice with more than one column selected by predicate fails, when comparator is set to (Lexical|Time)UUIDType and more than one column is being selected.// Sample data:create column family A with column_type = Super and comparator = LexicalUUIDType and subcomparator = UTF8Type and default_validation_class = UTF8Type;set A[ascii('key')][lexicaluuid('b139337e-fb6d-41e1-a868-1db7f2a52a42')]['a'] = 'A';set A[ascii('key')][lexicaluuid('b139337e-fb6d-41e1-a868-1db7f2a52a42')]['b'] = 'B';set A[ascii('key')][lexicaluuid('b139337e-fb6d-41e1-a868-1db7f2a52a42')]['c'] = 'C';set A[ascii('key')][lexicaluuid('b139337e-fb6d-41e1-a868-1db7f2a52a42')]['d'] = 'D';set A[ascii('key')][lexicaluuid('b139337e-fb6d-41e1-a868-1db7f2a52a42')]['e'] = 'E';// Failed call$client-&gt;get_slice( 'key', new ColumnParent(array( 'column_family'=&gt;'A', 'super_column'=&gt;base64_decode('sTkzfvttQeGoaB238qUqQg==') )), new SlicePredicate(array( 'column_names'=&gt;array('a', 'b') )), 1);// Exception thrownERROR [ReadStage:302] 2011-11-07 21:29:30,339 AbstractCassandraDaemon.java (line 133) Fatal exception in thread Thread[ReadStage:302,5,main]java.lang.RuntimeException: java.lang.IndexOutOfBoundsException at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1269) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)Caused by: java.lang.IndexOutOfBoundsException at java.nio.Buffer.checkIndex(Buffer.java:520) at java.nio.HeapByteBuffer.getLong(HeapByteBuffer.java:391) at org.apache.cassandra.utils.UUIDGen.getUUID(UUIDGen.java:67) at org.apache.cassandra.db.marshal.LexicalUUIDType.compare(LexicalUUIDType.java:58) at org.apache.cassandra.db.marshal.LexicalUUIDType.compare(LexicalUUIDType.java:31) at java.util.TreeMap.put(TreeMap.java:530) at java.util.TreeSet.add(TreeSet.java:238) at java.util.AbstractCollection.addAll(AbstractCollection.java:305) at java.util.TreeSet.addAll(TreeSet.java:295) at org.apache.cassandra.db.CollationController.collectTimeOrderedData(CollationController.java:98) at org.apache.cassandra.db.CollationController.getTopLevelColumns(CollationController.java:61) at org.apache.cassandra.db.ColumnFamilyStore.getTopLevelColumns(ColumnFamilyStore.java:1278) at org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(ColumnFamilyStore.java:1164) at org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(ColumnFamilyStore.java:1131) at org.apache.cassandra.db.Table.getRow(Table.java:378) at org.apache.cassandra.db.SliceByNamesReadCommand.getRow(SliceByNamesReadCommand.java:58) at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:797) at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:1265) ... 3 more// This works though$client-&gt;get_slice( 'key', new ColumnParent(array( 'column_family'=&gt;'A', 'super_column'=&gt;base64_decode('sTkzfvttQeGoaB238qUqQg==') )), new SlicePredicate(array( 'column_names'=&gt;array('a') )), 1);// This works too$client-&gt;get_slice('key', new ColumnParent(array( 'column_family'=&gt;'A', 'super_column'=&gt;base64_decode('sTkzfvttQeGoaB238qUqQg==') )), new SlicePredicate(array( 'slice_range'=&gt;new SliceRange(array( 'start'=&gt;'', 'finish'=&gt;'', 'reversed'=&gt;false, 'count'=&gt;100 )) )), 1);Regardsales</description>
      <version>1.0.3</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.SchemaLoader.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.ColumnFamilyStoreTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="3471" opendate="2011-11-8 00:00:00" fixdate="2011-11-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Less verbose cassandra-cli startup</summary>
      <description>Move version number to welcome message, save 1 line on terminal.fbsd8:~&gt; cassandra-cliWelcome to the Cassandra CLI /1.0.2Type 'help;' or '?' for help.Type 'quit;' or 'exit;' to quit.Cassandra CLI version 1.0.2&amp;#91;default@unknown&amp;#93;</description>
      <version>1.0.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.resources.org.apache.cassandra.cli.CliHelp.yaml</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="3478" opendate="2011-11-9 00:00:00" fixdate="2011-11-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add support for sstable forwards-compatibility</summary>
      <description>Following on to CASSANDRA-3470.</description>
      <version>1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.streaming.BootstrapTest.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamIn.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Descriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3492" opendate="2011-11-14 00:00:00" fixdate="2011-11-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Compression option chunk_length is not converted into KB as it should</summary>
      <description></description>
      <version>1.0.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.compress.CompressionParameters.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3493" opendate="2011-11-14 00:00:00" fixdate="2011-11-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh complains when you try to do UPDATE with counter columns</summary>
      <description>trying to do a counter column UPDATE in cqlsh causes an "Invalid syntax" error:cqlsh:foo&gt; update brongo SET boo = boo+1 where key='hi';Invalid syntax at line 1, char 28 update brongo SET boo = boo+1 where key='hi'; ^This is cause cqlsh's lexer doesn't know that + and - are valid operators in CQL. Don't worry, I'm not trying to make cqlsh be able to parse all CQL with exactness- it tries, in order to provide the best tab completion, but when it fails to parse it can still pass on CQL text to the server. This case is different because it's the lexer that can't understand the operators, before we even get to the parser. We do need a working and correct lexer, along with at least minimal parsing capability, in order to reliably split up statements, tell when the user is changing the keyspace, or SELECTing on a columnfamily with ASSUMEd types.Also, the parser should be tweaked in a manner similar to CASSANDRA-3418.</description>
      <version>1.0.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.pylexotron.py</file>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
    </fixedFiles>
  </bug>
</bugrepository>
