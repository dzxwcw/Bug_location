<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="3047" opendate="2011-8-17 00:00:00" fixdate="2011-7-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>implementations of IPartitioner.describeOwnership() are not DC aware</summary>
      <description>see http://www.mail-archive.com/user@cassandra.apache.org/msg16375.htmlWhen a cluster the multiple rings approach to tokens the output from nodetool ring is incorrect.When it uses the interleaved token approach (e.g. dc1, dc2, dc1, dc2) it will be correct. It's a bit hacky but could we special case (RP) tokens that are off by 1 and calculate the ownership per dc ? I guess another approach would be to add some parameters so the partitioner can be told about the token assignment strategy.</description>
      <version>1.1.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3633" opendate="2011-12-14 00:00:00" fixdate="2011-6-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>update stress to support prepared statements</summary>
      <description>The stress utility needs to be updated for testing prepared statements.</description>
      <version>1.1.3</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.util.Operation.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.StressAction.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.Session.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.Reader.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.RangeSlicer.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.MultiGetter.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.Inserter.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.IndexedRangeSlicer.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CqlReader.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CqlRangeSlicer.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CqlMultiGetter.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CqlInserter.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CqlIndexedRangeSlicer.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CqlCounterGetter.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CqlCounterAdder.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CounterGetter.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.operations.CounterAdder.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3709" opendate="2012-1-6 00:00:00" fixdate="2012-7-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add a token generator to standard tools</summary>
      <description>We recommend spacing nodes in a new cluster evenly around the ring; we should provide a tool to generate appropriate tokens for a cluster of size X.</description>
      <version>1.1.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4074" opendate="2012-3-22 00:00:00" fixdate="2012-7-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: Tab completion should not suggest consistency level ANY for select statements</summary>
      <description>consistency level ANY should not be suggested in tab-completion for SELECT statements</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
    </fixedFiles>
  </bug>
  <bug id="4144" opendate="2012-4-12 00:00:00" fixdate="2012-7-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Pig: Composite column support for row key</summary>
      <description>Currently Pig only understands composite columns not composite row keys.Support for querying column family that has composite type for its key_validation_class will be nice.</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.pig.CassandraStorage.java</file>
      <file type="M">examples.pig.test.test.storage.pig</file>
      <file type="M">examples.pig.test.populate-cli.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4327" opendate="2012-6-11 00:00:00" fixdate="2012-7-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Sorting results when using IN()</summary>
      <description>Using the following test schema:CREATE TABLE test ( my_id varchar, time_id uuid, value int, PRIMARY KEY (my_id, time_id));When you issue a CQL3 query like: select * from test where my_id in('key1', 'key2') order by time_id; You receive the error:"Ordering is only supported if the first part of the PRIMARY KEY is restricted by an Equal"I'm including a patch I put together after spending an hour or two poking thru the code base that sorts the results for these types of queries. I'm hoping someone with a deeper understanding of Cassandra's code base can take a look at it, clean it up or use it as a starting place, and include it in an upcoming release.</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.SystemTable.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4380" opendate="2012-6-26 00:00:00" fixdate="2012-7-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQLSH: describe command doesn&amp;#39;t output valid CQL command.</summary>
      <description>cqlsh:test&gt; describe columnfamily stats;CREATE TABLE stats ( gid blob PRIMARY KEY) WITH comment='' AND comparator='CompositeType(org.apache.cassandra.db.marshal.Int32Type,org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.UTF8Type)' AND read_repair_chance=0.100000 AND gc_grace_seconds=864000 AND default_validation=blob AND min_compaction_threshold=4 AND max_compaction_threshold=32 AND replicate_on_write='true' AND compaction_strategy_class='SizeTieredCompactionStrategy' AND compression_parameters:sstable_compression='SnappyCompressor';I can create a cf in cql3 and then use describe cf to get the above output. However trying to run that create statement says that all of the following are invalid options: default_validation min_compaction_threshold max_compaction_threshold comparator</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4385" opendate="2012-6-27 00:00:00" fixdate="2012-7-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bug when trying to describe a cf in a pre cql3 case sensitive keyspace</summary>
      <description>I can't describe column families in my schema defined via cassandra-cli. Update also seems to fail for the same CF's.CREATE KEYSPACE Hastur with placement_strategy = 'org.apache.cassandra.locator.SimpleStrategy' and strategy_options = {replication_factor:2};CREATE COLUMN FAMILY LookupByKey with compaction_strategy = 'LeveledCompactionStrategy' and compression_options = null;Then later, https://gist.github.com/3006886</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4398" opendate="2012-6-30 00:00:00" fixdate="2012-7-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Incorrect english for cassandra-cli help</summary>
      <description>Some of the help provided for the CLI is not written correctly.For example:describe Describe a keyspace and it's column families or column family in current keyspace.drop column family Remove a column family and it's data.drop keyspace Remove a keyspace and it's data.Here all the it's should be its.</description>
      <version>1.1.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.resources.org.apache.cassandra.cli.CliHelp.yaml</file>
    </fixedFiles>
  </bug>
  <bug id="4399" opendate="2012-7-1 00:00:00" fixdate="2012-7-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>use data size ratio in liveRatio instead of live size : serialized throughput</summary>
      <description></description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.Memtable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ISortedColumns.java</file>
      <file type="M">src.java.org.apache.cassandra.db.AtomicSortedColumns.java</file>
      <file type="M">src.java.org.apache.cassandra.db.AbstractThreadUnsafeSortedColumns.java</file>
      <file type="M">src.java.org.apache.cassandra.db.AbstractColumnContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="4401" opendate="2012-7-2 00:00:00" fixdate="2012-7-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>If processor is missing from /proc/cpuinfo, cassandra will not start</summary>
      <description>cassandra.env.sh does an egrep on /proc/cpuinfo in order to find the number of processors on the system. If /proc/cpuinfo does not contain a processor :# line then the script will fail because of a divide by 0 error. Changing the Linux section of cassandra.env.sh to:Linux) system_memory_in_mb=`free -m | awk '/Mem:/ {print $2}'` system_cpu_cores=`egrep -c 'processor([&amp;#91;:space:&amp;#93;]+):.*' /proc/cpuinfo` if [ "$system_cpu_cores" -lt "1" ] then system_cpu_cores="1" fiis a possible fix</description>
      <version>1.1.3</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug id="4403" opendate="2012-7-2 00:00:00" fixdate="2012-7-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cleanup uses global partitioner to estimate ranges in index sstables</summary>
      <description>Introduced in CASSANDRA-1404, CleanupTest is showing this on trunk (on stderr, so test doesn't actually fail): [junit] java.lang.ClassCastException: org.apache.cassandra.dht.Token$KeyBound cannot be cast to org.apache.cassandra.dht.Token [junit] at org.apache.cassandra.dht.LocalToken.compareTo(LocalToken.java:24) [junit] at org.apache.cassandra.dht.Range$1.compare(Range.java:386) [junit] at org.apache.cassandra.dht.Range$1.compare(Range.java:383) [junit] at java.util.Arrays.mergeSort(Arrays.java:1270) [junit] at java.util.Arrays.sort(Arrays.java:1210) [junit] at java.util.Collections.sort(Collections.java:159) [junit] at org.apache.cassandra.dht.Range.normalize(Range.java:382) [junit] at org.apache.cassandra.io.sstable.SSTableReader.getSampleIndexesForRanges(SSTableReader.java:570) [junit] at org.apache.cassandra.io.sstable.SSTableReader.estimatedKeysForRanges(SSTableReader.java:549) [junit] at org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundTask(SizeTieredCompactionStrategy.java:111) [junit] at org.apache.cassandra.db.compaction.CompactionManager$1.runMayThrow(CompactionManager.java:136) [junit] at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:26) [junit] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [junit] at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [junit] at java.util.concurrent.FutureTask.run(FutureTask.java:138) [junit] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [junit] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [junit] at java.lang.Thread.run(Thread.java:662)This doesn't happen on the 1.1 branch (less robust test?) but the problem is still there.</description>
      <version>1.1.3,1.2.0beta1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4411" opendate="2012-7-5 00:00:00" fixdate="2012-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Assertion with LCS compaction</summary>
      <description>As instructed in CASSANDRA-4321 I have raised this issue as a continuation of that issue as it appears the problem still exists.I have repeatedly run sstablescrub across all my nodes after the 1.1.2 upgrade until sstablescrub shows no errors. The exceptions described in CASSANDRA-4321 do not occur as frequently now but the integrity check still throws exceptions on a number of nodes. Once those exceptions occur compactionstats shows a large number of pending tasks with no progression afterwards.ERROR [CompactionExecutor:150] 2012-07-05 04:26:15,570 AbstractCassandraDaemon.java (line 134) Exception in thread Thread[CompactionExecutor:150,1,main]java.lang.AssertionError at org.apache.cassandra.db.compaction.LeveledManifest.promote(LeveledManifest.java:214) at org.apache.cassandra.db.compaction.LeveledCompactionStrategy.handleNotification(LeveledCompactionStrategy.java:158) at org.apache.cassandra.db.DataTracker.notifySSTablesChanged(DataTracker.java:531) at org.apache.cassandra.db.DataTracker.replaceCompactedSSTables(DataTracker.java:254) at org.apache.cassandra.db.ColumnFamilyStore.replaceCompactedSSTables(ColumnFamilyStore.java:978) at org.apache.cassandra.db.compaction.CompactionTask.execute(CompactionTask.java:200) at org.apache.cassandra.db.compaction.LeveledCompactionTask.execute(LeveledCompactionTask.java:50) at org.apache.cassandra.db.compaction.CompactionManager$1.runMayThrow(CompactionManager.java:150) at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:636)</description>
      <version>1.1.3,1.1.4</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.StandaloneScrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.Bounds.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4422" opendate="2012-7-6 00:00:00" fixdate="2012-7-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Humor 32bit JVMs</summary>
      <description>The commitlog rewrite for 1.1 uses mmap, anticipating multithreaded commitlog writes. However, the default commitlog settings will quickly exhaust a 32bit address space.</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4427" opendate="2012-7-8 00:00:00" fixdate="2012-7-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Restarting a failed bootstrap instajoins the ring</summary>
      <description>I think when we made auto_bootstrap = true the default, we broke the check for the bootstrap flag, creating a dangerous situation.</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.SystemTable.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.BootStrapper.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.VersionedValue.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Schema.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4432" opendate="2012-7-10 00:00:00" fixdate="2012-7-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Change nanoTime() to currentTimeInMillis() in schema related code.</summary>
      <description>From nanoTime() description:"The value returned represents nanoseconds since some fixed but arbitrary time (perhaps in the future, so values may be negative). This method provides nanosecond precision, but not necessarily nanosecond accuracy. No guarantees are made about how frequently values change."Also see http://www.mail-archive.com/dev@cassandra.apache.org/msg04992.html</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="4434" opendate="2012-7-11 00:00:00" fixdate="2012-7-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add COPY TO</summary>
      <description>CASSANDRA-4012 added COPY FROM; this is a ticket to add the inverse.</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4436" opendate="2012-7-12 00:00:00" fixdate="2012-7-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Counters in columns don&amp;#39;t preserve correct values after cluster restart</summary>
      <description>Similar to #3821. but affecting normal columns. Set up a 2-node cluster with rf=2.1. Create a counter column family and increment a 100 keys in loop 5000 times. 2. Then make a rolling restart to cluster. 3. Again increment another 5000 times.4. Make a rolling restart to cluster.5. Again increment another 5000 times.6. Make a rolling restart to cluster.After step 6 we were able to reproduce bug with bad counter values. Expected values were 15 000. Values returned from cluster are higher then 15000 + some random number.Rolling restarts are done with nodetool drain. Always waiting until second node discover its down then kill java process.</description>
      <version>1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.data.corrupt-sstables.Keyspace1-Standard3-ia-1-Statistics.db</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableReader.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTable.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Descriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Component.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4462" opendate="2012-7-24 00:00:00" fixdate="2012-7-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>upgradesstables strips active data from sstables</summary>
      <description>From the discussion here: http://mail-archives.apache.org/mod_mbox/cassandra-user/201207.mbox/%3CCAOac0GCtyDqS6ocuHOuQqre4re5wKj3o-ZpUZGkGsjCHzDVbTA%40mail.gmail.com%3EWe are trying to migrate a 0.8.8 cluster to 1.1.2 by migrating the sstables from the 0.8.8 ring to a parallel 1.1.2 ring. However, every time we run the `nodetool upgradesstables` step we find it removes active data from our CFs &amp;#8211; leading to lost data in our application.The steps we took were:1. Bring up a 1.1.2 ring in the same AZ/data center configuration withtokens matching the corresponding nodes in the 0.8.8 ring.2. Create the same keyspace on 1.1.2.3. Create each CF in the keyspace on 1.1.2.4. Flush each node of the 0.8.8 ring.5. Rsync each non-compacted sstable from 0.8.8 to the corresponding node in1.1.2.6. Move each 0.8.8 sstable into the 1.1.2 directory structure by renaming the file to the /cassandra/data/&lt;keyspace&gt;/&lt;cf&gt;/&lt;keyspace&gt;-&lt;cf&gt;... format. For example, for the keyspace "Metrics" and CF "epochs_60" we get:"cassandra/data/Metrics/epochs_60/Metrics-epochs_60-g-941-Data.db".7. On each 1.1.2 node run `nodetool -h localhost refresh Metrics &lt;CF&gt;` for each CF in the keyspace. We notice that storage load jumps accordingly.8. On each 1.1.2 node run `nodetool -h localhost upgradesstables`.Afterwards we would test the validity of the data by comparing it with data from the original 0.8.8 ring. After an upgradesstables command the data was always incorrect.With further testing we found that we could successfully use scrub to convert our sstables without data loss. However, any invocation of upgradesstables causes active data to be culled from the sstables: INFO &amp;#91;CompactionExecutor:4&amp;#93; 2012-07-24 04:27:36,837 CompactionTask.java (line 109) Compacting &amp;#91;SSTableReader(path=&amp;#39;/raid0/cassandra/data/Metrics/metrics_900/Metrics-metrics_900-hd-51-Data.db&amp;#39;)&amp;#93; INFO &amp;#91;CompactionExecutor:4&amp;#93; 2012-07-24 04:27:51,090 CompactionTask.java (line 221) Compacted to &amp;#91;/raid0/cassandra/data/Metrics/metrics_900/Metrics-metrics_900-hd-58-Data.db,&amp;#93;. 60,449,155 to 2,578,102 (~4% of original) bytes for 4,002 keys at 0.172562MB/s. Time: 14,248ms.These are the steps we've tried:WORKS refresh -&gt; scrubWORKS refresh -&gt; scrub -&gt; major compactionWORKS refresh -&gt; scrub -&gt; cleanupWORKS refresh -&gt; scrub -&gt; repairFAILS refresh -&gt; upgradesstablesFAILS refresh -&gt; scrub -&gt; upgradesstablesFAILS refresh -&gt; scrub -&gt; repair -&gt; upgradesstablesFAILS refresh -&gt; scrub -&gt; major compaction -&gt; upgradesstablesWe have fewer than 143 million row keys in the CFs we're testing and noneof the *-Filter.db files are &gt; 10MB, so I don't believe this is ourproblem: https://issues.apache.org/jira/browse/CASSANDRA-3820The keyspace is defined as:Keyspace: Metrics: Replication Strategy: org.apache.cassandra.locator.NetworkTopologyStrategy Durable Writes: true Options: &amp;#91;us-east:3&amp;#93;And the column family that we tested with is defined as: ColumnFamily: metrics_900 Key Validation Class: org.apache.cassandra.db.marshal.UTF8Type Default column value validator: org.apache.cassandra.db.marshal.BytesType Columns sorted by: org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.LongType,org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type) GC grace seconds: 0 Compaction min/max thresholds: 4/32 Read repair chance: 0.1 DC Local Read repair chance: 0.0 Replicate on write: true Caching: KEYS_ONLY Bloom Filter FP chance: default Built indexes: [] Compaction Strategy: org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy Compression Options: sstable_compression: org.apache.cassandra.io.compress.SnappyCompressorAll rows have a TTL of 30 days and a gc_grace=0 so it's possible that a small number of older columns would be removed during a compaction/scrub/upgradesstables step. However, the majority should still be kept as their TTL's have not expired yet.</description>
      <version>1.0.11,1.1.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4469" opendate="2012-7-28 00:00:00" fixdate="2012-7-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix online help in cqlsh for COPY commands</summary>
      <description>the HELP COPY output from cqlsh says:COPY [cqlsh only] Imports CSV data into a Cassandra table.COPY &lt;table_name&gt; [ ( column [, ...] ) ] FROM ( '&lt;filename&gt;' | STDIN ) [ WITH &lt;option&gt;='value' [AND ...] ];COPY &lt;table_name&gt; [ ( column [, ...] ) ] TO ( '&lt;filename&gt;' | STDOUT ) [ WITH &lt;option&gt;='value' [AND ...] ];It's confusing cause COPY is now for both export and import, since CASSANDRA-4434.</description>
      <version>1.1.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4470" opendate="2012-7-28 00:00:00" fixdate="2012-7-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh COPY FROM without explicit column names is broken</summary>
      <description>When trying to do a COPY FROM command in cqlsh without an explicit list of column names, an error results:cqlsh:a&gt; copy blah from stdin;[Use \. on a line by itself to end input][copy] a,b,cobject of type 'NoneType' has no len()Broken by the fix for CASSANDRA-4434.</description>
      <version>1.1.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
</bugrepository>
