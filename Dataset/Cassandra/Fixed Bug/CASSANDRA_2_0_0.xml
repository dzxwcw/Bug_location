<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="5138" opendate="2013-1-9 00:00:00" fixdate="2013-7-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide a better CQL error when table data does not conform to CQL metadata.</summary>
      <description>When you create a table via CQL, then insert into it via Thrift. If you inadvertently leave out a component of the column name, in CQL you receive a:TSocket read 0 bytesServer-side the following exception is logged:ERROR 15:19:18,016 Error occurred during processing of message.java.lang.ArrayIndexOutOfBoundsException: 3 at org.apache.cassandra.cql3.statements.ColumnGroupMap.add(ColumnGroupMap.java:43) at org.apache.cassandra.cql3.statements.ColumnGroupMap.access$200(ColumnGroupMap.java:31) at org.apache.cassandra.cql3.statements.ColumnGroupMap$Builder.add(ColumnGroupMap.java:138) at org.apache.cassandra.cql3.statements.SelectStatement.process(SelectStatement.java:805) at org.apache.cassandra.cql3.statements.SelectStatement.processResults(SelectStatement.java:145) at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:134) at org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:61) at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:132) at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:140) at org.apache.cassandra.thrift.CassandraServer.execute_cql3_query(CassandraServer.java:1686) at org.apache.cassandra.thrift.Cassandra$Processor$execute_cql3_query.getResult(Cassandra.java:4074) at org.apache.cassandra.thrift.Cassandra$Processor$execute_cql3_query.getResult(Cassandra.java:4062) at org.apache.thrift.ProcessFunction.process(ProcessFunction.java:32) at org.apache.thrift.TBaseProcessor.process(TBaseProcessor.java:34) at org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess.run(CustomTThreadPoolServer.java:199) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)I'll submit a schema, and steps to reproduce.</description>
      <version>2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftValidation.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="5337" opendate="2013-3-12 00:00:00" fixdate="2013-7-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>vnode-aware replacenode command</summary>
      <description>Currently you have the following options to replace a dead, unrecoverable node: replacetoken. this requires specifying all 256 or so vnode tokens as a CSL bootstrap new node, decommission old one. this is inefficient since the new node's vnodes will probably not overlap much with the old one's, so we replicate stream about 2x as much as if we were just replacing the old with the newWe should add an analogue to replacetoken that takes the address or node ID of the dead node instead.</description>
      <version>1.2.7,2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="5729" opendate="2013-7-8 00:00:00" fixdate="2013-7-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add new TimestampType to cqlsh</summary>
      <description>Since cqlsh used CQL-over-thrift currently, we'd need to add support for the new TimestampType introduced in CASSANDRA-5723.</description>
      <version>2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="5851" opendate="2013-8-6 00:00:00" fixdate="2013-8-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix 2i on composite components omissions</summary>
      <description>There some edge-cases, not covered by CASSANDRA-5125, the attached patch fixes those:(Assuming CREATE TABLE test (pk0 int, pk1 int, ck0 int, ck1 int, val int, PRIMARY KEY ((pk0, pk1), ck0, ck1))) could not create a 2i on the first part of a composite partition key (pk0) if created, it couldn't work because of getKeyBounds() returning non-empty bounds could create an index on the first clustering key column (ck0), but it would never actually be triggered on reads queries like SELECT * FROM test WHERE pk0 = x AND pk1 = y AND ck1 = z would throw an exception because COCK.makeIndexColumnNameBuilder() couldn't handle empty provided columnName cqlsh could not describe any of these indexes because it was taking column aliases and key aliases from schema_columnfamilies and not reading them directly from schema_columns (had to do the related refactoring).</description>
      <version>2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.index.composites.CompositesIndexOnClusteringKey.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateIndexStatement.java</file>
      <file type="M">pylib.cqlshlib.test.test.cqlsh.output.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="5859" opendate="2013-8-7 00:00:00" fixdate="2013-8-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Don&amp;#39;t return internal StreamState objects from streaming mbeans</summary>
      <description>The stream manager mbean returns StreamState objects. We want to avoid returning internal C* objects over jmx. We should switch to a map or something similar that can represent streaming state.</description>
      <version>2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamManagerMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="5869" opendate="2013-8-9 00:00:00" fixdate="2013-8-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make vnodes default in 2.0</summary>
      <description></description>
      <version>2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">NEWS.txt</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="5908" opendate="2013-8-21 00:00:00" fixdate="2013-8-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add existing sstables to leveled manifest on startup</summary>
      <description>we need to add all sstables to the leveled manifest on startup, looks like this was introduced in 6968f68cd7c</description>
      <version>2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledCompactionStrategy.java</file>
    </fixedFiles>
  </bug>
  <bug id="5917" opendate="2013-8-21 00:00:00" fixdate="2013-8-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NoSuchMethodError when calling YamlConfigurationLoader.loadConfig()</summary>
      <description>Hi, when this method is called, I see this:java.lang.NoSuchMethodError: org.yaml.snakeyaml.Yaml.&lt;init&gt;(Lorg/yaml/snakeyaml/constructor/BaseConstructor;)V at org.apache.cassandra.config.YamlConfigurationLoader.loadConfig(YamlConfigurationLoader.java:86) at org.apache.cassandra.config.DatabaseDescriptor.loadConfig(DatabaseDescriptor.java:125) at org.apache.cassandra.config.DatabaseDescriptor.&lt;clinit&gt;(DatabaseDescriptor.java:101)......I believe it's because of an enhancement made in ticket CASSANDRA-5606. The version of snakeyaml that 2.0.0-rc1 depends on is 1.6, but this constructor doesn't exist in that version but it does in version 1.12.Coincidentally CASSANDRA-5317 speaks of upgrading the snakeyaml dependency, but I'm not sure what was upgraded.</description>
      <version>2.0.0</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug id="5931" opendate="2013-8-23 00:00:00" fixdate="2013-8-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix periodic flushing when encountering an empty memtable</summary>
      <description>CASSANDRA-5241 broke it by making forceFlush() always return a valid future, never a null, and CASSANDRA-4237 was relying on that null check to determine cleanliness.</description>
      <version>2.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
