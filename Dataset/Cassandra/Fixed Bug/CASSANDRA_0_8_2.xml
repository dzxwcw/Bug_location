<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="1125" opendate="2010-5-24 00:00:00" fixdate="2010-8-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Filter out ColumnFamily rows that aren&amp;#39;t part of the query (using a KeyRange)</summary>
      <description>Currently, when running a MapReduce job against data in a Cassandra data store, it reads through all the data for a particular ColumnFamily. This could be optimized to only read through those rows that have to do with the query.It's a small change but wanted to put it in Jira so that it didn't fall through the cracks.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.ConfigHelper.java</file>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyInputFormat.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2129" opendate="2011-2-7 00:00:00" fixdate="2011-7-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>removetoken after removetoken rf error fails to work</summary>
      <description>2 node cluster, a keyspace existed with rf=2. Tried removetoken and got:mbulman@ripcord-maverick1:/usr/src/cassandra/tags/cassandra-0.7.0$ bin/nodetool -h localhost removetoken 159559397954378837828954138596956659794Exception in thread "main" java.lang.IllegalStateException: replication factor (2) exceeds number of endpoints (1)Deleted the keyspace, and tried again:mbulman@ripcord-maverick1:/usr/src/cassandra/tags/cassandra-0.7.0$ bin/nodetool -h localhost removetoken 159559397954378837828954138596956659794Exception in thread "main" java.lang.UnsupportedOperationException: This node is already processing a removal. Wait for it to complete.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.WriteResponseHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.SimpleStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.OldNetworkTopologyStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.NetworkTopologyStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractReplicationStrategy.java</file>
    </fixedFiles>
  </bug>
  <bug id="2727" opendate="2011-5-31 00:00:00" fixdate="2011-6-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>examples/hadoop_word_count reducer to cassandra doesn&amp;#39;t output into the output_words cf</summary>
      <description>I tried the examples/hadoop_word_count example and could output to the filesystem but when I output to cassandra (the default), nothing shows up in output_words. I can output to cassandra using pig so I think the problem is isolated to this example.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">examples.hadoop.word.count.src.WordCount.java</file>
    </fixedFiles>
  </bug>
  <bug id="2763" opendate="2011-6-12 00:00:00" fixdate="2011-7-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>When dropping a keyspace you&amp;#39;re currently authenticated to, might be nice to de-authenticate upon completion</summary>
      <description>I found that when I'm authenticated to MyKeyspace, then do 'drop keyspace MyKeyspace;', I'm still authenticated to it. It's trivial I know, but seems reasonable to unauthenticate from it.</description>
      <version>0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2770" opendate="2011-6-14 00:00:00" fixdate="2011-7-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Expose data_dir though jmx</summary>
      <description>Going to implement this right away to get into next versons.</description>
      <version>0.7.8,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
    </fixedFiles>
  </bug>
  <bug id="2773" opendate="2011-6-15 00:00:00" fixdate="2011-6-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>"Index manager cannot support deleting and inserting into a row in the same mutation"</summary>
      <description>I use hector 0.8.0-1 and cassandra 0.8.1. create mutator by using hector api, 2. Insert a few columns into the mutator for key "key1", cf "standard". 3. add a deletion to the mutator to delete the record of "key1", cf "standard".4. repeat 2 and 35. execute the mutator.the result: the connection seems to be held by the sever forever, it never returns. when I tried to restart the cassandra I saw unsupportedexception : "Index manager cannot support deleting and inserting into a row in the same mutation". and the cassandra is dead forever, unless I delete the commitlog. I would expect to get an exception when I execute the mutator, not after I restart the cassandra.</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.ColumnFamilyStoreTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2776" opendate="2011-6-15 00:00:00" fixdate="2011-6-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add ability to return "endpoints" to nodetool</summary>
      <description>add "nodetool endpoints" take care of this FIXME: public List&lt;InetAddress&gt; getEndpoints(String keyspace, String key) { // FIXME: string key return ssProxy.getNaturalEndpoints(keyspace, key.getBytes(UTF_8)); } NOTE: Use the key type info we have now, to decode the key-as-string.</description>
      <version>0.8.2</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2780" opendate="2011-6-16 00:00:00" fixdate="2011-6-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>sstable2json needs to escape quotes</summary>
      <description>&amp;#91;default@foo&amp;#93; set transactions&amp;#91;test&amp;#93;&amp;#91;data&amp;#93;='{"foo":"bar"}'; $ cat /tmp/json{"74657374": [["data", "{"foo":"bar"}", 1308209845388000]]}$ ./json2sstable -s -c transactions -K foo /tmp/json /tmp/ss-g-1-Data.dbCounting keys to import, please wait... (NOTE: to skip this use -n &lt;num_keys&gt;)org.codehaus.jackson.JsonParseException: Unexpected character ('f' (code 102)): was expecting comma to separate ARRAY entries at &amp;#91;Source: /tmp/json2; line: 2, column: 27&amp;#93; at org.codehaus.jackson.JsonParser._constructError(JsonParser.java:929) at org.codehaus.jackson.impl.JsonParserBase._reportError(JsonParserBase.java:632) at org.codehaus.jackson.impl.JsonParserBase._reportUnexpectedChar(JsonParserBase.java:565) at org.codehaus.jackson.impl.Utf8StreamParser.nextToken(Utf8StreamParser.java:128) at org.codehaus.jackson.impl.JsonParserBase.skipChildren(JsonParserBase.java:263) at org.apache.cassandra.tools.SSTableImport.importSorted(SSTableImport.java:328) at org.apache.cassandra.tools.SSTableImport.importJson(SSTableImport.java:252) at org.apache.cassandra.tools.SSTableImport.main(SSTableImport.java:476)ERROR: Unexpected character ('f' (code 102)): was expecting comma to separate ARRAY entries at &amp;#91;Source: /tmp/json2; line: 2, column: 27&amp;#93;http://www.mail-archive.com/user@cassandra.apache.org/msg14257.html</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.tools.SSTableExportTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.SchemaLoader.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
    </fixedFiles>
  </bug>
  <bug id="2800" opendate="2011-6-20 00:00:00" fixdate="2011-7-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>OPP#describeOwnership reports incorrect ownership</summary>
      <description>OPP#describeOwnership relies on StorageService#getSplits and counts the received tokens as its basis of ownership.When the number of result keys is less than the number of splits, the full count is omitted (to save work?). However, we don't care if a split would end up fractional in this case, we just need the full count.The logic here is:int splits = keycount * DatabaseDescriptor.getIndexInterval() / keysPerSplit;if (keycount &gt;= splits) { ... add count to result set }We were passing in 1 key per split (since we just care about the count), but splits=keycount*IndexInterval is guaranteed to be &gt; keycount, so the result set is not completely formed.The better "unit keysPerSplit" to use is IndexInterval itself, which gives splits=keycount*II/II=keycount, so the logic runs correctly.</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.dht.OrderPreservingPartitioner.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2803" opendate="2011-6-21 00:00:00" fixdate="2011-6-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra deb should depend on libjna-java</summary>
      <description>Cassandra debs (0.7, 0.8, trunk) currently include a Recommends: for libjna-java, the package that includes the JNA jar. The original reason for the Recommends: instead of Depends: was that it's technically possible to run without JNA.However, since (a) I know of no reason not to use JNA, and (b) the Cassandra RPMs already require JNA, let us change this Recommends: to Depends: for all future debs.I don't believe this affects the licensing issues which stopped us from bundling JNA with cassandra directly.</description>
      <version>0.8.2</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.control</file>
    </fixedFiles>
  </bug>
  <bug id="2804" opendate="2011-6-21 00:00:00" fixdate="2011-7-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>expose dropped messages, exceptions over JMX</summary>
      <description>Patch against 0.7.</description>
      <version>0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.GCInspector.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessageDeliveryTask.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2809" opendate="2011-6-22 00:00:00" fixdate="2011-7-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>In the Cli, update column family &lt;cf&gt; with comparator; create Column metadata</summary>
      <description>Using cassandra-cli, I can't update the comparator of a column family with the type I want and when I did it with BytesType, Column metadata appear for each of my existing columns.Step to reproduce:[default@unknown] create keyspace Test with placement_strategy = 'org.apache.cassandra.locator.SimpleStrategy' and strategy_options = [{replication_factor:1}];[default@unknown] use Test;Authenticated to keyspace: Test[default@Test] create column family test;[default@Test] describe keyspace;... ColumnFamily: test Key Validation Class: org.apache.cassandra.db.marshal.BytesType Default column value validator: org.apache.cassandra.db.marshal.BytesType Columns sorted by: org.apache.cassandra.db.marshal.BytesType Row cache size / save period in seconds: 0.0/0 Key cache size / save period in seconds: 200000.0/14400 Memtable thresholds: 0.571875/122/1440 (millions of ops/MB/minutes) GC grace seconds: 864000 Compaction min/max thresholds: 4/32 Read repair chance: 1.0 Replicate on write: false Built indexes: []...[default@Test] update column family test with comparator = 'LongType';comparators do not match.why?? the CF is empty[default@Test] update column family test with comparator = 'BytesType';f8e4dcb0-9cca-11e0-0000-d0583497e7ffWaiting for schema agreement...... schemas agree across the cluster[default@Test] describe keyspace;... ColumnFamily: test Key Validation Class: org.apache.cassandra.db.marshal.BytesType Default column value validator: org.apache.cassandra.db.marshal.BytesType Columns sorted by: org.apache.cassandra.db.marshal.BytesType Row cache size / save period in seconds: 0.0/0 Key cache size / save period in seconds: 200000.0/14400 Memtable thresholds: 0.571875/122/1440 (millions of ops/MB/minutes) GC grace seconds: 864000 Compaction min/max thresholds: 4/32 Read repair chance: 1.0 Replicate on write: false Built indexes: []...[default@Test] set test[ascii('row1')][long(1)]=integer(35);set test[ascii('row1')][long(2)]=integer(36);set test[ascii('row1')][long(3)]=integer(38);set test[ascii('row2')][long(1)]=integer(45);set test[ascii('row2')][long(2)]=integer(42);set test[ascii('row2')][long(3)]=integer(33);[default@Test] list test;Using default limit of 100-------------------RowKey: 726f7731=&gt; (column=0000000000000001, value=35, timestamp=1308744931122000)=&gt; (column=0000000000000002, value=36, timestamp=1308744931124000)=&gt; (column=0000000000000003, value=38, timestamp=1308744931125000)-------------------RowKey: 726f7732=&gt; (column=0000000000000001, value=45, timestamp=1308744931127000)=&gt; (column=0000000000000002, value=42, timestamp=1308744931128000)=&gt; (column=0000000000000003, value=33, timestamp=1308744932722000)2 Rows Returned.[default@Test] update column family test with comparator = 'LongType';comparators do not match.same question than before, my columns contains only long, why I can't?[default@Test] update column family test with comparator = 'BytesType';[default@Test] describe keyspace; Keyspace: Test: Replication Strategy: org.apache.cassandra.locator.SimpleStrategy Options: [replication_factor:1] Column Families: ColumnFamily: test Key Validation Class: org.apache.cassandra.db.marshal.BytesType Default column value validator: org.apache.cassandra.db.marshal.BytesType Columns sorted by: org.apache.cassandra.db.marshal.BytesType Row cache size / save period in seconds: 0.0/0 Key cache size / save period in seconds: 200000.0/14400 Memtable thresholds: 0.571875/122/1440 (millions of ops/MB/minutes) GC grace seconds: 864000 Compaction min/max thresholds: 4/32 Read repair chance: 1.0 Replicate on write: false Built indexes: [] Column Metadata: Column Name: (0000000000000001) Validation Class: org.apache.cassandra.db.marshal.IntegerType Column Name: (0000000000000003) Validation Class: org.apache.cassandra.db.marshal.IntegerType Column Name: (0000000000000002) Validation Class: org.apache.cassandra.db.marshal.IntegerTypeColumn Metadata appear from nowhere. I don't think that it's expected.</description>
      <version>0.7.8,0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.thrift.CassandraServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="2816" opendate="2011-6-23 00:00:00" fixdate="2011-7-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Repair doesn&amp;#39;t synchronize merkle tree creation properly</summary>
      <description>Being a little slow, I just realized after having opened CASSANDRA-2811 and CASSANDRA-2815 that there is a more general problem with repair.When a repair is started, it will send a number of merkle tree to its neighbor as well as himself and assume for correction that the building of those trees will be started on every node roughly at the same time (if not, we end up comparing data snapshot at different time and will thus mistakenly repair a lot of useless data). This is bogus for many reasons: Because validation compaction runs on the same executor that other compaction, the start of the validation on the different node is subject to other compactions. 0.8 mitigates this in a way by being multi-threaded (and thus there is less change to be blocked a long time by a long running compaction), but the compaction executor being bounded, its still a problem) if you run a nodetool repair without arguments, it will repair every CFs. As a consequence it will generate lots of merkle tree requests and all of those requests will be issued at the same time. Because even in 0.8 the compaction executor is bounded, some of those validations will end up being queued behind the first ones. Even assuming that the different validation are submitted in the same order on each node (which isn't guaranteed either), there is no guarantee that on all nodes, the first validation will take the same time, hence desynchronizing the queued ones.Overall, it is important for the precision of repair that for a given CF and range (which is the unit at which trees are computed), we make sure that all node will start the validation at the same time (or, since we can't do magic, as close as possible).One (reasonably simple) proposition to fix this would be to have repair schedule validation compactions across nodes one by one (i.e, one CF/range at a time), waiting for all nodes to return their tree before submitting the next request. Then on each node, we should make sure that the node will start the validation compaction as soon as requested. For that, we probably want to have a specific executor for validation compaction and: either we fail the whole repair whenever one node is not able to execute the validation compaction right away (because no thread are available right away). we simply tell the user that if he start too many repairs in parallel, he may start seeing some of those repairing more data than it should.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.service.AntiEntropyServiceTestAbstract.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AntiEntropyService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.java</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2817" opendate="2011-6-23 00:00:00" fixdate="2011-6-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Expose number of threads blocked on submitting a memtable for flush</summary>
      <description>Writes can be blocked by a thread trying to submit a memtable while the flush queue is full. While this is the expected behavior (the goal being to prevent OOMing), it is worth exposing when that happens so that people can monitor it and modify settings accordingly if that happens too often.</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.StatusLogger.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2821" opendate="2011-6-24 00:00:00" fixdate="2011-7-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI remove ascii column</summary>
      <description>&amp;#91;default@sdo&amp;#93; incr counters&amp;#91;ascii(&amp;#39;EU&amp;#39;)&amp;#93;&amp;#91;ascii(&amp;#39;null&amp;#39;)&amp;#93;;Value incremented.&amp;#91;default@sdo&amp;#93; list counters;Using default limit of 100-------------------RowKey: 4555=&gt; (counter=6e756c6c, value=1)1 Row Returned.&amp;#91;default@sdo&amp;#93; del counters&amp;#91;ascii(&amp;#39;EU&amp;#39;)&amp;#93;&amp;#91;ascii(&amp;#39;null&amp;#39;)&amp;#93;;org.apache.cassandra.db.marshal.MarshalException: cannot parse'FUNCTION_CALL' as hex bytes&amp;#91;default@sdo&amp;#93;Suggested workaround, although not tested:assume counters comparator as bytes;del counters&amp;#91;&amp;#39;EU&amp;#39;&amp;#93;&amp;#91;0&amp;#93;;</description>
      <version>0.7.8,0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="2832" opendate="2011-6-27 00:00:00" fixdate="2011-6-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>reduce variance in HH impact between wide and narrow rows</summary>
      <description>default page_size of 10000 is huge, and makes it impossible to set a hinted_handoff_throttle_delay_in_ms that works well for both wide rows and narrow.at the same time you don't want to make it TOO small because that will hurt performance on the source node (seeking to the hinted row repeatedly).</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="2835" opendate="2011-6-28 00:00:00" fixdate="2011-6-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CFMetadata don&amp;#39;t set the default for Replicate_on_write correctly</summary>
      <description>Replicate_on_write must default to true (defaulting to false is very dangerous and imho, the option of setting it to false shouldn't exist in the first place) and CFMetadata.DEFAULT_REPLICATE_ON_WRITE is correctly true. But it doesn't get set correctly. Instead, the code force the value of the cf_def even if it wasn't defined, resulting in setting it to false since that is the default value for a boolean in JAVA.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug id="2836" opendate="2011-6-28 00:00:00" fixdate="2011-6-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add CFS.estimatedKeys to cfstats output</summary>
      <description>People ask for this all the time and making them resort to the hell that is JMX is not pleasant.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug id="2841" opendate="2011-6-29 00:00:00" fixdate="2011-6-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Always use even distribution for merkle tree with RandomPartitionner</summary>
      <description>When creating the initial merkle tree, repair tries to be (too) smart and use the key samples to "guide" the tree splitting. While this is a good idea for OPP where there is a good change the data distribution is uneven, you can't beat an even distribution for the RandomPartitionner. And a quick experiment even shows that the method used is significantly less efficient than an even distribution for the ranges of the merkle tree (that is, an even distribution gives a much better of distribution of the number of keys by range of the tree).Thus let's switch to an even distribution for RandomPartitionner. That 3 lines change alone amounts for a significant improvement of repair's precision.</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.AntiEntropyService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2844" opendate="2011-7-1 00:00:00" fixdate="2011-7-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>grep friendly nodetool compactionstats output</summary>
      <description>output from nodetool compactionstats is quite hard to parse with text tools - it would be nice to have one line per compaction</description>
      <version>0.8.2</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2846" opendate="2011-7-1 00:00:00" fixdate="2011-7-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Changing replication_factor using "update keyspace" not working</summary>
      <description>Unless I've misunderstood the new way to do this with 0.8 I think "update keyspace" is broken:[default@unknown] create keyspace Test with placement_strategy = 'org.apache.cassandra.locator.SimpleStrategy' and strategy_options = [{replication_factor:1}];37f70d40-a3e9-11e0-0000-242d50cf1fbfWaiting for schema agreement...... schemas agree across the cluster[default@unknown] describe keyspace Test;Keyspace: Test: Replication Strategy: org.apache.cassandra.locator.SimpleStrategy Durable Writes: true Options: [replication_factor:1] Column Families:[default@unknown] update keyspace Test with placement_strategy = 'org.apache.cassandra.locator.SimpleStrategy' and strategy_options = [{replication_factor:2}];489fe220-a3e9-11e0-0000-242d50cf1fbfWaiting for schema agreement...... schemas agree across the cluster[default@unknown] describe keyspace Test; Keyspace: Test: Replication Strategy: org.apache.cassandra.locator.SimpleStrategy Durable Writes: true Options: [replication_factor:1] Column Families:Isn't the second "describe keyspace" supposed to to say "replication_factor:2"?Relevant bits from system.log:Migration.java (line 116) Applying migration 489fe220-a3e9-11e0-0000-242d50cf1fbf Update keyspace Testrep strategy:SimpleStrategy{}durable_writes: true to Testrep strategy:SimpleStrategy{}durable_writes: trueUpdateKeyspace.java (line 74) Keyspace updated. Please perform any manual operations</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2852" opendate="2011-7-3 00:00:00" fixdate="2011-7-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra CLI - Import Keyspace Definitions from File - Comments do partitially interpret characters/commands</summary>
      <description>Hello, using: bin/cassandra-cli -host localhost --file conf/schema-sample.txtwith schema-sample.txt having contents like this:/* here are a lot of comments,like this sample create keyspace;and so on*/Will result in an error: Line 1 =&gt; Syntax Error at Position 323: mismatched charackter '&lt;EOF&gt;' expecting '*'The Cause is the keyspace; statement =&gt; the semicolon ";" causes the error.However:Writing the word "keyspace;" with quotes, does NOT lead to the error.so this works: /* here are a lot of comments,like this sample create "keyspace;"and so on*/From my point of view this is an error. Everyting between the "Start Comment" =&gt; /* and "End Comment" =&gt; */ Should be treated as a comment and not be interpreted in any way. Thats the definition of a comment, to be not interpreted at all. Or this must be documented somewhere very prominently, otherwise this will lead to unnecessary wasting of time searching for this odd behavoiur. And it makes "commenting out" statements much more cumbersome.Plattform: Windows Vistathanks</description>
      <version>0.7.7,0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliMain.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2853" opendate="2011-7-3 00:00:00" fixdate="2011-7-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-cli has backwards index status message</summary>
      <description>When a secondary index is building, the total bytes and processed bytes are swapped in the message. Example:Currently building index cf1, completed 12052040551 of 18047343 bytes.The problem is a call to CompactionInfo constructor with swapped parameters. Patch to follow.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamOut.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamInSession.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.PendingFile.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.IncomingStreamReader.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableIdentityIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.IndexHelper.java</file>
      <file type="M">src.java.org.apache.cassandra.hadoop.ConfigHelper.java</file>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyInputFormat.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilySerializer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2860" opendate="2011-7-5 00:00:00" fixdate="2011-7-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Versioning works *too* well</summary>
      <description>The scenario goes something like this: you upgrade from 0.7 to 0.8, but all the nodes remember that the remote side is 0.7, so they in turn speak 0.7, causing the local node to also think the remote is 0.7, even though both are really 0.8.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.OutboundTcpConnection.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2872" opendate="2011-7-8 00:00:00" fixdate="2011-7-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>While dropping and recreating an index, incremental snapshotting can hang</summary>
      <description>When creating a hard link (at list with JNA), link() hang if the target of thelink already exists. In theory though, we should not hit that situationbecause we use a new directory for each manual snapshot and the generationnumber of the sstables should prevent this from hapenning with incrementsnapshot.However, when you drop, then recreate a secondary index, if the sstables aredeleted after the drop and before we recreate the index, the recreated indexsstables will start with a generation to 0. Thus, when we start backuping themincrementally, it will conflict with the sstables of the previously droppedindex.First, we should check for the target existance because calling link() to atleast avoid hanging. But then we must make sure that when we drop, thenrecreate an index, we will either not name the sstables the same way or theincremental snapshot use a different directory.</description>
      <version>0.7.8,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2873" opendate="2011-7-8 00:00:00" fixdate="2011-7-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Typo in src/java/org/apache/cassandra/cli/CliClient</summary>
      <description>I have read your documentation about syntax for creating column family and parameters that I can pass.According to documentation i can use parameter :" - keys_cache_save_period: Duration in seconds after which Cassandra should safe the keys cache. Caches are saved to saved_caches_directory as specified in conf/Cassandra.yaml. Default is 14400 or 4 hours. "but then i was receiving error: "No enum const class org.apache.cassandra.cli.CliClient$ColumnFamilyArgument.KEYS_CACHE_SAVE_PERIOD"In class mentioned in title we have:protected enum ColumnFamilyArgument115 {116 COLUMN_TYPE,117 COMPARATOR,118 SUBCOMPARATOR,119 COMMENT,120 ROWS_CACHED,121 ROW_CACHE_SAVE_PERIOD,122 KEYS_CACHED,123 KEY_CACHE_SAVE_PERIOD, &lt;---- TYPO !124 READ_REPAIR_CHANCE,125 GC_GRACE,126 COLUMN_METADATA,127 MEMTABLE_OPERATIONS,128 MEMTABLE_THROUGHPUT,129 MEMTABLE_FLUSH_AFTER,130 DEFAULT_VALIDATION_CLASS,131 MIN_COMPACTION_THRESHOLD,132 MAX_COMPACTION_THRESHOLD,133 REPLICATE_ON_WRITE,134 ROW_CACHE_PROVIDER,135 KEY_VALIDATION_CLASS136 }</description>
      <version>0.8.2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.resources.org.apache.cassandra.cli.CliHelp.yaml</file>
    </fixedFiles>
  </bug>
  <bug id="2895" opendate="2011-7-13 00:00:00" fixdate="2011-7-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add java classpath to cassandra startup logging</summary>
      <description>this is helpful to determine/verify if the Cassandra is started with the expected classpathit's a simple 1-liner addon that are useful... will submit a patch later.</description>
      <version>0.7.9,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2899" opendate="2011-7-14 00:00:00" fixdate="2011-7-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cli silently fails when classes are quoted</summary>
      <description>For example: CREATE COLUMN FAMILY autocomplete_meta WITH comparator = 'UTF8Type' AND default_validation_class = 'UTF8Type' AND key_validation_class = 'UTF8Type'Neither validation class is actually set, but if you remove the quotes everything works.</description>
      <version>0.7.8,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="2902" opendate="2011-7-15 00:00:00" fixdate="2011-7-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>"count" doesn&amp;#39;t accept UUIDs in CLI even though "get" does</summary>
      <description>&amp;#91;default@V360HC_SCHEMA1&amp;#93; get RawValues&amp;#91;7dc75c1c-8af0-462a-a920-bc1dafc44f31&amp;#93; limit 1;=&gt; (column=1310593550317, value=aced00057709053fe9cc17a95b9093, timestamp=1310593550583438)Returned 1 results.&amp;#91;default@V360HC_SCHEMA1&amp;#93; count RawValues&amp;#91;7dc75c1c-8af0-462a-a920-bc1dafc44f31&amp;#93;;UUIDs must be exactly 16 bytes</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="2903" opendate="2011-7-16 00:00:00" fixdate="2011-7-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Default behavior of generating index_name for columns might need to be improved.</summary>
      <description>I have a few column families, each has a column called user_name. I tried to use secondary index on user_name column for each of the column family. However, when creating these column families, cassandra keeps reporting "Duplicate index name..." exception. I finally figured out that it seems the default index name is "column name"+"_idx", this make my column family violate the "uniqueness of index name" rule.I was wondering if the default index_name generating rule could be like "column name"+"cf name", so the index name would not collide with each other that easily, if the user do not assign "index_name" when creating a column family.</description>
      <version>0.8.2</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2907" opendate="2011-7-18 00:00:00" fixdate="2011-7-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>durable_writes flag cannot be changed via the CLI (system does not process KsDef.durable_writes option properly).</summary>
      <description>I am unable to change the durable_writes option in the CLI. Here are the commands to replicate the problem on a clean install:create keyspace test;update keyspace test with durable_writes=false;show keyspaces;It will still say:Keyspace: test: Replication Strategy: org.apache.cassandra.locator.NetworkTopologyStrategy Durable Writes: true Options: &amp;#91;datacenter1:1&amp;#93; Column Families:PS: I looked in the tests of the CLI code of CASSANDRA-2683 and saw that the feature actually is not properly tested: the flag is set, but never tested.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.migration.UpdateKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2908" opendate="2011-7-18 00:00:00" fixdate="2011-7-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix bulkload JMX call</summary>
      <description>The bulkload JMX call is supposed to simplify bulkloading when done from a Cassandra node (so you don't have to configure the bulkloading client to not conflict with the node itself), but that call doesn't work (it forgets to add the ranges to stream).</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.BulkLoader.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableLoader.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2911" opendate="2011-7-18 00:00:00" fixdate="2011-7-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Simplified classes to write SSTables (for bulk loading usage)</summary>
      <description>sstableloader only stream existing sstables. If you need to load data existing in another form (json, csv, whatnot), you need to first write the sstable(s) to load. The recommended way to do this is either to use json2sstable or to modify it if your input is not json. Modifying json2sstable is however more involved than it needs to be, you'll need at least some basic understanding of a bunch of internal classes (DecoratedKey, ColumnFamily, SuperColumn, ...). Even for json input, you can use json2sstable only if your json actually conform to what is expected and even then, good luck to someone that want to add counters.This ticket proposes to add a simple interface to write sstables.</description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2912" opendate="2011-7-18 00:00:00" fixdate="2011-7-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL ignores client timestamp for full row deletion</summary>
      <description></description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.system.test.cql.py</file>
      <file type="M">src.java.org.apache.cassandra.cql.DeleteStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2928" opendate="2011-7-21 00:00:00" fixdate="2011-7-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix Hinted Handoff replay</summary>
      <description>Broken in CASSANDRA-2668. Brandon explains:the Ack and Ack2 verb handlers are applying a new ep state every time there is a generation change via Gossiper.applyStateLocally, so it's always unset initially when the node starts up. state.hasToken() is set in the Gossiper's status check, which won't have happened when the onAlive event is sent to SS.</description>
      <version>0.7.8,0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.EndpointState.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2934" opendate="2011-7-21 00:00:00" fixdate="2011-7-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>log broken incoming connections at DEBUG</summary>
      <description></description>
      <version>0.8.2</version>
      <fixedVersion>None</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.IncomingTcpConnection.java</file>
    </fixedFiles>
  </bug>
</bugrepository>
