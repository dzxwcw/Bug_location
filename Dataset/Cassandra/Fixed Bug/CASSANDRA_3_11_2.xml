<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="10857" opendate="2015-12-14 00:00:00" fixdate="2015-11-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow dropping COMPACT STORAGE flag from tables in 3.X</summary>
      <description>Thrift allows users to define flexible mixed column families - where certain columns would have explicitly pre-defined names, potentially non-default validation types, and be indexed.Example:create column family foo and default_validation_class = UTF8Type and column_metadata = [ {column_name: bar, validation_class: Int32Type, index_type: KEYS}, {column_name: baz, validation_class: UUIDType, index_type: KEYS} ];Columns named bar and baz will be validated as Int32Type and UUIDType, respectively, and be indexed. Columns with any other name will be validated by UTF8Type and will not be indexed.With CASSANDRA-8099, bar and baz would be mapped to static columns internally. However, being WITH COMPACT STORAGE, the table will only expose bar and baz columns. Accessing any dynamic columns (any column not named bar and baz) right now requires going through Thrift.This is blocking Thrift -&gt; CQL migration for users who have mixed dynamic/static column families. That said, it shouldn't be hard to allow users to drop the compact flag to expose the table as it is internally now, and be able to access all columns.</description>
      <version>3.0.16,3.11.2</version>
      <fixedVersion>Legacy/CQL,Legacy/DistributedMetadata</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateTableStatement.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.ViewTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.AlterTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.UserTypesTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.UFTest.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.messages.StartupMessage.java</file>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftValidation.java</file>
      <file type="M">src.java.org.apache.cassandra.service.ClientState.java</file>
      <file type="M">src.java.org.apache.cassandra.repair.RepairRunnable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.view.View.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.UseStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.TruncateStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SchemaAlteringStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ParsedStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ModificationStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.DropFunctionStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateViewStatement.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">src.antlr.Parser.g</file>
      <file type="M">src.java.org.apache.cassandra.db.SystemKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.index.internal.keys.KeysSearcher.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.SchemaKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.TableMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.service.CassandraDaemon.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.LargeCompactValueTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.SimpleQueryTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.CollectionsTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.CountersTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.FrozenCollectionsTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.miscellaneous.OverflowTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.AggregationTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.BatchTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.CreateTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.DeleteTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.InsertTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectGroupByTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectLimitTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectMultiColumnRelationTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectOrderByTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectOrderedPartitionerTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectSingleColumnRelationTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.UpdateTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.ColumnFamilyStoreCQLHelperTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.partition.PartitionUpdateTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.ScrubTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.index.internal.CassandraIndexTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.index.SecondaryIndexManagerTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.io.sstable.LegacySSTableTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.SchemaLoader.java</file>
      <file type="M">tools.stress.src.org.apache.cassandra.stress.settings.SettingsSchema.java</file>
      <file type="M">bin.cqlsh.py</file>
      <file type="M">doc.native.protocol.v4.spec</file>
      <file type="M">lib.cassandra-driver-internal-only-3.7.1.post0-19c1603.zip</file>
      <file type="M">src.java.org.apache.cassandra.auth.CassandraRoleManager.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">src.java.org.apache.cassandra.cql3.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.AlterTableStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.AuthenticationStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.AuthorizationStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.BatchStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateAggregateStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateFunctionStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateIndexStatement.java</file>
    </fixedFiles>
  </bug>
  <bug id="13006" opendate="2016-12-6 00:00:00" fixdate="2016-12-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Disable automatic heap dumps on OOM error</summary>
      <description>With CASSANDRA-9861, a change was added to enable collecting heap dumps by default if the process encountered an OOM error. These heap dumps are stored in the Apache Cassandra home directory unless configured otherwise (see Cassandra Support Document for this feature). The creation and storage of heap dumps aides debugging and investigative workflows, but is not be desirable for a production environment where these heap dumps may occupy a large amount of disk space and require manual intervention for cleanups.  Managing heap dumps on out of memory errors and configuring the paths for these heap dumps are available as JVM options in JVM. The current behavior conflicts with the Boolean JVM flag HeapDumpOnOutOfMemoryError.  A patch can be proposed here that would make the heap dump on OOM error honor the HeapDumpOnOutOfMemoryError flag. Users who would want to still generate heap dumps on OOM errors can set the -XX:+HeapDumpOnOutOfMemoryError JVM option.</description>
      <version>2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Local/Config</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.utils.JVMStabilityInspectorTest.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.JVMStabilityInspector.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.HeapUtils.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StartupChecks.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">conf.cassandra-env.sh</file>
      <file type="M">conf.cassandra-env.ps1</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cassandra</file>
    </fixedFiles>
  </bug>
  <bug id="13526" opendate="2017-5-11 00:00:00" fixdate="2017-12-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool cleanup on KS with no replicas should remove old data, not silently complete</summary>
      <description>From the user list:https://lists.apache.org/thread.html/5d49cc6bbc6fd2e5f8b12f2308a3e24212a55afbb441af5cb8cd4167@%3Cuser.cassandra.apache.org%3EIf you have a multi-dc cluster, but some keyspaces not replicated to a given DC, you'll be unable to run cleanup on those keyspaces in that DC, because the cleanup code will see no ranges and exit early</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Local/Compaction</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.CleanupTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13528" opendate="2017-5-12 00:00:00" fixdate="2017-1-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool describeclusters shows different snitch info as to what is configured.</summary>
      <description>I couldn't find any similar issue as this one so I'm creating one.I noticed that doing nodetool describecluster shows a different Snitch Information as to what is being set in the configuration file.My setup is hosted in AWS and I am using Ec2Snitch.cassandra@cassandra3$ nodetool describeclusterCluster Information: Name: testv3 Snitch: org.apache.cassandra.locator.DynamicEndpointSnitch Partitioner: org.apache.cassandra.dht.Murmur3Partitioner Schema versions: fc6e8656-ee7a-341b-9782-b569d1fd1a51: &amp;#91;10.0.3.61,10.0.3.62,10.0.3.63&amp;#93;I checked via MX4J and it shows the same, I haven't verified tho using a different Snitch and I am using 2.2.6 above and 3.0.X</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.nodetool.DescribeCluster.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.EndpointSnitchInfoMBean.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13873" opendate="2017-9-14 00:00:00" fixdate="2017-12-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ref bug in Scrub</summary>
      <description>I'm hitting a Ref bug when many scrubs run against a node. This doesn't happen on 3.0.X. I'm not sure if/if not this happens with compactions too but I suspect it does.I'm not seeing any Ref leaks or double frees.To Reproduce:./tools/bin/cassandra-stress write n=10m -rate threads=100./bin/nodetool scrub#Ctrl-C./bin/nodetool scrub#Ctrl-C./bin/nodetool scrub#Ctrl-C./bin/nodetool scrubEventually in the logs you get:WARN &amp;#91;RMI TCP Connection(4)-127.0.0.1&amp;#93; 2017-09-14 15:51:26,722 NoSpamLogger.java:97 - Spinning trying to capture readers &amp;#91;BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-5-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-32-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-31-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-29-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-27-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-26-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-20-big-Data.db&amp;#39;)&amp;#93;,released: &amp;#91;BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-5-big-Data.db&amp;#39;)&amp;#93;, This released table has a selfRef of 0 but is in the Tracker</description>
      <version>2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.IndexSummaryRedistribution.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13916" opendate="2017-9-28 00:00:00" fixdate="2017-12-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove OpenJDK log warning</summary>
      <description>The following warning message will appear in the logs when using OpenJDKWARN [main] ... OpenJDK is not recommended. Please upgrade to the newest Oracle Java releaseThe above warning dates back to when OpenJDK 6 was released and there were some issues in early releases of this version. The OpenJDK implementation is used as a reference for the OracleJDK which means the implementations are very close. In addition, most users have moved off Java 6 so we can probably remove this warning message.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StartupChecks.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13922" opendate="2017-10-2 00:00:00" fixdate="2017-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool verify should also verify sstable metadata</summary>
      <description>nodetool verify should also try to deserialize the sstable metadata (and once CASSANDRA-13321 makes it in, verify the checksums)</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.VerifyTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Verifier.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13930" opendate="2017-10-3 00:00:00" fixdate="2017-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid grabbing the read lock when checking LCS fanout and if compaction strategy should do defragmentation</summary>
      <description>We grab the read lock when checking whether the compaction strategy benefits from defragmentation, avoid that.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Local/Compaction</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionStrategyManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13933" opendate="2017-10-4 00:00:00" fixdate="2017-2-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Handle mutateRepaired failure in nodetool verify</summary>
      <description>See comment here: https://issues.apache.org/jira/browse/CASSANDRA-13922?focusedCommentId=16189875&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16189875</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Verifier.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13954" opendate="2017-10-13 00:00:00" fixdate="2017-10-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Provide a JMX call to sync schema with local storage</summary>
      <description>As discussed in CASSANDRA-13813 comments, we need such a call / nodetool command to enable the workaround for CASSANDRA-12701.This is technically a new feature and shouldn't go into 3.0.x, however in practical terms it's part of a solution to CASSANDRA-12701, which is a bug, and an pre-requisite for CASSANDRA-13813 - which is also a bug.</description>
      <version>3.0.16,3.11.2</version>
      <fixedVersion>Legacy/DistributedMetadata</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeTool.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.SchemaKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Schema.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="13987" opendate="2017-11-2 00:00:00" fixdate="2017-12-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Multithreaded commitlog subtly changed durability</summary>
      <description>When multithreaded commitlog was introduced in CASSANDRA-3578, we subtly changed the way that commitlog durability worked. Everything still gets written to an mmap file. However, not everything is replayable from the mmaped file after a process crash, in periodic mode.In brief, the reason this changesd is due to the chained markers that are required for the multithreaded commit log. At each msync, we wait for outstanding mutations to serialize into the commitlog, and update a marker before and after the commits that have accumluated since the last sync. With those markers, we can safely replay that section of the commitlog. Without the markers, we have no guarantee that the commits in that section were successfully written, thus we abandon those commits on replay.If you have correlated process failures of multiple nodes at "nearly" the same time (see "There Is No Now"), it is possible to have data loss if none of the nodes msync the commitlog. For example, with RF=3, if quorum write succeeds on two nodes (and we acknowledge the write back to the client), and then the process on both nodes OOMs (say, due to reading the index for a 100GB partition), the write will be lost if neither process msync'ed the commitlog. More exactly, the commitlog cannot be fully replayed. The reason why this data is silently lost is due to the chained markers that were introduced with CASSANDRA-3578.The problem we are addressing with this ticket is incrementally improving 'durability' due to process crash, not host crash. (Note: operators should use batch mode to ensure greater durability, but batch mode in it's current implementation is a) borked, and b) will burn through, very rapidly, SSDs that don't have a non-volatile write cache sitting in front.) The current default for commitlog_sync_period_in_ms is 10 seconds, which means that a node could lose up to ten seconds of data due to process crash. The unfortunate thing is that the data is still avaialble, in the mmap file, but we can't replay it due to incomplete chained markers.ftr, I don't believe we've ever had a stated policy about commitlog durability wrt process crash. Pre-2.0 we naturally piggy-backed off the memory mapped file and the fact that every mutation was acquired a lock and wrote into the mmap buffer, and the ability to replay everything out of it came for free. With CASSANDRA-3578, that was subtly changed. Something jjirsa pointed out to me is that MySQL provides a way to adjust the durability guarantees of each commit in innodb via the innodb_flush_log_at_trx_commit. I'm using that idea as a loose springboard for what to do here.</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogTestReplayer.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogSegmentBackpressureTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.PeriodicCommitLogService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.MemoryMappedSegment.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CompressedSegment.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLogSegment.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLog.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.AbstractCommitLogService.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14008" opendate="2017-11-10 00:00:00" fixdate="2017-12-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>RTs at index boundaries in 2.x sstables can create unexpected CQL row in 3.x</summary>
      <description>In 2.1/2.2, it is possible for a range tombstone that isn't a row deletion and isn't a complex deletion to appear between two cells with the same clustering. The 8099 legacy code incorrectly treats the two (non-RT) cells as two distinct CQL rows, despite having the same clustering prefix.</description>
      <version>3.0.16,3.11.2</version>
      <fixedVersion>Legacy/LocalWrite-ReadPaths</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.LegacyLayoutTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.LegacyLayout.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14010" opendate="2017-11-13 00:00:00" fixdate="2017-12-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix SStable ordering by max timestamp in SinglePartitionReadCommand</summary>
      <description>We have a test environment were we drop and create keyspaces and tables several times within a short time frame. Since upgrading from 3.11.0 to 3.11.1, we are seeing a lot of create statements failing. See the logs below:2017-11-13T14:29:20.037986449Z WARN Directory /tmp/ramdisk/commitlog doesn't exist2017-11-13T14:29:20.038009590Z WARN Directory /tmp/ramdisk/saved_caches doesn't exist2017-11-13T14:29:20.094337265Z INFO Initialized prepared statement caches with 10 MB (native) and 10 MB (Thrift)2017-11-13T14:29:20.805946340Z INFO Initializing system.IndexInfo2017-11-13T14:29:21.934686905Z INFO Initializing system.batches2017-11-13T14:29:21.973914733Z INFO Initializing system.paxos2017-11-13T14:29:21.994550268Z INFO Initializing system.local2017-11-13T14:29:22.014097194Z INFO Initializing system.peers2017-11-13T14:29:22.124211254Z INFO Initializing system.peer_events2017-11-13T14:29:22.153966833Z INFO Initializing system.range_xfers2017-11-13T14:29:22.174097334Z INFO Initializing system.compaction_history2017-11-13T14:29:22.194259920Z INFO Initializing system.sstable_activity2017-11-13T14:29:22.210178271Z INFO Initializing system.size_estimates2017-11-13T14:29:22.223836992Z INFO Initializing system.available_ranges2017-11-13T14:29:22.237854207Z INFO Initializing system.transferred_ranges2017-11-13T14:29:22.253995621Z INFO Initializing system.views_builds_in_progress2017-11-13T14:29:22.264052481Z INFO Initializing system.built_views2017-11-13T14:29:22.283334779Z INFO Initializing system.hints2017-11-13T14:29:22.304110311Z INFO Initializing system.batchlog2017-11-13T14:29:22.318031950Z INFO Initializing system.prepared_statements2017-11-13T14:29:22.326547917Z INFO Initializing system.schema_keyspaces2017-11-13T14:29:22.337097407Z INFO Initializing system.schema_columnfamilies2017-11-13T14:29:22.354082675Z INFO Initializing system.schema_columns2017-11-13T14:29:22.384179063Z INFO Initializing system.schema_triggers2017-11-13T14:29:22.394222027Z INFO Initializing system.schema_usertypes2017-11-13T14:29:22.414199833Z INFO Initializing system.schema_functions2017-11-13T14:29:22.427205182Z INFO Initializing system.schema_aggregates2017-11-13T14:29:22.427228345Z INFO Not submitting build tasks for views in keyspace system as storage service is not initialized2017-11-13T14:29:22.652838866Z INFO Scheduling approximate time-check task with a precision of 10 milliseconds2017-11-13T14:29:22.732862906Z INFO Initializing system_schema.keyspaces2017-11-13T14:29:22.746598744Z INFO Initializing system_schema.tables2017-11-13T14:29:22.759649011Z INFO Initializing system_schema.columns2017-11-13T14:29:22.766245435Z INFO Initializing system_schema.triggers2017-11-13T14:29:22.778716809Z INFO Initializing system_schema.dropped_columns2017-11-13T14:29:22.791369819Z INFO Initializing system_schema.views2017-11-13T14:29:22.839141724Z INFO Initializing system_schema.types2017-11-13T14:29:22.852911976Z INFO Initializing system_schema.functions2017-11-13T14:29:22.852938112Z INFO Initializing system_schema.aggregates2017-11-13T14:29:22.869348526Z INFO Initializing system_schema.indexes2017-11-13T14:29:22.874178682Z INFO Not submitting build tasks for views in keyspace system_schema as storage service is not initialized2017-11-13T14:29:23.700250435Z INFO Initializing key cache with capacity of 25 MBs.2017-11-13T14:29:23.724357053Z INFO Initializing row cache with capacity of 0 MBs2017-11-13T14:29:23.724383599Z INFO Initializing counter cache with capacity of 12 MBs2017-11-13T14:29:23.724386906Z INFO Scheduling counter cache save to every 7200 seconds (going to save all keys).2017-11-13T14:29:23.984408710Z INFO Populating token metadata from system tables2017-11-13T14:29:24.032687075Z INFO Global buffer pool is enabled, when pool is exhausted (max is 125.000MiB) it will allocate on heap2017-11-13T14:29:24.214123695Z INFO Token metadata:2017-11-13T14:29:24.304218769Z INFO Completed loading (14 ms; 8 keys) KeyCache cache2017-11-13T14:29:24.363978406Z INFO No commitlog files found; skipping replay2017-11-13T14:29:24.364005238Z INFO Populating token metadata from system tables2017-11-13T14:29:24.394408476Z INFO Token metadata:2017-11-13T14:29:24.709411652Z INFO Preloaded 0 prepared statements2017-11-13T14:29:24.719332880Z INFO Cassandra version: 3.11.12017-11-13T14:29:24.719355969Z INFO Thrift API version: 20.1.02017-11-13T14:29:24.719359443Z INFO CQL supported versions: 3.4.4 (default: 3.4.4)2017-11-13T14:29:24.719362103Z INFO Native protocol supported versions: 3/v3, 4/v4, 5/v5-beta (default: 4/v4)2017-11-13T14:29:24.766102400Z INFO Initializing index summary manager with a memory pool size of 25 MB and a resize interval of 60 minutes2017-11-13T14:29:24.778800183Z INFO Starting Messaging Service on /172.17.0.2:7000 (eth0)2017-11-13T14:29:24.783832188Z WARN No host ID found, created 62452b7c-33ae-40e6-859c-1d7c803aaea8 (Note: This should happen exactly once per node).2017-11-13T14:29:24.897281778Z INFO Loading persisted ring state2017-11-13T14:29:24.904217782Z INFO Starting up server gossip2017-11-13T14:29:25.003802973Z INFO This node will not auto bootstrap because it is configured to be a seed node.2017-11-13T14:29:25.047674499Z INFO Generated random tokens. tokens are [-6736304773851341012, 3437071596424929702, 4372058337604769145, -306854781937968525, -4419476154597297006, 4339837665480866486, 2052026232731139893, -5761537575805252593, -4477540978357776290, 6263754683045286998, 3670054894619378302, -4326549778810780939, 7187409938161102814, 7030537377703307755, -2757270254308154659, -1953637968902719055, -7235425703069930259, 7123794193321014835, 349308827967095711, 997472983569031481, 992257140226393205, -4045122629441468253, 4149955653388319941, -3690032393349188278, 3528068129562283633, -5057394127379238561, -4944743272177354946, 1371473468273321389, -2771267888257678908, -2379074055482922854, 8800628062632970014, 6016352719444925532, -6458243637210081043, -7131512441131507433, -6135681286390467242, -7886878247827491401, -3964432859204941604, -7124853795154335905, 4536647221115220987, 4518363137218750861, -3945920538919881061, -8569890499152898728, -2228677668104169495, -4004623128783039030, -6849460601197629451, -1787645289665343374, -9004089114738085395, -8444847561386064840, -7719025430480017932, -5020575591450775929, -3535144847803187721, 7252524597471726426, -2582131369519057623, 3737595811793840609, -7248797595897252845, -7065188032269288840, -6731826791431802176, -2970075663731571587, -2619987499373344925, -2698285069650269138, -8589822844420136511, 2658120945314344720, -3710290429036098141, 134530136452862749, 3703742438909992913, 3460544540911930621, 8673891706698173777, 2853177281247015813, 13977464647778584, 2404057737490125388, -6759648287860184451, 744453319830059045, -688104893800828924, 3356383003502762348, 9054641886966810357, 2317130729058165506, -5810663910204725460, 2577132949237273515, 6326216055185945365, 1376570278575995967, 8758101809469842945, -2892126907778256351, -1716283861287440286, 3040640159143123724, 4243935966006505554, -6827972097309863039, 3055912546894309570, -3992773844369808712, -4717007910267923035, -846198401308205724, -3924870907185309086, 1746803312676010060, 6821355560067598541, -5786385588878319458, 3085551110635941848, 7832310180114101987, -9149254679798945822, 3124836728424468300, -100875121723899324, -7606007094353527325, 270256410769436649, -3016541299722946307, 6864985654287583845, 8465468836551135602, 7372808321676939792, -2815261206329145311, -2044219183173664775, -5342853768228072396, 3636940711408324184, -2772742494800447004, -8420993393273439531, -1530882172522252534, 8236427746033013128, -8939749738449264357, -571957476330656311, 6462994120934510138, -2744633996286755268, 1001793370994802364, 6170004027360887596, 383603396273760626, 184737756504479596, -4799447088893889554, 1038205033737034383, 2078124248957773983, -5177819727898656480, 1588469358432181111, 2476693400197902714, 246839957213783595, -7804622995667946321, 3516202677463047183, 7649126752776473673, -3286662198144050257, 2592926684883421936, 6953901594207876325, 8920684239689152479, -2427878301857439455, -6527468054932471540, -4117125961852289967, -2833593154725933249, 2548273043767381234, -814886098184093796, -1113961241682560435, -8364806058670744019, -86067309810855914, -7325813350040495905, -2651532619332818109, -3028501296208600216, 2638649530375347897, -3870517833780069551, 3770751443844709295, -7272035856681375921, -6750394828506790417, 3368553496734537183, 8516129492713951191, 4435960977618718666, 638690551817702460, -7462842134093200053, -7312636473795422279, 3825550639500258186, -490674188267611204, 8488259904981422083, 4436678791994058329, 5971819389544487212, 5777643219857256454, 6295906877222880293, -6635403410495817577, -7125973103119231247, 2275471188158109929, -6554337501188391642, -4759608795508681126, -7655250005358224912, 9106670136441382451, -9080117178764089351, 5094764588972879219, -3599769156391426161, 6116955962236377408, -1734768840951819839, 7826627278264825770, -2624139016757063818, -4122417151587476614, -6757251857390630385, 2099124804383862824, -3162332634454027278, 4826222794133551270, 9122652158513265055, 1734656138981660315, 972980826344778639, -1746779194020635548, -3426944282250211269, -3857828063692993065, 1895243495321867610, -8828035583443240909, -4705856469629722102, -8519546521146945353, -2150150551733933931, 8281585304878501119, -2775028105733898661, 2087277989579187052, -4016777313261130077, 2747128117959922334, -1398884803916585873, 7188260080368469340, -3880993098463994199, 3574665846011083154, 5260683239918360122, 5817587463499837044, 38978473621576635, 2680910834841463710, 6083561971466189055, 7236937177408808074, -3600112532662592989, -4559800196660261967, 8276688045060113438, 5496539762676760591, -2999626688519766687, 8917068693185637310, 2348378561310644717, 7605443413072783308, 5729359499569394810, -782345069306605591, 1165004403533704355, -8301882560002322767, 2008499890787626408, -6211027251975593898, 7406423735628820605, -3204398339633370684, -7917412446164112725, -106645076087724250, -1186720400780396653, -8676089669972641821, -1970508303671183113, -7283082875075535628, -3469652138221449481, -3310949358194646693, 6449384223770405185, -3602652844861890703, -7845236015467185307, -4548809972889727666, -8898627491921139823, 5187965699546741544, 295363921125698104, -8013235493809339368, -6747271362503076577, 1102625310233591704, -2543233385033476145, -6197912327393001665, 118165474822979356, -4838870266722406438, -5797141823778124932, -1506683916229985698, 9139710449103348665, -1571612701117454805, 8031141543284728427, 8472337544063987034, 3222463867738580103, 8210687258187437204]2017-11-13T14:29:25.092248590Z INFO Create new Keyspace: KeyspaceMetadata{name=system_traces, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=2}}, tables=[org.apache.cassandra.config.CFMetaData@3bc5ed95[cfId=c5e99f16-8677-3914-b17e-960613512345,ksName=system_traces,cfName=sessions,flags=[COMPOUND],params=TableParams{comment=tracing sessions, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=0, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(),partitionColumns=[[] | [client command coordinator duration request started_at parameters]],partitionKeyColumns=[session_id],clusteringColumns=[],keyValidator=org.apache.cassandra.db.marshal.UUIDType,columnMetadata=[client, command, session_id, coordinator, request, started_at, duration, parameters],droppedColumns={},triggers=[],indexes=[]], org.apache.cassandra.config.CFMetaData@1a296ffd[cfId=8826e8e9-e16a-3728-8753-3bc1fc713c25,ksName=system_traces,cfName=events,flags=[COMPOUND],params=TableParams{comment=tracing events, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=0, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(org.apache.cassandra.db.marshal.TimeUUIDType),partitionColumns=[[] | [activity source source_elapsed thread]],partitionKeyColumns=[session_id],clusteringColumns=[event_id],keyValidator=org.apache.cassandra.db.marshal.UUIDType,columnMetadata=[activity, event_id, session_id, source, thread, source_elapsed],droppedColumns={},triggers=[],indexes=[]]], views=[], functions=[], types=[]}2017-11-13T14:29:25.394141160Z INFO Not submitting build tasks for views in keyspace system_traces as storage service is not initialized2017-11-13T14:29:25.408584506Z INFO Initializing system_traces.events2017-11-13T14:29:25.424314845Z INFO Initializing system_traces.sessions2017-11-13T14:29:25.483133136Z INFO Create new Keyspace: KeyspaceMetadata{name=system_distributed, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=3}}, tables=[org.apache.cassandra.config.CFMetaData@2884b38b[cfId=759fffad-624b-3181-80ee-fa9a52d1f627,ksName=system_distributed,cfName=repair_history,flags=[COMPOUND],params=TableParams{comment=Repair history, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=864000, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(org.apache.cassandra.db.marshal.TimeUUIDType),partitionColumns=[[] | [coordinator exception_message exception_stacktrace finished_at parent_id range_begin range_end started_at status participants]],partitionKeyColumns=[keyspace_name, columnfamily_name],clusteringColumns=[id],keyValidator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),columnMetadata=[status, id, coordinator, finished_at, participants, exception_stacktrace, parent_id, range_end, range_begin, exception_message, keyspace_name, started_at, columnfamily_name],droppedColumns={},triggers=[],indexes=[]], org.apache.cassandra.config.CFMetaData@7fcc80b2[cfId=deabd734-b99d-3b9c-92e5-fd92eb5abf14,ksName=system_distributed,cfName=parent_repair_history,flags=[COMPOUND],params=TableParams{comment=Repair history, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=864000, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(),partitionColumns=[[] | [exception_message exception_stacktrace finished_at keyspace_name started_at columnfamily_names options requested_ranges successful_ranges]],partitionKeyColumns=[parent_id],clusteringColumns=[],keyValidator=org.apache.cassandra.db.marshal.TimeUUIDType,columnMetadata=[requested_ranges, exception_message, keyspace_name, successful_ranges, started_at, finished_at, options, exception_stacktrace, parent_id, columnfamily_names],droppedColumns={},triggers=[],indexes=[]], org.apache.cassandra.config.CFMetaData@7e500004[cfId=5582b59f-8e4e-35e1-b913-3acada51eb04,ksName=system_distributed,cfName=view_build_status,flags=[COMPOUND],params=TableParams{comment=Materialized View build status, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=864000, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(org.apache.cassandra.db.marshal.UUIDType),partitionColumns=[[] | [status]],partitionKeyColumns=[keyspace_name, view_name],clusteringColumns=[host_id],keyValidator=org.apache.cassandra.db.marshal.CompositeType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type),columnMetadata=[view_name, status, keyspace_name, host_id],droppedColumns={},triggers=[],indexes=[]]], views=[], functions=[], types=[]}2017-11-13T14:29:25.598604284Z INFO Not submitting build tasks for views in keyspace system_distributed as storage service is not initialized2017-11-13T14:29:25.602132560Z INFO Initializing system_distributed.parent_repair_history2017-11-13T14:29:25.624580018Z INFO Initializing system_distributed.repair_history2017-11-13T14:29:25.624605811Z INFO Initializing system_distributed.view_build_status2017-11-13T14:29:25.682205208Z INFO JOINING: Finish joining ring2017-11-13T14:29:25.808448539Z INFO Create new Keyspace: KeyspaceMetadata{name=system_auth, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=1}}, tables=[org.apache.cassandra.config.CFMetaData@3c28c0da[cfId=5bc52802-de25-35ed-aeab-188eecebb090,ksName=system_auth,cfName=roles,flags=[COMPOUND],params=TableParams{comment=role definitions, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=7776000, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(),partitionColumns=[[] | [can_login is_superuser salted_hash member_of]],partitionKeyColumns=[role],clusteringColumns=[],keyValidator=org.apache.cassandra.db.marshal.UTF8Type,columnMetadata=[salted_hash, member_of, role, can_login, is_superuser],droppedColumns={},triggers=[],indexes=[]], org.apache.cassandra.config.CFMetaData@2e0f771e[cfId=0ecdaa87-f8fb-3e60-88d1-74fb36fe5c0d,ksName=system_auth,cfName=role_members,flags=[COMPOUND],params=TableParams{comment=role memberships lookup table, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=7776000, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(org.apache.cassandra.db.marshal.UTF8Type),partitionColumns=[[] | []],partitionKeyColumns=[role],clusteringColumns=[member],keyValidator=org.apache.cassandra.db.marshal.UTF8Type,columnMetadata=[role, member],droppedColumns={},triggers=[],indexes=[]], org.apache.cassandra.config.CFMetaData@4fabdebb[cfId=3afbe79f-2194-31a7-add7-f5ab90d8ec9c,ksName=system_auth,cfName=role_permissions,flags=[COMPOUND],params=TableParams{comment=permissions granted to db roles, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=7776000, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(org.apache.cassandra.db.marshal.UTF8Type),partitionColumns=[[] | [permissions]],partitionKeyColumns=[role],clusteringColumns=[resource],keyValidator=org.apache.cassandra.db.marshal.UTF8Type,columnMetadata=[role, resource, permissions],droppedColumns={},triggers=[],indexes=[]], org.apache.cassandra.config.CFMetaData@7103b8de[cfId=5f2fbdad-91f1-3946-bd25-d5da3a5c35ec,ksName=system_auth,cfName=resource_role_permissons_index,flags=[COMPOUND],params=TableParams{comment=index of db roles with permissions granted on a resource, read_repair_chance=0.0, dclocal_read_repair_chance=0.0, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=7776000, default_time_to_live=0, memtable_flush_period_in_ms=3600000, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(org.apache.cassandra.db.marshal.UTF8Type),partitionColumns=[[] | []],partitionKeyColumns=[resource],clusteringColumns=[role],keyValidator=org.apache.cassandra.db.marshal.UTF8Type,columnMetadata=[resource, role],droppedColumns={},triggers=[],indexes=[]]], views=[], functions=[], types=[]}2017-11-13T14:29:25.934019252Z INFO Not submitting build tasks for views in keyspace system_auth as storage service is not initialized2017-11-13T14:29:25.953887674Z INFO Initializing system_auth.resource_role_permissons_index2017-11-13T14:29:25.957358898Z INFO Initializing system_auth.role_members2017-11-13T14:29:25.967935061Z INFO Initializing system_auth.role_permissions2017-11-13T14:29:25.995449692Z INFO Initializing system_auth.roles2017-11-13T14:29:26.193856408Z INFO Netty using native Epoll event loop2017-11-13T14:29:26.247676724Z INFO Using Netty Version: [netty-buffer=netty-buffer-4.0.44.Final.452812a, netty-codec=netty-codec-4.0.44.Final.452812a, netty-codec-haproxy=netty-codec-haproxy-4.0.44.Final.452812a, netty-codec-http=netty-codec-http-4.0.44.Final.452812a, netty-codec-socks=netty-codec-socks-4.0.44.Final.452812a, netty-common=netty-common-4.0.44.Final.452812a, netty-handler=netty-handler-4.0.44.Final.452812a, netty-tcnative=netty-tcnative-1.1.33.Fork26.142ecbb, netty-transport=netty-transport-4.0.44.Final.452812a, netty-transport-native-epoll=netty-transport-native-epoll-4.0.44.Final.452812a, netty-transport-rxtx=netty-transport-rxtx-4.0.44.Final.452812a, netty-transport-sctp=netty-transport-sctp-4.0.44.Final.452812a, netty-transport-udt=netty-transport-udt-4.0.44.Final.452812a]2017-11-13T14:29:26.247705469Z INFO Starting listening for CQL clients on /0.0.0.0:9042 (unencrypted)...2017-11-13T14:29:26.309591159Z INFO Not starting RPC server as requested. Use JMX (StorageService-&gt;startRPCServer()) or nodetool (enablethrift) to start it2017-11-13T14:29:36.275846037Z INFO Created default superuser role 'cassandra'2017-11-13T14:29:40.333918591Z INFO Create new Keyspace: KeyspaceMetadata{name=my_keyspace, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=1}}, tables=[], views=[], functions=[], types=[]}2017-11-13T14:29:40.434399612Z INFO Create new table: org.apache.cassandra.config.CFMetaData@c74a94b[cfId=1572b410-c87f-11e7-9db1-6d2c86545d91,ksName=my_keyspace,cfName=schema_version,flags=[COMPOUND],params=TableParams{comment=, read_repair_chance=0.0, dclocal_read_repair_chance=0.1, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=864000, default_time_to_live=0, memtable_flush_period_in_ms=0, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(),partitionColumns=[[] | [migration_lock version]],partitionKeyColumns=[id],clusteringColumns=[],keyValidator=org.apache.cassandra.db.marshal.Int32Type,columnMetadata=[migration_lock, version, id],droppedColumns={},triggers=[],indexes=[]]2017-11-13T14:29:40.566922871Z INFO Initializing my_keyspace.schema_version2017-11-13T14:29:42.719380089Z INFO Drop Keyspace 'my_keyspace'2017-11-13T14:29:43.124510221Z INFO Create new Keyspace: KeyspaceMetadata{name=my_keyspace, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=1}}, tables=[], views=[], functions=[], types=[]}2017-11-13T14:29:43.243928493Z INFO Create new table: org.apache.cassandra.config.CFMetaData@1a0616e9[cfId=171e8f50-c87f-11e7-9db1-6d2c86545d91,ksName=my_keyspace,cfName=schema_version,flags=[COMPOUND],params=TableParams{comment=, read_repair_chance=0.0, dclocal_read_repair_chance=0.1, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=864000, default_time_to_live=0, memtable_flush_period_in_ms=0, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(),partitionColumns=[[] | [migration_lock version]],partitionKeyColumns=[id],clusteringColumns=[],keyValidator=org.apache.cassandra.db.marshal.Int32Type,columnMetadata=[migration_lock, version, id],droppedColumns={},triggers=[],indexes=[]]2017-11-13T14:29:43.284700491Z INFO Initializing my_keyspace.schema_version2017-11-13T14:29:44.706916652Z INFO Drop Keyspace 'my_keyspace'2017-11-13T14:29:44.924446999Z INFO Create new Keyspace: KeyspaceMetadata{name=my_keyspace, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=1}}, tables=[], views=[], functions=[], types=[]}2017-11-13T14:29:44.993983743Z INFO Create new table: org.apache.cassandra.config.CFMetaData@7338ccab[cfId=182996b0-c87f-11e7-9db1-6d2c86545d91,ksName=my_keyspace,cfName=schema_version,flags=[COMPOUND],params=TableParams{comment=, read_repair_chance=0.0, dclocal_read_repair_chance=0.1, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=864000, default_time_to_live=0, memtable_flush_period_in_ms=0, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(),partitionColumns=[[] | [migration_lock version]],partitionKeyColumns=[id],clusteringColumns=[],keyValidator=org.apache.cassandra.db.marshal.Int32Type,columnMetadata=[migration_lock, version, id],droppedColumns={},triggers=[],indexes=[]]2017-11-13T14:29:45.078407254Z INFO Initializing my_keyspace.schema_version2017-11-13T14:29:46.244137923Z INFO Drop Keyspace 'my_keyspace'2017-11-13T14:29:46.500351100Z INFO Create new Keyspace: KeyspaceMetadata{name=my_keyspace, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=1}}, tables=[], views=[], functions=[], types=[]}2017-11-13T14:29:46.575419551Z INFO Create new table: org.apache.cassandra.config.CFMetaData@229f3694[cfId=191b97d0-c87f-11e7-9db1-6d2c86545d91,ksName=my_keyspace,cfName=schema_version,flags=[COMPOUND],params=TableParams{comment=, read_repair_chance=0.0, dclocal_read_repair_chance=0.1, bloom_filter_fp_chance=0.01, crc_check_chance=1.0, gc_grace_seconds=864000, default_time_to_live=0, memtable_flush_period_in_ms=0, min_index_interval=128, max_index_interval=2048, speculative_retry=99PERCENTILE, caching={'keys' : 'ALL', 'rows_per_partition' : 'NONE'}, compaction=CompactionParams{class=org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy, options={min_threshold=4, max_threshold=32}}, compression=org.apache.cassandra.schema.CompressionParams@4c3448a7, extensions={}, cdc=false},comparator=comparator(),partitionColumns=[[] | [migration_lock version]],partitionKeyColumns=[id],clusteringColumns=[],keyValidator=org.apache.cassandra.db.marshal.Int32Type,columnMetadata=[migration_lock, version, id],droppedColumns={},triggers=[],indexes=[]]2017-11-13T14:29:46.617101680Z ERROR Unexpected error during query2017-11-13T14:29:46.617126436Z java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.NullPointerException2017-11-13T14:29:46.617130194Z at org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:404) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617133358Z at org.apache.cassandra.service.MigrationManager.announce(MigrationManager.java:549) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617135966Z at org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(MigrationManager.java:356) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617138576Z at org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(MigrationManager.java:341) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617141018Z at org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(MigrationManager.java:321) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617143454Z at org.apache.cassandra.cql3.statements.CreateTableStatement.announceMigration(CreateTableStatement.java:89) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617145953Z at org.apache.cassandra.cql3.statements.SchemaAlteringStatement.execute(SchemaAlteringStatement.java:93) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617148372Z at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:224) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617150806Z at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:255) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617153201Z at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:240) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617155595Z at org.apache.cassandra.transport.messages.QueryMessage.execute(QueryMessage.java:116) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617157962Z at org.apache.cassandra.transport.Message$Dispatcher.channelRead0(Message.java:517) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617160377Z at org.apache.cassandra.transport.Message$Dispatcher.channelRead0(Message.java:410) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617162787Z at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.617166295Z at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:357) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.617168898Z at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:35) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.617171389Z at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:348) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.617173808Z at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_131]2017-11-13T14:29:46.617184008Z at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:162) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617186971Z at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:109) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617189340Z at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]2017-11-13T14:29:46.617191666Z Caused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException2017-11-13T14:29:46.617193951Z at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[na:1.8.0_131]2017-11-13T14:29:46.617196258Z at java.util.concurrent.FutureTask.get(FutureTask.java:192) ~[na:1.8.0_131]2017-11-13T14:29:46.617198553Z at org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:400) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617200927Z ... 20 common frames omitted2017-11-13T14:29:46.617203114Z Caused by: java.lang.NullPointerException: null2017-11-13T14:29:46.617205382Z at org.apache.cassandra.cql3.UntypedResultSet$Row.getBoolean(UntypedResultSet.java:273) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617207766Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspaceParams(SchemaKeyspace.java:956) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617210107Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspace(SchemaKeyspace.java:943) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617212462Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesOnly(SchemaKeyspace.java:937) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617214868Z at org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(SchemaKeyspace.java:1363) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617217261Z at org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(SchemaKeyspace.java:1342) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617220404Z at org.apache.cassandra.service.MigrationManager$1.runMayThrow(MigrationManager.java:567) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617222948Z at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617225287Z at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_131]2017-11-13T14:29:46.617227589Z at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_131]2017-11-13T14:29:46.617229894Z at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_131]2017-11-13T14:29:46.617232175Z at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_131]2017-11-13T14:29:46.617234514Z at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:81) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.617236990Z ... 1 common frames omitted2017-11-13T14:29:46.621331936Z ERROR Exception in thread Thread[MigrationStage:1,5,main]2017-11-13T14:29:46.621360645Z java.lang.NullPointerException: null2017-11-13T14:29:46.621364339Z at org.apache.cassandra.cql3.UntypedResultSet$Row.getBoolean(UntypedResultSet.java:273) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621373614Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspaceParams(SchemaKeyspace.java:956) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621376363Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspace(SchemaKeyspace.java:943) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621378927Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesOnly(SchemaKeyspace.java:937) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621381395Z at org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(SchemaKeyspace.java:1363) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621384992Z at org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(SchemaKeyspace.java:1342) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621387567Z at org.apache.cassandra.service.MigrationManager$1.runMayThrow(MigrationManager.java:567) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621390255Z at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621392722Z at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_131]2017-11-13T14:29:46.621395153Z at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_131]2017-11-13T14:29:46.621397502Z at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_131]2017-11-13T14:29:46.621399919Z at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_131]2017-11-13T14:29:46.621402347Z at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:81) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.621404867Z at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_131]2017-11-13T14:29:46.626625652Z ERROR Unexpected exception during request2017-11-13T14:29:46.626650886Z java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.NullPointerException2017-11-13T14:29:46.626654840Z at org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:404) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626658003Z at org.apache.cassandra.service.MigrationManager.announce(MigrationManager.java:549) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626660570Z at org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(MigrationManager.java:356) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626663155Z at org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(MigrationManager.java:341) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626665745Z at org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(MigrationManager.java:321) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626676412Z at org.apache.cassandra.cql3.statements.CreateTableStatement.announceMigration(CreateTableStatement.java:89) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626679497Z at org.apache.cassandra.cql3.statements.SchemaAlteringStatement.execute(SchemaAlteringStatement.java:93) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626682051Z at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:224) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626684610Z at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:255) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626687059Z at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:240) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626689495Z at org.apache.cassandra.transport.messages.QueryMessage.execute(QueryMessage.java:116) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626691956Z at org.apache.cassandra.transport.Message$Dispatcher.channelRead0(Message.java:517) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626694391Z at org.apache.cassandra.transport.Message$Dispatcher.channelRead0(Message.java:410) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626696869Z at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.626700811Z at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:357) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.626703433Z at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:35) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.626705926Z at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:348) [netty-all-4.0.44.Final.jar:4.0.44.Final]2017-11-13T14:29:46.626708464Z at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_131]2017-11-13T14:29:46.626710858Z at org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run(AbstractLocalAwareExecutorService.java:162) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626713448Z at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:109) [apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626715868Z at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]2017-11-13T14:29:46.626718281Z Caused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException2017-11-13T14:29:46.626720647Z at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[na:1.8.0_131]2017-11-13T14:29:46.626723006Z at java.util.concurrent.FutureTask.get(FutureTask.java:192) ~[na:1.8.0_131]2017-11-13T14:29:46.626725392Z at org.apache.cassandra.utils.FBUtilities.waitOnFuture(FBUtilities.java:400) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626727820Z ... 20 common frames omitted2017-11-13T14:29:46.626730100Z Caused by: java.lang.NullPointerException: null2017-11-13T14:29:46.626735106Z at org.apache.cassandra.cql3.UntypedResultSet$Row.getBoolean(UntypedResultSet.java:273) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626737800Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspaceParams(SchemaKeyspace.java:956) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626740362Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspace(SchemaKeyspace.java:943) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626742804Z at org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesOnly(SchemaKeyspace.java:937) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626745273Z at org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(SchemaKeyspace.java:1363) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626747719Z at org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(SchemaKeyspace.java:1342) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626750759Z at org.apache.cassandra.service.MigrationManager$1.runMayThrow(MigrationManager.java:567) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626753445Z at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626755900Z at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_131]2017-11-13T14:29:46.626758684Z at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_131]2017-11-13T14:29:46.626761055Z at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_131]2017-11-13T14:29:46.626763436Z at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_131]2017-11-13T14:29:46.626765871Z at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:81) ~[apache-cassandra-3.11.1.jar:3.11.1]2017-11-13T14:29:46.626768418Z ... 1 common frames omittedSteps to reproduce:1. Start cassandra2. Start cqlsh and paste the following in quick succession:USE system;DROP KEYSPACE IF EXISTS my_keyspace;CREATE KEYSPACE my_keyspace WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': 1};USE my_keyspace;CREATE TABLE schema_version (id int primary key, version int, migration_lock text);INSERT INTO schema_version (id, version) values (1, 0);3. Once fourth time or so , we'll see:cqlsh:system&gt; CREATE KEYSPACE my_keyspace WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': 1};ServerError: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.NullPointerExceptionorcqlsh:my_keyspace&gt; CREATE TABLE schema_version (id int primary key, version int, migration_lock text);ServerError: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.NullPointerException</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/LocalWrite-ReadPaths</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.SimpleQueryTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.SSTableReader.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14021" opendate="2017-11-15 00:00:00" fixdate="2017-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>test_pycodestyle_compliance - cqlsh_tests.cqlsh_tests.TestCqlsh code style errors</summary>
      <description>Once we commit CASSANDRA-14020, we'll need to cleanup all of the errors that pycodestyle has found to get the test passing</description>
      <version>2.1.20,2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.wcwidth.py</file>
      <file type="M">pylib.cqlshlib.pylexotron.py</file>
      <file type="M">pylib.cqlshlib.formatting.py</file>
      <file type="M">pylib.cqlshlib.displaying.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">pylib.cqlshlib.copyutil.py</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="14071" opendate="2017-11-27 00:00:00" fixdate="2017-12-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Materialized view on table with TTL issue</summary>
      <description>Materialized views that cluster by a column that is not part of table's PK and are created from tables that have default_time_to_live seems to malfunction.Having this tableCREATE TABLE sbutnariu.test_bug ( field1 smallint, field2 smallint, date timestamp, PRIMARY KEY ((field1), field2)) WITH default_time_to_live = 1000;and the materialized viewCREATE MATERIALIZED VIEW sbutnariu.test_bug_by_date AS SELECT * FROM sbutnariu.test_bug WHERE field1 IS NOT NULL AND field2 IS NOT NULL AND date IS NOT NULL PRIMARY KEY ((field1), date, field2) WITH CLUSTERING ORDER BY (date desc, field2 asc);After inserting 3 rows with same PK (should upsert), the materialized view will have 3 rows.insert into sbutnariu.test_bug(field1, field2, date) values (1, 2, toTimestamp(now()));insert into sbutnariu.test_bug(field1, field2, date) values (1, 2, toTimestamp(now()));insert into sbutnariu.test_bug(field1, field2, date) values (1, 2, toTimestamp(now()));select * from sbutnariu.test_bug; /*1 row*/select * from sbutnariu.test_bug_by_date;/*3 rows*/If I remove the ttl and try again, it works as expected:truncate sbutnariu.test_bug;alter table sbutnariu.test_bug with default_time_to_live = 0;select * from sbutnariu.test_bug; /*1 row*/select * from sbutnariu.test_bug_by_date;/*1 row*/I've tested on versions 3.0.14 and 3.0.15. The bug was introduced in 3.0.15, as in 3.0.14 it works as expected.</description>
      <version>3.0.16,3.11.2</version>
      <fixedVersion>Feature/MaterializedViews,Legacy/Coordination</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.long.org.apache.cassandra.cql3.ViewLongTest.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.JsonTransformer.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.TableParams.java</file>
      <file type="M">src.java.org.apache.cassandra.db.view.ViewUpdateGenerator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.LivenessInfo.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Attributes.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14079" opendate="2017-11-30 00:00:00" fixdate="2017-11-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Prevent compaction strategies from looping indefinitely</summary>
      <description>As a result of CASSANDRA-13948, LCS was looping indefinitely trying to generate the same candidates for SSTables which were not on the tracker.We should add a protection on compaction strategies against looping indefinitely to avoid similar bugs in the future.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledManifest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14082" opendate="2017-11-30 00:00:00" fixdate="2017-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do not expose compaction strategy index publicly</summary>
      <description>Before CASSANDRA-13215 we used the compaction strategy index to decide which disk to place a given sstable, but now we can get this directly from the disk boundary manager and keep the compaction strategy index internal only.This will ensure external consumers will use a consistent DiskBoundaries object to perform operations on multiple disks, rather than risking getting inconsistent indexes if the compaction strategy indexes change between successive calls to CSM.getCompactionStrategyIndex.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionStrategyManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="14083" opendate="2017-11-30 00:00:00" fixdate="2017-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid invalidating disk boundaries unnecessarily</summary>
      <description>We currently invalidate disk boundaries whenever instantiating a new replication strategy, but this is done whenever updating keyspace settings. Computing new boundaries is expensive and unnecessarily invalidating them will cause DiskBoundaries consumers to also invalidate their work unnecessarily. For instance, after CASSANDRA-13948 the CompactionStrategyManager will reload all compaction strategies when the boundaries are invalidated.In this case, we should only invalidate the disk boundaries when the replication settings change to avoid doing unnecessary work.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.DiskBoundaryManagerTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Keyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DiskBoundaryManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14084" opendate="2017-11-30 00:00:00" fixdate="2017-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Disks can be imbalanced during replace of same address when using JBOD</summary>
      <description>While investigating CASSANDRA-14083, I noticed that we use the pending ranges to calculate the disk boundaries when the node is bootstrapping.The problem is that when the node is replacing a node with the same address, it sets itself as normal locally (for other unrelated reasons), so the local ranges will be null and consequently the disk boundaries will be null. This will cause the sstables to be randomly spread across disks potentially causing imbalance.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DiskBoundaryManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14091" opendate="2017-12-1 00:00:00" fixdate="2017-12-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>DynamicSnitch creates a lot of garbage</summary>
      <description>The ExponentiallyDecayingReservoir snapshots we take during score updates generate a lot of garbage, and we call getSnapshot twice per endpoint when we only need to call it once.</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.locator.DynamicEndpointSnitch.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14094" opendate="2017-12-5 00:00:00" fixdate="2017-12-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid pointless calls to ThreadLocalRandom</summary>
      <description>In the compression paths, we probabilistically validate the checksum. In cases where the chance is 100%, we don’t need to call ThreadLocalRandom .</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.streaming.compress.CompressedInputStream.java</file>
      <file type="M">src.java.org.apache.cassandra.io.compress.CompressedRandomAccessReader.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14104" opendate="2017-12-11 00:00:00" fixdate="2017-12-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Index target doesn&amp;#39;t correctly recognise non-UTF column names after COMPACT STORAGE drop</summary>
      <description>Creating a compact storage table with dynamic composite type, then running ALTER TALBE ... DROP COMPACT STORAGE and then restarting the node will crash Cassandra node, since the Index Target is fetched using hashmap / strict equality. We need to fall back to linear search when index target can't be found (which should not be happening often).</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.DropCompactStorageThriftTest.java</file>
      <file type="M">src.java.org.apache.cassandra.index.internal.CassandraIndex.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14108" opendate="2017-12-12 00:00:00" fixdate="2017-12-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve commit log chain marker updating</summary>
      <description>CASSANDRA-13987 addressed the commit log behavior change that was introduced with CASSANDRA-3578. After that patch was committed, aweisberg did his own review and found a bug as well as having some concerns about the configuration. He and I discussed offline, and agreed on some improvements. Instead of requiring users to configure a deep, dark implementation detail like the commit log chained markers (via commitlog_marker_period_in_ms in the yaml), we decided it is best to eliminate thew configuration and always update the chained markers (when in periodic mode). The bug aweisberg found was when the chained marker update is not a value that evenly divides into the periodic sync mode value, we would not sync in an expected manner. For example if the marker interval is 9 seconds, and the sync interval is 10 seconds, we would update the markers at time9, but we would then sleep for another 9 seconds, and when we wake up at time18, it is then that we flush - 8 seconds later than we should have.</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogSegmentBackpressureTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogChainedMarkersTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.PeriodicCommitLogService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.AbstractCommitLogService.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14112" opendate="2017-12-13 00:00:00" fixdate="2017-12-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The inspectJvmOptions startup check can trigger some Exception on some JRE versions</summary>
      <description>adelapena pointed out that the Startup check added by CASSANDRA-13006 can cause some Exception if Cassandra is run on a non GA version.After investigation it seems that it can also be the case for major versions or some JRE 9 versions.</description>
      <version>2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StartupChecks.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14133" opendate="2017-12-21 00:00:00" fixdate="2017-12-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log file names of files streamed in to a node</summary>
      <description>We should log the file names of sstables streamed in to a node</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamReceiveTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="14140" opendate="2017-12-27 00:00:00" fixdate="2017-1-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add unittest for Schema migration change (CASSANDRA-14109)</summary>
      <description>It's a fairly big change, would be better to have a few unittest.</description>
      <version>3.11.2</version>
      <fixedVersion>Legacy/Testing</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.schema.SchemaKeyspaceTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.gms.GossiperTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.SchemaKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.VersionedValue.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14141" opendate="2017-12-28 00:00:00" fixdate="2017-1-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enable CDC unittest</summary>
      <description>Follow up for CASSANDRA-140662 CDC unittests are skipped in the normal test run, it has to be $ ant test-cdc to run the cdc test.The fix enables them in normal $ ant test</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Testing</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.CDCStatementTest.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14182" opendate="2018-1-22 00:00:00" fixdate="2018-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Sub-range selection for non-frozen collections should return null instead of empty</summary>
      <description>For non frozen collections, Cassandra cannot differentiate an empty collection from a null one. Due to that Cassandra returns always null for non-frozen empty collection.When selecting a sub range from a non-frozen collection, if the range does not contains any data an empty collection will be returned. It is counter intuitive and a null value should be returned instead.CREATE TABLE IF NOT EXISTS t (k int PRIMARY KEY, v set&lt;int&gt;);INSERT INTO t (k, v) VALUES (1, {});SELECT v FROM t; -- nullSELECT v[1] FROM t; -- nullSELECT v[1..] FROM t; -- nullINSERT INTO t (k, v) VALUES (1, {0});SELECT v FROM t; -- {0}SELECT v[1] FROM t; -- nullSELECT v[1..] FROM t; -- {}</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.CollectionsTest.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.SetSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.MapSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.ListSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.CollectionSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.selection.ElementsSelector.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14217" opendate="2018-2-6 00:00:00" fixdate="2018-2-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool verify needs to use the correct digest file and reload sstable metadata</summary>
      <description>nodetool verify tries to use the wrong digest file when verifying old version sstables and it also needs to reload the sstable metadata and notify compaction strategies when it mutates the repaired at field</description>
      <version>3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.io.sstable.LegacySSTableTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.VerifyTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.DataIntegrityMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Verifier.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14233" opendate="2018-2-13 00:00:00" fixdate="2018-2-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool tablestats/cfstats output has inconsistent formatting for latency</summary>
      <description>Latencies are reported at keyspace level with `ms.` and at table level with `ms`.There should be no trailing `.` as it is not a sentence and `.` is not part of the abbreviation.This is also present in 2.x with `nodetool cfstats`.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.nodetool.stats.TableStatsPrinter.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="144" opendate="2009-5-6 00:00:00" fixdate="2009-5-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>make jmx count/latency stuff actually useful</summary>
      <description>i just track those since "the beginning of time" it is not very useful for monitoring. (say things are fine for days, then something breaks &amp;#8211; you have to overcome the days of fine-ness in the avg before you can see anything wrong.)option 1: reset the counters after each request for data. problem: then i can't have multiple collectors (which i don't need atm but might be nice to have).option 2: keep the last N data points and compute an average on demand, but that's more complicated than just doing a += for each op.going to go with option 2.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessageDeliveryTask.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.FailureDetector.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStoreMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="8527" opendate="2014-12-20 00:00:00" fixdate="2014-2-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Account for range tombstones wherever we account for tombstones</summary>
      <description>As discussed in CASSANDRA-8477, we should make sure the tombstone thresholds also apply to range tombstones, since they poses the same problems than cell tombstones.</description>
      <version>3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Observability</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.ReadCommandTest.java</file>
      <file type="M">src.java.org.apache.cassandra.metrics.TableMetrics.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadCommand.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
