<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="1284" opendate="2010-7-16 00:00:00" fixdate="2010-8-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log summary of dropped messages instead of spamming log with warnings</summary>
      <description>CASSANDRA-685 logs one warning per dropped message which can exacerbate whatever problem is causing it to be overwhelmed in the first place</description>
      <version>0.6.5</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessageDeserializationTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="1377" opendate="2010-8-11 00:00:00" fixdate="2010-8-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>NPE aborts streaming operations for keyspaces with hyphens (&amp;#39;-&amp;#39;) in their names</summary>
      <description>When streaming starts for operations such as repair or bootstrap, it will fail due to an NPE if they rows are in a keyspace that has a hyphen in its name. One workaround for this issue would be to not use keyspace names containing hyphens. It would be even nicer if streaming worked for keyspace names with hyphens, since keyspaces named like that seem to be fine in all other ways.To reproduce: 1. With a multi-node ring, load up a keyspace with a hyphen in its name 2. Add some data to that keyspace 3. nodetool repairExpected results:Repair operations complete normallyActual results:Repair operations don't complete normally. The stacktrace below is correlated with the repair request. INFO &amp;#91;AE-SERVICE-STAGE:1&amp;#93; 2010-06-30 14:11:29,744 AntiEntropyService.java (line 619) Performing streaming repair of 1 ranges to /10.255.0.20 for (my-keyspace,AColumnFamily)ERROR &amp;#91;MESSAGE-DESERIALIZER-POOL:1&amp;#93; 2010-06-30 14:11:30,034 DebuggableThreadPoolExecutor.java (line 101) Error in ThreadPoolExecutorjava.lang.NullPointerException at org.apache.cassandra.streaming.StreamInitiateVerbHandler.getNewNames(StreamInitiateVerbHandler.java:154) at org.apache.cassandra.streaming.StreamInitiateVerbHandler.doVerb(StreamInitiateVerbHandler.java:76) at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:40) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)</description>
      <version>0.6.5,0.7beta2</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.DefsTest.java</file>
      <file type="M">test.system.test.thrift.server.py</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.Migration.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.AddKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.AddColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="981" opendate="2010-4-15 00:00:00" fixdate="2010-8-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Dynamic endpoint snitch</summary>
      <description>An endpoint snitch that automatically and dynamically infers "distance" to other machines without having to explicitly configure rack and datacenter positions solves two problems:The killer feature here is adapting to things like compaction or a failing-but-not-yet-dead disk. This is important, since when we are doing reads we pick the "closest" replica for actually reading data from (and only read md5s from other replicas). This means that if the closest replica by network topology is temporarily slow due to compaction (for instance), we'll have to block for its reply even if we get the other replies much much faster.Not having to manually re-sync your configuration with your network topology when changes (adding machines) are made is a nice bonus.</description>
      <version>0.6.5</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.locator.DynamicEndpointSnitchTest.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.DynamicEndpointSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.ExpiringMap.java</file>
      <file type="M">src.java.org.apache.cassandra.net.ResponseVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.SimpleSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.IEndpointSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractRackAwareSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractEndpointSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">conf.cassandra.yaml</file>
    </fixedFiles>
  </bug>
</bugrepository>
