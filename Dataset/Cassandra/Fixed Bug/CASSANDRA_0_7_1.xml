<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="1108" opendate="2010-5-19 00:00:00" fixdate="2010-1-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ability to forcibly mark machines failed</summary>
      <description>For when a node is failing but not yet so badly that it can't participate in gossip (e.g. hard disk failing but not dead yet) we should give operators the power to forcibly mark a node as dead.I think we'd need to add an extra flag in gossip to say "this deadness is operator-imposed" or the next heartbeat will flip it back to live.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.GossipDigestSynVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.GossipDigestAckVerbHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="1374" opendate="2010-8-10 00:00:00" fixdate="2010-12-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make snitches configurable at runtime</summary>
      <description>There needs to be the capability to configure snitches at runtime, even though there is now a dynamic endpoint snitch - CASSANDRA-981.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.DynamicEndpointSnitchMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.DynamicEndpointSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractReplicationStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1459" opendate="2010-9-2 00:00:00" fixdate="2010-1-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow modification of HintedHandoff configuration to be changed on the fly per node.</summary>
      <description>If there is an extended downtime of a node, allow Hinted Handoff to be disabled specifically for that node rather than having to decommission it. &lt;benblack&gt; If a node will be down for an extended period, it would be useful to be able to disable HH for it until it returns, without having to reconfigure and restart nodes.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxyMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractReplicationStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">conf.cassandra.yaml</file>
    </fixedFiles>
  </bug>
  <bug id="1470" opendate="2010-9-5 00:00:00" fixdate="2010-12-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid polluting page cache during compaction</summary>
      <description>When compaction scans through a group of sstables, it forces the data in the os buffer cache being used for hot reads, which can have a dramatic negative effect on performance.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.io.util.BufferedRandomAccessFileTest.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.FBUtilities.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.CLibrary.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.BufferedRandomAccessFile.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableScanner.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableReader.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.KeyIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.io.CompactionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CompactionManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLogSegment.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLog.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1525" opendate="2010-9-21 00:00:00" fixdate="2010-12-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Improve log4j configuration to provide the ability to modify logging levels dynamically via JMX</summary>
      <description>It would nice to add some named appenders to log4j configuration in such a way that their levels could be increased via jconsole. I have done this with other logging libraries and I believe that most of the capabilities here are built in to log4j.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">conf.log4j-server.properties</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cassandra.bat</file>
      <file type="M">bin.cassandra</file>
    </fixedFiles>
  </bug>
  <bug id="1530" opendate="2010-9-22 00:00:00" fixdate="2010-2-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>More-efficient cross-DC replication</summary>
      <description>Currently the coordinator node sends writes to each replica. In multi-dc situations, it would be more efficient to have the coordinator talk to a single node in each DC, which would forward the writes to the other replicas local to it. (All replicas would continue to ack to the coordinator.)Shouldn't be difficult to add a header to RMVH saying "consult the Strategy to see who else is local to you and queue it off to them as well."For example, consider two data centers with the following nodes:DC1: A, B, CDC2: D, E, FA client connected to node A performs an insert that should be replicated to {B,C,E,F}. Currently, A will send a MUTATION verb to each of those nodes directly. But communication to E and F is relatively expensive since they are in the other data center from A. So we'd like to send the mutation to just one, say E, with a tag saying "forward this to F as well."</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.locator.SimpleSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.db.RowMutation.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">test.data.serialization.0.7.utils.LegacyBloomFilter.bin</file>
      <file type="M">test.data.serialization.0.7.utils.BloomFilter.bin</file>
      <file type="M">test.data.serialization.0.7.streaming.StreamRequestMessage.bin</file>
      <file type="M">test.data.serialization.0.7.streaming.StreamReply.bin</file>
      <file type="M">test.data.serialization.0.7.service.TreeResponse.bin</file>
      <file type="M">test.data.serialization.0.7.service.TreeRequest.bin</file>
      <file type="M">test.data.serialization.0.7.gms.EndpointState.bin</file>
      <file type="M">test.data.serialization.0.7.db.Truncation.bin</file>
      <file type="M">test.data.serialization.0.7.db.SliceFromReadCommand.bin</file>
      <file type="M">test.data.serialization.0.7.db.SliceByNamesReadCommand.bin</file>
      <file type="M">test.data.serialization.0.7.db.RowMutation.bin</file>
      <file type="M">test.data.serialization.0.7.db.Row.bin</file>
      <file type="M">test.data.serialization.0.7.db.RangeSliceCommand.bin</file>
      <file type="M">test.data.serialization.0.7.db.migration.Keyspace5.bin</file>
      <file type="M">test.data.serialization.0.7.db.migration.Keyspace4.bin</file>
      <file type="M">test.data.serialization.0.7.db.migration.Keyspace3.bin</file>
      <file type="M">test.data.serialization.0.7.db.migration.Keyspace2.bin</file>
      <file type="M">test.data.serialization.0.7.db.migration.Keyspace1.bin</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamRequestVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamReplyVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.ReplicationFinishedVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageLoadBalancer.java</file>
      <file type="M">src.java.org.apache.cassandra.service.RangeSliceVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.service.IndexScanVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AntiEntropyService.java</file>
      <file type="M">src.java.org.apache.cassandra.net.ResponseVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessageDeliveryTask.java</file>
      <file type="M">src.java.org.apache.cassandra.net.Message.java</file>
      <file type="M">src.java.org.apache.cassandra.net.IVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.net.IncomingTcpConnection.java</file>
      <file type="M">src.java.org.apache.cassandra.net.Header.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.GossipDigestSynVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.GossipDigestAckVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.GossipDigestAck2VerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.BootStrapper.java</file>
      <file type="M">src.java.org.apache.cassandra.db.TruncateVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.SchemaCheckVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.RowMutationVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadRepairVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DefinitionsUpdateResponseVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DefinitionsAnnounceVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.BinaryVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
    </fixedFiles>
  </bug>
  <bug id="1546" opendate="2010-9-27 00:00:00" fixdate="2010-1-27 01:00:00" resolution="Duplicate">
    <buginformation>
      <summary>(Yet another) approach to counting</summary>
      <description>This could be described as a mix between CASSANDRA-1072 without clocks and CASSANDRA-1421.More details in the comment below.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.ColumnFamilyStoreTest.java</file>
      <file type="M">test.conf.cassandra.yaml</file>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1551" opendate="2010-9-28 00:00:00" fixdate="2010-2-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>create "tell me what nodes you have hints for" jmx api</summary>
      <description>we can do this efficiently in 0.7 due to new HH schema. in 0.6 this would require scanning all hints so probably not worth it.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="1565" opendate="2010-10-1 00:00:00" fixdate="2010-1-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-cli use consistant flags and improve error messages</summary>
      <description>nodetool uses "-h" to specify the host to connect to but cassandra-cli uses "-host" which is a pain to remember.More importantly, if you do use "-h" then there's no error! If you do this and then try to "show keyspaces" or some such you just get an entirely accurate though confusing "not connected to a cluster" error.1. Make the flags consistant amongst all the tools where appropriate.2. If you supply a flag to a tool it doesn't recognise then the tool should error immediately and display its usage message.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliOptions.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1654" opendate="2010-10-23 00:00:00" fixdate="2010-1-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>EC2Snitch</summary>
      <description>This will be a snitch extending AbstractNetworkTopologySnitch that pulls DC from instance metadata placement_availability_zone.I don't think we can get rack information so the choice is between picking something unique-per-machine to be the rack or assigning everything in the DC the same rack. Second seems easier, so let's use placement_availability_zone for rack, too.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.locator.IEndpointSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.DynamicEndpointSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractEndpointSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.VersionedValue.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.EndpointState.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.ApplicationState.java</file>
    </fixedFiles>
  </bug>
  <bug id="1718" opendate="2010-11-8 00:00:00" fixdate="2010-1-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra should chdir / when daemonizing</summary>
      <description>Common practice when daemonizing is to cd / to avoid pinning a filesystem. For example, if the oper happens to start Cassandra (by itself, or with a manual jsvc invocation, or with the initscript) in /mnt/usb-storage, and there is something mounted there, then the oper will not be able to unmount the usb device that was mounted at that location, since the cassandra process has it open as its cwd.evidence that this isn't being done already:~% sudo lsof -p 9775 | awk '$4=="cwd"'jsvc 9775 cassandra cwd DIR 8,1 4096 147675 /home/paul/packages/cassandra/trunk(That instance was invoked using the Debian initscript.)Obviously chdir("/") isn't necessary when not daemonizing, although it shouldn't hurt either.If there are concerns about Cassandra having an ongoing ability to open filenames relative to its original working directory, then it should be sufficient just to do a "cd /" in the initscript before starting Cassandra. That case, at least, is particularly important.</description>
      <version>0.7.1</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.init</file>
    </fixedFiles>
  </bug>
  <bug id="1859" opendate="2010-12-14 00:00:00" fixdate="2010-1-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>distributed test harness</summary>
      <description>Distributed Test Harness deploys a cluster on a cloud provider runs tests targeted at the cluster tears down the cluster</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">ivysettings.xml</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug id="1886" opendate="2010-12-20 00:00:00" fixdate="2010-12-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>[patch] Make sure sterams get closed</summary>
      <description>Various places in the code either don't close the streams they open, or only close them in success cases. Moved close operations to finally blocks, and use commons-io to quiet the close operations (IOUtils.closeQuietly)</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.streaming.FileStreamTask.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.PropertyFileSnitch.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.MmappedSegmentedFile.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.FileUtils.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableTracker.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableReader.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.FailureDetector.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLogHeader.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLog.java</file>
      <file type="M">src.java.org.apache.cassandra.db.columniterator.SSTableNamesIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.auth.SimpleAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="1895" opendate="2010-12-23 00:00:00" fixdate="2010-1-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Loadbalance during gossip issues leaves cluster in bad state</summary>
      <description>Running loadbalance against a node in a 4 node cluster leaves gossip in a wonky state.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
    </fixedFiles>
  </bug>
  <bug id="1898" opendate="2010-12-23 00:00:00" fixdate="2010-1-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>json2sstable should support streaming</summary>
      <description>json2sstable loads the entire json file into memory. This is so it can sort the file before creating an sstable. If the file was created using sstable2json and the partitioner isn't changing, this isn't necessary. For very large files this means json2sstable requires a huge amount of memory.There should be an option to stream the file. A simple check for out of order keys will prevent writing bad sstables.This should be possible with the SAX style parser available in our current json library.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.tools.SSTableImportTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.tools.SSTableExportTest.java</file>
      <file type="M">test.resources.SuperCF.json</file>
      <file type="M">test.resources.SimpleCF.json</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableImport.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
    </fixedFiles>
  </bug>
  <bug id="1900" opendate="2010-12-23 00:00:00" fixdate="2010-1-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make removetoken force always work</summary>
      <description>The 'removetoken force' command was intended for forcing a removal to complete when the removal stalls for some reason. The most likely reason being a streaming failure causing the node to wait forever for streams to complete.The command should be updated so that it can force a removal in any case. For example a node that was decommissioned but killed before a LEFT status was broadcasted. This leaves the node in a permanent 'leaving' state.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
    </fixedFiles>
  </bug>
  <bug id="1915" opendate="2010-12-29 00:00:00" fixdate="2010-12-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>stress.java doesn&amp;#39;t actually read its data</summary>
      <description>stress.java doesn't actually read back the keys it inserts, but also reports no errors. This is evident on larger (1M) runs where the read request rate is equal to what the bloom filter can do. Stress.py also cannot find the rows that stress.java inserts.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.util.OperationThread.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.tests.Reader.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.Session.java</file>
    </fixedFiles>
  </bug>
  <bug id="1916" opendate="2010-12-29 00:00:00" fixdate="2010-12-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cleanup needs to remove secondary index entries</summary>
      <description></description>
      <version>0.7.1</version>
      <fixedVersion>Feature/2iIndex</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.CleanupTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.AbstractCompactedRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CompactionManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="1919" opendate="2010-12-29 00:00:00" fixdate="2010-1-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add shutdownhook to flush commitlog</summary>
      <description>this replaces the periodic_with_flush approach from CASSANDRA-1780 / CASSANDRA-1917</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.ICommitLogExecutorService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.CommitLog.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1921" opendate="2010-12-30 00:00:00" fixdate="2010-12-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add jmx password authentication to nodetool</summary>
      <description>patch soon...</description>
      <version>0.7.1</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1923" opendate="2010-12-30 00:00:00" fixdate="2010-1-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>unit tests that validate that message serialization isn&amp;#39;t broken in the current version.</summary>
      <description>There are two components to this. First, code that will generate the serialized messages. Second, code that will attempt to read the serialized messages.My plan is to commit this to 0.7.1 with generated serialized messages. Then I will merge that into trunk sans the generation code. A similar process will need to take place when we branch trunk to create 0.8, etc. On second thought, maybe it makes sense to keep the generation code and let it morph as the message formats change.If the tests ever break in the 0.7 branch, that means we've created a message incompatibility regression that needs to be fixed. If the tests ever break in trunk (post CASSANDRA-1015), it means that something in trunk has changed message serialization compatibility that will need to be restored (via whatever process is used for 1015).</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
      <file type="M">src.java.org.apache.cassandra.utils.EstimatedHistogram.java</file>
      <file type="M">src.java.org.apache.cassandra.net.Message.java</file>
    </fixedFiles>
  </bug>
  <bug id="1927" opendate="2011-1-3 00:00:00" fixdate="2011-1-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Hadoop Integration doesn&amp;#39;t work when one node is down</summary>
      <description>using the same directives in the sample code:When I start the CFInputFormat to read a CF in a keyspace of RF=3 on a 4-node cluster: If all the nodes are all up, everything works fine and I don't have any problems walking through the all data in the CF, however If there's a node down, the hadoop job does not even start, just dies without any errors or exceptions.So I'm really sorry for not being able to post any errors or exceptions, though it's really easy to reproduce. Just startup a cluster and take one node down and you're there</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyInputFormat.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1935" opendate="2011-1-5 00:00:00" fixdate="2011-1-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Refuse to open SSTables from the future</summary>
      <description>If somebody has rolled back to a previous version of Cassandra that is unable to read an SSTable written by a future version correctly (indicated by a version change), failing fast is safer than accidentally performing a compaction that rewrites incorrect data and leaves you in an odd state.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Descriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1951" opendate="2011-1-7 00:00:00" fixdate="2011-1-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>offline local nodes</summary>
      <description>We'd like the ability to take a node offline (gossip, thrift, etc), but without bringing down cassandra. The main reason is so that compactions can be performed completely off-line.CASSANDRA-1108 gets us most of the way there, but not all the way.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.service.EmbeddedCassandraServiceTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.thrift.CassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.EmbeddedCassandraService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.CassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.avro.CassandraDaemon.java</file>
      <file type="M">contrib.javautils.src.test.java.org.apache.cassandra.contrib.utils.service.CassandraServiceTest.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1963" opendate="2011-1-11 00:00:00" fixdate="2011-1-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow user to specify files to compact through JMX</summary>
      <description>When you don't have enough space to perform a major compaction but know therewould be space to reclaim, the actual algorithm (discard the biggest sstablesone by one until it fits) may not be helpful.This is even more true now that minor compaction can remove tombstone and moreimportantly with expiring columns (for which the compaction of a singlesstable can make sense).This ticket proposes to expose a simple function through JMX to allow thesubmission of a compaction on user-specified sstables.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Descriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CompactionManagerMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1968" opendate="2011-1-11 00:00:00" fixdate="2011-1-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Increase JVM young generation size</summary>
      <description>Increasing the young generation size has a profound effect on performance and cpu utilization. We should set it explicitly.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug id="1970" opendate="2011-1-11 00:00:00" fixdate="2011-1-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Message version resolution</summary>
      <description>When a new new node (version N) contacts an old node (version N-1) for the first time, the old node will not understand the message. One resolution mechanism would be for the old node to "bounce" the message back to the sender. The sender would then respond by translating the message to the appropriate version and resending it.For this to work, 0.7.1 will need to have the "bounce" feature.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.net.IncomingTcpConnection.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1972" opendate="2011-1-12 00:00:00" fixdate="2011-1-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Default concurrency values are improperly proportioned</summary>
      <description>The "default"/"suggested" concurrent_reads value is much too low. It assumes that CPU will be the bottleneck, rather than IO, and for most deployments, this will not be the case. Additionally it is better to be queued for IO in the kernel or on your device than in user space, because the former work to optimize queue order.Additionally, reads are much cheaper than writes in terms of CPU time (since writes can experience contention due to retries), so while concurrent_writes should probably factor in the number of cores on the machine, concurrent_reads should probably be calculated purely by number of spindles.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra.yaml</file>
    </fixedFiles>
  </bug>
  <bug id="1973" opendate="2011-1-12 00:00:00" fixdate="2011-1-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>stress.java -k doesn&amp;#39;t keep going</summary>
      <description>stress.java's -k option doesn't work correctly. In the face of many errors, it ends up printing 'null' a bunch and then exiting.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.util.OperationThread.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.tests.Reader.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.tests.RangeSlicer.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.tests.MultiGetter.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.tests.Inserter.java</file>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.tests.IndexedRangeSlicer.java</file>
    </fixedFiles>
  </bug>
  <bug id="1992" opendate="2011-1-15 00:00:00" fixdate="2011-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Bootstrap breaks data stored (missing rows, extra rows, column values modified)</summary>
      <description>Scenario:Two fresh (empty /data /commitog /saved_caches dirs) cassandra installs.Start first one.Run data inserting program &amp;#91;1&amp;#93;, run again in verify mode - all data intact.Bootstrap 2nd node.Run verification again, now it fails.Issue is very strange to me as cassandra works perfectly for me when cluster nodes stay the same for days now but any bootstrap ( 1 &gt; 2 nodes, 2 -&gt; 3 nodes, 2&gt;3 nodes RF=2) breaks data.I am running cassandra with 1GB heap size, 32bit userland on 64bit kernels, not sure what else could matter there.Any hints ?Thanks in advance, regards.&amp;#91;1&amp;#93; simple program generating data and later verifying data.http://beauty.ant.gliwice.pl/bugs/cassandra-bootstrap/test.py&amp;#91;2&amp;#93; Logs from 1st node:http://beauty.ant.gliwice.pl/bugs/cassandra-bootstrap/system-3.4.log&amp;#91;3&amp;#93; Logs from 2nd (bootstraping node)http://beauty.ant.gliwice.pl/bugs/cassandra-bootstrap/system-3.8.log</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamInSession.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1993" opendate="2011-1-16 00:00:00" fixdate="2011-1-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Word count example doesn&amp;#39;t output the words correctly to cassandra. It outputs spurious data past the length of the byte array.</summary>
      <description>To reproduce: start a local cassandra server e.g. sudo bin/cassandra -fcd contrib/word_countantbin/word_count_setupbin/word_count check the data in cassandra, all looks fine because the words are all of the same length. change the data in cassandra to real words, rerun the mapreduce and you'll see some words have spurious characters written past their length this is because the word bytes are not terminated at their length</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">contrib.word.count.src.WordCount.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="1995" opendate="2011-1-16 00:00:00" fixdate="2011-1-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-cli doesn&amp;#39;t accept &amp;#39;name&amp;#39; as a column name in column metadata when creating a column family</summary>
      <description>This fails:create column family Countries with comparator=UTF8Type and column_metadata=[ {column_name: name, validation_class: UTF8Type} ];This works:create column family Countries with comparator=UTF8Type and column_metadata=[ {column_name: fooname, validation_class: UTF8Type} ];</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
    </fixedFiles>
  </bug>
  <bug id="2010" opendate="2011-1-19 00:00:00" fixdate="2011-1-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Error when read repair is disabled</summary>
      <description></description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
    </fixedFiles>
  </bug>
  <bug id="2023" opendate="2011-1-21 00:00:00" fixdate="2011-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>fix regression in 1968 (young gen sizing logic)</summary>
      <description>1968 introduced a regression (there was still cleanup to do). In particular it broke when an explicit MAX_HEAP_SIZE was set. Attaching draft patch (needs more testing).Allowing automatic newsize calculation in the face of a manually specified MAX_HEAP_SIZE was problematic. Either one has to duplicate JVM parsing of MAX_HEAP_SIZE or ask the user to set MAX_HEAP_SIZE_IN_MB (or similar) instead.In this patch (consider it a draft) i opted for the latter + picking up MAX_HEAP_SIZE for backwards compatibility (but with the effect that it disables new size calculation). I tried to make it slightly more posixly correct, but as usual no guarantees given that I have no posix shell to test it on.I'm not really happy about the shell acrobatics and my confidence that there is not some left-over issue is not high. Should we just not worry about MAX_HEAP_SIZE compatibility and remove all that compatibility cruft? Plenty of acrobatics left still, but it would remove the more hideous parts.</description>
      <version>0.7.1</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug id="2028" opendate="2011-1-21 00:00:00" fixdate="2011-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra should log, at info level, when a keyspace and/or column family is created and/or updated</summary>
      <description>Cassandra currently doesn't log at info level when schema changes happen. It should probably log details about what is being created/changed when it applies the changes locally.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.migration.UpdateKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.UpdateColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.Migration.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.DropKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.DropColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.AddKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.AddColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2029" opendate="2011-1-21 00:00:00" fixdate="2011-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>describe_keyspace in CLI should default to the currently set keyspace if there is one, otherwise keep current behavior</summary>
      <description>currently "describe keyspace" requires a keyspace argument, even if "use some_keyspace" was already issued. If there is one set, it should default to that.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliUserHelp.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2030" opendate="2011-1-21 00:00:00" fixdate="2011-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-cli batch mode does not provide an option to display output</summary>
      <description>It would be nice when executing the CLI in batch mode if there was a way to specify that the output from the commands be displayed as they were executed</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliSessionState.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliOptions.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliMain.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2031" opendate="2011-1-21 00:00:00" fixdate="2011-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI chokes on whitespace after semicolon when using -f</summary>
      <description>The CLI chokes on whitespace after the semicolon when a file is passed with -f"... missing EOF at"</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliMain.java</file>
    </fixedFiles>
  </bug>
  <bug id="2032" opendate="2011-1-21 00:00:00" fixdate="2011-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI should accept # (and/or some other char) as a comment character in files passed with -f</summary>
      <description>The CLI doesn't allow comments in files passed in with -f</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliMain.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2041" opendate="2011-1-24 00:00:00" fixdate="2011-2-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add paging of large rows to sstable2json</summary>
      <description></description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
    </fixedFiles>
  </bug>
  <bug id="2044" opendate="2011-1-24 00:00:00" fixdate="2011-1-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI should loop on describe_schema until agreement or fatel exit with stacktrace/message if no agreement after X seconds</summary>
      <description>see CASSANDRA-2026 for brief background.It's easy to enter statements into the CLI before the schema has settled, often causing problems where it is no longer possible to get the nodes in agreement about the schema without removing the system directory.The alleviate the most common problems with this, the CLI should issue the modification statement and loop on describe_schema until all nodes agree or until X seconds has passed. If the timeout has been exceeded, the CLI should exit with an error and inform the user that the schema has not settled and further migrations are ill-advised until it does.number_of_nodes/2+1 seconds seems like a decent wait time for schema migrations to start with.Bonus points for making the value configurable.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliSessionState.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliOptions.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2049" opendate="2011-1-25 00:00:00" fixdate="2011-1-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>On the CLI, creating or updating a keyspace to use the NetworkTopologyStrategy breaks "show keyspaces;"</summary>
      <description>To reproduce: Start fresh. Run "show keyspaces;" Run "create keyspace Keyspace1 with placement_strategy='org.apache.cassandra.locator.NetworkTopologyStrategy';" Run "show keyspaces;"Note how before it showed the system keyspace. After it shows just:Keyspace: Keyspace1: Replication Strategy: org.apache.cassandra.locator.NetworkTopologyStrategynullIf you have multiple keyspaces, it will hide those as well. Also, if you create the keyspace and then update it with NetworkTopologyStrategy, the same thing will happen.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2053" opendate="2011-1-25 00:00:00" fixdate="2011-2-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make cache saving less contentious</summary>
      <description>The current default for saving key caches is every hour. Additionally the default timeout for flushing memtables is every hour. I've seen situations where both of these occuring at the same time every hour causes enough pressure on the node to have it drop messages and other nodes mark it dead. This happens across the cluster and results in flapping.We should do something to spread this out. Perhaps staggering cache saves/flushes that occur due to timeouts.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableTracker.java</file>
      <file type="M">src.java.org.apache.cassandra.io.ICompactionInfo.java</file>
      <file type="M">src.java.org.apache.cassandra.io.CompactionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">src.java.org.apache.cassandra.db.CompactionManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2071" opendate="2011-1-27 00:00:00" fixdate="2011-1-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>RP.describeOwnership() does some bad math</summary>
      <description>If the input isn't sorted correctly for some reason, then describeOwnership() fails to calculate the ownership %ages correctly.Repro is 2 nodes with these tokens, you get these fractions:49000620740128447720217646403197156812 : 0.7615167770141183460469231731687303715884105727 : 4.2384834423% ownership is obviously broken.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.dht.RandomPartitioner.java</file>
    </fixedFiles>
  </bug>
  <bug id="2072" opendate="2011-1-28 00:00:00" fixdate="2011-2-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Race condition during decommission</summary>
      <description>Occasionally when decommissioning a node, there is a race condition that occurs where another node will never remove the token and thus propagate it again with a state of down. With CASSANDRA-1900 we can solve this, but it shouldn't occur in the first place.Given nodes A, B, and C, if you decommission B it will stream to A and C. When complete, B will decommission and receive this stacktrace:ERROR 00:02:40,282 Fatal exception in thread Thread&amp;#91;Thread-5,5,main&amp;#93;java.util.concurrent.RejectedExecutionException: ThreadPoolExecutor has shut down at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(DebuggableThreadPoolExecutor.java:62) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:767) at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:658) at org.apache.cassandra.net.MessagingService.receive(MessagingService.java:387) at org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:91At this point A will show it is removing B's token, but C will not and instead its failure detector will report that B is dead, and nodetool ring on C shows B in a leaving/down state. In another gossip round, C will propagate this state back to A.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
    </fixedFiles>
  </bug>
  <bug id="2073" opendate="2011-1-28 00:00:00" fixdate="2011-1-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Streaming occasionally makes gossip back up</summary>
      <description>Streaming occasionally makes gossip back up, causing nodes to mark each other as down even though the network is ok. This appears to happen just after streaming has finished. I noticed this in the course of working on CASSANDRA-2072, so decommission is one way to reproduce. It seems to happen maybe one of fifteen or twenty tries, so it's fairly rare.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2081" opendate="2011-1-31 00:00:00" fixdate="2011-2-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Consistency QUORUM does not work anymore (hector:Could not fullfill request on this host)</summary>
      <description>I'm using apache-cassandra-2011-01-28_20-06-01.jar and hector 7.0.25.Using consistency level Quorum won't work anymore (tested it on read). Consisteny level ONE still works thoughI have tried this with one dead node in my cluster.If I restart cassandra with an older svn revision (apache-cassandra-2011-01-28_20-06-01.jar), I can access the cluster with consistency level QUORUM again, while still using apache-cassandra-2011-01-28_20-06-01.jar and hector 7.0.25 in my application.11/01/31 19:54:38 ERROR connection.CassandraHostRetryService: Downed intr1n18(192.168.0.18):9160 host still appears to be down: Unable to open transport to intr1n18(192.168.0.18):9160 , java.net.NoRouteToHostException: No route to host11/01/31 19:54:38 INFO connection.CassandraHostRetryService: Downed Host retry status false with host: intr1n18(192.168.0.18):916011/01/31 19:54:45 ERROR connection.HConnectionManager: Could not fullfill request on this host CassandraClient&lt;intr1n11:9160-483&gt;intr1n11 is marked as up however and I can also access the node through the cassandra cli.192.168.0.1 Up Normal 8.02 GB 5.00% 0cc192.168.0.2 Up Normal 7.96 GB 5.00% 199192.168.0.3 Up Normal 8.24 GB 5.00% 266192.168.0.4 Up Normal 4.94 GB 5.00% 333192.168.0.5 Up Normal 5.02 GB 5.00% 400192.168.0.6 Up Normal 5 GB 5.00% 4cc192.168.0.7 Up Normal 5.1 GB 5.00% 599192.168.0.8 Up Normal 5.07 GB 5.00% 666192.168.0.9 Up Normal 4.78 GB 5.00% 733192.168.0.10 Up Normal 4.34 GB 5.00% 7ff192.168.0.11 Up Normal 5.01 GB 5.00% 8cc192.168.0.12 Up Normal 5.31 GB 5.00% 999192.168.0.13 Up Normal 5.56 GB 5.00% a66192.168.0.14 Up Normal 5.82 GB 5.00% b33192.168.0.15 Up Normal 5.57 GB 5.00% c00192.168.0.16 Up Normal 5.03 GB 5.00% ccc192.168.0.17 Up Normal 4.77 GB 5.00% d99192.168.0.18 Down Normal ? 5.00% e66192.168.0.19 Up Normal 4.78 GB 5.00% f33192.168.0.20 Up Normal 4.83 GB 5.00% ffffffffffffffff</description>
      <version>0.6.12,0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.ExpiringMap.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.net.ResponseVerbHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="2083" opendate="2011-1-31 00:00:00" fixdate="2011-2-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Hinted Handoff and schema race</summary>
      <description>If a node is down while a keyspace/cf is created and then data is inserted into the CF causing other nodes to hint, when the down node recovers it will lose some hints until the schema propagates:ERROR 19:59:28,264 Error in row mutationorg.apache.cassandra.db.UnserializableColumnFamilyException: Couldn't find cfId=1000 at org.apache.cassandra.db.ColumnFamilySerializer.deserialize(ColumnFamilySerializer.java:117) at org.apache.cassandra.db.RowMutation$RowMutationSerializer.deserialize(RowMutation.java:377) at org.apache.cassandra.db.RowMutationVerbHandler.doVerb(RowMutationVerbHandler.java:50) at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:70) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662) INFO 19:59:28,356 Applying migration 28e2e7a4-2d74-11e0-9b6b-cdc89135952c</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DefinitionsUpdateResponseVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.Migration.java</file>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="2091" opendate="2011-2-1 00:00:00" fixdate="2011-2-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make BBU.string validate input for the desired Charset</summary>
      <description>FBU.decodeToUTF8 does this check but BBU.string does not.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.utils.FBUtilitiesTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.TableTest.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.FBUtilities.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.ByteBufferUtil.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.RandomPartitioner.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.OrderPreservingPartitioner.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.CollatingOrderPreservingPartitioner.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.UTF8Type.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.AsciiType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="2094" opendate="2011-2-2 00:00:00" fixdate="2011-2-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>fix regression in CL.ALL read</summary>
      <description>regression: digest message object re-used across multiple hosts.problem: shared message id, so the first digest response received will remove the callback for all others.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2098" opendate="2011-2-2 00:00:00" fixdate="2011-2-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add description to nodetool commands</summary>
      <description>The help of nodetool is not very pretty, in particular there is no description of proposed commands</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug id="2102" opendate="2011-2-2 00:00:00" fixdate="2011-2-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>saved row cache doesn&amp;#39;t save the cache</summary>
      <description>saving row caches works by periodically iterating of the keySet() on the caches and writing the keys for the cached contents to disk. The cache keys are DecoratedKeys. DecoratedKeys contain a Token token and a ByteBuffer key. The underlying buffer on the key gets reused so the contents change. This means that all the cache entries have distinct tokens but only a handful of distinct key values. This means that when the cache is loaded you only end up loading a handful of keys instead of the ones actually in your cache.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableReader.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2111" opendate="2011-2-4 00:00:00" fixdate="2011-2-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-cli &amp;#39;use Keyspace user pass&amp;#39; breaks with SimpleAuth</summary>
      <description>If SimpleAuth is used and the -Daccess.properties... JVM options are passed in, the CLI's "use Keyspace user 'password'" command breaks. However, if the --username and --password options are used, you can still authenticate.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliUserHelp.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliOptions.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliMain.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
    </fixedFiles>
  </bug>
  <bug id="2114" opendate="2011-2-5 00:00:00" fixdate="2011-2-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>make it easier to have Cassandra JVM listen for remote debuggers</summary>
      <description>it's extremely common that I connect a remote debugger to the Cassandra JVM. It's become quite annoying to continually copy the same line into the config every time I need to hook up a debugger. We should add a commented line in cassnadra-env.sh to enable remote debugging.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">conf.cassandra-env.sh</file>
    </fixedFiles>
  </bug>
  <bug id="2123" opendate="2011-2-7 00:00:00" fixdate="2011-2-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool cfhistograms write/read latency columns are reversed</summary>
      <description>As first reported by Oleg Proudnikov in the thread http://www.mail-archive.com/user@cassandra.apache.org/msg09607.html the columns for read and write latency are reversed in the output of cfhistograms. The Mbean values are correct.Example output during stress.java insert test.Keyspace1/Standard1 histogramsOffset SSTables Write Latency Read Latency Row Size Column Count1 0 0 0 0 02 0 0 1 0 03 0 0 998 0 04 0 0 7729 0 05 0 0 22844 0 06 0 0 44439 0 65247927 0 0 64576 0 08 0 0 79000 0 010 0 0 139338 0 012 0 0 84675 0 014 0 0 36928 0 017 0 0 16547 0 020 0 0 3926 0 024 0 0 1681 0 029 0 0 776 0 035 0 0 357 0 042 0 0 172 0 050 0 0 51 0 060 0 0 15 0 072 0 0 10 0 086 0 0 4 0 0103 0 0 6 0 0124 0 0 3 0 0149 0 0 1 0 0179 0 0 0 0 0215 0 0 1 0 0258 0 0 1 0 0310 0 0 0 0 0372 0 0 1 6524792 0446 0 0 2 0 0535 0 0 0 0 0642 0 0 0 0 0770 0 0 0 0 0924 0 0 0 0 01109 0 0 1 0 01331 0 0 0 0 0</description>
      <version>0.7.1</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug id="2127" opendate="2011-2-7 00:00:00" fixdate="2011-2-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CLI should support describe_schema_versions() and other informative Thrift calls</summary>
      <description>The CLI should support the 'informative' thrift calls, like describe_schema_versions(), describe_ring(), etc. Currently, one has to go through a normal Thrift client to use these methods (and some clients don't support them at all).</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliUserHelp.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
    </fixedFiles>
  </bug>
  <bug id="2135" opendate="2011-2-8 00:00:00" fixdate="2011-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add the ability to enable/disable Thrift through nodetool</summary>
      <description></description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug id="2138" opendate="2011-2-8 00:00:00" fixdate="2011-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>add option to enable efficient cross-dc replication</summary>
      <description>In CASSANDRA-1530 we made cross-dc replication more efficient, but 0.7.0 will ignore any forwarding messages it receives, so let's make this optional to allow smoother upgrades.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.FBUtilities.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.VersionedValue.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.ApplicationState.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2142" opendate="2011-2-8 00:00:00" fixdate="2011-2-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add "reduce memory usage because I tuned things poorly" feature</summary>
      <description>Users frequently create too many columnfamilies, set the memtable thresholds too high (or adjust throughput while ignoring operations), and/or set caching thresholds too high. Then their server OOMs and they tell their friends Cassandra sucks.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.GCInspector.java</file>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2148" opendate="2011-2-9 00:00:00" fixdate="2011-2-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>system CFs default to large memtable throughputs on large heaps</summary>
      <description>The default memtableThroughputInMB is calculated now based on the heap size. Most people running with a large heap in production explicitly set it for their memtable(s). However, the the CFs in the system keyspace still default to the calculated value which on a large heap can be quite large. HintsColumnFamily is really the only problematic one though as the others are flushed afters changes to them.we should:1) set the throughput on the hints CF to a reasonable max and min value - min(256, max(32, normalDefault/2))2) set the throughput on the other system CFs to some small constant value (just as a safety); 8M sounds good</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2149" opendate="2011-2-9 00:00:00" fixdate="2011-2-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow a file of hosts to be passed to stress.java</summary>
      <description>We should allow a file of hosts to be passed to stress.java instead of having to specify on the command line.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">contrib.stress.src.org.apache.cassandra.contrib.stress.Session.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="2150" opendate="2011-2-10 00:00:00" fixdate="2011-2-10 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>sstablekeys silently ignores extra arguments</summary>
      <description>sstablekeys only passes arg $1 to SSTableExporter instead of passing all arguments, like sstable2json. Only one SSTable is allowed as an argument, but this is normally detected in SSTableExporter.java. By only passing the one argument, we end up silently ignoring the remaining arguments.</description>
      <version>0.7.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.sstablekeys</file>
    </fixedFiles>
  </bug>
  <bug id="526" opendate="2009-11-4 00:00:00" fixdate="2009-1-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Operations: Allow the ability to start a node without joining the ring</summary>
      <description>In environments with a dedicated operations team, it might make sense for some organizations to start Cassandra nodes with a flag that allows them to bootup, but not join the ring until they receive an explicit command. This would help in situations if certain actions need to happen from the engineering side before certain nodes go live and take on traffic.</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="982" opendate="2010-4-15 00:00:00" fixdate="2010-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>read repair on quorum consistencylevel</summary>
      <description>CASSANDRA-930 made read repair "fuzzy optional," but this only helps with ConsistencyLevel.ONE: Quorum reads always send requests to all nodes only the first Quorum's worth of responses get comparedSo what we'd like to do two changes: only send read requests to the closest R live nodes if read repair is enabled, also compare results from the other nodes in the background</description>
      <version>0.7.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.service.RangeSliceResponseResolver.java</file>
      <file type="M">src.java.org.apache.cassandra.service.QuorumResponseHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.service.IResponseResolver.java</file>
      <file type="M">src.java.org.apache.cassandra.service.ConsistencyChecker.java</file>
      <file type="M">src.java.org.apache.cassandra.service.ReadResponseResolver.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
