<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="2961" opendate="2011-7-27 00:00:00" fixdate="2011-10-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Expire dead gossip states based on time</summary>
      <description>Currently dead states are held until aVeryLongTime, 3 days. The problem is that if a node reboots within this period, it begins a new 3 days and will repopulate the ring with the dead state. While mostly harmless, perpetuating the state forever is at least wasting a small amount of bandwidth. Instead, we can expire states based on a ttl, which will require that the cluster be loosely time synced; within the quarantine period of 60s.</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.service.LeaveAndBootstrapTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.VersionedValue.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
    </fixedFiles>
  </bug>
  <bug id="2997" opendate="2011-8-5 00:00:00" fixdate="2011-10-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enhance human-readability of snapshot names created by drop column family</summary>
      <description>Currently when you drop a column family, a snapshot is automatically created in a directory named with the timestamp of the drop. Clever folk will find a way to understand the timestamps and locate particular snapshots, but it is not as effortless as it could be if part or all of the CF name was included in the snapshot name.Any strategy to make the snapshot name more user-friendly and easy to find would be helpful.</description>
      <version>1.0.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.migration.DropKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.DropColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3" opendate="2009-3-11 00:00:00" fixdate="2009-4-11 01:00:00" resolution="Duplicate">
    <buginformation>
      <summary>Allow non-hash-based partitioning schemes to allow truly order-preserving storage</summary>
      <description>An order-preserving hash has too many limitations to be useful in production where key lengths tend to have low variance. We need to make Cassandra more flexible and define a partitioner as responsible for String -&gt; EndPoint instead of String -&gt; BigInteger.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.transport.Server.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.Message.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.StandaloneScrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.nodetool.Scrub.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">test.unit.org.apache.cassandra.service.MoveTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.dht.BootStrapperTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.CreateTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.AlterTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.SecondaryIndexTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.CQLTester.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.NetworkTopologyStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.locator.AbstractReplicationStrategy.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3089" opendate="2011-8-27 00:00:00" fixdate="2011-9-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support RowId in ResultSet</summary>
      <description>Support the JDBC concept of RowId by using the C* row index value.</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.CResultSet.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.CassandraPreparedStatement.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.CassandraDatabaseMetaData.java</file>
      <file type="M">drivers.java.src.org.apache.cassandra.cql.jdbc.AbstractResultSet.java</file>
      <file type="M">drivers.java.CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3126" opendate="2011-9-2 00:00:00" fixdate="2011-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>unable to remove column metadata via CLI</summary>
      <description>I cant find way how to remove all columns definitions without CF import/export.&amp;#91;default@int4&amp;#93; update column family sipdb with column_metadata = [];Syntax error at position 51: required (...)+ loop did not match anything at input ']'&amp;#91;default@int4&amp;#93; update column family sipdb with column_metadata = &amp;#91;{}&amp;#93;;Command not found: `update column family sipdb with column_metadata = &amp;#91;{}&amp;#93;;`. Type 'help;' or '?' for help.&amp;#91;default@int4&amp;#93;</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cli.CliTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cli.Cli.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3130" opendate="2011-9-2 00:00:00" fixdate="2011-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL queries should alow talbe names to be qualified by keyspace</summary>
      <description>While the 0.6.X api was "ugly" in terms of method signatures, it did allow you to use the same client to query multiple keyspaces without having to call set_keyspace(String). I totally dislike set_keyspace but I know the thrift API is definitely not changing.The following command sequence is three RPC operations.select * from cf;use otherkeyspace;select * from othercf;CQL should allow us to do:select * from keyspace1.cf;select * from keyspace2.cf;This will make the connection pool management on the client much easier.</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.ClientState.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3140" opendate="2011-9-5 00:00:00" fixdate="2011-10-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Expose server, api versions to CQL</summary>
      <description>Need to expose the CQL api version; might as well include the server version while we're at it.</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.AbstractCassandraDaemon.java</file>
      <file type="M">src.java.org.apache.cassandra.db.SystemTable.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3170" opendate="2011-9-9 00:00:00" fixdate="2011-10-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Schema versions output should be on separate lines for separate versions</summary>
      <description>On the CLI if you do a 'describe cluster;' it would be really nice to have different versions on different lines or some way to call out multiple versions more. Right now it's a UUID with a list of nodes for one, but with multiple versions, it's on the same line - another UUID and another list of nodes. That's hard to distinguish between one version and multiple versions at a glance.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3196" opendate="2011-9-13 00:00:00" fixdate="2011-10-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Cassandra-CLI command should have --version option</summary>
      <description>Implementing "cassandra-cli --version" command line option would make it easier to write bug reports and check the versions of tools in use. Or if you want to make it a CLI command inside the tool, I don't know. --version option seems to be the standard way.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3214" opendate="2011-9-15 00:00:00" fixdate="2011-12-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make CFIF use rpc_endpoint prior to trying endpoint</summary>
      <description>Following up on CASSANDRA-3187 , we probably need to attempt to use the rpc_endpoint address first, and then fall back to the gossip endpoint if we don't get what we want.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.ColumnFamilyInputFormat.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3261" opendate="2011-9-27 00:00:00" fixdate="2011-9-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Thrift sockets are not buffered properly</summary>
      <description>workaround for THRIFT-1121adds back BufferedInputStream and BufferedOutputStream to TSocket in new TCustomSocket class</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.TCustomServerSocket.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3292" opendate="2011-10-1 00:00:00" fixdate="2011-10-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>creating column family sets durable_writes to true</summary>
      <description>&amp;#91;default@rapidshare&amp;#93; describe keyspace rapidshare;Keyspace: rapidshare: Replication Strategy: org.apache.cassandra.locator.NetworkTopologyStrategy Durable Writes: false Options: &amp;#91;datacenter1:1&amp;#93; Column Families:&amp;#91;default@rapidshare&amp;#93; create column family t1;1ba19300-ebfa-11e0-0000-34912694d0bfWaiting for schema agreement...... schemas agree across the cluster&amp;#91;default@rapidshare&amp;#93; describe keyspace rapidshare;Keyspace: rapidshare: Replication Strategy: org.apache.cassandra.locator.NetworkTopologyStrategy Durable Writes: true Options: &amp;#91;datacenter1:1&amp;#93; Column Families: ColumnFamily: t1 Key Validation Class: org.apache.cassandra.db.marshal.BytesType Default column value validator: org.apache.cassandra.db.marshal.BytesType Columns sorted by: org.apache.cassandra.db.marshal.BytesType Row cache size / save period in seconds: 0.0/0 Key cache size / save period in seconds: 200000.0/14400 Memtable thresholds: 0.028124999999999997/1440/6 (millions of ops/minutes/MB) GC grace seconds: 864000 Compaction min/max thresholds: 4/32 Read repair chance: 1.0 Replicate on write: true Built indexes: []</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.RenameColumnFamily.java</file>
      <file type="M">src.avro.internode.genavro</file>
      <file type="M">test.unit.org.apache.cassandra.SchemaLoader.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.DefsTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.config.DatabaseDescriptorTest.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.UpdateKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.DropColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.db.migration.AddColumnFamily.java</file>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3302" opendate="2011-10-4 00:00:00" fixdate="2011-10-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>stop Cassandra result in hang</summary>
      <description>testing this under trunk via a hacked package (replacing jars from 0.8.6 deb installation)When calling service cassandra stop, the Cassandra process hang:http://aep.appspot.com/display/i6aIUCkt4kz0HG5l2VszMM7QvLo/The following logs is observed in the C* log: INFO &amp;#91;main&amp;#93; 2011-10-03 23:20:46,434 AbstractCassandraDaemon.java (line 270) Cassandra shutting down... INFO &amp;#91;main&amp;#93; 2011-10-03 23:20:46,434 CassandraDaemon.java (line 218) Stop listening to thrift clientsRe-run this using 1.0.0 branch, (following the same "hack" procedure), C* stop properly, and the following is observed in the log: INFO &amp;#91;main&amp;#93; 2011-10-04 05:02:08,048 AbstractCassandraDaemon.java (line 270) Cassandra shutting down... INFO &amp;#91;main&amp;#93; 2011-10-04 05:02:08,049 CassandraDaemon.java (line 218) Stop listening to thrift clients INFO &amp;#91;Thread-2&amp;#93; 2011-10-04 05:02:08,318 MessagingService.java (line 482) Shutting down MessageService... INFO &amp;#91;Thread-2&amp;#93; 2011-10-04 05:02:08,319 MessagingService.java (line 497) Waiting for in-progress requests to complete INFO &amp;#91;ACCEPT-/10.83.77.171&amp;#93; 2011-10-04 05:02:08,319 MessagingService.java (line 637) MessagingService shutting down server thread.could this be related to CASSANDRA-3261 ?</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.TCustomServerSocket.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3314" opendate="2011-10-5 00:00:00" fixdate="2011-10-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fail to delete -Index files if index is currently building</summary>
      <description>If there is index building in progress, following errors are thrown if cassandra is trying to delete *-Index.db files. There is no problem with deleting -Data or -Filter.. files. CF is using leveled compaction but it is probably not related.ERROR &amp;#91;NonPeriodicTasks:1&amp;#93; 2011-10-05 09:13:03,702 AbstractCassandraDaemon.java(line 133) Fatal exception in thread Thread&amp;#91;NonPeriodicTasks:1,5,main&amp;#93;java.lang.RuntimeException: java.io.IOException: Failed to delete C:\var\lib\cassandra\data\test\sipdb-h-772-Index.db at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:34) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.index.SecondaryIndex.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3331" opendate="2011-10-7 00:00:00" fixdate="2011-10-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Apache Daemon missing from the binary tarball</summary>
      <description>Apparently the tools used to run the binary release are missing from the binary tarball.I will verify that they are in the 1.0 branch, then update the ticket so we can ensure that they are included.Ben</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.daemon.RELEASE-NOTES.txt</file>
      <file type="M">bin.daemon.prunsrv.exe</file>
      <file type="M">bin.daemon.prunmgr.exe</file>
      <file type="M">bin.daemon.NOTICE.txt</file>
      <file type="M">bin.daemon.LICENSE.txt</file>
      <file type="M">tools.stress.bin.stress.bat</file>
      <file type="M">README.txt</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
      <file type="M">bin.cassandra.bat</file>
    </fixedFiles>
  </bug>
  <bug id="3342" opendate="2011-10-11 00:00:00" fixdate="2011-10-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-cli allows setting min_compaction_threshold to 1</summary>
      <description>{{&amp;#91;root@Apture&amp;#93; update column family MagicLinks with min_compaction_threshold=1 and max_compaction_threshold=20;b98e3b80-f3a3-11e0-0000-76abb4a6dbbfWaiting for schema agreement...... schemas agree across the cluster}}I'm told that a min_compaction_threshold of 1 is nonsensical. I had a spell where my servers stopped doing compactions. Once I upped the min_compaction_threshold, they started compacting again. I'm unable to confirm for sure that this was the case.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftValidation.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3344" opendate="2011-10-11 00:00:00" fixdate="2011-10-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Compaction throttling can be too slow</summary>
      <description>Compaction throttling needs to know how many active compactions are running (to divide bandwith for each active compaction).The way active compaction is counted can be broken because it counts the number of active threads in the executor BUT the thread starts by acquiring a lock.If the lock can't be acquired immediately : the thread is seen as "active" but does not participate in IO operations.The case can happen when major compaction are triggered (major compaction acquire a write lock, while minor compactions acquire a read lock).Having compaction througput to 16Mb/s, we observed is the following (two times) : only 1 active compaction (a long one for a few hours) starting at 16Mb/s, then after some time running at 2Mb/s, thus taking a very long time to complete many pending compactionsUsing JMX and monitoring the stack trace of the compaction threads showed that : 1 thread was effectively compacting 1 thread was waiting to acquire the write lock (due to a major compaction) 6 threads were waiting to acquire the read lock (probably due to the thread above trying to acquire the write lock)Attached is a proposed patch (very simple, not yet tested) which counts only active compactions.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3350" opendate="2011-10-11 00:00:00" fixdate="2011-10-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Can&amp;#39;t USE numeric keyspace names in CQL</summary>
      <description>Cassandra allows keyspace names to start with a digit or an underscore (see o.a.c.db.migration.Migration.isLegalName), but CQL's USE statement only accepts a CQL identifier, which must start with a letter. So there's no way to use a keyspace named "142" or "&amp;#95;hi&amp;#95;" in CQL, for example.The USE statement should accept string literals and integers as well as identifiers, and CQL identifiers (IDENT) should probably allow starting with the underscore.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3351" opendate="2011-10-12 00:00:00" fixdate="2011-10-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>If node fails to join a ring it will stay in joining state indefinately</summary>
      <description>While attempting to add a new node to my ring something went wrong and I had to terminate the node on ec2. After this the node keeps appearing in the ring command in "joining" state and never goes away. Per driftx on the Cassandra channel if I do a whole cluster restart it should go away, but since this is a production system this is not really possible. Additionally if I could join a node with same IP again this should go away, but being on ec2 this is not always easy. So not sure if this truly qualifies as a bug or more like a feature request, but I feel there should be a way to remove a node in any state if I wish without joining a node with same ip or doing a whole cluster restart.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3358" opendate="2011-10-13 00:00:00" fixdate="2011-10-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>2GB row size limit in ColumnIndex offset calculation</summary>
      <description>Index offset is calculated using int instead of long resulting in overflow at 2GB row size. As a result affected columns can not be retrieved. Fix: use long instead of int</description>
      <version>0.7.10,0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnIndexer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3359" opendate="2011-10-13 00:00:00" fixdate="2011-10-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>snapshot should include manifest under leveledcompaction</summary>
      <description></description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.util.FileUtils.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledManifest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3364" opendate="2011-10-15 00:00:00" fixdate="2011-10-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>[patch] use long math, if you want long results</summary>
      <description>Code calculates long values, using integer intermediate input, which can cause truncation errors, safer just to use long input.</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.compress.CompressionMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledCompactionTask.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledCompactionStrategy.java</file>
    </fixedFiles>
  </bug>
  <bug id="3365" opendate="2011-10-15 00:00:00" fixdate="2011-10-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>[patch] don&amp;#39;t stutter exception messages</summary>
      <description>doinglog.error(e.getMessage(), e);just stutters the error message twice, which is annoying. Use a real message</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="3366" opendate="2011-10-15 00:00:00" fixdate="2011-10-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL: Internal application error specifying &amp;#39;using consistency ...&amp;#39; in lower case; must be upper case</summary>
      <description>Robin hit this error, so I think he would consider it to be a usability issue.</description>
      <version>1.0.1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.Cql.g</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3368" opendate="2011-10-16 00:00:00" fixdate="2011-10-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>&amp;#39;show schema&amp;#39; in cli does not show compression_options</summary>
      <description>Hi,using the cassandra-cli command line tool, I realized that a 'show schema' does not print out the compression_options I specified when creating them.Both, the server and the cli tool, where version 1.0.0-rc2.Example:&amp;#91;default@Test&amp;#93; CREATE COLUMN FAMILY Response2 WITH key_validation_class=BytesType AND compression_options {sstable_compression:DeflateCompressor};&amp;#91;default@Test&amp;#93; show schema;create keyspace Test with placement_strategy = 'SimpleStrategy' and strategy_options = [{replication_factor : 2}];use Test;create column family Response2 with column_type = 'Standard' and comparator = 'BytesType' and default_validation_class = 'BytesType' and key_validation_class = 'BytesType' and rows_cached = 0.0 and row_cache_save_period = 0 and keys_cached = 200000.0 and key_cache_save_period = 14400 and read_repair_chance = 1.0 and gc_grace = 864000 and min_compaction_threshold = 4 and max_compaction_threshold = 32 and replicate_on_write = true and row_cache_provider = 'ConcurrentLinkedHashCacheProvider';Not really critical, but might be confusing for some people = me kind regards,Christian</description>
      <version>1.0.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3370" opendate="2011-10-16 00:00:00" fixdate="2011-10-16 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Deflate Compression corrupts SSTables</summary>
      <description>Hi,it seems that the Deflate Compressor corrupts the SSTables. 3 out of 3 Installations were corrupt. Snappy works fine.Here is what I did:1. Start a single cassandra node (I was using ByteOrderedPartitioner)2. Write data into cf that uses deflate compression - I think it has to be enough data so that the data folder contains some files.3. When I now try to read (I did a range scan) from my application, it fails and the logs show corruptions:Caused by: org.apache.cassandra.io.compress.CorruptedBlockException: (/home/cspriegel/Development/cassandra1/data/Test/Response-h-2-Data.db): corruption detected, chunk at 0 of length 65536.regards,Christian</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.compress.DeflateCompressor.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3372" opendate="2011-10-17 00:00:00" fixdate="2011-10-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Make HSHA cached threads.</summary>
      <description>JDK's newCachedTP does the following.... This is simillar to ACD.CleaningThreadPoolpublic static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(), threadFactory);}</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.CassandraDaemon.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3375" opendate="2011-10-18 00:00:00" fixdate="2011-10-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid clock drift on some Windows machines</summary>
      <description>Performing Thread.sleep() with non-rounded values increases the frequency of interrupts on Windows machines; this can cause performance problems, and on some machines even clock drift problems for the duration of the sleep.Fixing the issue is trivial: lower the degree of randomness by allowing only "rounded" sleep periods.http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6464007http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6435126</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.HintedHandOffManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="3384" opendate="2011-10-19 00:00:00" fixdate="2011-10-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>it would be nice if "describe keyspace" in cli shows "Cache Provider"</summary>
      <description>Describe keyspace in the cli doesn't show the cache provider it would be nice to show it to verify the settings.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3386" opendate="2011-10-19 00:00:00" fixdate="2011-10-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Avoid lock contention in hint rows</summary>
      <description>As pointed out by Yang in CASSANDRA-3385, hint writes are keyed by target IP, to make replay efficient. However, this means that we'll hit a lot of lock contention in table.apply where we synchronize for potential index updates.</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.Table.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3390" opendate="2011-10-20 00:00:00" fixdate="2011-10-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>ReadResponseSerializer.serializedSize() calculation is wrong</summary>
      <description>in ReadResponse.javathe following code public long serializedSize(ReadResponse response, int version) { int size = DBConstants.intSize; size += (response.isDigestQuery() ? response.digest() : ByteBufferUtil.EMPTY_BYTE_BUFFER).remaining(); size += DBConstants.boolSize; if (response.isDigestQuery()) size += response.digest().remaining(); else size += Row.serializer().serializedSize(response.row(), version); return size; }adds the digest size 2 timesthis triggers assertion error in at least ReadVerbHandler</description>
      <version>0.8.8,1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="3396" opendate="2011-10-22 00:00:00" fixdate="2011-10-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>[patch] push down assignments to scopes where they are needed</summary>
      <description>Code makes assignments at a scope where that assignment may not be needed, patch pushes these assignments down to where conditionals has prescribed that the assignment will be used.</description>
      <version>1.0.1</version>
      <fixedVersion>Legacy/DocumentationandWebsite</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableImport.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableExport.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.Gossiper.java</file>
      <file type="M">src.java.org.apache.cassandra.gms.GossipDigestAck2VerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="3403" opendate="2011-10-26 00:00:00" fixdate="2011-10-26 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>describe_ring topology information is wrong/incomplete</summary>
      <description>In CASSANDRA-2882, topology information was added to describe_ring, however it asks the gossiper for the DC information, and the gossiper can only have this with a gossip-enabled snitch, which currently means the Ec2Snitch. Instead, it should be asking the snitch for the DC for each endpoint.Also, the port information should just be removed: whatever port the client has connected to in order to call describe_ring is the right port to use for all endpoints.</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.CassandraServer.java</file>
      <file type="M">interface.thrift.gen-java.org.apache.cassandra.thrift.EndpointDetails.java</file>
      <file type="M">interface.cassandra.thrift</file>
    </fixedFiles>
  </bug>
  <bug id="3409" opendate="2011-10-27 00:00:00" fixdate="2011-10-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CFS reloading of the compaction strategy is done for every metadata update and is not thread safe</summary>
      <description>The reloading of the compaction strategy done during CFS.reload is not thread safe. In particular, this is a problem for leveled compactions. It could leads to some sstable not being added to the manifest and also breaks the 'only one leveledCompactionTask can run at any given time' assumption (which, at least without CASSANDRA-3408 can likely leads to blocking compactions completely).</description>
      <version>1.0.1</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.AbstractCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
