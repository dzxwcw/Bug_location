<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="10079" opendate="2015-8-14 00:00:00" fixdate="2015-10-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>LEAK DETECTED, after nodetool drain</summary>
      <description>6 node cluster running 2.1.8Sequence of events:2015-08-14 13:37:07,049 - Drain the node2015-08-14 13:37:11,943 - Drained2015-08-14 13:37:37,055 Ref.java:179 - LEAK DETECTED:ERROR [Reference-Reaper:1] 2015-08-14 13:37:37,055 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@5534701) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@194296283:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@fab2c71) to class org.apache.cassandra.io.util.MmappedSegmentedFile$Cleanup@1252635616:/var/lib/cassandra/data/metric/metric-811fa5402a3b11e5a2c0870545c0f352/metric-metric-ka-6883-Index.db was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@555d8efb) to class org.apache.cassandra.io.util.MmappedSegmentedFile$Cleanup@1252635616:/var/lib/cassandra/data/metric/metric-811fa5402a3b11e5a2c0870545c0f352/metric-metric-ka-6883-Index.db was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@7b29bfea) to class org.apache.cassandra.io.util.MmappedSegmentedFile$Cleanup@1252635616:/var/lib/cassandra/data/metric/metric-811fa5402a3b11e5a2c0870545c0f352/metric-metric-ka-6883-Index.db was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@2d37dc5a) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@713444527:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@13153552) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@713444527:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@25f51e35) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@713444527:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@3633d3dd) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@194296283:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,057 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@2ec81280) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@194296283:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,058 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@144d1dae) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@194296283:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,058 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@1944bda4) to class org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$1@194296283:[[OffHeapBitSet]] was not released before the reference was garbage collectedERROR [Reference-Reaper:1] 2015-08-14 13:37:37,058 Ref.java:179 - LEAK DETECTED: a reference (org.apache.cassandra.utils.concurrent.Ref$State@31c1386a) to class org.apache.cassandra.io.util.MmappedSegmentedFile$Cleanup@1601396928:/var/lib/cassandra/data/metric/metric-811fa5402a3b11e5a2c0870545c0f352/metric-metric-ka-8229-Index.db was not released before the reference was garbage collectedSee full log here:https://dl.dropboxusercontent.com/u/4179566/cassandra-system.log</description>
      <version>2.1.12,2.2.4,3.0.0</version>
      <fixedVersion>Local/StartupandShutdown</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="10264" opendate="2015-9-3 00:00:00" fixdate="2015-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unable to use conditions on static columns for DELETE</summary>
      <description>cqlsh:test&gt; create table static_table(id int, stat int static, ord int, val text, primary key(id,ord));cqlsh:test&gt; insert into static_table (id,stat,ord,val) VALUES ( 1, 1, 1, '1');cqlsh:test&gt; delete from static_table where id=1 and ord=1 if stat != 1;Invalid syntax at line 1, char 55 delete from static_table where id=1 and ord=1 if stat != 1; ^Same error if using =, &lt;, &lt;=, &gt;= or &gt; conditionAccording to thobbs the syntax should work. Plus, the error message is wrong</description>
      <version>2.1.12,2.2.4,3.0.0</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ModificationStatement.java</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10276" opendate="2015-9-7 00:00:00" fixdate="2015-10-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Do STCS in DTCS-windows</summary>
      <description>To avoid constant recompaction of files in big ( &gt; max threshold) DTCS windows, we should do STCS of those files.Patch here: https://github.com/krummas/cassandra/commits/marcuse/dtcs_stcs</description>
      <version>2.1.12,2.2.4,3.0.0</version>
      <fixedVersion>Local/Compaction</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.compaction.DateTieredCompactionStrategyTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10365" opendate="2015-9-17 00:00:00" fixdate="2015-11-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Store types by their CQL names in schema tables instead of fully-qualified internal class names</summary>
      <description>Consider saving CQL types names for column, UDF/UDA arguments and return types, and UDT components.</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.NativeSSTableLoaderClient.java</file>
      <file type="M">test.unit.org.apache.cassandra.schema.SchemaKeyspaceTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.schema.LegacySchemaMigratorTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.UFTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.TupleTypeTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.config.CFMetaDataTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.MigrationTask.java</file>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.Views.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.Tables.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.SchemaKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.CQLSSTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.TypeParser.java</file>
      <file type="M">src.java.org.apache.cassandra.db.marshal.EmptyType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Keyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.db.DefinitionsUpdateVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateTableStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.ColumnIdentifier.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Schema.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">NOTICE.txt</file>
      <file type="M">lib.cassandra-driver-internal-only-3.0.0a2.post0-95c6008.zip</file>
      <file type="M">lib.cassandra-driver-core-3.0.0-alpha4-shaded.jar</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
      <file type="M">src.java.org.apache.cassandra.schema.Types.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.CQLTypeParser.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.CQL3Type.java</file>
    </fixedFiles>
  </bug>
  <bug id="10367" opendate="2015-9-17 00:00:00" fixdate="2015-10-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Aggregate with Initial Condition fails with C* 3.0</summary>
      <description>I'm seeing some inconsistent behavior between 2.2 and 3.0 C* with regards to UDF, Aggregates and Initial Conditions. I have a scenario, which I think is valid. It works in C* 2.2 but not in 3.0Using the following user defined functionCREATE OR REPLACE FUNCTION extend_list(s list&lt;text&gt;, i int) CALLED ON NULL INPUT RETURNS list&lt;text&gt; LANGUAGE java AS 'if (i != null) s.add(String.valueOf(i)); return s;';With the aggregate belowCREATE AGGREGATE aggregatemetadata.test_init_cond_aggregate(int) SFUNC extend_list STYPE list&lt;text&gt; INITCOND [ ]When I attempt to exercise the aggregate on from a simple key value table.SELECT test_init_cond_aggregate(v) AS list_res FROM tin 2.2 it works fine and returns the aggregate.The exact same test ran against the 3.0 branch produces the following exception from the server.InvalidRequest: code=2200 [Invalid query] message="ERROR FUNCTION_FAILURE: execution of 'aggregatemetadata.extend_list[list&lt;text&gt;, int]' failed: java.lang.UnsupportedOperationException"I've grepped through the C* logs but I couldn't find a more verbose stack trace, or any errors. Robert Stupp suggested I open a ticket.I am able to reproduce both in the python driver manually using cql.</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.AggregationTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.functions.UDHelper.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.functions.UDFunction.java</file>
      <file type="M">lib.cassandra-driver-core-3.0.0-alpha3-093a692-SNAPSHOT-shaded.jar</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10376" opendate="2015-9-19 00:00:00" fixdate="2015-10-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix upgrade_tests/paging_test.py:TestPagingData.static_columns_paging_test</summary>
      <description>Follow-up to CASSANDRA-10354 to fix the related upgrade issue.To quote bdeggleston:So the failure is caused by an edge case where a names filter is used in a paging query against a table that needs SinglePartitionNamesCommand instances converted to SinglePartitionSliceCommand instances in order to be converted to legacy read commands.If the previous read returned all requested clusterings and a number of rows equal to the page size, the subsequent read would have an empty clustering names filter. When an empty clustering names filter is converted to a slice filter, the slice filter is created with Slices.ALL.</description>
      <version>3.0.0</version>
      <fixedVersion>Legacy/CQL,Legacy/Testing</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ReadCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="10470" opendate="2015-10-7 00:00:00" fixdate="2015-10-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix upgrade_tests.cql_tests/TestCQL/counters_test dtest</summary>
      <description>This test fails on CassCI:http://cassci.datastax.com/view/Upgrades/job/storage_engine_upgrade_dtest-22_tarball-30_HEAD/44/testReport/upgrade_tests.cql_tests/TestCQL/counters_test/Once this dtest PR is merged, these tests should also run with this upgrade path on normal 3.0 jobs. Until then, you can run it with the following command:SKIP=false CASSANDRA_VERSION=binary:2.2.0 UPGRADE_TO=git:cassandra-3.0 nosetests 2&gt;&amp;1 upgrade_tests/cql_tests.py:TestCQL.counters_test</description>
      <version>3.0.0</version>
      <fixedVersion>Legacy/Coordination,Test/dtest/python</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.LegacyLayout.java</file>
      <file type="M">src.java.org.apache.cassandra.db.context.CounterContext.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10491" opendate="2015-10-8 00:00:00" fixdate="2015-11-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Inconsistent "position" numbering for keys in "system_schema.columns"</summary>
      <description>A single component partition key starts off with a -1 position.cqlsh&gt; CREATE TABLE test.table1 (key1 text, value1 text, value2 text, PRIMARY KEY(key1));cqlsh&gt; SELECT keyspace_name, table_name, column_name, kind, position FROM system_schema.columns WHERE keyspace_name = 'test' and table_name = 'table1' ; keyspace_name | table_name | column_name | kind | position---------------+------------+-------------+---------------+---------- test | table1 | key1 | partition_key | -1 test | table1 | value1 | regular | -1 test | table1 | value2 | regular | -1A single component clustering key starts off with a 0 position.cqlsh&gt; CREATE TABLE test.table2 (key1 text, value1 text, value2 text, PRIMARY KEY(key1, value1));cqlsh&gt; SELECT keyspace_name, table_name, column_name, kind, position FROM system_schema.columns WHERE keyspace_name = 'test' and table_name = 'table2' ; keyspace_name | table_name | column_name | kind | position---------------+------------+-------------+---------------+---------- test | table2 | key1 | partition_key | -1 test | table2 | value1 | clustering | 0 test | table2 | value2 | regular | -1When another component is added to the partition key it starts at 0.cqlsh&gt; CREATE TABLE test.table3 (key1 text, value1 text, value2 text, PRIMARY KEY((key1, value1)));cqlsh&gt; SELECT keyspace_name, table_name, column_name, kind, position FROM system_schema.columns WHERE keyspace_name = 'test' and table_name = 'table3' ; keyspace_name | table_name | column_name | kind | position---------------+------------+-------------+---------------+---------- test | table3 | key1 | partition_key | 0 test | table3 | value1 | partition_key | 1 test | table3 | value2 | regular | -1which is the same as a multiple component clustering key.cqlsh&gt; CREATE TABLE test.table4 (key1 text, value1 text, value2 text, PRIMARY KEY(key1, value1, value2));cqlsh&gt; SELECT keyspace_name, table_name, column_name, kind, position FROM system_schema.columns WHERE keyspace_name = 'test' and table_name = 'table4' ; keyspace_name | table_name | column_name | kind | position---------------+------------+-------------+---------------+---------- test | table4 | key1 | partition_key | -1 test | table4 | value1 | clustering | 0 test | table4 | value2 | clustering | 1Shouldn't a single component partition key start off with a position of 0?</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.schema.LegacySchemaMigratorTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.ColumnsTest.java</file>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftConversion.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.SchemaKeyspace.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.LegacySchemaMigrator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.view.TemporalRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.filter.RowFilter.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateIndexStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.config.ColumnDefinition.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10524" opendate="2015-10-14 00:00:00" fixdate="2015-10-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add ability to skip TIME_WAIT sockets on port check on Windows startup</summary>
      <description>C* sockets are often staying TIME_WAIT for up to 120 seconds (2x max segment lifetime) for me in my dev environment on Windows. This is rather obnoxious since it means I can't launch C* for up to 2 minutes after stopping it.Attaching a patch that adds a simple -a for aggressive startup to the launch scripts to ignore duplicate port check from netstat if it's TIME_WAIT. Also snuck in some more liberal interpretation of help strings in the .ps1.</description>
      <version>3.0.0</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cassandra.ps1</file>
    </fixedFiles>
  </bug>
  <bug id="10554" opendate="2015-10-19 00:00:00" fixdate="2015-10-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Batch that updates two or more table can produce unreadable SSTable (was: Auto Bootstraping a new node fails)</summary>
      <description>I've been trying to add a new node in my 3.0 cluster and it seems to fail. All my nodes are using apache/cassandra-3.0.0 branch. At the beginning, I can see the following error:INFO 18:45:55 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a ID#0] Prepare completed. Receiving 42 files(1910066622 bytes), sending 0 files(0 bytes)WARN 18:45:55 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Retrying for following errorjava.lang.RuntimeException: Unknown column added_time during deserialization at org.apache.cassandra.db.SerializationHeader$Component.toHeader(SerializationHeader.java:331) ~[main/:na] at org.apache.cassandra.streaming.StreamReader.createWriter(StreamReader.java:136) ~[main/:na] at org.apache.cassandra.streaming.compress.CompressedStreamReader.read(CompressedStreamReader.java:77) ~[main/:na] at org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(IncomingFileMessage.java:50) [main/:na] at org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(IncomingFileMessage.java:39) [main/:na] at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:59) [main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:261) [main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]ERROR 18:45:55 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Streaming error occurredjava.lang.IllegalArgumentException: Unknown type 0 at org.apache.cassandra.streaming.messages.StreamMessage$Type.get(StreamMessage.java:97) ~[main/:na] at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:58) ~[main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:261) ~[main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]INFO 18:45:55 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Session with /54.210.187.114 is completeINFO 18:45:56 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a ID#0] Prepare completed. Receiving 38 files(2323537628 bytes), sending 0 files(0 bytes)WARN 18:45:56 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Retrying for following errorjava.lang.RuntimeException: Unknown column added_time during deserialization at org.apache.cassandra.db.SerializationHeader$Component.toHeader(SerializationHeader.java:331) ~[main/:na] at org.apache.cassandra.streaming.StreamReader.createWriter(StreamReader.java:136) ~[main/:na] at org.apache.cassandra.streaming.compress.CompressedStreamReader.read(CompressedStreamReader.java:77) ~[main/:na] at org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(IncomingFileMessage.java:50) [main/:na] at org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(IncomingFileMessage.java:39) [main/:na] at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:59) [main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:261) [main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]ERROR 18:45:56 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Streaming error occurredjava.lang.IllegalArgumentException: Unknown type 0 at org.apache.cassandra.streaming.messages.StreamMessage$Type.get(StreamMessage.java:97) ~[main/:na] at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:58) ~[main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:261) ~[main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]INFO 18:45:56 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Session with /54.210.184.198 is completeINFO 18:45:56 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a ID#0] Prepare completed. Receiving 35 files(2069893759 bytes), sending 0 files(0 bytes)WARN 18:45:57 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Retrying for following errorjava.lang.AssertionError: null at org.apache.cassandra.db.PartitionColumns$Builder.add(PartitionColumns.java:168) ~[main/:na] at org.apache.cassandra.db.SerializationHeader$Component.toHeader(SerializationHeader.java:333) ~[main/:na] at org.apache.cassandra.streaming.StreamReader.createWriter(StreamReader.java:136) ~[main/:na] at org.apache.cassandra.streaming.compress.CompressedStreamReader.read(CompressedStreamReader.java:77) ~[main/:na] at org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(IncomingFileMessage.java:50) [main/:na] at org.apache.cassandra.streaming.messages.IncomingFileMessage$1.deserialize(IncomingFileMessage.java:39) [main/:na] at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:59) [main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:261) [main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]ERROR 18:45:57 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Streaming error occurredjava.lang.IllegalArgumentException: Unknown type 0 at org.apache.cassandra.streaming.messages.StreamMessage$Type.get(StreamMessage.java:97) ~[main/:na] at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:58) ~[main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:261) ~[main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]INFO 18:45:57 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Session with /54.210.157.2 is completeWARN 18:45:57 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Stream failedERROR 18:45:57 Error while waiting on bootstrap to complete. Bootstrap will have to be restarted.java.util.concurrent.ExecutionException: org.apache.cassandra.streaming.StreamException: Stream failed at com.google.common.util.concurrent.AbstractFuture$Sync.getValue(AbstractFuture.java:299) ~[guava-18.0.jar:na] at com.google.common.util.concurrent.AbstractFuture$Sync.get(AbstractFuture.java:286) ~[guava-18.0.jar:na] at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:116) ~[guava-18.0.jar:na] at org.apache.cassandra.service.StorageService.bootstrap(StorageService.java:1245) [main/:na] at org.apache.cassandra.service.StorageService.joinTokenRing(StorageService.java:935) [main/:na] at org.apache.cassandra.service.StorageService.initServer(StorageService.java:710) [main/:na] at org.apache.cassandra.service.StorageService.initServer(StorageService.java:581) [main/:na] at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:345) [main/:na] at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:561) [main/:na] at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:689) [main/:na]Caused by: org.apache.cassandra.streaming.StreamException: Stream failed at org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onFailure(StreamEventJMXNotifier.java:85) ~[main/:na] at com.google.common.util.concurrent.Futures$6.run(Futures.java:1310) ~[guava-18.0.jar:na] at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:457) ~[guava-18.0.jar:na] at com.google.common.util.concurrent.ExecutionList.executeListener(ExecutionList.java:156) ~[guava-18.0.jar:na] at com.google.common.util.concurrent.ExecutionList.execute(ExecutionList.java:145) ~[guava-18.0.jar:na] at com.google.common.util.concurrent.AbstractFuture.setException(AbstractFuture.java:202) ~[guava-18.0.jar:na] at org.apache.cassandra.streaming.StreamResultFuture.maybeComplete(StreamResultFuture.java:210) ~[main/:na] at org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamResultFuture.java:186) ~[main/:na] at org.apache.cassandra.streaming.StreamSession.closeSession(StreamSession.java:430) ~[main/:na] at org.apache.cassandra.streaming.StreamSession.onError(StreamSession.java:525) ~[main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:279) ~[main/:na] at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_45]Oct 19, 2015 6:45:57 PM com.google.common.util.concurrent.ExecutionList executeListenerSEVERE: RuntimeException while executing runnable com.google.common.util.concurrent.Futures$6@59444306 with executor INSTANCEjava.lang.NullPointerException at org.apache.cassandra.service.StorageService$2.onFailure(StorageService.java:1240) at com.google.common.util.concurrent.Futures$6.run(Futures.java:1310) at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:457) at com.google.common.util.concurrent.ExecutionList.executeListener(ExecutionList.java:156) at com.google.common.util.concurrent.ExecutionList.execute(ExecutionList.java:145) at com.google.common.util.concurrent.AbstractFuture.setException(AbstractFuture.java:202) at org.apache.cassandra.streaming.StreamResultFuture.maybeComplete(StreamResultFuture.java:210) at org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamResultFuture.java:186) at org.apache.cassandra.streaming.StreamSession.closeSession(StreamSession.java:430) at org.apache.cassandra.streaming.StreamSession.onError(StreamSession.java:525) at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:279) at java.lang.Thread.run(Thread.java:745)The "added_time" is a bigint column. I do see that the node is marked as UJ in nodetool status and the bootstraping continue to run. But at a certain point, it hangs forever and restarting it doesn't help. I'm not 100% sure the hang issue is related to the above error though. But I'd like to fix this one before trying again. Any idea what's going on with that bigint type?</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.BatchTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.UpdatesCollector.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ModificationStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.BatchStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10557" opendate="2015-10-20 00:00:00" fixdate="2015-11-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Streaming can throw exception when trying to retry</summary>
      <description>Streaming can throw below exception when trying to retry.This seems to be happening when underlining cause is not catched properly.ERROR 18:45:56 [Stream #9f95fa90-7691-11e5-931f-5b735851f84a] Streaming error occurredjava.lang.IllegalArgumentException: Unknown type 0 at org.apache.cassandra.streaming.messages.StreamMessage$Type.get(StreamMessage.java:97) ~[main/:na] at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:58) ~[main/:na] at org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler.run(ConnectionHandler.java:261) ~[main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]</description>
      <version>2.1.12,2.2.4,3.0.0</version>
      <fixedVersion>Legacy/StreamingandMessaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamReader.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.compress.CompressedStreamReader.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10559" opendate="2015-10-21 00:00:00" fixdate="2015-10-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Support encrypted and plain traffic on the same port</summary>
      <description>To be able to migrate clusters in a rolling way from plain to encrypted traffic it would be very helpful if we could have Cassandra accept both on the same port.</description>
      <version>2.1.12,2.2.4,3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.service.NativeTransportServiceTest.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.Server.java</file>
      <file type="M">src.java.org.apache.cassandra.config.EncryptionOptions.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10573" opendate="2015-10-22 00:00:00" fixdate="2015-11-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>select_distinct_test flapping on 2.2 -&gt; 3.0 upgrade path</summary>
      <description>The upgrade_tests/cql_tests.py:TestCQLNodes2RF1.select_distinct_test flaps dtest flaps on CassCI. It flaps locally for me as well:CASSANDRA_VERSION=git:cassandra-3.0 nosetests upgrade_tests/cql_tests.py:TestCQLNodes2RF1.select_distinct_testOnce this dtest pr is merged, you can run against a local directory with CASSANDRA_VERSION=git:cassandra-3.0 OLD_CASSANDRA_VERSION=binary:2.2.3 UPGRADE_TO_DIR=~/path/to/cassandra nosetests upgrade_tests/cql_tests.py:TestCQLNodes2RF1.select_distinct_test --no-skipApologies for the ugly interface for that. To run on Windows, use set to set environment variables like CASSANDRA_VERSION instead of including them in the command.The history for the test is here:http://cassci.datastax.com/view/cassandra-3.0/job/cassandra-3.0_dtest/280/testReport/junit/upgrade_tests.cql_tests/TestCQL/select_distinct_test/Note that the name of the class containing the test has changed from TestCQL to ; its behavior hasn't.</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ReadCommand.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10577" opendate="2015-10-23 00:00:00" fixdate="2015-10-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix cqlsh COPY commands that use NULL</summary>
      <description>Looks like this commit:https://github.com/apache/cassandra/commit/806378c8c295fb062f94eb8bf0f719b398d27745broke some of the behavior of cqlsh COPY:http://cassci.datastax.com/view/cassandra-3.0/job/cassandra-3.0_dtest/280/testReport/cqlsh_tests.cqlsh_copy_tests/CqlshCopyTest/test_null_as_null_indicator/history/http://cassci.datastax.com/view/cassandra-3.0/job/cassandra-3.0_dtest/280/testReport/cqlsh_tests.cqlsh_copy_tests/CqlshCopyTest/test_undefined_as_null_indicator/history/The NULL tests are the only ones that fail, so it doesn't look like any other parts of it are broken:http://cassci.datastax.com/view/cassandra-3.0/job/cassandra-3.0_dtest/280/testReport/cqlsh_tests.cqlsh_copy_tests/CqlshCopyTest/</description>
      <version>2.1.12,2.2.4,3.0.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="10590" opendate="2015-10-25 00:00:00" fixdate="2015-11-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>LegacySSTableTest fails after CASSANDRA-10360</summary>
      <description>LegacySSTableTest fails reading pre-3.0 sstables (versions jb, ka, la) with clustering keys and counters.First failing 3.0 testall build/cc slebresne</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.UnfilteredDeserializer.java</file>
      <file type="M">src.java.org.apache.cassandra.db.columniterator.SSTableReversedIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.columniterator.AbstractSSTableIterator.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10602" opendate="2015-10-27 00:00:00" fixdate="2015-11-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>2 upgrade test failures: static_columns_paging_test and multi_list_set_test</summary>
      <description>The two following test throws a NPE: http://cassci.datastax.com/job/cassandra-3.0_dtest/293/testReport/junit/upgrade_tests.paging_test/TestPagingDataNodes2RF1/static_columns_paging_test/ http://cassci.datastax.com/job/cassandra-3.0_dtest/293/testReport/junit/upgrade_tests.cql_tests/TestCQLNodes3RF3/multi_list_set_test/</description>
      <version>3.0.0</version>
      <fixedVersion>Legacy/CQL,Legacy/Testing</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.LegacyLayout.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10620" opendate="2015-10-29 00:00:00" fixdate="2015-10-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Debian package build broken.</summary>
      <description>Debian package build is broken post- CASSANDRA-5261 with the removal of token-generator. tools/bin/sstableofflinerelevel added, as well, since it was missing.</description>
      <version>3.0.0</version>
      <fixedVersion>Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.cassandra-tools.install</file>
    </fixedFiles>
  </bug>
  <bug id="10634" opendate="2015-11-2 00:00:00" fixdate="2015-11-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Materialized Views filter paired endpoints to local DC even when not using DC-aware replication</summary>
      <description>When calculating paired view replicas on MV writes, we filter out base and view replicas that aren't in the local datacenter. If we are using SimpleStrategy, this filtering is incorrect, since our replica placement is not datacenter aware.We should behave the same as DC-aware consistency levels and only perform this datacenter-aware filtering if the replication strategy is an instance of NetworkTopologyStrategy.</description>
      <version>3.0.0</version>
      <fixedVersion>Feature/MaterializedViews,Legacy/Coordination</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.view.ViewUtils.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10652" opendate="2015-11-4 00:00:00" fixdate="2015-11-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tracing prevents startup after upgrading</summary>
      <description>After upgrading from 2.1 to 3.0, the system_traces.sessions table is not properly upgraded to include the client column added in CASSANDRA-8162. Just upgrading from a clean 2.2 install to 3.0 won't show this error because the column was included in 2.2, it just doesn't break the queries in that release.The errors I get when querying system_traces.sessions:java.lang.RuntimeException: java.lang.IllegalStateException: [ColumnDefinition{name=client, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, position=-1}, ColumnDefinition{name=command, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, position=-1}, ColumnDefinition{name=coordinator, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, position=-1}, ColumnDefinition{name=duration, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, position=-1}, ColumnDefinition{name=request, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, position=-1}, ColumnDefinition{name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, position=-1}, ColumnDefinition{name=parameters, type=org.apache.cassandra.db.marshal.MapType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, position=-1}] is not a subset of [coordinator duration request started_at parameters] at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2350) ~[main/:na] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_45] at org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService$FutureTask.run(AbstractTracingAwareExecutorService.java:164) ~[main/:na] at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:105) [main/:na] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]Caused by: java.lang.IllegalStateException: [ColumnDefinition{name=client, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, position=-1}, ColumnDefinition{name=command, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, position=-1}, ColumnDefinition{name=coordinator, type=org.apache.cassandra.db.marshal.InetAddressType, kind=REGULAR, position=-1}, ColumnDefinition{name=duration, type=org.apache.cassandra.db.marshal.Int32Type, kind=REGULAR, position=-1}, ColumnDefinition{name=request, type=org.apache.cassandra.db.marshal.UTF8Type, kind=REGULAR, position=-1}, ColumnDefinition{name=started_at, type=org.apache.cassandra.db.marshal.TimestampType, kind=REGULAR, position=-1}, ColumnDefinition{name=parameters, type=org.apache.cassandra.db.marshal.MapType(org.apache.cassandra.db.marshal.UTF8Type,org.apache.cassandra.db.marshal.UTF8Type), kind=REGULAR, position=-1}] is not a subset of [coordinator duration request started_at parameters] at org.apache.cassandra.db.Columns$Serializer.encodeBitmap(Columns.java:531) ~[main/:na] at org.apache.cassandra.db.Columns$Serializer.serializeSubset(Columns.java:465) ~[main/:na] at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:178) ~[main/:na] at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:108) ~[main/:na] at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:96) ~[main/:na] at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:132) ~[main/:na] at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:87) ~[main/:na] at org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIteratorSerializer.java:77) ~[main/:na] at org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer.serialize(UnfilteredPartitionIterators.java:298) ~[main/:na] at org.apache.cassandra.db.ReadResponse$LocalDataResponse.build(ReadResponse.java:136) ~[main/:na] at org.apache.cassandra.db.ReadResponse$LocalDataResponse.&lt;init&gt;(ReadResponse.java:128) ~[main/:na] at org.apache.cassandra.db.ReadResponse$LocalDataResponse.&lt;init&gt;(ReadResponse.java:123) ~[main/:na] at org.apache.cassandra.db.ReadResponse.createDataResponse(ReadResponse.java:65) ~[main/:na] at org.apache.cassandra.db.ReadCommand.createResponse(ReadCommand.java:288) ~[main/:na] at org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:1692) ~[main/:na] at org.apache.cassandra.service.StorageProxy$DroppableRunnable.run(StorageProxy.java:2346) ~[main/:na] ... 4 common frames omittedThis means that we cannot read the sessions once a trace has occurred on 3.0. Much worse is when a trace gets into a commit log, Cassandra will stop startup because of replaying that file:org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException: Unexpected error deserializing mutation; saved to /var/folders/j4/f48yz8cx0c302b21nf3fd1vh0000gn/T/mutation5130350977980177204dat. This may be caused by replaying a mutation against a table with the same name but incompatible schema. Exception follows: java.lang.RuntimeException: Unknown column client during deserialization at org.apache.cassandra.db.commitlog.CommitLogReplayer.handleReplayError(CommitLogReplayer.java:633) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.replayMutation(CommitLogReplayer.java:556) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.replaySyncSection(CommitLogReplayer.java:509) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(CommitLogReplayer.java:404) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(CommitLogReplayer.java:151) [main/:na] at org.apache.cassandra.db.commitlog.CommitLog.recover(CommitLog.java:189) [main/:na] at org.apache.cassandra.db.commitlog.CommitLog.recover(CommitLog.java:169) [main/:na] at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:295) [main/:na] at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:561) [main/:na] at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:689) [main/:na]</description>
      <version>2.2.4,3.0.0</version>
      <fixedVersion>Legacy/Observability</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10655" opendate="2015-11-5 00:00:00" fixdate="2015-11-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Skipping values during reads may cause incorrect read repairs</summary>
      <description>Data responses may skip values for columns not selected by the column filter. This can lead to empty values being erroneously included in repair mutations sent out by the coordinator.</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.filter.ColumnFilter.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="5261" opendate="2013-2-15 00:00:00" fixdate="2013-10-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Remove token generator</summary>
      <description>Obsoleted by vnodes</description>
      <version>3.0.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">tools.bin.token-generator.bat</file>
      <file type="M">tools.bin.token-generator</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="7645" opendate="2014-7-29 00:00:00" fixdate="2014-11-29 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: show partial trace if incomplete after max_trace_wait</summary>
      <description>If a trace hasn't completed within max_trace_wait, cqlsh will say the trace is unavailable and not show anything. It (and the underlying python driver) determines when the trace is complete by checking if the duration column in system_traces.sessions is non-null. If duration is null but we still have some trace events when the timeout is hit, cqlsh should print whatever trace events we have along with a warning about it being incomplete.</description>
      <version>2.2.4,3.0.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="9975" opendate="2015-8-4 00:00:00" fixdate="2015-10-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Flatten Iterator call hierarchy with a shared Transformer</summary>
      <description>Stepping through a read response is made exceedingly difficult by the sheer depth of the call hierarchy, and how rapidly your context jumps around. This ticket intend to partially address that, by flattening one of the main causes of this: iterator transformations.I have a patch that attempts to mitigate (but not entirely eliminate) this, through the introduction of a RowTransformer class that all transformations are applied through. If a transformation has already been applied, the RowTransformer class does not wrap a new iterator, but instead returns a new RowTransformer that wraps the original underlying (untransformed) iterator and both transformations. This can accumulate an arbitrary number of transformations and, quite importantly, can apply the filtration step Unfiltered -&gt; Row in the same instance as well. The intention being that a majority of control flow happens inside this RowTransformer, so there is far less context jumping to cope with.</description>
      <version>3.0.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.Util.java</file>
      <file type="M">test.unit.org.apache.cassandra.service.DataResolverTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.repair.ValidatorTest.java</file>
      <file type="M">test.data.legacy-sstables.jb.Keyspace1.Keyspace1-Standard1-jb-0-Summary.db</file>
      <file type="M">src.java.org.apache.cassandra.utils.Throwables.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.CloseableIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftResultsMerger.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.service.pager.QueryPagers.java</file>
      <file type="M">src.java.org.apache.cassandra.service.pager.QueryPager.java</file>
      <file type="M">src.java.org.apache.cassandra.service.pager.MultiPartitionPager.java</file>
      <file type="M">src.java.org.apache.cassandra.service.pager.AbstractQueryPager.java</file>
      <file type="M">src.java.org.apache.cassandra.service.DataResolver.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.ReducingKeyIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.big.BigTableWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.index.SecondaryIndexBuilder.java</file>
      <file type="M">src.java.org.apache.cassandra.index.internal.composites.CompositesSearcher.java</file>
      <file type="M">src.java.org.apache.cassandra.db.SinglePartitionSliceCommand.java</file>
      <file type="M">src.java.org.apache.cassandra.db.SinglePartitionNamesCommand.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.WrappingRowIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.UnfilteredRowIterators.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.UnfilteredRowIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.RowIterators.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.RowIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.AlteringUnfilteredRowIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadQuery.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadCommand.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.WrappingUnfilteredPartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.WrappingPartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.UnfilteredPartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.PurgingPartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.PartitionIterators.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.PartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.CountingUnfilteredRowIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.CountingUnfilteredPartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.CountingRowIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.CountingPartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.AlteringUnfilteredPartitionIterator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.PartitionRangeReadCommand.java</file>
      <file type="M">src.java.org.apache.cassandra.db.filter.RowFilter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.filter.DataLimits.java</file>
      <file type="M">src.java.org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionIterator.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
