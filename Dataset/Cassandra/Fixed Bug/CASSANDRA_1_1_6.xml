<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="3460" opendate="2011-11-6 00:00:00" fixdate="2011-9-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Increase precision of elapsed time in casandra-cli</summary>
      <description>Cassandra often return response in less then &lt; 1 msfrom another datacenter&amp;#91;default@test&amp;#93; get sipdb&amp;#91;23&amp;#93;;Returned 0 results.Elapsed time: 219 msec(s).from own dataceter&amp;#91;default@test&amp;#93; get sipdb&amp;#91;13&amp;#93;;Returned 0 results.Elapsed time: 0 msec(s).Precession of this timer needs to be increased a bit, while looking at network latency adding 1 number should be enough like : 0.2 ms should be sufficient. It would be good to display sub milliseconds only if time elapsed is &lt; 1 ms.</description>
      <version>1.1.6</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4034" opendate="2012-3-9 00:00:00" fixdate="2012-9-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: Alphabetize the "Miscellaneous Help Topics" section</summary>
      <description>The first section in the help is in alphabetical order, but not the second part:Miscellaneous help topics:==========================DROP_INDEX CREATE DELETE_WHERE ALTER_DROP DROP_KEYSPACE UPDATE_USING SELECT_EXPR ALTER_ALTER UPDATE_WHERE UUID_INPUT TYPES TIMESTAMP_OUTPUT DELETE_COLUMNS SELECT_COLUMNFAMILY CONSISTENCYLEVEL ALTER_ADD CREATE_COLUMNFAMILY_OPTIONS CREATE_INDEX ALTER_WITH BEGIN CREATE_KEYSPACE APPLY UPDATE_SET ASCII_OUTPUT DELETE_USING UPDATE_COUNTERS DROP CREATE_COLUMNFAMILY_TYPES TRUNCATE TIMESTAMP_INPUT DROP_COLUMNFAMILY INSERT ALTER BLOB_INPUT TEXT_OUTPUT CREATE_COLUMNFAMILYSELECT_WHERE UPDATE DELETE BOOLEAN_INPUT SELECT_LIMIT</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4073" opendate="2012-3-22 00:00:00" fixdate="2012-9-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh: flush CAPTURE output after each command</summary>
      <description>In cqlsh A user might want to enable capturing, run a command, and then go look at the file to see the output. This workflow could be useful, for instance, where the output is large. Internal buffering forces the user to turn capture off each time he or she wants to see the output.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4322" opendate="2012-6-8 00:00:00" fixdate="2012-9-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Error in CLI when updating keyspace</summary>
      <description>To repro:1. Open the cli2. Create a keyspace: create keyspace ks1 with placement_strategy = SimpleStrategy and strategy_options = {replication_factor:1};3. Update the keyspace: update keyspace ks1 with strategy_options = {replication_factor:3};The output is:&amp;#91;default@unknown&amp;#93; create keyspace ks1 with placement_strategy = SimpleStrategy and strategy_options = {replication_factor:1}; 8ecd5e16-e0f7-37e7-850e-38ee1a3a510eWaiting for schema agreement...... schemas agree across the cluster&amp;#91;default@unknown&amp;#93; update keyspace ks1 with strategy_options = {replication_factor:3}; 857af387-6677-3e39-bdf6-e1132673c25bWaiting for schema agreement...... schemas agree across the clusterorg.apache.thrift.protocol.TProtocolException: Required field 'keyspace' was not present! Struct: describe_keyspace_args(keyspace:null)&amp;#91;default@unknown&amp;#93;The problem is that the patch in CASSANDRA-4052 assumes the CLI is authenticated to a working keyspace. getKSMetaData in executeUpdateKeySpace is called with keySpace, which is null.Changing this to keyspaceName partially solves it, we now get:&amp;#91;default@unknown&amp;#93; update keyspace ks1 with strategy_options = {replication_factor:3};Not authenticated to a working keyspace.18d750fc-19d9-30f0-b8b9-18b2e4a0a0d4Waiting for schema agreement...... schemas agree across the clusterNot authenticated to a working keyspace.This comes from replayAssumptions in getKSMetaData.It seems that the refresh code needs to be reworked slightly to not assume the CLI is authenticated to a keyspace.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4334" opendate="2012-6-12 00:00:00" fixdate="2012-9-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh tab completion error in "CREATE KEYSPACE"</summary>
      <description>The following:cqlsh&gt; CREATE KEYSPACE test WITH strategy_class = 'S&lt;TAB&gt;will tab complete like this:cqlsh&gt; CREATE KEYSPACE test WITH strategy_class = 'SimpleStrategy 'Note the extra space after SimpleStrategy. Not a big deal to remove, but it could be misleading to people.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
    </fixedFiles>
  </bug>
  <bug id="4423" opendate="2012-7-6 00:00:00" fixdate="2012-9-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>auto completion in cqlsh should work when using fully qualified name</summary>
      <description>minor cqlsh improvement:the auto completion in cqlsh rocks, so this is just to make a nitpick improvement: if i typecqlsh&gt; create KEYSPACE test WITH strategy_class = 'SimpleStrategy' and then tab tab after it, it will auto complete into:cqlsh&gt; create KEYSPACE test WITH strategy_class = 'SimpleStrategy' AND strategy_options:replication_factor = but if i use a fully qualified name:cqlsh&gt; create KEYSPACE test WITH strategy_class = 'org.apache.cassandra.locator.SimpleStrategy' AND &lt;strategy_option_name&gt; it is not smart enough to figured out the available options.It'd be nice to make the auto completion works for those fully qualified cases.</description>
      <version>1.1.6</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cqlhandling.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
    </fixedFiles>
  </bug>
  <bug id="4454" opendate="2012-7-20 00:00:00" fixdate="2012-9-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add a notice on cqlsh startup about CQL2/3 switches</summary>
      <description>Several developers I've talked with seem not to have noticed the -3 switch immediately to run in CQL3 mode. If missing, cqlsh can obviously appear buggy in its way to handle CQL3.I guess it would be worth to add a notice at startup about this important detail.</description>
      <version>1.1.6</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.pylexotron.py</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4594" opendate="2012-8-30 00:00:00" fixdate="2012-9-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>COPY TO and COPY FROM don&amp;#39;t default to consistent ordering of columns</summary>
      <description>Here is the input: CREATE KEYSPACE test WITH strategy_class = 'SimpleStrategy' AND strategy_options:replication_factor = 1;USE test; CREATE TABLE airplanes ( name text PRIMARY KEY, manufacturer ascii, year int, mach float ); INSERT INTO airplanes (name, manufacturer, year, mach) VALUES ('P38-Lightning', 'Lockheed', 1937, '.7'); COPY airplanes TO 'temp.cfg' WITH HEADER=true; TRUNCATE airplanes; COPY airplanes FROM 'temp.cfg' WITH HEADER=true; SELECT * FROM airplanes;Here is what happens when executed. Note how it tried to import the float into the int column:cqlsh:test&gt; DROP KEYSPACE test; cqlsh:test&gt; CREATE KEYSPACE test WITH strategy_class = 'SimpleStrategy' AND strategy_options:replication_factor = 1;cqlsh:test&gt; USE test; cqlsh:test&gt; cqlsh:test&gt; CREATE TABLE airplanes ( ... name text PRIMARY KEY, ... manufacturer ascii, ... year int, ... mach float ... ); cqlsh:test&gt; cqlsh:test&gt; INSERT INTO airplanes (name, manufacturer, year, mach) VALUES ('P38-Lightning', 'Lockheed', 1937, '.7');cqlsh:test&gt; cqlsh:test&gt; COPY airplanes TO 'temp.cfg' WITH HEADER=true; 1 rows exported in 0.003 seconds. cqlsh:test&gt; TRUNCATE airplanes; cqlsh:test&gt; cqlsh:test&gt; COPY airplanes FROM 'temp.cfg' WITH HEADER=true; Bad Request: unable to make int from '0.7' Aborting import at record #0 (line 1). Previously-inserted values still present.0 rows imported in 0.002 seconds.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4611" opendate="2012-9-4 00:00:00" fixdate="2012-10-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add AlterKeyspace statement</summary>
      <description>Somehow we never added an "ALTER KEYSPACE" statement. We should.</description>
      <version>1.1.6,1.2.0beta1</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql.QueryProcessor.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.CreateColumnFamilyStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.AlterTableStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
      <file type="M">src.java.org.apache.cassandra.cql3.CFPropDefs.java</file>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4634" opendate="2012-9-8 00:00:00" fixdate="2012-9-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh --color option doesn&amp;#39;t allow you to disable colors</summary>
      <description>There's no way to disable colors with cqlsh, despite it having a --color option, because that option can only enable color if present, not disable it, and the default is that color is enabled.(Incidentally, if the --file option is used, it will disable color.)</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4642" opendate="2012-9-11 00:00:00" fixdate="2012-9-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add offline scrub to debian package</summary>
      <description>When we added the offline scrub in CASSANDRA-4321, we forgot to add the launch script to the debian package. We should.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">debian.cassandra.install</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.sstablescrub</file>
    </fixedFiles>
  </bug>
  <bug id="4661" opendate="2012-9-12 00:00:00" fixdate="2012-10-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cassandra-cli: allow Double value type to be inserted to a column</summary>
      <description>as a cassandra-cli user, I'd like to set DoubleType value to cassandra through the cli tool, such that I could create test data from the cli tool easily.(similarly, I'd like to Double value available in the "assume" command: ex: assume pageCache comparator as double; )The email related to this issue:Hi all,I'm trying to manually adding some double values into a column family. From the Hector client, there's a DoubleSerializer.but looks like the cli tool is not providing a way to enter floating point values. here's the message I got:&amp;#91;default@video&amp;#93; set cateogry&amp;#91;&amp;#39;1&amp;#39;&amp;#93;&amp;#91;&amp;#39;sport&amp;#39;&amp;#93; = float('0.5');Function 'float' not found. Available functions: bytes, integer, long, int, lexicaluuid, timeuuid, utf8, ascii, countercolumn.Is there a way to insert floating pointer value from the cli tool?</description>
      <version>1.1.6,1.2.0beta2</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.resources.org.apache.cassandra.cli.CliHelp.yaml</file>
      <file type="M">src.java.org.apache.cassandra.cli.CliClient.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4666" opendate="2012-9-13 00:00:00" fixdate="2012-9-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Add multi-line support to cqlsh history buffer</summary>
      <description>The cqlsh tool has history support. If you press the up arrow, you get previous entries.If you do a multi-line command however like: cqlsh &gt; dosomething;when you press the up arrow you get each individual statement separately. (First "something;" and then "do").This is not useful if you type a large create statement and typo one of the pieces.It'd be nice if cqlsh supported multi-line history items and could bring them back with the up arrow.</description>
      <version>1.1.6</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="4677" opendate="2012-9-18 00:00:00" fixdate="2012-9-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Change description of nodetool ring command</summary>
      <description>Additional option of 'nodetool ring' command is not documented. Old variant: ring - Print information about the token ringNew variant ring [keyspace] - Print information about the token ring for a given keyspace (for all keyspaces if it is not specified)Patch has been attached.Some history (I think it will be useful for someone who will have the same problem): I have 4-nodes cluster. One of nodes is located in other DC (DC2). I've met the problem that 'nodetool ring' shows that node in DC2 'Owns 0.00%'. I've found following questions:http://www.datastax.com/support-forums/topic/owns-in-nodetoolhttp://mail-archives.apache.org/mod_mbox/cassandra-user/201202.mbox/%3C323DBC99-8519-4E86-B69B-6520D53FA5CF@humbaba.net%3Eand task with fix:https://issues.apache.org/jira/browse/CASSANDRA-3412So you should use 'nodetool ring keyspace' for getting right information.</description>
      <version>1.1.6</version>
      <fixedVersion>Tool/nodetool</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.NodeCmd.java</file>
    </fixedFiles>
  </bug>
  <bug id="4698" opendate="2012-9-21 00:00:00" fixdate="2012-9-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Keyspace disappears when upgrading node from cassandra-1.1.1 to cassandra-1.1.5</summary>
      <description>Here is how I got the problem to happen:1. Get this zipped data directory (about 33Mb): scp cass@50.57.69.32:/home/cass/cassandra.zip ./ (password cass)2. Unzip it in /var/lib/3. clone the cassandra git repo4. git checkout cassandra-1.1.1; ant jar;5. bin/cassandra 6. Run cqlsh -3, then DESC COLUMNFAMILIES; Note the presence of Keyspace performance_tests7. pkill -f cassandra; git checkout cassandra-1.1.5; ant realclean; ant jar;8. bin/cassandra9. Run cqlsh -3, then DESC COLUMNFAMILIES; Note that there is no performance_tests keyspace</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.MigrationManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.RowMutation.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnSerializer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4709" opendate="2012-9-24 00:00:00" fixdate="2012-10-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>(CQL3) Missing validation for IN queries on column not part of the PK</summary>
      <description>Copy-pasting from the original mail (http://mail-archives.apache.org/mod_mbox/cassandra-user/201209.mbox/%3C20120922185826.GO6205@pslp2%3E):[cqlsh 2.2.0 | Cassandra 1.1.5 | CQL spec 3.0.0 | Thrift protocol 19.32.0]Use HELP for help.cqlsh&gt; cqlsh&gt; create keyspace xpl1 WITH strategy_class ='SimpleStrategy' and strategy_options:replication_factor=1;cqlsh&gt; use xpl1;cqlsh:xpl1&gt; create table t1 (pk varchar primary key, col1 varchar, col2 varchar);cqlsh:xpl1&gt; create index t1_c1 on t1(col1);cqlsh:xpl1&gt; create index t1_c2 on t1(col2);cqlsh:xpl1&gt; insert into t1 (pk, col1, col2) values ('pk1','foo1','bar1');cqlsh:xpl1&gt; insert into t1 (pk, col1, col2) values ('pk1a','foo1','bar1');cqlsh:xpl1&gt; insert into t1 (pk, col1, col2) values ('pk1b','foo1','bar1');cqlsh:xpl1&gt; insert into t1 (pk, col1, col2) values ('pk1c','foo1','bar1');cqlsh:xpl1&gt; insert into t1 (pk, col1, col2) values ('pk2','foo2','bar2');cqlsh:xpl1&gt; insert into t1 (pk, col1, col2) values ('pk3','foo3','bar3');cqlsh:xpl1&gt; select * from t1 where col2='bar1'; pk | col1 | col2------+------+------ pk1b | foo1 | bar1 pk1 | foo1 | bar1 pk1a | foo1 | bar1 pk1c | foo1 | bar1cqlsh:xpl1&gt; select * from t1 where col2 in ('bar1', 'bar2') ;cqlsh:xpl1&gt; We should either make that last query work or refuse the query but returning nothing is wrong.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4712" opendate="2012-9-25 00:00:00" fixdate="2012-9-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>bin/sstableloader should support authentication</summary>
      <description>bin/cassandra-cli does.bin/sstableloader does not.A cluster setup with SimpleAuthentication requires the client to login before it could load an sstable.</description>
      <version>1.1.6,1.2.0beta2</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.tools.BulkLoader.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4716" opendate="2012-9-25 00:00:00" fixdate="2012-10-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL3 predicate logic is reversed when used on a reversed column</summary>
      <description>Example:cqlsh:test&gt;cqlsh:test&gt; CREATE TABLE testrev ( ... key text, ... rdate timestamp, ... num double, ... PRIMARY KEY(key,rdate) ... ) WITH COMPACT STORAGE ... AND CLUSTERING ORDER BY(rdate DESC);cqlsh:test&gt; INSERT INTO testrev(key,rdate,num) VALUES ('foo','2012-01-01',10.5);cqlsh:test&gt; select key from testrev where rdate &gt; '2012-01-02' ; key ----- foo cqlsh:test&gt; select key from testrev where rdate &lt; '2012-01-02' ;cqlsh:test&gt;</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4721" opendate="2012-9-25 00:00:00" fixdate="2012-9-25 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Have Cassandra return the right error for keyspaces with dots</summary>
      <description>cqlsh&gt; CREATE KEYSPACE 'solr.test' WITH strategy_class = 'SimpleStrategy' AND strategy_options:replication_factor = 1;Bad Request: Invalid keyspace name: shouldn't be empty nor more than 48 characters long (got "solr.test")</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.KSMetaData.java</file>
      <file type="M">src.java.org.apache.cassandra.config.CFMetaData.java</file>
    </fixedFiles>
  </bug>
  <bug id="4749" opendate="2012-10-2 00:00:00" fixdate="2012-10-2 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Possible problem with widerow in Pig URI</summary>
      <description>I don't have a good way to test this directly, but I'm concerned the Uri parsing for widerows isn't going to work. setLocation 1.) calls setLocationFromUri (which sets widerows to the Uri value)2.) sets widerows to a static value (which is defined as false)3.) sets widerows to the system setting if it exists. That doesn't seem right...But setLocationFromUri also gets called from setStoreLocation, and I don't really know the difference between setLocation and setStoreLocation in terms of what is going on in terms of the integration between cassandra/pig/hadoop.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.hadoop.pig.CassandraStorage.java</file>
    </fixedFiles>
  </bug>
  <bug id="4754" opendate="2012-10-3 00:00:00" fixdate="2012-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>There is an inconsistency between default configuration in cassandra.yaml and java code</summary>
      <description>Options max_hint_window_in_ms and in_memory_compaction_limit_in_mb have different values in cassandra.yaml and in java code. I suggest to lead java code values to cassandra.yaml values.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
    </fixedFiles>
  </bug>
  <bug id="4759" opendate="2012-10-3 00:00:00" fixdate="2012-10-3 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>CQL3 Predicate logic bug when using composite columns</summary>
      <description>Looks like a predicate logic bug that only happens when you have &gt; 2 primary keys and use COMPACT STORAGE (meaning its using composite columns under the hood)First I'll show it works with just 2 cqlsh:dev&gt; CREATE TABLE testrev ( ... key text, ... rdate timestamp, ... num double, ... PRIMARY KEY(key,rdate) ... ) WITH COMPACT STORAGE ... AND CLUSTERING ORDER BY(rdate DESC);cqlsh:dev&gt; INSERT INTO testrev(key,rdate,num) VALUES ('foo','2012-01-01',10.5);cqlsh:dev&gt; select * from testrev where key='foo' and rdate &gt; '2012-01-01';cqlsh:dev&gt; select * from testrev where key='foo' and rdate &gt;= '2012-01-01'; key | rdate | num-----+--------------------------+------ foo | 2012-01-01 00:00:00-0500 | 10.5Now we create with 3 parts to the PRIMARY KEYcqlsh:dev&gt; drop TABLE testrev ;cqlsh:dev&gt; CREATE TABLE testrev ( ... key text, ... rdate timestamp, ... rdate2 timestamp, ... num double, ... PRIMARY KEY(key,rdate,rdate2) ... ) WITH COMPACT STORAGE ... AND CLUSTERING ORDER BY(rdate DESC);cqlsh:dev&gt; INSERT INTO testrev(key,rdate,rdate2,num) VALUES ('foo','2012-01-01','2012-01-01',10.5);cqlsh:dev&gt; select * from testrev where key='foo' and rdate &gt; '2012-01-01'; key | rdate | rdate2 | num-----+--------------------------+--------------------------+------ foo | 2012-01-01 00:00:00-0500 | 2012-01-01 00:00:00-0500 | 10.5cqlsh:dev&gt; select * from testrev where key='foo' and rdate &gt;= '2012-01-01';The last query should return the row...</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4770" opendate="2012-10-5 00:00:00" fixdate="2012-10-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>(CQL3) data type not in lowercase are not handled correctly.</summary>
      <description>Seems that we accept int but we don't accept INT (that is, the parser accepts it, but we fail later to recognize it).</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.cql3.CFPropDefs.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4771" opendate="2012-10-5 00:00:00" fixdate="2012-1-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Setting TTL to Integer.MAX causes columns to not be persisted.</summary>
      <description>When inserting columns via batch mutation, we have an edge case where columns will be set to Integer.MAX. When setting the column expiration time to Integer.MAX, the columns do not appear to be persisted.Fails:Integer.MAX_VALUE Integer.MAX_VALUE/2Works:Integer.MAX_VALUE/3</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.thrift.ThriftValidation.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ExpiringColumn.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.ModificationStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4778" opendate="2012-10-8 00:00:00" fixdate="2012-10-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>leveled compaction does less work in L0 than intended</summary>
      <description>We have this code in the candidate loop:. if (SSTable.getTotalBytes(candidates) &gt; maxSSTableSizeInBytes) { // add sstables from L1 that overlap candidates candidates.addAll(overlapping(candidates, generations[1])); break; }thus, as soon as we have enough to compact to make one L1 sstable's worth of data, we stop collecting candidates.</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledManifest.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="4782" opendate="2012-10-9 00:00:00" fixdate="2012-10-9 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Commitlog not replayed after restart</summary>
      <description>It seems that there are two corner cases where commitlog is not replayed after a restart : After a reboot of a server + restart of cassandra (1.1.0 to 1.1.4) After doing an upgrade from cassandra 1.1.X to cassandra 1.1.5This is due to the fact that the commitlog segment id should always be an incrementing number (see this condition : https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java#L247 )But this assertion can be broken :In the first case, it is generated by System.nanoTime() but it seems that System.nanoTime() is using the boot time as the base/reference (at least on java6 &amp; linux), thus after a reboot, System.nanoTime() can return a lower number than before the reboot (and the javadoc says the reference is a relative point in time...)In the second case, this was introduced by #4601 (which changes System.nanoTime() by System.currentTimeMillis() thus people starting with 1.1.5 are safe)This could explain the following tickets : #4741 and #4481</description>
      <version>1.1.6</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SSTableMetadata.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.Descriptor.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
