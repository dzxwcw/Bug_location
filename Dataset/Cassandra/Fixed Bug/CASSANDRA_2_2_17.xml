<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="14365" opendate="2018-4-5 00:00:00" fixdate="2018-3-5 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Commit log replay failure for static columns with collections in clustering keys</summary>
      <description>In the old storage engine, static cells with a collection as part of the clustering key fail to validate because a 0 byte collection (like in the cell name of a static cell) isn't valid.To reproduce:1.CREATE TABLE test.x ( id int, id2 frozen&lt;map&lt;text, text&gt;&gt;, st int static, PRIMARY KEY (id, id2));INSERT INTO test.x (id, st) VALUES (1, 2);2. Kill the cassandra process3. Restart cassandra to replay the commitlogOutcome:ERROR [main] 2018-04-05 04:58:23,741 JVMStabilityInspector.java:99 - Exiting due to error while processing commit log during initialization.org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException: Unexpected error deserializing mutation; saved to /tmp/mutation3825739904516830950dat. This may be caused by replaying a mutation against a table with the same name but incompatible schema. Exception follows: org.apache.cassandra.serializers.MarshalException: Not enough bytes to read a set at org.apache.cassandra.db.commitlog.CommitLogReplayer.handleReplayError(CommitLogReplayer.java:638) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.replayMutation(CommitLogReplayer.java:565) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.replaySyncSection(CommitLogReplayer.java:517) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(CommitLogReplayer.java:397) [main/:na] at org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(CommitLogReplayer.java:143) [main/:na] at org.apache.cassandra.db.commitlog.CommitLog.recover(CommitLog.java:181) [main/:na] at org.apache.cassandra.db.commitlog.CommitLog.recover(CommitLog.java:161) [main/:na] at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:284) [main/:na] at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:533) [main/:na] at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:642) [main/:na]I haven't investigated if there are other more subtle issues caused by these cells failing to validate other places in the code, but I believe the fix for this is to check for 0 byte length collections and accept them as valid as we do with other types.I haven't had a chance for any extensive testing but this naive patch seems to have the desired affect. Patch2.2 PoC</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-alpha4,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.commitlog.CommitLogTest.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.SetSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.MapSerializer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15501" opendate="2020-1-13 00:00:00" fixdate="2020-4-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Duplicate results with DISTINCT queries in mixed mode 2.1/3.0</summary>
      <description>When a client switches coordinator from a 2.1 node to a 3.0 node it sends a 2.1 paging state to the 3.0 node. The 2.1 PagingState does not have remainingInPartition so on the 3.0 side we default this to Integer.MAX_VALUE. This value is then used to decide if the lastKey should be included in the result.</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-beta1,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.upgrade.UpgradeTestBase.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.upgrade.MixedModeReadRepairTest.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.UpgradeableCluster.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.Instance.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.DelegatingInvokableInstance.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.AbstractCluster.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15622" opendate="2020-3-4 00:00:00" fixdate="2020-3-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Unit tests throw UnknownHostException trying to use `InetAddress.getLocalHost()` instead of `FBUtilities.getLocalAddress()`</summary>
      <description>Many of the unit tests in Jenkins fail because of the use of `InetAddress.getLocalHost()` in the test classes.The Jenkins agents need a public ipaddress (and a hostname associated to it) so the Jenkins master can connect to them (agents can be hosted externally, by donating third-parties).The call to `InetAddress.getLocalHost()` can resolve to a hostname that can't be looked up.Not only can it not be listed in `/etc/hosts`, but we don't want it to be either (in case of accidental external port opening if the hostname points to the public ipaddress). (Which is also ASF policy on this infrastructure.)The unit test code needs to replace these code occurrences with the call to `FBUtilities.getLocalAddress()`</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-alpha4,4.0</version>
      <fixedVersion>Test/unit</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.triggers.TriggersTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.security.SSLFactoryTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.gms.ArrivalWindowTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.ThriftCQLTester.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.GuidGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="15651" opendate="2020-3-21 00:00:00" fixdate="2020-3-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Jenkins tests to use testclasslist where possible (like CircleCI)</summary>
      <description>Following up on CASSANDRA-15639Â make all the jenkins test jobs run in the same manner.This standards the approach across test jobs and to CircleCI, and will make it easier to parallelise test runs later on.</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-alpha4,4.0</version>
      <fixedVersion>Build,CI,Test/unit</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug id="15653" opendate="2020-3-23 00:00:00" fixdate="2020-3-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Disable JMX rebinding</summary>
      <description>JMX rebinding should be disabled for security reasons. More information provided to the PMC.</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-alpha4,4.0</version>
      <fixedVersion>Local/Other,Observability/JMX</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">build.xml</file>
      <file type="M">src.java.org.apache.cassandra.service.CassandraDaemon.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15668" opendate="2020-3-27 00:00:00" fixdate="2020-3-27 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Jenkins &amp;#39;Cassandra&amp;#39; label applied to the declarative pipeline</summary>
      <description>On the new ci-cassandra.apache.org infrastructure agents are siloed to projects.The declarative pipeline in the 2.2, 3.0, 3.11, and trunk branches do not restrict the builds to agents with the 'cassandra' label. Because these agents will not run jobs that don't specify this label, the pipeline task only ever runs on unlabelled agents, of which there are very few (and likely shouldn't exist, existing only from for now because of misconfigurations).Example of the failure to run the pipeline tasks is[Pipeline] Start of Pipeline[Pipeline] nodeStill waiting to schedule task'cassandra10' is reserved for jobs with matching label expression; 'cassandra11' is reserved for jobs with matching label expression; 'cassandra12' is reserved for jobs with matching label expression; 'cassandra13' is reserved for jobs with matching label expression; 'cassandra14' is reserved for jobs with matching label expression; 'cassandra15' is reserved for jobs with matching label expression; 'cassandra16' is reserved for jobs with matching label expression; 'cassandra1' is reserved for jobs with matching label expression; 'cassandra2' is reserved for jobs with matching label expression; 'cassandra3' is reserved for jobs with matching label expression; 'cassandra4' is reserved for jobs with matching label expression; 'cassandra5' is reserved for jobs with matching label expression; 'cassandra6' is reserved for jobs with matching label expression; 'cassandra7' is reserved for jobs with matching label expression; 'cassandra8' is reserved for jobs with matching label expression; 'cassandra9' is reserved for jobs with matching label expressionAlong with this change, we can improve the name of the *-test-jvm-dtest-forking stages.</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-alpha4,4.0</version>
      <fixedVersion>Build,CI,Test/unit</fixedVersion>
      <type>Task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">.jenkins.Jenkinsfile</file>
    </fixedFiles>
  </bug>
  <bug id="15679" opendate="2020-3-31 00:00:00" fixdate="2020-4-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>cqlsh COPY FROM of map of blobs fails with parse error "unhashable type: &amp;#39;bytearray&amp;#39;"</summary>
      <description>BackgroundA user was having issues loading CSV data with the COPY FROM command into a map column with blob values.Replication stepsI can easily replicate the problem with this simple table:CREATE TABLE community.blobmaptable ( id text PRIMARY KEY, blobmapcol map&lt;int, blob&gt;)I have this CSV file that contains just 1 row:$ cat blobmap.csv c3,{3: 0x74776f}And here's the error when I try to load it:cqlsh:community&gt; COPY blobmaptable (id, blobmapcol) FROM '~/blobmap.csv' ;Using 1 child processesStarting copy of community.blobmaptable with columns [id, blobmapcol].Failed to import 1 rows: ParseError - Failed to parse {3: 0x74776f} : unhashable type: 'bytearray', given up without retriesFailed to process 1 rows; failed rows written to import_community_blobmaptable.errProcessed: 1 rows; Rate: 2 rows/s; Avg. rate: 3 rows/s1 rows imported from 1 files in 0.389 seconds (0 skipped).I've also logged PYTHON-1234 because I wasn't sure if it was a Python driver issue. Cheers!</description>
      <version>2.1.x,2.2.17,3.11.7,4.0-alpha4,4.0</version>
      <fixedVersion>Tool/cqlsh</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.formatting.py</file>
      <file type="M">pylib.cqlshlib.copyutil.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="15708" opendate="2020-4-8 00:00:00" fixdate="2020-4-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Fix in-jvm upgrade dtests</summary>
      <description>In-jvm upgrade dtests were broken by CASSANDRA-15539</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-alpha4,4.0</version>
      <fixedVersion>Test/dtest/java</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.distributed.org.apache.cassandra.distributed.upgrade.UpgradeTestBase.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.UpgradeableCluster.java</file>
      <file type="M">test.distributed.org.apache.cassandra.distributed.impl.InstanceConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="15768" opendate="2020-4-28 00:00:00" fixdate="2020-5-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Tarball contains duplicate entries</summary>
      <description>The tarball contains a lot of duplicate entries. One example is cassandra-stress.bat:tar -tvf /home/map/Downloads/apache-cassandra-3.11.6-bin.tar.gz |grep "cassandra-stress.bat"-rw-r--r-- 0/0 1097 2020-02-10 23:57 apache-cassandra-3.11.6/tools/bin/cassandra-stress.bat-rwxr-xr-x 0/0 1097 2020-02-10 23:57 apache-cassandra-3.11.6/tools/bin/cassandra-stress.bat</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-beta1,4.0</version>
      <fixedVersion>Build,Packaging</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">build.xml</file>
    </fixedFiles>
  </bug>
  <bug id="15862" opendate="2020-6-7 00:00:00" fixdate="2020-6-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Use "allow list" or "safe list" instead of the term "whitelist"</summary>
      <description>Language matters. I'd like to remove all references in Apache Airflow to whitelist or black list, and the Cassandra Python API has some that we can't easily remove.The recent global events have made this even more relevant, but this has been on my radar for a while now. Here is a well written article for why I think it matters https://www.ncsc.gov.uk/blog-post/terminology-its-not-black-and-whiteIt's fairly common to say whitelisting and blacklisting to describe desirable and undesirable things in cyber security.However, there's an issue with the terminology. It only makes sense if you equate white with 'good, permitted, safe' and black with 'bad, dangerous, forbidden'. There are some obvious problems with this. My exposure to is via the Python API where there is the cassandra.pollicies.WhiteListRoundRobinPolicy class. I propose that this be renamed to AllowListRoundRobinPolicy instead. I do not know if there are other references.</description>
      <version>2.2.17,3.0.21,3.11.7,4.0-beta1,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>New Feature</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.DirectoriesTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.compaction.BlacklistingCompactionsTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.OutOfSpaceBase.java</file>
      <file type="M">src.java.org.apache.cassandra.service.DefaultFSErrorHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.format.SSTableReader.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Directories.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledManifest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.AbstractCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.BlacklistedDirectoriesMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.db.BlacklistedDirectories.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
