<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="13006" opendate="2016-12-6 00:00:00" fixdate="2016-12-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Disable automatic heap dumps on OOM error</summary>
      <description>With CASSANDRA-9861, a change was added to enable collecting heap dumps by default if the process encountered an OOM error. These heap dumps are stored in the Apache Cassandra home directory unless configured otherwise (see Cassandra Support Document for this feature). The creation and storage of heap dumps aides debugging and investigative workflows, but is not be desirable for a production environment where these heap dumps may occupy a large amount of disk space and require manual intervention for cleanups.  Managing heap dumps on out of memory errors and configuring the paths for these heap dumps are available as JVM options in JVM. The current behavior conflicts with the Boolean JVM flag HeapDumpOnOutOfMemoryError.  A patch can be proposed here that would make the heap dump on OOM error honor the HeapDumpOnOutOfMemoryError flag. Users who would want to still generate heap dumps on OOM errors can set the -XX:+HeapDumpOnOutOfMemoryError JVM option.</description>
      <version>2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Local/Config</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.utils.JVMStabilityInspectorTest.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.JVMStabilityInspector.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.HeapUtils.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StartupChecks.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">conf.cassandra-env.sh</file>
      <file type="M">conf.cassandra-env.ps1</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cassandra</file>
    </fixedFiles>
  </bug>
  <bug id="13873" opendate="2017-9-14 00:00:00" fixdate="2017-12-14 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Ref bug in Scrub</summary>
      <description>I'm hitting a Ref bug when many scrubs run against a node. This doesn't happen on 3.0.X. I'm not sure if/if not this happens with compactions too but I suspect it does.I'm not seeing any Ref leaks or double frees.To Reproduce:./tools/bin/cassandra-stress write n=10m -rate threads=100./bin/nodetool scrub#Ctrl-C./bin/nodetool scrub#Ctrl-C./bin/nodetool scrub#Ctrl-C./bin/nodetool scrubEventually in the logs you get:WARN &amp;#91;RMI TCP Connection(4)-127.0.0.1&amp;#93; 2017-09-14 15:51:26,722 NoSpamLogger.java:97 - Spinning trying to capture readers &amp;#91;BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-5-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-32-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-31-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-29-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-27-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-26-big-Data.db&amp;#39;), BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-20-big-Data.db&amp;#39;)&amp;#93;,released: &amp;#91;BigTableReader(path=&amp;#39;/home/jake/workspace/cassandra2/data/data/keyspace1/standard1-2eb5c780998311e79e09311efffdcd17/mc-5-big-Data.db&amp;#39;)&amp;#93;, This released table has a selfRef of 0 but is in the Tracker</description>
      <version>2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.IndexSummaryRedistribution.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14021" opendate="2017-11-15 00:00:00" fixdate="2017-1-15 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>test_pycodestyle_compliance - cqlsh_tests.cqlsh_tests.TestCqlsh code style errors</summary>
      <description>Once we commit CASSANDRA-14020, we'll need to cleanup all of the errors that pycodestyle has found to get the test passing</description>
      <version>2.1.20,2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">pylib.cqlshlib.wcwidth.py</file>
      <file type="M">pylib.cqlshlib.pylexotron.py</file>
      <file type="M">pylib.cqlshlib.formatting.py</file>
      <file type="M">pylib.cqlshlib.displaying.py</file>
      <file type="M">pylib.cqlshlib.cql3handling.py</file>
      <file type="M">pylib.cqlshlib.copyutil.py</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cqlsh</file>
    </fixedFiles>
  </bug>
  <bug id="14112" opendate="2017-12-13 00:00:00" fixdate="2017-12-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>The inspectJvmOptions startup check can trigger some Exception on some JRE versions</summary>
      <description>adelapena pointed out that the Startup check added by CASSANDRA-13006 can cause some Exception if Cassandra is run on a non GA version.After investigation it seems that it can also be the case for major versions or some JRE 9 versions.</description>
      <version>2.2.12,3.0.16,3.11.2,4.0-alpha1,4.0</version>
      <fixedVersion>Legacy/Core</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StartupChecks.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="14182" opendate="2018-1-22 00:00:00" fixdate="2018-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Sub-range selection for non-frozen collections should return null instead of empty</summary>
      <description>For non frozen collections, Cassandra cannot differentiate an empty collection from a null one. Due to that Cassandra returns always null for non-frozen empty collection.When selecting a sub range from a non-frozen collection, if the range does not contains any data an empty collection will be returned. It is counter intuitive and a null value should be returned instead.CREATE TABLE IF NOT EXISTS t (k int PRIMARY KEY, v set&lt;int&gt;);INSERT INTO t (k, v) VALUES (1, {});SELECT v FROM t; -- nullSELECT v[1] FROM t; -- nullSELECT v[1..] FROM t; -- nullINSERT INTO t (k, v) VALUES (1, {0});SELECT v FROM t; -- {0}SELECT v[1] FROM t; -- nullSELECT v[1..] FROM t; -- {}</description>
      <version>None</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.entities.CollectionsTest.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.SetSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.MapSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.ListSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.serializers.CollectionSerializer.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.selection.ElementsSelector.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
