<?xml version="1.0" encoding="UTF-8"?>

<bugrepository name="CASSANDRA">
  <bug id="10025" opendate="2015-8-8 00:00:00" fixdate="2015-1-8 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Allow compaction throttle to be real time</summary>
      <description>We should allow compaction throttle to be set while compaction is going on. Currently, it takes effect on the next compaction. This is bad for large compactions.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10140" opendate="2015-8-20 00:00:00" fixdate="2015-1-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Enable GC logging by default</summary>
      <description>Overhead for the gc logging is very small (with cycling logs in 7+) and it provides a ton of useful information. This will open up more for C* diagnostic tools to provide feedback as well without requiring restarts.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Local/Config</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">NEWS.txt</file>
      <file type="M">debian.patches.002cassandra.logdir.fix.dpatch</file>
      <file type="M">conf.jvm.options</file>
      <file type="M">conf.cassandra-env.sh</file>
      <file type="M">conf.cassandra-env.ps1</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10743" opendate="2015-11-20 00:00:00" fixdate="2015-1-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Failed upgradesstables (upgrade from 2.2.2 to 3.0.0)</summary>
      <description>[cassandra@dc01-rack01-cass01 ~]$ /home/cassandra/dsc-cassandra-3.0.0/bin/nodetool upgradesstableserror: null-- StackTrace --java.lang.UnsupportedOperationException at org.apache.cassandra.db.rows.CellPath$EmptyCellPath.get(CellPath.java:143) at org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer.serializedSize(CollectionType.java:226) at org.apache.cassandra.db.rows.BufferCell$Serializer.serializedSize(BufferCell.java:325) at org.apache.cassandra.db.rows.UnfilteredSerializer.sizeOfComplexColumn(UnfilteredSerializer.java:297) at org.apache.cassandra.db.rows.UnfilteredSerializer.serializedRowBodySize(UnfilteredSerializer.java:282) at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:163) at org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(UnfilteredSerializer.java:108) at org.apache.cassandra.db.ColumnIndex$Builder.add(ColumnIndex.java:144) at org.apache.cassandra.db.ColumnIndex$Builder.build(ColumnIndex.java:112) at org.apache.cassandra.db.ColumnIndex.writeAndBuildIndex(ColumnIndex.java:52) at org.apache.cassandra.io.sstable.format.big.BigTableWriter.append(BigTableWriter.java:149) at org.apache.cassandra.io.sstable.SSTableRewriter.append(SSTableRewriter.java:121) at org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.realAppend(DefaultCompactionWriter.java:57) at org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.append(CompactionAwareWriter.java:110) at org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:182) at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28) at org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionTask.java:78) at org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(AbstractCompactionTask.java:60) at org.apache.cassandra.db.compaction.CompactionManager$5.execute(CompactionManager.java:397) at org.apache.cassandra.db.compaction.CompactionManager$2.call(CompactionManager.java:292) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745)</description>
      <version>3.0.3,3.3</version>
      <fixedVersion>Legacy/LocalWrite-ReadPaths</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.rows.BTreeRow.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10762" opendate="2015-11-23 00:00:00" fixdate="2015-2-23 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>select_distinct_with_deletions_test failing in mixed version cluster</summary>
      <description>The dtests upgrade_tests.cql_tests.TestCQLNodes3RF3.select_distinct_with_deletions_test and upgrade_tests.cql_tests.TestCQLNodes2RF1.select_distinct_with_deletions_test are failing. While in a mixed node state, they do 'SELECT DISTINCT k FROM t1' on this tableCREATE TABLE t1 (k int PRIMARY KEY, c int, v int)More rows than expected are returned. Here is the sample output of one of those queries. As you can see, there are duplicate values of k returned in a DISTINCT k query. Seems like a bug when communicating between the 2.2 and 3.0 node.[Row(k=5), Row(k=1), Row(k=1), Row(k=8), Row(k=8), Row(k=2), Row(k=2), Row(k=4), Row(k=4), Row(k=7), Row(k=7), Row(k=6), Row(k=6), Row(k=9), Row(k=9), Row(k=3), Row(k=3)]</description>
      <version>3.0.3,3.3</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.service.DataResolverTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.SinglePartitionSliceCommandTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.rows.DigestBackwardCompatibilityTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.ReadResponseTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.PartitionTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.cache.CacheProviderTest.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.service.DigestResolver.java</file>
      <file type="M">src.java.org.apache.cassandra.service.DataResolver.java</file>
      <file type="M">src.java.org.apache.cassandra.repair.Validator.java</file>
      <file type="M">src.java.org.apache.cassandra.db.rows.UnfilteredRowIterators.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadResponse.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadCommandVerbHandler.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ReadCommand.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.java</file>
      <file type="M">src.java.org.apache.cassandra.db.partitions.PartitionUpdate.java</file>
      <file type="M">src.java.org.apache.cassandra.db.LegacyLayout.java</file>
      <file type="M">src.java.org.apache.cassandra.db.filter.DataLimits.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10817" opendate="2015-12-4 00:00:00" fixdate="2015-1-4 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>DROP USER is not case-sensitive</summary>
      <description>As per the summary DROP USER is not case sensitive, so:CREATE USER 'Test';LIST USERS; name | super-----------+------- Test | False cassandra | TrueDROP USER 'Test';InvalidRequest: code=2200 [Invalid query] message="test doesn't exist"DROP ROLE is case-sensitive and will drop the above user.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.cql3.Cql.g</file>
    </fixedFiles>
  </bug>
  <bug id="10847" opendate="2015-12-11 00:00:00" fixdate="2015-1-11 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Log a message when refusing a major compaction due to incremental repairedAt status</summary>
      <description>When you do a major compaction, but have some repaired sstables and some that are not, it will correctly not compact them together. However, it can be somewhat confusing the operator as to why they aren't compacting together. It would be beneficial, specifically when doing a major, to log that we aren't going to do a full major because of this.</description>
      <version>2.1.13,2.2.5,3.0.3,3.3</version>
      <fixedVersion>Local/Compaction</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10902" opendate="2015-12-17 00:00:00" fixdate="2015-1-17 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Skip saved cache directory when checking SSTables at startup</summary>
      <description>The SSTable StartupCheck looks for all files which end with "*.db" and compares the version. This causes problems if saved_cache_directory is a subdirectory of a data_file_directories. We should make sure that we are not checking any subdirectory where we might be writing *.db files.This is the cause of not being able to restart in CASSANDRA-10821.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Local/Config</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StartupChecks.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10910" opendate="2015-12-21 00:00:00" fixdate="2015-2-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Materialized view remained rows</summary>
      <description>I've created a table and a materialized view.&gt; CREATE TABLE test (id text PRIMARY KEY, key text, value int);&gt; CREATE MATERIALIZED VIEW test_view AS SELECT * FROM test WHERE key IS NOT NULL PRIMARY KEY(key, id);I've put a value into the table:&gt; update test set key='key', value=1 where id='id';&gt; select * from test; select * from test_view ; id | key | value----+-----+------- id | key | 1(1 rows) key | id | value-----+----+------- key | id | 1(1 rows)I've updated the value without specified the key of the materialized view:&gt; update test set value=2 where id='id';&gt; select * from test; select * from test_view ; id | key | value----+-----+------- id | key | 2(1 rows) key | id | value-----+----+------- key | id | 2(1 rows)It works as I think......but I've updated the key of the materialized view:&gt; update test set key='newKey' where id='id';&gt; select * from test; select * from test_view ; id | key | value----+--------+------- id | newKey | 2(1 rows) key | id | value--------+----+------- key | id | 2 newKey | id | 2(2 rows)...I've updated the value of the row:&gt; update test set key='newKey', value=3 where id='id';&gt; select * from test; select * from test_view ; id | key | value----+--------+------- id | newKey | 3(1 rows) key | id | value--------+----+------- key | id | 2 newKey | id | 3(2 rows)...I've deleted the row by the id key:&gt; delete from test where id='id';&gt; select * from test; select * from test_view ; id | key | value----+-----+-------(0 rows) key | id | value-----+----+------- key | id | 2(1 rows)Is it a bug?</description>
      <version>3.0.3,3.3</version>
      <fixedVersion>Feature/MaterializedViews,Legacy/Coordination</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.ViewTest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.view.TemporalRow.java</file>
    </fixedFiles>
  </bug>
  <bug id="10938" opendate="2015-12-24 00:00:00" fixdate="2015-2-24 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>test_bulk_round_trip_blogposts is failing occasionally</summary>
      <description>We get timeouts occasionally that cause the number of records to be incorrect:http://cassci.datastax.com/job/trunk_dtest/858/testReport/cqlsh_tests.cqlsh_copy_tests/CqlshCopyTest/test_bulk_round_trip_blogposts/</description>
      <version>2.1.13,2.2.5,3.0.3,3.3</version>
      <fixedVersion>Legacy/Tools</fixedVersion>
      <type>Sub-task</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.transport.ServerConnection.java</file>
      <file type="M">pylib.cqlshlib.copyutil.py</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10946" opendate="2015-12-28 00:00:00" fixdate="2015-12-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>jemalloc detection fails due to quoting issues in regex</summary>
      <description>When creating the list of paths where to search for jemalloc, we parse ldconfig output to get more directories. The current pattern used to filter out indented rows from ldconfig does not work because of quoting issues of the involved dollar sign.I found just changing the regex to '^\s' works and seems less error prone.</description>
      <version>None</version>
      <fixedVersion>Legacy/Tools,Local/Config</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">CHANGES.txt</file>
      <file type="M">bin.cassandra</file>
    </fixedFiles>
  </bug>
  <bug id="10955" opendate="2015-12-30 00:00:00" fixdate="2015-1-30 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Multi-partitions queries with ORDER BY can result in a NPE</summary>
      <description>In the case of a table with static columns, if only the static columns have been set for some partitions, a multi-partitions query with an ORDER BY can cause a NPE.The following unit test can be used to reproduce the problem: @Test public void testOrderByForInClauseWithNullValue() throws Throwable { createTable("CREATE TABLE %s (a int, b int, c int, s int static, d int, PRIMARY KEY (a, b, c))"); execute("INSERT INTO %s (a, b, c, d) VALUES (1, 1, 1, 1)"); execute("INSERT INTO %s (a, b, c, d) VALUES (1, 1, 2, 1)"); execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 1, 1)"); execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 2, 1)"); execute("UPDATE %s SET s = 1 WHERE a = 1"); execute("UPDATE %s SET s = 2 WHERE a = 2"); execute("UPDATE %s SET s = 3 WHERE a = 3"); assertRows(execute("SELECT a, b, c, d, s FROM %s WHERE a IN (1, 2, 3) ORDER BY b DESC"), row(2, 2, 2, 1, 2), row(2, 2, 1, 1, 2), row(1, 1, 2, 1, 1), row(1, 1, 1, 1, 1), row(3, null, null, null, 3)); }</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Legacy/CQL</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.SelectOrderByTest.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10975" opendate="2016-1-6 00:00:00" fixdate="2016-1-6 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Histogram buckets exposed in jmx are sorted by count</summary>
      <description>The estimated histogram snapshot lets its parent provide the getValues implementation which sorts the bucket array:https://github.com/dropwizard/metrics/blob/3.1-maintenance/metrics-core/src/main/java/com/codahale/metrics/UniformSnapshot.java#L25making it hard to determine what count belonged to what bucket. Along with removal of the pre 2.2 deprecated metrics this makes it nearly impossible to track latencies over time.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Legacy/Observability</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.metrics.EstimatedHistogramReservoir.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="10980" opendate="2016-1-7 00:00:00" fixdate="2016-1-7 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>nodetool scrub NPEs when keyspace isn&amp;#39;t specified</summary>
      <description>I've attached logs of what I saw. Running nodetool scrub without anything else specified resulted in the NPE. Running with the keyspace specified saw successful termination.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Local/Compaction,Tool/nodetool</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11005" opendate="2016-1-13 00:00:00" fixdate="2016-1-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Split consistent range movement flag</summary>
      <description>CASSANDRA-7069 added a flag which does not allow multiple range movements in the ring. We want to turn this off as we want to move tokens far apart in the ring to speed up the moves. The problem is that this flag also turns off strict source check. We want to split this flag so that we can keep strict source but not stop parallel moves.</description>
      <version>2.1.13,2.2.5,3.3</version>
      <fixedVersion>Local/Config</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.RangeStreamer.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11026" opendate="2016-1-18 00:00:00" fixdate="2016-2-18 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>OOM due to HeapByteBuffer instances</summary>
      <description>Cassandra 3.0.2 fails with OOM. The heapdump shows large number of HeapByteBuffer instances, each retaining 1Mb (see the details on the screenshot). Overall retained size is ~2Gb.We can provide the additional info and the whole heapdump if necessary.</description>
      <version>3.0.3,3.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.MetadataCollector.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11034" opendate="2016-1-19 00:00:00" fixdate="2016-1-19 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>consistent_reads_after_move_test is failing on trunk</summary>
      <description>The novnode dtest consistent_bootstrap_test.TestBootstrapConsistency.consistent_reads_after_move_test is failing on trunk. See an example failure here.On trunk I am getting an OOM of one of my C* nodes &amp;#91;node3&amp;#93;, which is what causes the nodetool move to fail. Logs are attached.</description>
      <version>3.3</version>
      <fixedVersion>Legacy/Testing</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.dht.Splitter.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11046" opendate="2016-1-20 00:00:00" fixdate="2016-1-20 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Existing indexes are always rebuilt on upgrade to 3.0</summary>
      <description>CASSANDRA-10127 made the naming of secondary indexes consistent internally. Previously some places used just the index name, whilst others required the name in the format table.index. One place including the additional table name was the system.IndexInfo table, which records whether or not the index has been built. On upgrade to 3.0, as the node restarts and initialises and index, it checks this table to determine whether an initial build task is necessary. Since 10127, this check expects the row to include just the index name, but the actual row will still be in the old table.index format, causing the index manager to assume the index is not built and submit a build task.</description>
      <version>3.0.3,3.3</version>
      <fixedVersion>Legacy/DistributedMetadata</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.schema.LegacySchemaMigratorTest.java</file>
      <file type="M">src.java.org.apache.cassandra.schema.LegacySchemaMigrator.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11054" opendate="2016-1-21 00:00:00" fixdate="2016-1-21 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Added support for IBM zSystems architecture (s390x)</summary>
      <description>Added support for IBM zSystems architecture (s390x). These code changes are required to make few test cases 'pass' for zSystems.</description>
      <version>3.0.3,3.3,3.4</version>
      <fixedVersion>Legacy/Observability,Legacy/Testing</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.FastByteOperations.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.Memory.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11087" opendate="2016-1-28 00:00:00" fixdate="2016-2-28 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Queries on compact storage tables in mixed version clusters can return incorrect results</summary>
      <description>Whilst writing a dtest for CASSANDRA-11045, it becomes apparent that queries on compact storage tables are broken during the 3.0 upgrade (and this has probably been the case since day 1). tl;dr In a cluster with a mix of &lt; 3.0 and 3.0 nodes, reads on COMPACT STORAGE tables may not include all results. To repro: tables are created and data written before any nodes are upgraded to 3.0+, some nodes are then upgraded putting the cluster into a mixed state.Now, when a query is run where the coordinator is a &lt; 3.0 node, any 3.0+ replica which has not yet run upgradesstables always returns 0 results. Once upgradesstables is run, the replica returns the correct results. Likewise, if the data is inserted after the node is upgraded, the results are correct. If the 3.0 node acts as the coordinator, the results are also correct and so once all nodes are upgraded, the problem goes away.The behaviour can be seen for both single partition and range requests as this dtest demonstrates.</description>
      <version>3.0.3,3.3</version>
      <fixedVersion>Legacy/Coordination</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.ReadCommand.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="11102" opendate="2016-2-1 00:00:00" fixdate="2016-2-1 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Data lost during compaction</summary>
      <description>We have experienced data loses in some tables during few weeks since update to cassandra 3.0. I thing I successfully found test case now. Step one - test table:CREATE TABLE aaa ( r int, c1 int, c2 ascii, PRIMARY KEY (r, c1, c2));Step two - run few queries: insert into aaa (r, c1, c2) values (1,2,'A'); delete from aaa where r=1 and c1=2 and c2='B'; insert into aaa (r, c1, c2) values (2,3,'A'); delete from aaa where r=2 and c1=3 and c2='B'; insert into aaa (r, c1, c2) values (3,4,'A'); delete from aaa where r=3 and c1=4 and c2='B'; insert into aaa (r, c1, c2) values (4,5,'A'); delete from aaa where r=4 and c1=5 and c2='B';It creates 4 rows (select count says 4) and 4 tombstones.Step 3 - Restart CassandraYou will see new files written into C* data folder. I tried sstable-tools to print table structure, it shows 4 rows, data and tombstones are there.Step 4 - set GC grace to 1 to force tombstone removing during compaction.alter table aaa with GC_GRACE_SECONDS = 1;Step 5 - Compact tables./nodetool compactaaa files dissapeares during compaction. select count says 0compaction history says... aaa 2016-02-01T14:24:01.433 329 0 {}</description>
      <version>3.0.3,3.3</version>
      <fixedVersion>Local/Compaction</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.db.compaction.TTLExpiryTest.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.metadata.MetadataCollector.java</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">test.unit.org.apache.cassandra.cql3.validation.operations.DeleteTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="6696" opendate="2014-2-12 00:00:00" fixdate="2014-1-12 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>Partition sstables by token range</summary>
      <description>In JBOD, when someone gets a bad drive, the bad drive is replaced with a new empty one and repair is run. This can cause deleted data to come back in some cases. Also this is true for corrupt stables in which we delete the corrupt stable and run repair. Here is an example:Say we have 3 nodes A,B and C and RF=3 and GC grace=10days. row=sankalp col=sankalp is written 20 days back and successfully went to all three nodes. Then a delete/tombstone was written successfully for the same row column 15 days back. Since this tombstone is more than gc grace, it got compacted in Nodes A and B since it got compacted with the actual data. So there is no trace of this row column in node A and B.Now in node C, say the original data is in drive1 and tombstone is in drive2. Compaction has not yet reclaimed the data and tombstone. Drive2 becomes corrupt and was replaced with new empty drive. Due to the replacement, the tombstone in now gone and row=sankalp col=sankalp has come back to life. Now after replacing the drive we run repair. This data will be propagated to all nodes. Note: This is still a problem even if we run repair every gc grace.</description>
      <version>3.2,3.3</version>
      <fixedVersion>Local/Compaction</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.dht.LengthPartitioner.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.ScrubTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.lifecycle.ViewTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.lifecycle.TrackerTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.compaction.LeveledCompactionStrategyTest.java</file>
      <file type="M">test.unit.org.apache.cassandra.db.compaction.CompactionsCQLTest.java</file>
      <file type="M">test.long.org.apache.cassandra.db.compaction.LongLeveledCompactionStrategyTest.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.SSTableOfflineRelevel.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeTool.java</file>
      <file type="M">src.java.org.apache.cassandra.tools.NodeProbe.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamSession.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.StreamReader.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.compress.CompressedStreamWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.streaming.compress.CompressedStreamReader.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageServiceMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageService.java</file>
      <file type="M">src.java.org.apache.cassandra.io.util.DiskAwareRunnable.java</file>
      <file type="M">src.java.org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.Range.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.RandomPartitioner.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.Murmur3Partitioner.java</file>
      <file type="M">src.java.org.apache.cassandra.dht.IPartitioner.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Memtable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.lifecycle.View.java</file>
      <file type="M">src.java.org.apache.cassandra.db.lifecycle.Tracker.java</file>
      <file type="M">src.java.org.apache.cassandra.db.Directories.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.Scrubber.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.OperationType.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LeveledManifest.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionTask.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionStrategyManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionManager.java</file>
      <file type="M">src.java.org.apache.cassandra.db.ColumnFamilyStore.java</file>
      <file type="M">src.java.org.apache.cassandra.db.BlacklistedDirectoriesMBean.java</file>
      <file type="M">src.java.org.apache.cassandra.db.BlacklistedDirectories.java</file>
      <file type="M">src.java.org.apache.cassandra.config.DatabaseDescriptor.java</file>
      <file type="M">src.java.org.apache.cassandra.config.Config.java</file>
      <file type="M">NEWS.txt</file>
      <file type="M">conf.cassandra.yaml</file>
      <file type="M">CHANGES.txt</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.java</file>
    </fixedFiles>
  </bug>
  <bug id="7925" opendate="2014-9-13 00:00:00" fixdate="2014-1-13 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>TimeUUID LSB should be unique per process, not just per machine</summary>
      <description>as pointed out in CASSANDRA-7919 lsb collisions are also possible serverside.a sufficient solution would be to include references to pid and classloader within lsb.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>None</fixedVersion>
      <type>Improvement</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.utils.UUIDGen.java</file>
      <file type="M">src.java.org.apache.cassandra.utils.SigarLibrary.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StartupChecks.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="9465" opendate="2015-5-22 00:00:00" fixdate="2015-1-22 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>No client warning on tombstone threshold</summary>
      <description>It appears that a client warning is not coming back for the tombstone threshold case. The batch warning works.Repro:Create a data condition with tombstone_warn_threshold &lt; tombstones &lt; tombstone_failure_thresholdQuery the rowExpected:Warning in server log, warning returned to clientI'm basing this expectation on what I see hereObserved:Warning in server log, no warning flag in response message.</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Legacy/Observability</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">test.unit.org.apache.cassandra.service.ClientWarningsTest.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.RequestThreadPoolExecutor.java</file>
      <file type="M">src.java.org.apache.cassandra.transport.Message.java</file>
      <file type="M">src.java.org.apache.cassandra.tracing.Tracing.java</file>
      <file type="M">src.java.org.apache.cassandra.service.StorageProxy.java</file>
      <file type="M">src.java.org.apache.cassandra.service.ClientWarn.java</file>
      <file type="M">src.java.org.apache.cassandra.net.MessagingService.java</file>
      <file type="M">src.java.org.apache.cassandra.db.filter.SliceQueryFilter.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.SelectStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.cql3.statements.BatchStatement.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.TracingAwareExecutorService.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.StageManager.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.SharedExecutorPool.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.SEPExecutor.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.java</file>
      <file type="M">src.java.org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
  <bug id="9949" opendate="2015-7-31 00:00:00" fixdate="2015-1-31 01:00:00" resolution="Fixed">
    <buginformation>
      <summary>maxPurgeableTimestamp needs to check memtables too</summary>
      <description>overlapIterator/maxPurgeableTimestamp don't include the memtables, so a very-out-of-order write could be ignored</description>
      <version>2.2.5,3.0.3,3.3</version>
      <fixedVersion>Legacy/LocalWrite-ReadPaths</fixedVersion>
      <type>Bug</type>
    </buginformation>
    <fixedFiles>
      <file type="M">src.java.org.apache.cassandra.db.Memtable.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.LazilyCompactedRow.java</file>
      <file type="M">src.java.org.apache.cassandra.db.compaction.CompactionController.java</file>
      <file type="M">src.java.org.apache.cassandra.db.AtomicBTreeColumns.java</file>
      <file type="M">CHANGES.txt</file>
    </fixedFiles>
  </bug>
</bugrepository>
